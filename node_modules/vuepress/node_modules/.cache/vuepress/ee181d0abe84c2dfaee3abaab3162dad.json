{"remainingRequest":"/Users/koro/work/web_my/web_accumulate/node_modules/vue-loader/lib/index.js??ref--1-1!/Users/koro/work/web_my/web_accumulate/node_modules/vuepress/lib/webpack/markdownLoader.js??ref--1-2!/Users/koro/work/web_my/web_accumulate/docs/accumulate/Vue/极简双向绑定.md?vue&type=template&id=6ba68b00&","dependencies":[{"path":"/Users/koro/work/web_my/web_accumulate/docs/accumulate/Vue/极简双向绑定.md","mtime":1636107879470},{"path":"/Users/koro/work/web_my/web_accumulate/node_modules/cache-loader/dist/cjs.js","mtime":1557296864520},{"path":"/Users/koro/work/web_my/web_accumulate/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1557296867191},{"path":"/Users/koro/work/web_my/web_accumulate/node_modules/cache-loader/dist/cjs.js","mtime":1557296864520},{"path":"/Users/koro/work/web_my/web_accumulate/node_modules/vue-loader/lib/index.js","mtime":1557296867190},{"path":"/Users/koro/work/web_my/web_accumulate/node_modules/vuepress/lib/webpack/markdownLoader.js","mtime":1557296867284}],"contextDependencies":[],"result":["\n<div class=\"content\"><h2 id=\"仿vue极简双向绑定\"><a class=\"header-anchor\" href=\"#仿vue极简双向绑定\" aria-hidden=\"true\">#</a> 仿Vue极简双向绑定</h2>\n<p>现在的前端面试不管你用的什么框架，总会问你这个框架的双向绑定机制，有的甚至要求你现场实现一个双向绑定出来，那对于没有好好研究过这方面知识的同学来说，当然是很难的，<strong>接下来本文用160行代码带你实现一个极简的双向绑定机制</strong>。如果喜欢的话可以点波赞/关注，支持一下，希望大家看完本文可以有所收获。</p>\n<h2 id=\"效果gif：\"><a class=\"header-anchor\" href=\"#效果gif：\" aria-hidden=\"true\">#</a> 效果GIF：</h2>\n<p><img src=\"https://github.com/OBKoro1/articleImg_src/blob/master/weibo_img_move/005Y4rCogy1fsl70vrkj3g30aw09iq3y.gif?raw=true\" alt=\"\"></p>\n<h2 id=\"demo地址：\"><a class=\"header-anchor\" href=\"#demo地址：\" aria-hidden=\"true\">#</a> demo地址：</h2>\n<p><strong>codepen:</strong><a href=\"https://codepen.io/OBKoro1/pen/qKKqQe?editors=0010\" target=\"_blank\" rel=\"noopener noreferrer\">仿Vue极简双向绑定<OutboundLink/></a></p>\n<p><strong>Github:</strong><a href=\"http://obkoro1.com/simpleDemo/simpleDemo/myVue/index.html\" target=\"_blank\" rel=\"noopener noreferrer\">仿Vue极简双向绑定<OutboundLink/></a></p>\n<hr>\n<h2 id=\"了解object-defineproperty-：\"><a class=\"header-anchor\" href=\"#了解object-defineproperty-：\" aria-hidden=\"true\">#</a> 了解Object.defineProperty()：</h2>\n<p>这个API是实现双向绑定的核心，最主要的作用是重写数据的<code>get</code>、<code>set</code>方法</p>\n<h3 id=\"使用方式：\"><a class=\"header-anchor\" href=\"#使用方式：\" aria-hidden=\"true\">#</a> 使用方式：</h3>\n<!--beforebegin--><div class=\"language-js line-numbers-mode\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token keyword\">let</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    singer<span class=\"token punctuation\">:</span> <span class=\"token string\">\"周杰伦\"</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> default_value <span class=\"token operator\">=</span> <span class=\"token string\">\"青花瓷\"</span><span class=\"token punctuation\">;</span>\nObject<span class=\"token punctuation\">.</span><span class=\"token function\">defineProperty</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">,</span> <span class=\"token string\">\"music\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// value: '七里香', // 设置属性的值 下面设置了get set函数 所以这里不能设置</span>\n    configurable<span class=\"token punctuation\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 是否可以删除属性 默认不能删除</span>\n    <span class=\"token comment\">// writable: true,  // 是否可以修改对象 下面设置了get set函数 所以这里不能设置</span>\n    enumerable<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// music是否可以被枚举 默认是不能被枚举(遍历)</span>\n    <span class=\"token comment\">// ☆ get,set设置时不能设置writable和value，要一对一对设置，交叉设置/同时存在 就会报错</span>\n    <span class=\"token keyword\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 获取obj.music的时候就会调用get方法</span>\n    <span class=\"token comment\">// let default_value = \"强行设置get的返回值\"; // 打开注释 读取属性永远都是‘强行设置get的返回值’</span>\n    <span class=\"token keyword\">return</span> default_value<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token keyword\">set</span><span class=\"token punctuation\">(</span>val<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 将修改的值重新赋给song</span>\n    default_value <span class=\"token operator\">=</span> val<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">.</span>music<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 青花瓷</span>\n<span class=\"token keyword\">delete</span> obj<span class=\"token punctuation\">.</span>music<span class=\"token punctuation\">;</span> <span class=\"token comment\">// configurable设为false 删除无效</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">.</span>music<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 青花瓷</span>\nobj<span class=\"token punctuation\">.</span>music <span class=\"token operator\">=</span> <span class=\"token string\">\"听妈妈的话\"</span><span class=\"token punctuation\">;</span> \nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">.</span>music<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 听妈妈的话</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> key <span class=\"token keyword\">in</span> obj<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 默认情况下通过defineProperty定义的属性是不能被枚举(遍历)的</span>\n    <span class=\"token comment\">// 需要设置enumerable为true才可以 否则只能拿到singer 属性</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// singer, music</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br><span class=\"line-number\">11</span><br><span class=\"line-number\">12</span><br><span class=\"line-number\">13</span><br><span class=\"line-number\">14</span><br><span class=\"line-number\">15</span><br><span class=\"line-number\">16</span><br><span class=\"line-number\">17</span><br><span class=\"line-number\">18</span><br><span class=\"line-number\">19</span><br><span class=\"line-number\">20</span><br><span class=\"line-number\">21</span><br><span class=\"line-number\">22</span><br><span class=\"line-number\">23</span><br><span class=\"line-number\">24</span><br><span class=\"line-number\">25</span><br><span class=\"line-number\">26</span><br><span class=\"line-number\">27</span><br><span class=\"line-number\">28</span><br><span class=\"line-number\">29</span><br><span class=\"line-number\">30</span><br></div><!--beforeend--></div><!--afterend--><h3 id=\"示例demo：\"><a class=\"header-anchor\" href=\"#示例demo：\" aria-hidden=\"true\">#</a> 示例demo：</h3>\n<p>对，这里有个<a href=\"https://codepen.io/OBKoro1/pen/XYYMMp?editors=0010\" target=\"_blank\" rel=\"noopener noreferrer\">demo<OutboundLink/></a>。</p>\n<h3 id=\"画一下重点：\"><a class=\"header-anchor\" href=\"#画一下重点：\" aria-hidden=\"true\">#</a> 画一下重点：</h3>\n<ul>\n<li>get,set设置时不能设置writable和value, 他们是一对情侣的存在，<strong>交叉设置或同时存在,会报错</strong></li>\n<li>通过<code>defineProperty</code>设置的属性，<strong>默认不能删除，不能遍历</strong>，当然你可以通过设置更改他们。</li>\n<li><strong>get、set 是函数，可以做的事情很多</strong>。</li>\n</ul>\n<p><strong>兼容性</strong>：IE 9,Firefox 4, Chorme 5,Opera 11.6,Safari 5.1</p>\n<p>更详细的可以看一下<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty\" target=\"_blank\" rel=\"noopener noreferrer\">MDN<OutboundLink/></a></p>\n<hr>\n<h2 id=\"实现思路：\"><a class=\"header-anchor\" href=\"#实现思路：\" aria-hidden=\"true\">#</a> 实现思路：</h2>\n<h3 id=\"mvvm系列的双向绑定，关键步骤：\"><a class=\"header-anchor\" href=\"#mvvm系列的双向绑定，关键步骤：\" aria-hidden=\"true\">#</a> mvvm系列的双向绑定，关键步骤：</h3>\n<ol>\n<li>实现数据监听器Observer，用<code>Object.defineProperty()</code><strong>重写数据的get、set，值更新就在set中通知订阅者更新数据</strong>。</li>\n<li>实现模板编译Compile，深度遍历dom树，对每个元素节点的指令模板进行<strong>替换数据以及订阅数据</strong>。</li>\n<li>实现Watch用于连接Observer和Compile，<strong>能够订阅并收到每个属性变动的通知，执行指令绑定的相应回调函数，从而更新视图</strong>。</li>\n<li>mvvm入口函数，整合以上三者。</li>\n</ol>\n<h3 id=\"流程图：\"><a class=\"header-anchor\" href=\"#流程图：\" aria-hidden=\"true\">#</a> 流程图：</h3>\n<p><img src=\"https://github.com/OBKoro1/articleImg_src/blob/master/weibo_img_move/005Y4rCogy1fsl7dygfovj30ka0augpd.jpg?raw=true\" alt=\"\"></p>\n<p>这部分讲的很清楚，现在有点懵逼也没关系，看完代码，自己copy下来玩一玩之后，回头再看实现思路，相信会有收获的。</p>\n<hr>\n<h2 id=\"具体代码实现：\"><a class=\"header-anchor\" href=\"#具体代码实现：\" aria-hidden=\"true\">#</a> 具体代码实现：</h2>\n<h3 id=\"html结构：\"><a class=\"header-anchor\" href=\"#html结构：\" aria-hidden=\"true\">#</a> html结构：</h3>\n<!--beforebegin--><div class=\"language-html line-numbers-mode\"><!--afterbegin--><pre v-pre class=\"language-html\"><code><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>app<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>text<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">v-model</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>name<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h3</span> <span class=\"token attr-name\">v-bind</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>name<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h3</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>text<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">v-model</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>testData1<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h3</span><span class=\"token punctuation\">></span></span>{{ testData1 }}<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h3</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>text<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">v-model</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>testData2<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h3</span><span class=\"token punctuation\">></span></span>{{ testData2 }}<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h3</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n</code></pre>\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br></div><!--beforeend--></div><!--afterend--><p>看到这个模板，相信用过Vue的同学都不会陌生。</p>\n<h3 id=\"调用方法：\"><a class=\"header-anchor\" href=\"#调用方法：\" aria-hidden=\"true\">#</a> 调用方法：</h3>\n<p>采用类Vue方式来使用双向绑定：</p>\n<!--beforebegin--><div class=\"language-js line-numbers-mode\"><!--afterbegin--><pre v-pre class=\"language-js\"><code>window<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onload</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> app <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">myVue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n        el<span class=\"token punctuation\">:</span> <span class=\"token string\">'#app'</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// dom</span>\n        data<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// 数据</span>\n            testData1<span class=\"token punctuation\">:</span> <span class=\"token string\">'仿Vue'</span><span class=\"token punctuation\">,</span>\n            testData2<span class=\"token punctuation\">:</span> <span class=\"token string\">'极简双向绑定'</span><span class=\"token punctuation\">,</span>\n            name<span class=\"token punctuation\">:</span> <span class=\"token string\">'OBKoro1'</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br></div><!--beforeend--></div><!--afterend--><h3 id=\"创建myvue函数：\"><a class=\"header-anchor\" href=\"#创建myvue函数：\" aria-hidden=\"true\">#</a> 创建myVue函数：</h3>\n<p>实际上这里是我们实现思路中的第四步，用于整合数据监听器<code>this._observer()</code>、指令解析器<code>this._compile()</code>以及连接Observer和Compile的_watcherTpl的watch池。</p>\n<!--beforebegin--><div class=\"language-js line-numbers-mode\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">myVue</span><span class=\"token punctuation\">(</span>options <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  <span class=\"token comment\">// 防止没传，设一个默认值</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$options <span class=\"token operator\">=</span> options<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 配置挂载</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$el <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span>options<span class=\"token punctuation\">.</span>el<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 获取dom</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_data <span class=\"token operator\">=</span> options<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 数据挂载</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_watcherTpl <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// watcher池</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">_observer</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 传入数据，执行函数，重写数据的get set</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">_compile</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$el<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 传入dom，执行函数，编译模板 发布订阅</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br></div><!--beforeend--></div><!--afterend--><hr>\n<h3 id=\"watcher函数\"><a class=\"header-anchor\" href=\"#watcher函数\" aria-hidden=\"true\">#</a> Watcher函数:</h3>\n<p>这是实现思路中的第三步，因为下方数据监听器<code>_observer()</code>需要用到Watcher函数，所以这里就先讲了。</p>\n<p>像实现思路中所说的，这里起到了连接Observer和Compile的作用：</p>\n<ol>\n<li><strong>在模板编译_compile()阶段发布订阅</strong></li>\n<li><strong>在赋值操作的时候，更新视图</strong></li>\n</ol>\n<!--beforebegin--><div class=\"language-js line-numbers-mode\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token comment\">// new Watcher() 为this._compile()发布订阅+ 在this._observer()中set(赋值)的时候更新视图</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">Watcher</span><span class=\"token punctuation\">(</span>el<span class=\"token punctuation\">,</span> vm<span class=\"token punctuation\">,</span> val<span class=\"token punctuation\">,</span> attr<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>el <span class=\"token operator\">=</span> el<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 指令对应的DOM元素</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>vm <span class=\"token operator\">=</span> vm<span class=\"token punctuation\">;</span> <span class=\"token comment\">// myVue实例</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>val <span class=\"token operator\">=</span> val<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 指令对应的值 </span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>attr <span class=\"token operator\">=</span> attr<span class=\"token punctuation\">;</span> <span class=\"token comment\">// dom获取值，如value获取input的值 / innerHTML获取dom的值</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">update</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 更新视图</span>\n<span class=\"token punctuation\">}</span>\nWatcher<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">update</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> \n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>el<span class=\"token punctuation\">[</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>attr<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>vm<span class=\"token punctuation\">.</span>_data<span class=\"token punctuation\">[</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 获取data的最新值 赋值给dom 更新视图</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br><span class=\"line-number\">11</span><br></div><!--beforeend--></div><!--afterend--><p>没有看错，代码量就这么多，可能需要把整个代码连接起来，多看几遍才能够理解。</p>\n<h3 id=\"实现数据监听器-observer-：\"><a class=\"header-anchor\" href=\"#实现数据监听器-observer-：\" aria-hidden=\"true\">#</a> 实现数据监听器_observer()：</h3>\n<p>实现思路中的第一步，用<code>Object.defineProperty()</code>遍历data重写所有属性的get set。</p>\n<p>然后在给对象的某个属性赋值的时候，就会触发set。</p>\n<p><strong>在set中我们可以监听到数据的变化，然后就可以触发watch更新视图</strong>。</p>\n<!--beforebegin--><div class=\"language-js line-numbers-mode\"><!--afterbegin--><pre v-pre class=\"language-js\"><code>myVue<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">_observer</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> _this <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n    Object<span class=\"token punctuation\">.</span><span class=\"token function\">keys</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span>key <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// 遍历数据</span>\n        _this<span class=\"token punctuation\">.</span>_watcherTpl<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// 每个数据的订阅池()</span>\n            _directives<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">var</span> value <span class=\"token operator\">=</span> obj<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 获取属性值</span>\n        <span class=\"token keyword\">var</span> watcherTpl <span class=\"token operator\">=</span> _this<span class=\"token punctuation\">.</span>_watcherTpl<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 数据的订阅池</span>\n        Object<span class=\"token punctuation\">.</span><span class=\"token function\">defineProperty</span><span class=\"token punctuation\">(</span>_this<span class=\"token punctuation\">.</span>_data<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// 双向绑定最重要的部分 重写数据的set get</span>\n            configurable<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>  <span class=\"token comment\">// 可以删除</span>\n            enumerable<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 可以遍历</span>\n            <span class=\"token keyword\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>key<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">获取值：</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>value<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">return</span> value<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 获取值的时候 直接返回</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n            <span class=\"token keyword\">set</span><span class=\"token punctuation\">(</span>newVal<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// 改变值的时候 触发set</span>\n                console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>key<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">更新：</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>newVal<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>value <span class=\"token operator\">!==</span> newVal<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    value <span class=\"token operator\">=</span> newVal<span class=\"token punctuation\">;</span>\n                    watcherTpl<span class=\"token punctuation\">.</span>_directives<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// 遍历订阅池 </span>\n                        item<span class=\"token punctuation\">.</span><span class=\"token function\">update</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                        <span class=\"token comment\">// 遍历所有订阅的地方(v-model+v-bind+{{}}) 触发this._compile()中发布的订阅Watcher 更新视图  </span>\n                    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br><span class=\"line-number\">11</span><br><span class=\"line-number\">12</span><br><span class=\"line-number\">13</span><br><span class=\"line-number\">14</span><br><span class=\"line-number\">15</span><br><span class=\"line-number\">16</span><br><span class=\"line-number\">17</span><br><span class=\"line-number\">18</span><br><span class=\"line-number\">19</span><br><span class=\"line-number\">20</span><br><span class=\"line-number\">21</span><br><span class=\"line-number\">22</span><br><span class=\"line-number\">23</span><br><span class=\"line-number\">24</span><br><span class=\"line-number\">25</span><br><span class=\"line-number\">26</span><br><span class=\"line-number\">27</span><br><span class=\"line-number\">28</span><br></div><!--beforeend--></div><!--afterend--><h3 id=\"实现compile-模板编译\"><a class=\"header-anchor\" href=\"#实现compile-模板编译\" aria-hidden=\"true\">#</a> 实现Compile 模板编译</h3>\n<p>这里是实现思路中的第三步，让我们来总结一下这里做了哪些事情：</p>\n<ul>\n<li>首先是深度遍历dom树，遍历每个节点以及子节点。</li>\n<li>将模板中的变量替换成数据，初始化渲染页面视图。</li>\n<li>把指令绑定的属性添加到对应的订阅池中</li>\n<li>一旦数据有变动，收到通知，更新视图。</li>\n</ul>\n<!--beforebegin--><div class=\"language-js line-numbers-mode\"><!--afterbegin--><pre v-pre class=\"language-js\"><code>myVue<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">_compile</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span>el<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> _this <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> nodes <span class=\"token operator\">=</span> el<span class=\"token punctuation\">.</span>children<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 获取app的dom</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> len <span class=\"token operator\">=</span> nodes<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> len<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// 遍历dom节点</span>\n        <span class=\"token keyword\">var</span> node <span class=\"token operator\">=</span> nodes<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>children<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            _this<span class=\"token punctuation\">.</span><span class=\"token function\">_compile</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 递归深度遍历 dom树</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token comment\">// 如果有v-model属性，并且元素是INPUT或者TEXTAREA，我们监听它的input事件    </span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span><span class=\"token function\">hasAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">'v-model'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>tagName <span class=\"token operator\">=</span> <span class=\"token string\">'INPUT'</span> <span class=\"token operator\">||</span> node<span class=\"token punctuation\">.</span>tagName <span class=\"token operator\">==</span> <span class=\"token string\">'TEXTAREA'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            node<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'input'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">var</span> attVal <span class=\"token operator\">=</span> node<span class=\"token punctuation\">.</span><span class=\"token function\">getAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">'v-model'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 获取v-model绑定的值</span>\n                _this<span class=\"token punctuation\">.</span>_watcherTpl<span class=\"token punctuation\">[</span>attVal<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>_directives<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Watcher</span><span class=\"token punctuation\">(</span> <span class=\"token comment\">// 将dom替换成属性的数据并发布订阅 在set的时候更新数据</span>\n                    node<span class=\"token punctuation\">,</span>\n                    _this<span class=\"token punctuation\">,</span>\n                    attVal<span class=\"token punctuation\">,</span>\n                    <span class=\"token string\">'value'</span>\n                <span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    _this<span class=\"token punctuation\">.</span>_data<span class=\"token punctuation\">[</span>attVal<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> nodes<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// input值改变的时候 将新值赋给数据 触发set=>set触发watch 更新视图</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span><span class=\"token function\">hasAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">'v-bind'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// v-bind指令 </span>\n            <span class=\"token keyword\">var</span> attrVal <span class=\"token operator\">=</span> node<span class=\"token punctuation\">.</span><span class=\"token function\">getAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">'v-bind'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 绑定的data</span>\n            _this<span class=\"token punctuation\">.</span>_watcherTpl<span class=\"token punctuation\">[</span>attrVal<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>_directives<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Watcher</span><span class=\"token punctuation\">(</span> <span class=\"token comment\">// 将dom替换成属性的数据并发布订阅 在set的时候更新数据</span>\n                node<span class=\"token punctuation\">,</span>\n                _this<span class=\"token punctuation\">,</span>\n                attrVal<span class=\"token punctuation\">,</span>\n                <span class=\"token string\">'innerHTML'</span>\n            <span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n            \n        <span class=\"token keyword\">var</span> reg <span class=\"token operator\">=</span> <span class=\"token regex\">/\\{\\{\\s*([^}]+\\S)\\s*\\}\\}/g</span><span class=\"token punctuation\">,</span> txt <span class=\"token operator\">=</span> node<span class=\"token punctuation\">.</span>textContent<span class=\"token punctuation\">;</span>   <span class=\"token comment\">// 正则匹配{{}} </span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>reg<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span>txt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            node<span class=\"token punctuation\">.</span>textContent <span class=\"token operator\">=</span> txt<span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span>reg<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>matched<span class=\"token punctuation\">,</span> placeholder<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token comment\">// matched匹配的文本节点包括双花括号, placeholder 是双花括号中间的属性名</span>\n                <span class=\"token keyword\">var</span> getName <span class=\"token operator\">=</span> _this<span class=\"token punctuation\">.</span>_watcherTpl<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 所有绑定watch的数据</span>\n                getName <span class=\"token operator\">=</span> getName<span class=\"token punctuation\">[</span>placeholder<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 获取对应watch 数据的值</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>getName<span class=\"token punctuation\">.</span>_directives<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// 没有事件池 创建事件池</span>\n                    getName<span class=\"token punctuation\">.</span>_directives <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n                getName<span class=\"token punctuation\">.</span>_directives<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Watcher</span><span class=\"token punctuation\">(</span> <span class=\"token comment\">// 将dom替换成属性的数据并发布订阅 在set的时候更新数据</span>\n                    node<span class=\"token punctuation\">,</span>\n                    _this<span class=\"token punctuation\">,</span>\n                    placeholder<span class=\"token punctuation\">,</span>\n                    <span class=\"token string\">'innerHTML'</span>\n                <span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">return</span> placeholder<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>val<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token keyword\">return</span> _this<span class=\"token punctuation\">.</span>_data<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 获取数据的值 触发get 返回当前值 </span>\n                <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> _this<span class=\"token punctuation\">.</span>$el<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br><span class=\"line-number\">11</span><br><span class=\"line-number\">12</span><br><span class=\"line-number\">13</span><br><span class=\"line-number\">14</span><br><span class=\"line-number\">15</span><br><span class=\"line-number\">16</span><br><span class=\"line-number\">17</span><br><span class=\"line-number\">18</span><br><span class=\"line-number\">19</span><br><span class=\"line-number\">20</span><br><span class=\"line-number\">21</span><br><span class=\"line-number\">22</span><br><span class=\"line-number\">23</span><br><span class=\"line-number\">24</span><br><span class=\"line-number\">25</span><br><span class=\"line-number\">26</span><br><span class=\"line-number\">27</span><br><span class=\"line-number\">28</span><br><span class=\"line-number\">29</span><br><span class=\"line-number\">30</span><br><span class=\"line-number\">31</span><br><span class=\"line-number\">32</span><br><span class=\"line-number\">33</span><br><span class=\"line-number\">34</span><br><span class=\"line-number\">35</span><br><span class=\"line-number\">36</span><br><span class=\"line-number\">37</span><br><span class=\"line-number\">38</span><br><span class=\"line-number\">39</span><br><span class=\"line-number\">40</span><br><span class=\"line-number\">41</span><br><span class=\"line-number\">42</span><br><span class=\"line-number\">43</span><br><span class=\"line-number\">44</span><br><span class=\"line-number\">45</span><br><span class=\"line-number\">46</span><br><span class=\"line-number\">47</span><br><span class=\"line-number\">48</span><br><span class=\"line-number\">49</span><br><span class=\"line-number\">50</span><br><span class=\"line-number\">51</span><br><span class=\"line-number\">52</span><br><span class=\"line-number\">53</span><br><span class=\"line-number\">54</span><br></div><!--beforeend--></div><!--afterend--><hr>\n<h2 id=\"完整代码-demo地址\"><a class=\"header-anchor\" href=\"#完整代码-demo地址\" aria-hidden=\"true\">#</a> 完整代码&amp;demo地址</h2>\n<p><a href=\"https://github.com/OBKoro1/web_accumulate/blob/d6b599ca22d8656d3f31f80bffa976fac36d2d75/example/myVue/index.html\" target=\"_blank\" rel=\"noopener noreferrer\">GitHub完整代码<OutboundLink/></a></p>\n<p><strong>codepen:</strong><a href=\"https://codepen.io/OBKoro1/pen/qKKqQe?editors=0010\" target=\"_blank\" rel=\"noopener noreferrer\">仿Vue极简双向绑定<OutboundLink/></a></p>\n<p><strong>Github:</strong><a href=\"http://obkoro1.com/web_accumulate/example/myVue/index.html\" target=\"_blank\" rel=\"noopener noreferrer\">仿Vue极简双向绑定<OutboundLink/></a></p>\n<p>如果觉得还不错的话，就给个<a href=\"https://github.com/OBKoro1/simpleDemo\" target=\"_blank\" rel=\"noopener noreferrer\">Star<OutboundLink/></a>⭐️鼓励一下我吧~</p>\n<hr>\n<h2 id=\"小结\"><a class=\"header-anchor\" href=\"#小结\" aria-hidden=\"true\">#</a> 小结</h2>\n<p>本文只是一个简单的实现双向绑定的方法，主要目的是帮助各位同学理解mvvm框架的双向绑定机制，也并没有很完善，这里还是有很多缺陷，比如：没有实现数据的深度对数据进行<code>get</code>、<code>set</code>等。希望看完本文，大家能有所收获。</p>\n<p>以上2018.6.24</p>\n<h3 id=\"参考资料：\"><a class=\"header-anchor\" href=\"#参考资料：\" aria-hidden=\"true\">#</a> 参考资料：</h3>\n<p><a href=\"https://segmentfault.com/a/1190000006599500\" target=\"_blank\" rel=\"noopener noreferrer\">剖析Vue原理&amp;实现双向绑定MVVM<OutboundLink/></a></p>\n<p><a href=\"https://juejin.im/post/5acc17cb51882555745a03f8\" target=\"_blank\" rel=\"noopener noreferrer\">面试题：你能写一个Vue的双向数据绑定吗？<OutboundLink/></a></p>\n<p><a href=\"https://juejin.im/post/5abdd6f6f265da23793c4458#heading-8\" target=\"_blank\" rel=\"noopener noreferrer\">不好意思！耽误你的十分钟，让MVVM原理还给你<OutboundLink/></a>\n<!-- 特殊字符串：用于修改/删除markdown的结尾提示语-OBKoro1 --></p>\n<h3 id=\"点个star支持我一下\"><a class=\"header-anchor\" href=\"#点个star支持我一下\" aria-hidden=\"true\">#</a> 点个<a href=\"https://github.com/OBKoro1/web_accumulate\" target=\"_blank\" rel=\"noopener noreferrer\">Star<OutboundLink/></a>支持我一下~</h3>\n<!-- '特殊字符串：用于删除编译后的issue组件-OBKoro1 -->\n<!-- more -->\n<comment-comment/>\n</div>\n",null]}