{"remainingRequest":"/Users/koro/work/web_my/web_accumulate/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/koro/work/web_my/web_accumulate/node_modules/cache-loader/dist/cjs.js??ref--1-0!/Users/koro/work/web_my/web_accumulate/node_modules/vue-loader/lib/index.js??ref--1-1!/Users/koro/work/web_my/web_accumulate/node_modules/vuepress/lib/webpack/markdownLoader.js??ref--1-2!/Users/koro/work/web_my/web_accumulate/docs/algorithm/simple/回文.md?vue&type=template&id=2bd3e892&","dependencies":[{"path":"/Users/koro/work/web_my/web_accumulate/docs/algorithm/simple/回文.md","mtime":1636107879479},{"path":"/Users/koro/work/web_my/web_accumulate/node_modules/cache-loader/dist/cjs.js","mtime":1557296864520},{"path":"/Users/koro/work/web_my/web_accumulate/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1557296867191},{"path":"/Users/koro/work/web_my/web_accumulate/node_modules/cache-loader/dist/cjs.js","mtime":1557296864520},{"path":"/Users/koro/work/web_my/web_accumulate/node_modules/vue-loader/lib/index.js","mtime":1557296867190},{"path":"/Users/koro/work/web_my/web_accumulate/node_modules/vuepress/lib/webpack/markdownLoader.js","mtime":1557296867284}],"contextDependencies":[],"result":["var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"content\"},[_vm._ssrNode(\"<h2 id=\\\"删除一个字母的回文\\\"><a href=\\\"#删除一个字母的回文\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 删除一个字母的回文</h2> <h3 id=\\\"描述\\\"><a href=\\\"#描述\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 描述</h3> <p>给定非空字符串 s，您最多可以删除一个字符。判断是否可以成为回文。</p> <p>该字符串仅包含小写字符 a-z,字符串的最大长度为 50000。</p> <h3 id=\\\"样例：\\\"><a href=\\\"#样例：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 样例：</h3> <p>Given s = &quot;aba&quot; return true</p> <p>Given s = &quot;abca&quot; return true // delete c</p> <h3 id=\\\"题目分析：\\\"><a href=\\\"#题目分析：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 题目分析：</h3> <ul><li>如果单单是回文的话，就很简单了:</li></ul> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code>s <span class=\\\"token operator\\\">===</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token operator\\\">...</span>s<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">reverse</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">join</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">''</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 翻转字符串与原字符相比</span>\\n<span class=\\\"token comment\\\">// 实际上这里做了很多步操作，字符转数组 翻转数组 再转字符串，所以这里性能也不是很好</span>\\n<span class=\\\"token comment\\\">// 如果对性能要求比较高的话，还是通过循环从两侧向中间逐一比较，会更好一点</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br></div></div><ul><li>题目中还有一个要求：删除一个字符，也就是允许一个字符的不同。</li> <li>下面我们的解法主体思路就是<strong>通过循环，从两侧向中间比较</strong>，然后解决当出现不同的情况，如何<strong>保证只允许出现一个不同</strong>。</li></ul> <h3 id=\\\"code\\\"><a href=\\\"#code\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> code:</h3> <ol><li>出现一处不同 将值传入一个新函数，再进行判断字符串：</li></ol> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">validPalindrome</span> <span class=\\\"token operator\\\">=</span> s <span class=\\\"token operator\\\">=&gt;</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">let</span> left <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">let</span> right <span class=\\\"token operator\\\">=</span> s<span class=\\\"token punctuation\\\">.</span>length <span class=\\\"token operator\\\">-</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">while</span> <span class=\\\"token punctuation\\\">(</span>left <span class=\\\"token operator\\\">&lt;</span> right<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>s<span class=\\\"token punctuation\\\">[</span>left<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">!==</span> s<span class=\\\"token punctuation\\\">[</span>right<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token comment\\\">// 左右两边字符都要尝试一下 一边返回true即可</span>\\n      <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">(</span>\\n        <span class=\\\"token function\\\">isSubPalindrom</span><span class=\\\"token punctuation\\\">(</span>s<span class=\\\"token punctuation\\\">,</span> left <span class=\\\"token operator\\\">+</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span> right<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">||</span> <span class=\\\"token function\\\">isSubPalindrom</span><span class=\\\"token punctuation\\\">(</span>s<span class=\\\"token punctuation\\\">,</span> left<span class=\\\"token punctuation\\\">,</span> right <span class=\\\"token operator\\\">-</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">)</span>\\n      <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n    left<span class=\\\"token operator\\\">++</span><span class=\\\"token punctuation\\\">;</span>\\n    right<span class=\\\"token operator\\\">--</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token boolean\\\">true</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 循环结束返回true</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">isSubPalindrom</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span>s<span class=\\\"token punctuation\\\">,</span> left<span class=\\\"token punctuation\\\">,</span> right<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=&gt;</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">while</span> <span class=\\\"token punctuation\\\">(</span>left <span class=\\\"token operator\\\">&lt;</span> right<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>s<span class=\\\"token punctuation\\\">[</span>left<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">!==</span> s<span class=\\\"token punctuation\\\">[</span>right<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token keyword\\\">return</span> <span class=\\\"token boolean\\\">false</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 再有不同之处 返回false</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n    left<span class=\\\"token operator\\\">++</span><span class=\\\"token punctuation\\\">;</span>\\n    right<span class=\\\"token operator\\\">--</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token boolean\\\">true</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 循环结束一直相等返回true</span>\\n  <span class=\\\"token comment\\\">// 并且left不小于right 直接返回right，说明不同之处只有一个</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>\\n  <span class=\\\"token string\\\">'回文验证:'</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token function\\\">validPalindrome</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'abaacaaa'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token function\\\">validPalindrome</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'ab'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token function\\\">validPalindrome</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'abc'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token function\\\">validPalindrome</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'aabsjdbaa'</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br><span class=\\\"line-number\\\">5</span><br><span class=\\\"line-number\\\">6</span><br><span class=\\\"line-number\\\">7</span><br><span class=\\\"line-number\\\">8</span><br><span class=\\\"line-number\\\">9</span><br><span class=\\\"line-number\\\">10</span><br><span class=\\\"line-number\\\">11</span><br><span class=\\\"line-number\\\">12</span><br><span class=\\\"line-number\\\">13</span><br><span class=\\\"line-number\\\">14</span><br><span class=\\\"line-number\\\">15</span><br><span class=\\\"line-number\\\">16</span><br><span class=\\\"line-number\\\">17</span><br><span class=\\\"line-number\\\">18</span><br><span class=\\\"line-number\\\">19</span><br><span class=\\\"line-number\\\">20</span><br><span class=\\\"line-number\\\">21</span><br><span class=\\\"line-number\\\">22</span><br><span class=\\\"line-number\\\">23</span><br><span class=\\\"line-number\\\">24</span><br><span class=\\\"line-number\\\">25</span><br><span class=\\\"line-number\\\">26</span><br><span class=\\\"line-number\\\">27</span><br><span class=\\\"line-number\\\">28</span><br><span class=\\\"line-number\\\">29</span><br><span class=\\\"line-number\\\">30</span><br><span class=\\\"line-number\\\">31</span><br><span class=\\\"line-number\\\">32</span><br><span class=\\\"line-number\\\">33</span><br></div></div><p>这个写好之后，我在想能不能通过递归的形式来解决，<strong>为什么要创建第二个函数</strong>？</p> <ol start=\\\"2\\\"><li>递归解法：</li></ol> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">const</span> validPalindrome <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span>s<span class=\\\"token punctuation\\\">,</span> left <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span> right <span class=\\\"token operator\\\">=</span> s<span class=\\\"token punctuation\\\">.</span>length <span class=\\\"token operator\\\">-</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span> type <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">'first'</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=&gt;</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>type <span class=\\\"token operator\\\">===</span> <span class=\\\"token string\\\">'first'</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token comment\\\">// 第一次进入允许出现一次不同</span>\\n    <span class=\\\"token keyword\\\">while</span> <span class=\\\"token punctuation\\\">(</span>left <span class=\\\"token operator\\\">&lt;</span> right<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>s<span class=\\\"token punctuation\\\">[</span>left<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">!==</span> s<span class=\\\"token punctuation\\\">[</span>right<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">(</span>\\n          <span class=\\\"token function\\\">validPalindrome</span><span class=\\\"token punctuation\\\">(</span>s<span class=\\\"token punctuation\\\">,</span> left <span class=\\\"token operator\\\">+</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span> right<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'second'</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">||</span>\\n          <span class=\\\"token function\\\">validPalindrome</span><span class=\\\"token punctuation\\\">(</span>s<span class=\\\"token punctuation\\\">,</span> left<span class=\\\"token punctuation\\\">,</span> right <span class=\\\"token operator\\\">-</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'second'</span><span class=\\\"token punctuation\\\">)</span>\\n        <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 左右两边都尝试一下 一边返回true即可</span>\\n      <span class=\\\"token punctuation\\\">}</span>\\n      left<span class=\\\"token operator\\\">++</span><span class=\\\"token punctuation\\\">;</span>\\n      right<span class=\\\"token operator\\\">--</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token keyword\\\">return</span> <span class=\\\"token boolean\\\">true</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 循环结束返回true</span>\\n  <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">else</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token comment\\\">// 第二次 再有不同之处 返回false</span>\\n    <span class=\\\"token keyword\\\">while</span> <span class=\\\"token punctuation\\\">(</span>left <span class=\\\"token operator\\\">&lt;</span> right<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>s<span class=\\\"token punctuation\\\">[</span>left<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">!==</span> s<span class=\\\"token punctuation\\\">[</span>right<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token keyword\\\">return</span> <span class=\\\"token boolean\\\">false</span><span class=\\\"token punctuation\\\">;</span>\\n      <span class=\\\"token punctuation\\\">}</span>\\n      left<span class=\\\"token operator\\\">++</span><span class=\\\"token punctuation\\\">;</span>\\n      right<span class=\\\"token operator\\\">--</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token keyword\\\">return</span> <span class=\\\"token boolean\\\">true</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 循环结束一直相等返回true</span>\\n    <span class=\\\"token comment\\\">// 并且left不小于right 直接返回right，说明不同之处只有一个</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>\\n  <span class=\\\"token string\\\">'回文验证:'</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token function\\\">validPalindrome</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'abaacaaa'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token function\\\">validPalindrome</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'ab'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token function\\\">validPalindrome</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'abc'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token function\\\">validPalindrome</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'aabsjdbaa'</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br><span class=\\\"line-number\\\">5</span><br><span class=\\\"line-number\\\">6</span><br><span class=\\\"line-number\\\">7</span><br><span class=\\\"line-number\\\">8</span><br><span class=\\\"line-number\\\">9</span><br><span class=\\\"line-number\\\">10</span><br><span class=\\\"line-number\\\">11</span><br><span class=\\\"line-number\\\">12</span><br><span class=\\\"line-number\\\">13</span><br><span class=\\\"line-number\\\">14</span><br><span class=\\\"line-number\\\">15</span><br><span class=\\\"line-number\\\">16</span><br><span class=\\\"line-number\\\">17</span><br><span class=\\\"line-number\\\">18</span><br><span class=\\\"line-number\\\">19</span><br><span class=\\\"line-number\\\">20</span><br><span class=\\\"line-number\\\">21</span><br><span class=\\\"line-number\\\">22</span><br><span class=\\\"line-number\\\">23</span><br><span class=\\\"line-number\\\">24</span><br><span class=\\\"line-number\\\">25</span><br><span class=\\\"line-number\\\">26</span><br><span class=\\\"line-number\\\">27</span><br><span class=\\\"line-number\\\">28</span><br><span class=\\\"line-number\\\">29</span><br><span class=\\\"line-number\\\">30</span><br><span class=\\\"line-number\\\">31</span><br><span class=\\\"line-number\\\">32</span><br><span class=\\\"line-number\\\">33</span><br><span class=\\\"line-number\\\">34</span><br></div></div><p>相对于上个解法这里就是多设置了一个变量，然后将两方区分开来，但是这样递归我还是觉得太傻了，所以在想你<strong>能不能通过设置变量来处理</strong>？出现两次不同即失败。</p> <ol start=\\\"3\\\"><li>设置一个变量允许一次不同</li></ol> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">validPalindrome</span> <span class=\\\"token operator\\\">=</span> s <span class=\\\"token operator\\\">=&gt;</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">let</span> removed <span class=\\\"token operator\\\">=</span> <span class=\\\"token boolean\\\">false</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">for</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">let</span> <span class=\\\"token punctuation\\\">[</span>i<span class=\\\"token punctuation\\\">,</span> j<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span> s<span class=\\\"token punctuation\\\">.</span>length <span class=\\\"token operator\\\">-</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span> i <span class=\\\"token operator\\\">&lt;</span> j<span class=\\\"token punctuation\\\">;</span> i<span class=\\\"token operator\\\">++</span><span class=\\\"token punctuation\\\">,</span> j<span class=\\\"token operator\\\">--</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token comment\\\">// 从两侧向中间递减 i- j-1 减到最后 i&gt;j i=j 退出循环</span>\\n    <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>s<span class=\\\"token punctuation\\\">[</span>i<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">!==</span> s<span class=\\\"token punctuation\\\">[</span>j<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token comment\\\">// 如果两侧不相同</span>\\n      <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>removed<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token comment\\\">// 只允许一次不同</span>\\n        <span class=\\\"token keyword\\\">return</span> <span class=\\\"token boolean\\\">false</span><span class=\\\"token punctuation\\\">;</span>\\n      <span class=\\\"token punctuation\\\">}</span>\\n      <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>s<span class=\\\"token punctuation\\\">[</span>i<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">===</span> s<span class=\\\"token punctuation\\\">[</span>j <span class=\\\"token operator\\\">-</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token comment\\\">// 转数组删除一个不同元素 下次直接return</span>\\n        <span class=\\\"token comment\\\">// s = [...s].splice(j, 1);</span>\\n        <span class=\\\"token comment\\\">// s = s.join(''); // 处理过的字符串</span>\\n        j<span class=\\\"token operator\\\">--</span><span class=\\\"token punctuation\\\">;</span>\\n        removed <span class=\\\"token operator\\\">=</span> <span class=\\\"token boolean\\\">true</span><span class=\\\"token punctuation\\\">;</span>\\n      <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">else</span> <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>s<span class=\\\"token punctuation\\\">[</span>i <span class=\\\"token operator\\\">+</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">===</span> s<span class=\\\"token punctuation\\\">[</span>j<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token comment\\\">// s = [...s].splice(i, 1);</span>\\n        <span class=\\\"token comment\\\">// s = s.join(''); // 处理过的字符串</span>\\n        i<span class=\\\"token operator\\\">++</span><span class=\\\"token punctuation\\\">;</span>\\n        removed <span class=\\\"token operator\\\">=</span> <span class=\\\"token boolean\\\">true</span><span class=\\\"token punctuation\\\">;</span>\\n      <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">else</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token comment\\\">// 上面两个else 右边-1 或左边+1相不相等 如果两边也不相等即false</span>\\n        <span class=\\\"token keyword\\\">return</span> <span class=\\\"token boolean\\\">false</span><span class=\\\"token punctuation\\\">;</span>\\n      <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token boolean\\\">true</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>\\n  <span class=\\\"token string\\\">'回文验证:'</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token function\\\">validPalindrome</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'abaacaaa'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token function\\\">validPalindrome</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'ab'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token function\\\">validPalindrome</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'abc'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token function\\\">validPalindrome</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'aabsjdbaa'</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br><span class=\\\"line-number\\\">5</span><br><span class=\\\"line-number\\\">6</span><br><span class=\\\"line-number\\\">7</span><br><span class=\\\"line-number\\\">8</span><br><span class=\\\"line-number\\\">9</span><br><span class=\\\"line-number\\\">10</span><br><span class=\\\"line-number\\\">11</span><br><span class=\\\"line-number\\\">12</span><br><span class=\\\"line-number\\\">13</span><br><span class=\\\"line-number\\\">14</span><br><span class=\\\"line-number\\\">15</span><br><span class=\\\"line-number\\\">16</span><br><span class=\\\"line-number\\\">17</span><br><span class=\\\"line-number\\\">18</span><br><span class=\\\"line-number\\\">19</span><br><span class=\\\"line-number\\\">20</span><br><span class=\\\"line-number\\\">21</span><br><span class=\\\"line-number\\\">22</span><br><span class=\\\"line-number\\\">23</span><br><span class=\\\"line-number\\\">24</span><br><span class=\\\"line-number\\\">25</span><br><span class=\\\"line-number\\\">26</span><br><span class=\\\"line-number\\\">27</span><br><span class=\\\"line-number\\\">28</span><br><span class=\\\"line-number\\\">29</span><br><span class=\\\"line-number\\\">30</span><br><span class=\\\"line-number\\\">31</span><br><span class=\\\"line-number\\\">32</span><br><span class=\\\"line-number\\\">33</span><br><span class=\\\"line-number\\\">34</span><br><span class=\\\"line-number\\\">35</span><br><span class=\\\"line-number\\\">36</span><br></div></div><p>2018.8.12\\n</p> \"),_vm._ssrNode(\"<h3 id=\\\"点个star支持我一下\\\">\",\"</h3>\",[_vm._ssrNode(\"<a href=\\\"#点个star支持我一下\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 点个\"),_vm._ssrNode(\"<a href=\\\"https://github.com/OBKoro1/Brush_algorithm\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">\",\"</a>\",[_vm._ssrNode(\"Star\"),_c('OutboundLink')],2),_vm._ssrNode(\"支持我一下~\")],2),_vm._ssrNode(\" \"),_c('comment-comment')],2)}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }"]}