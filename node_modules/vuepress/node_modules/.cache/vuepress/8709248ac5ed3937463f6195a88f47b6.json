{"remainingRequest":"/Users/koro/work/web_my/web_accumulate/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/koro/work/web_my/web_accumulate/node_modules/cache-loader/dist/cjs.js??ref--1-0!/Users/koro/work/web_my/web_accumulate/node_modules/vue-loader/lib/index.js??ref--1-1!/Users/koro/work/web_my/web_accumulate/node_modules/vuepress/lib/webpack/markdownLoader.js??ref--1-2!/Users/koro/work/web_my/web_accumulate/docs/accumulate/tool/一份超级详细的Vue-cli3.0使用教程.md?vue&type=template&id=20490d18&","dependencies":[{"path":"/Users/koro/work/web_my/web_accumulate/docs/accumulate/tool/一份超级详细的Vue-cli3.0使用教程.md","mtime":1636107879475},{"path":"/Users/koro/work/web_my/web_accumulate/node_modules/cache-loader/dist/cjs.js","mtime":1557296864520},{"path":"/Users/koro/work/web_my/web_accumulate/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1557296867191},{"path":"/Users/koro/work/web_my/web_accumulate/node_modules/cache-loader/dist/cjs.js","mtime":1557296864520},{"path":"/Users/koro/work/web_my/web_accumulate/node_modules/vue-loader/lib/index.js","mtime":1557296867190},{"path":"/Users/koro/work/web_my/web_accumulate/node_modules/vuepress/lib/webpack/markdownLoader.js","mtime":1557296867284}],"contextDependencies":[],"result":["var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"content\"},[_vm._ssrNode(\"<h2 id=\\\"一份超级详细的vue-cli3-0使用教程\\\"><a href=\\\"#一份超级详细的vue-cli3-0使用教程\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 一份超级详细的Vue-cli3.0使用教程</h2> \"),_vm._ssrNode(\"<p>\",\"</p>\",[_vm._ssrNode(\"在vue-cli 2.X的时候，也写过一篇类似的\"),_vm._ssrNode(\"<a href=\\\"https://juejin.im/post/597eee92f265da3e2e56e37c\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">\",\"</a>\",[_vm._ssrNode(\"文章\"),_c('OutboundLink')],2),_vm._ssrNode(\"，在八月份的时候vue-cli已经更新到了3.X，新版本的脚手架，功能灰常强大，试用过后非常喜欢，写篇教程来帮助各位踩一下坑。\")],2),_vm._ssrNode(\" \"),_vm._ssrNode(\"<blockquote>\",\"</blockquote>\",[_vm._ssrNode(\"<p>\",\"</p>\",[_vm._ssrNode(\"游泳、健身了解一下：\"),_vm._ssrNode(\"<a href=\\\"http://obkoro1.com/\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">\",\"</a>\",[_vm._ssrNode(\"博客\"),_c('OutboundLink')],2),_vm._ssrNode(\"、\"),_vm._ssrNode(\"<a href=\\\"http://obkoro1.com/web_accumulate/accumulate/\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">\",\"</a>\",[_vm._ssrNode(\"前端积累文档\"),_c('OutboundLink')],2),_vm._ssrNode(\"、\"),_vm._ssrNode(\"<a href=\\\"https://github.com/OBKoro1/articleImg_src/blob/master/juejin/1631b6f52f7e7015.jpeg?raw=true\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">\",\"</a>\",[_vm._ssrNode(\"公众号\"),_c('OutboundLink')],2),_vm._ssrNode(\"、\"),_vm._ssrNode(\"<a href=\\\"https://github.com/OBKoro1\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">\",\"</a>\",[_vm._ssrNode(\"GitHub\"),_c('OutboundLink')],2)],2)]),_vm._ssrNode(\" <h3 id=\\\"主要内容：\\\"><a href=\\\"#主要内容：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 主要内容：</h3> <ol><li>零配置启动/打包一个<code>.vue</code>文件</li> <li>详细的搭建过程</li> <li><strong>重点推荐：使用图形化界面创建/管理/运行项目</strong></li></ol> <hr> <h2 id=\\\"安装：\\\"><a href=\\\"#安装：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 安装：</h2> <h3 id=\\\"卸载旧版本：\\\"><a href=\\\"#卸载旧版本：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 卸载旧版本：</h3> <p>如果你事先已经全局安装了旧版本的<code>vue-cli</code>(1.x 或 2.x),你需要先卸载它:</p> <pre><code>npm uninstall vue-cli -g\\n</code></pre> <h3 id=\\\"node版本要求：\\\"><a href=\\\"#node版本要求：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> Node版本要求：</h3> \"),_vm._ssrNode(\"<p>\",\"</p>\",[_vm._ssrNode(\"3.x需要在<code>Node.js</code>8.9或更高版本(推荐8.11.0+)，点击这里可以安装\"),_vm._ssrNode(\"<a href=\\\"http://nodejs.cn/download/\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">\",\"</a>\",[_vm._ssrNode(\"node\"),_c('OutboundLink')],2)],2),_vm._ssrNode(\" <p>大多数人都安装过了node,使用下面的命令行<strong>查询你的node版本</strong>:</p> <pre><code>node -v\\n</code></pre> <p>如果你的版本不够，可以使用下面的命令行来把<strong>Node版本更新到最新的稳定版</strong>：</p> <pre><code>npm install -g n // 安装模块 这个模块是专门用来管理node.js版本的\\nn stable // 更新你的node版本\\n</code></pre> <p>mac下，更新版本的时候,如果提示你权限不够：</p> <pre><code>sudo n stable // 我就遇到了\\n</code></pre> <h3 id=\\\"安装vue-cli\\\"><a href=\\\"#安装vue-cli\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 安装vue-cli:</h3> <pre><code>npm install -g @vue/cli // 安装cli3.x\\nvue --version // 查询版本是否为3.x\\n</code></pre> <p>如果cli3.x用的不舒服，<strong>cli3也能使用2.x模板</strong>：</p> <pre><code>npm install -g @vue/cli-init // 安装这个模块\\n// 就可以使用2.x的模板：vue init webpack my-project\\n</code></pre> <h2 id=\\\"零配置启动-打包一个-vue文件：\\\"><a href=\\\"#零配置启动-打包一个-vue文件：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 零配置启动/打包一个<code>.vue</code>文件：</h2> <h3 id=\\\"安装扩展：\\\"><a href=\\\"#安装扩展：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 安装扩展：</h3> <pre><code>npm install -g @vue/cli-service-global\\n</code></pre> <p>安装完扩展之后，可以随便找个文件夹建一个如下方示例的.vue文件,然后跑起来：</p> <pre><code>vue serve App.vue // 启动服务\\nvue build App.vue // 打包出生产环境的包并用来部署\\n</code></pre> <h3 id=\\\"如下图，只需一个-vue文件，就能迅速启动一个服务：\\\"><a href=\\\"#如下图，只需一个-vue文件，就能迅速启动一个服务：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 如下图，只需一个.vue文件，就能迅速启动一个服务：</h3> <p>如图所示，服务启动的时候回生成一个<code>node_modules</code>包，稍微测试了一下，<strong>服务支持ES6语法和热更新</strong>，打包的时候会生成一个<code>dist</code>文件夹。(新建一个test.vue文件也只有一个<code>node_modules</code>/<code>dist</code>文件夹)</p> <p>这是个很棒的功能，用于<strong>开发一个库、组件，做一些小demo等都是非常适合的</strong>！</p> <p><img src=\\\"https://github.com/OBKoro1/articleImg_src/blob/master/juejin/166fc87173c427ea?raw=true\\\" alt></p> <hr> <h2 id=\\\"第一次创建项目\\\"><a href=\\\"#第一次创建项目\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 第一次创建项目:</h2> <h3 id=\\\"_1-命令行\\\"><a href=\\\"#_1-命令行\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 1. 命令行:</h3> <pre><code>vue create hello-cli3 \\n</code></pre> <ul><li><p>hello-cli3是文件夹名字，如果不存在会<strong>自动创建文件夹</strong>，如果存在会安装到那个文件夹中。</p></li> <li><p>相比2.x的时候需要自己手动创建一个文件夹，这里也算是一个小优化吧。</p></li></ul> <h3 id=\\\"_2-选择模板\\\"><a href=\\\"#_2-选择模板\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 2. 选择模板:</h3> <ul><li><p>一开始只有两个选项: <code>default</code>(默认配置)和<code>Manually select features</code>(手动配置)</p> <p>默认配置只有<code>babel</code>和<code>eslint</code>其他的都要自己另外再配置，所以我们选第二项手动配置。</p></li> <li><p>在每次选择手动配置之后，会询问你是否保存配置，也就是图片中的<code>koro</code>选项，这样以后我们在进行创建项目的时候<strong>只需使用原先的配置</strong>就可以了，而不用再进行配置。</p></li></ul> <p><img src=\\\"https://github.com/OBKoro1/articleImg_src/blob/master/juejin/166fca9d5b691cc3?raw=true\\\" alt></p> <h3 id=\\\"_3-选择配置：\\\"><a href=\\\"#_3-选择配置：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 3. 选择配置：</h3> <ul><li><p>根据你的项目需要来选择配置,空格键是选中与取消，A键是全选</p> <pre><code>  ? Check the features needed for your project: (Press &lt;space&gt; to select, &lt;a&gt; to toggle all, &lt;i&gt; to invert selection) \\n  // 检查项目所需的功能:(按&lt;space&gt;选择，&lt;a&gt;切换所有，&lt;i&gt;反转选择）\\n  &gt;( ) TypeScript                                 // 支持使用 TypeScript 书写源码\\n   ( ) Progressive Web App (PWA) Support          // PWA 支持\\n   ( ) Router                                     // 支持 vue-router\\n   ( ) Vuex                                       // 支持 vuex\\n   ( ) CSS Pre-processors                         // 支持 CSS 预处理器。\\n   ( ) Linter / Formatter                         // 支持代码风格检查和格式化。\\n   ( ) Unit Testing                               // 支持单元测试。\\n   ( ) E2E Testing  \\n</code></pre></li></ul> <h3 id=\\\"_4-选择css预处理器\\\"><a href=\\\"#_4-选择css预处理器\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 4. 选择css预处理器:</h3> <ul><li><p>如果你选择了Css预处理器选项，会让你选择这个</p> <pre><code>  ? Pick a CSS pre-processor (PostCSS, Autoprefixer and CSS Modules are supported by default):\\n  // 选择CSS预处理器（默认支持PostCSS，Autoprefixer和CSS模块）：\\n  &gt; SCSS/SASS\\n    LESS\\n    Stylus\\n</code></pre></li></ul> <h3 id=\\\"_5-是否使用路由的history模式：\\\"><a href=\\\"#_5-是否使用路由的history模式：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 5. 是否使用路由的<code>history</code>模式：</h3> <ul><li><p>这里我建议选No，这样打包出来丢到服务器上可以直接使用了，后期要用的话，也可以自己再开起来。</p></li> <li><p>选yes的话需要服务器那边再进行设置。</p> <pre><code>  Use history mode for router? (Requires proper server setup for index fallback in production) \\n  // 路由使用history模式?(在生产环境中需要适当的服务器设置以备索引)\\n</code></pre></li></ul> <h3 id=\\\"_6-选择eslint代码验证规则：\\\"><a href=\\\"#_6-选择eslint代码验证规则：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 6. 选择Eslint代码验证规则：</h3> <pre><code>&gt; ESLint with error prevention only\\n  ESLint + Airbnb config\\n  ESLint + Standard config\\n  ESLint + Prettier\\n</code></pre> <h3 id=\\\"_7-选择什么时候进行代码规则检测：\\\"><a href=\\\"#_7-选择什么时候进行代码规则检测：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 7. 选择什么时候进行代码规则检测：</h3> \"),_vm._ssrNode(\"<ul>\",\"</ul>\",[_vm._ssrNode(\"<li><p>建议选保存就检测，等到commit的时候，问题可能都已经积累很多了。</p></li> \"),_vm._ssrNode(\"<li>\",\"</li>\",[_vm._ssrNode(\"<p>\",\"</p>\",[_vm._ssrNode(\"之前写了篇\"),_vm._ssrNode(\"<a href=\\\"http://obkoro1.com/web_accumulate/accumulate/tool/Eslint%E8%87%AA%E5%8A%A8%E4%BF%AE%E5%A4%8D%E6%A0%BC%E5%BC%8F%E9%94%99%E8%AF%AF.html#vscode%E4%BF%9D%E5%AD%98%E6%97%B6%E8%87%AA%E5%8A%A8%E4%BF%AE%E5%A4%8Deslint%E9%94%99%E8%AF%AF\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">\",\"</a>\",[_vm._ssrNode(\"VsCode保存时自动修复Eslint错误\"),_c('OutboundLink')],2),_vm._ssrNode(\"推荐一下。\")],2),_vm._ssrNode(\" <pre><code>  ? Pick additional lint features: (Press &lt;space&gt; to select, &lt;a&gt; to toggle all, &lt;i&gt; to invert selection)\\n  &gt;( ) Lint on save // 保存就检测\\n   ( ) Lint and fix on commit // fix和commit时候检查\\n</code></pre>\")],2)],2),_vm._ssrNode(\" <h3 id=\\\"_8-选择e2e测试\\\"><a href=\\\"#_8-选择e2e测试\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 8. 选择e2e测试:</h3> <pre><code>? Pick a E2E testing solution: (Use arrow keys)\\n❯ Cypress (Chrome only) \\n  Nightwatch (Selenium-based) \\n</code></pre> <h3 id=\\\"_9-把babel-postcss-eslint这些配置文件放哪：\\\"><a href=\\\"#_9-把babel-postcss-eslint这些配置文件放哪：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 9. 把babel,postcss,eslint这些配置文件放哪：</h3> <ul><li><p>通常我们会选择独立放置，让package.json干净些</p> <pre><code>  ? Where do you prefer placing config for Babel, PostCSS, ESLint, etc.? (Use arrow keys)\\n  &gt; In dedicated config files // 独立文件放置\\n    In package.json // 放package.json里\\n</code></pre></li></ul> <h3 id=\\\"_10-是否保存配置：\\\"><a href=\\\"#_10-是否保存配置：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 10. 是否保存配置：</h3> <pre><code>Save this as a preset for future projects? (Y/n) // 是否记录一下以便下次继续使用这套配置\\n// 选保存之后，会让你写一个配置的名字：\\nSave preset as:  name // 然后你下次进入配置可以直接使用你这次的配置了\\n</code></pre> <h3 id=\\\"_11-下载依赖\\\"><a href=\\\"#_11-下载依赖\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 11. 下载依赖</h3> <h3 id=\\\"_12-webpack配置的目录不见了：\\\"><a href=\\\"#_12-webpack配置的目录不见了：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 12. webpack配置的目录不见了：</h3> <p>一起来看一下新项目的结构(下图),会发现2.x的webpack配置的目录不见了，也就是没有build、config这两个文件夹了：</p> \"),_vm._ssrNode(\"<ul>\",\"</ul>\",[_vm._ssrNode(\"<li><p>这种方式的优势<strong>对小白来说非常友好</strong>，不会一上来就两个文件夹，一堆文件，看着脑袋都大了。</p></li> <li><p>然后在<strong>引用<s>抄</s>别人的配置的时候，也非常方便</strong>，直接将文件复制过来就好了。</p></li> \"),_vm._ssrNode(\"<li>\",\"</li>\",[_vm._ssrNode(\"<p>\",\"</p>\",[_vm._ssrNode(\"<strong>在自定义一下webpack的配置</strong>，我们需要在<strong>根目录新建一个<code>vue.config.js</code>文件</strong>，文件中应该导出一个对象，然后进行配置，详情查阅\"),_vm._ssrNode(\"<a href=\\\"https://cli.vuejs.org/zh/config/\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">\",\"</a>\",[_vm._ssrNode(\"官方文档\"),_c('OutboundLink')],2)],2),_vm._ssrNode(\" <pre><code>  // vue.config.js\\n  module.exports = {\\n    // 选项...\\n  }\\n</code></pre>\")],2),_vm._ssrNode(\" <li><p>还有一些小变动像：static文件夹改为public了，router文件夹变成了单个文件之类的(我之前一直这么做,嘿嘿)。</p> <p><img src=\\\"https://github.com/OBKoro1/articleImg_src/blob/master/juejin/166fcd735ce563ba?raw=true\\\" alt></p></li>\")],2),_vm._ssrNode(\" <h3 id=\\\"_13-启动项目：\\\"><a href=\\\"#_13-启动项目：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 13.启动项目：</h3> <ul><li><p>启动项目：npm run serve // <strong>不是之前的 npm run dev</strong></p></li> <li><p>打开<code>http://localhost:8080</code>：</p> <p><img src=\\\"https://github.com/OBKoro1/articleImg_src/blob/master/juejin/166fcd823cce157b?raw=true\\\" alt></p></li></ul> <hr> <h2 id=\\\"使用图形化界面创建-管理-运行项目：\\\"><a href=\\\"#使用图形化界面创建-管理-运行项目：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 使用图形化界面创建/管理/运行项目：</h2> <h3 id=\\\"启动图形化界面\\\"><a href=\\\"#启动图形化界面\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 启动图形化界面</h3> <pre><code>vue ui \\n</code></pre> <ul><li><p>这是个全局的命令 在哪个文件夹都可以打开</p></li> <li><p>界面(下图)，重要的项目可以收藏起来(置顶)：</p> <p><img src=\\\"https://github.com/OBKoro1/articleImg_src/blob/master/juejin/166fd034aae0942d?raw=true\\\" alt></p></li></ul> <h3 id=\\\"创建项目和导入项目：\\\"><a href=\\\"#创建项目和导入项目：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 创建项目和导入项目：</h3> <ol><li><p>目录选中之后，导入项目点击下面的导入就可以了。</p> <p><img src=\\\"https://github.com/OBKoro1/articleImg_src/blob/master/juejin/166fd0f5359fc7ba?raw=true\\\" alt></p></li> <li><p>创建项目，填一个文件夹名字：</p> <p><img src=\\\"https://github.com/OBKoro1/articleImg_src/blob/master/juejin/166fd177edf662d3?raw=true\\\" alt></p></li> <li><p>然后选一下预先保存好的设置就可以了，非常方便，建议采用图形界面来创建项目：</p> <p><img src=\\\"https://github.com/OBKoro1/articleImg_src/blob/master/juejin/166fd1a86f0e7bd5?raw=true\\\" alt></p></li></ol> <h3 id=\\\"项目管理：\\\"><a href=\\\"#项目管理：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 项目管理：</h3> <p>当我们点击hello -cli3项目，就会进入项目管理的界面</p> <h4 id=\\\"_1-仪表盘：\\\"><a href=\\\"#_1-仪表盘：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 1. 仪表盘：</h4> <ul><li><p>这个仪表盘，主要是为了我们操作方便而设置的</p></li> <li><p>可以点击右上角的按钮，来添加/移动这些功能选项。</p> <p><img src=\\\"https://github.com/OBKoro1/articleImg_src/blob/master/juejin/166fd276f5a4de8b?raw=true\\\" alt></p></li></ul> <h4 id=\\\"_2-vue-cli3-x插件：\\\"><a href=\\\"#_2-vue-cli3-x插件：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 2. vue-cli3.x插件：</h4> \"),_vm._ssrNode(\"<ul>\",\"</ul>\",[_vm._ssrNode(\"<li>\",\"</li>\",[_vm._ssrNode(\"<p>\",\"</p>\",[_vm._ssrNode(\"vue-cli3的插件功能，详情了解\"),_vm._ssrNode(\"<a href=\\\"https://cli.vuejs.org/zh/guide/plugins-and-presets.html#%E6%8F%92%E4%BB%B6\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">\",\"</a>\",[_vm._ssrNode(\"官方文档\"),_c('OutboundLink')],2)],2),_vm._ssrNode(\" <p><img src=\\\"https://github.com/OBKoro1/articleImg_src/blob/master/juejin/166fd344e9e5edc0?raw=true\\\" alt></p>\")],2),_vm._ssrNode(\" <li><p>cli3插件安装的过程：</p> <p><img src=\\\"https://github.com/OBKoro1/articleImg_src/blob/master/juejin/166fd3595b37e06a?raw=true\\\" alt=\\\"cli3插件安装的过程\\\"></p></li>\")],2),_vm._ssrNode(\" <h4 id=\\\"_3-项目依赖\\\"><a href=\\\"#_3-项目依赖\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 3. 项目依赖</h4> <ul><li><p>直接在图形界面管理依赖很舒服了！</p></li> <li><p>安装依赖的时候，要记得选择开发依赖/运行依赖！</p> <p><img src=\\\"https://github.com/OBKoro1/articleImg_src/blob/master/juejin/166fd391835d2edb?raw=true\\\" alt></p></li></ul> <h4 id=\\\"_4-项目配置\\\"><a href=\\\"#_4-项目配置\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 4. 项目配置</h4> <ul><li><p>可以对cli进行一些配置、Eslint规则修改：</p> <p><img src=\\\"https://github.com/OBKoro1/articleImg_src/blob/master/juejin/166fd3c81be26fd0?raw=true\\\" alt></p></li></ul> <h4 id=\\\"_5-任务：\\\"><a href=\\\"#_5-任务：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 5. 任务：</h4> <ul><li><p>serve 运行项目，点击直接运行，再也不用输入命令了！</p></li> <li><p>可以清楚的看到各个模块用了多久，方便我们<strong>针对性的进行优化</strong>：</p> <p><img src=\\\"https://github.com/OBKoro1/articleImg_src/blob/master/juejin/166fd41bde538496?raw=true\\\" alt></p></li> <li><p>build 打包项目：这里<strong>主要展示了图表的功能</strong>，比以前2.x生成报告更加直观，超级棒！</p> <p><img src=\\\"https://github.com/OBKoro1/articleImg_src/blob/master/juejin/166fd42dae770e0d?raw=true\\\" alt></p></li></ul> <h4 id=\\\"_6-其他\\\"><a href=\\\"#_6-其他\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 6. 其他</h4> <ul><li><p>夜间风格界面，我更喜欢这个界面</p></li> <li><p>直接打开编辑器,很棒了！</p></li> <li><p>还有一些乱七八糟的按钮</p> <p><img src=\\\"https://github.com/OBKoro1/articleImg_src/blob/master/juejin/166fd4f37d2fd567?raw=true\\\" alt></p></li></ul> <hr> <h2 id=\\\"结语\\\"><a href=\\\"#结语\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 结语</h2> <p>可以说很认真了，希望大家看完能够有些收获，<strong>赶紧试试新版的vue-cli吧</strong>！</p> <p>以上2018.11.10</p> <p>参考资料：</p> \"),_vm._ssrNode(\"<p>\",\"</p>\",[_vm._ssrNode(\"<a href=\\\"https://cli.vuejs.org/zh/guide/\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">\",\"</a>\",[_vm._ssrNode(\"vue-cli3官方文档\"),_c('OutboundLink')],2)]),_vm._ssrNode(\" \"),_vm._ssrNode(\"<p>\",\"</p>\",[_vm._ssrNode(\"<a href=\\\"https://gitee.com/hjm100/codes/rjch7b31l4f59gt8suidn63\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">\",\"</a>\",[_vm._ssrNode(\"vue-cli3.0搭建与配置\"),_c('OutboundLink')],2)]),_vm._ssrNode(\" \"),_vm._ssrNode(\"<h3 id=\\\"点个star支持我一下\\\">\",\"</h3>\",[_vm._ssrNode(\"<a href=\\\"#点个star支持我一下\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 点个\"),_vm._ssrNode(\"<a href=\\\"https://github.com/OBKoro1/web_accumulate\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">\",\"</a>\",[_vm._ssrNode(\"Star\"),_c('OutboundLink')],2),_vm._ssrNode(\"支持我一下~\")],2),_vm._ssrNode(\" \"),_c('comment-comment')],2)}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }"]}