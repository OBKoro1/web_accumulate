{"remainingRequest":"/Users/koro/work/web_my/web_accumulate/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/koro/work/web_my/web_accumulate/node_modules/cache-loader/dist/cjs.js??ref--1-0!/Users/koro/work/web_my/web_accumulate/node_modules/vue-loader/lib/index.js??ref--1-1!/Users/koro/work/web_my/web_accumulate/node_modules/vuepress/lib/webpack/markdownLoader.js??ref--1-2!/Users/koro/work/web_my/web_accumulate/docs/accumulate/JS/webWorker上手.md?vue&type=template&id=09807998&","dependencies":[{"path":"/Users/koro/work/web_my/web_accumulate/docs/accumulate/JS/webWorker上手.md","mtime":1636107879468},{"path":"/Users/koro/work/web_my/web_accumulate/node_modules/cache-loader/dist/cjs.js","mtime":1557296864520},{"path":"/Users/koro/work/web_my/web_accumulate/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1557296867191},{"path":"/Users/koro/work/web_my/web_accumulate/node_modules/cache-loader/dist/cjs.js","mtime":1557296864520},{"path":"/Users/koro/work/web_my/web_accumulate/node_modules/vue-loader/lib/index.js","mtime":1557296867190},{"path":"/Users/koro/work/web_my/web_accumulate/node_modules/vuepress/lib/webpack/markdownLoader.js","mtime":1557296867284}],"contextDependencies":[],"result":["var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"content\"},[_vm._ssrNode(\"<h2 id=\\\"前端er来学习一下webworker吧\\\"><a href=\\\"#前端er来学习一下webworker吧\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 前端er来学习一下webWorker吧</h2> <p>我们都知道，JavaScript 是单线程的，在同一时刻只能处理一个任务，我们会通过 setTimeout()、setInterval()、ajax 和事件处理程序等技术模拟“并行”。但都不是真正意义上的并行:</p> <p>Web Worker 是 HTML5 标准的一部分，这一规范定义了一套 API，它允许一段 JavaScript 程序运行在主线程之外的另外一个线程中。</p> <p>这在很大程度上利用了现在不断升级的电脑计算能力：能够在同一时间平行处理两个任务。</p> \"),_vm._ssrNode(\"<blockquote>\",\"</blockquote>\",[_vm._ssrNode(\"<p>\",\"</p>\",[_vm._ssrNode(\"游泳、健身了解一下：\"),_vm._ssrNode(\"<a href=\\\"http://obkoro1.com/\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">\",\"</a>\",[_vm._ssrNode(\"博客\"),_c('OutboundLink')],2),_vm._ssrNode(\"、\"),_vm._ssrNode(\"<a href=\\\"http://obkoro1.com/web_accumulate/accumulate/\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">\",\"</a>\",[_vm._ssrNode(\"前端积累文档\"),_c('OutboundLink')],2),_vm._ssrNode(\"、\"),_vm._ssrNode(\"<a href=\\\"https://github.com/OBKoro1/articleImg_src/blob/master/juejin/1631b6f52f7e7015.jpeg?raw=true\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">\",\"</a>\",[_vm._ssrNode(\"公众号\"),_c('OutboundLink')],2),_vm._ssrNode(\"、\"),_vm._ssrNode(\"<a href=\\\"https://github.com/OBKoro1\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">\",\"</a>\",[_vm._ssrNode(\"GitHub\"),_c('OutboundLink')],2)],2)]),_vm._ssrNode(\" <h3 id=\\\"场景\\\"><a href=\\\"#场景\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 场景</h3> <p><strong>当我们有些任务需要花费大量的时间，进行复杂的运算</strong>，就会导致页面卡死：用户点击页面需要很长的时间才能响应，因为前面的任务还未完成，后面的任务只能排队等待。对用户来说，这样的体验无疑是糟糕的，web worker 就是为了解决这种花费大量时间的复杂运算而诞生的！</p> <h3 id=\\\"webworker-的作用：创建-worker-线程\\\"><a href=\\\"#webworker-的作用：创建-worker-线程\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> WebWorker 的作用：创建 worker 线程</h3> <p>WebWorker 允许在主线程之外再创建一个 worker 线程，<strong>在主线程执行任务的同时，worker 线程也可以在后台执行它自己的任务，互不干扰</strong>。</p> <p>这样就让 JS 变成多线程的环境了，我们可以把高延迟、花费大量时间的运算，分给 worker 线程，最后再把结果返回给主线程就可以了，因为时间花费多的任务被 web worker 承担了，主线程就会很流畅了！</p> <hr> <h2 id=\\\"主线程\\\"><a href=\\\"#主线程\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 主线程</h2> <h3 id=\\\"我们先来看一下栗子：\\\"><a href=\\\"#我们先来看一下栗子：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 我们先来看一下栗子：</h3> \"),_vm._ssrNode(\"<p>\",\"</p>\",[_vm._ssrNode(\"<a href=\\\"https://codepen.io/OBKoro1/pen/JevMZY?editors=1000\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">\",\"</a>\",[_vm._ssrNode(\"codepen\"),_c('OutboundLink')],2),_vm._ssrNode(\",这里我写了一个 class，里面有详细注释，可以参考一下。\")],2),_vm._ssrNode(\" <h3 id=\\\"创建-worker-对象：\\\"><a href=\\\"#创建-worker-对象：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 创建 worker 对象：</h3> <p>主线程调用<code>new Worker()</code>构造函数，新建一个 worker 线程，构造函数的参数是一个 url，生成这个 url 的方法有两种：</p> \"),_vm._ssrNode(\"<ol>\",\"</ol>\",[_vm._ssrNode(\"<li><p>脚本文件：</p> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">const</span> worker <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Worker</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'https://~.js'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br></div></div><p>因为 worker 的两个限制：</p> <ol><li><p><strong>分配给 Worker 线程运行的脚本文件，必须与主线程的脚本文件同源</strong>。</p></li> <li><p><strong>worker 不能读取本地的文件</strong>(不能打开本机的文件系统<code>file://</code>)，它所加载的脚本必须来自网络。</p></li></ol> <p>可以看到限制还是比较多的，如果要使用这种形式的话，在项目中推荐把文件放在静态文件夹中，打包的时候直接拷贝进去，这样我们就可以拿到固定的链接了，</p></li> \"),_vm._ssrNode(\"<li>\",\"</li>\",[_vm._ssrNode(\"<p>字符串形式：</p> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">const</span> data <span class=\\\"token operator\\\">=</span> <span class=\\\"token template-string\\\"><span class=\\\"token string\\\">`\\n    //  worker线程 do something\\n    `</span></span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token comment\\\">// 转成二进制对象</span>\\n<span class=\\\"token keyword\\\">const</span> blob <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Blob</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">[</span>data<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token comment\\\">// 生成url</span>\\n<span class=\\\"token keyword\\\">const</span> url <span class=\\\"token operator\\\">=</span> window<span class=\\\"token punctuation\\\">.</span><span class=\\\"token constant\\\">URL</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">createObjectURL</span><span class=\\\"token punctuation\\\">(</span>blob<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token comment\\\">// 加载url</span>\\n<span class=\\\"token keyword\\\">const</span> worker <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Worker</span><span class=\\\"token punctuation\\\">(</span>url<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br><span class=\\\"line-number\\\">5</span><br><span class=\\\"line-number\\\">6</span><br><span class=\\\"line-number\\\">7</span><br><span class=\\\"line-number\\\">8</span><br><span class=\\\"line-number\\\">9</span><br></div></div>\"),_vm._ssrNode(\"<p>\",\"</p>\",[_vm._ssrNode(\"<a href=\\\"https://codepen.io/OBKoro1/pen/JevMZY?editors=1000\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">\",\"</a>\",[_vm._ssrNode(\"栗子\"),_c('OutboundLink')],2),_vm._ssrNode(\"中就是使用这种形式的，方便我们演示。\")],2),_vm._ssrNode(\" <p>在项目中：我们可以把worker线程的逻辑写在js文件里面，然后字符串化，然后再export、import，配合webpack进行模块化管理,这样就很容易使用了。</p>\")],2)],2),_vm._ssrNode(\" <h3 id=\\\"主线程的其他-api：\\\"><a href=\\\"#主线程的其他-api：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 主线程的其他 API：</h3> <h4 id=\\\"_1-主线程与-worker-线程通信\\\"><a href=\\\"#_1-主线程与-worker-线程通信\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 1. 主线程与 worker 线程通信:</h4> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code>worker<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">postMessage</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span>\\n  hello<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token string\\\">'hello'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'world'</span><span class=\\\"token punctuation\\\">]</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br></div></div><p>它们<strong>相互之间的通信可以传递对象和数组</strong>，这样我们就可以根据相互之间传递的信息来进行一些操作，比如可以设置一个<code>type</code>属性，当值为<code>hello</code>时执行什么函数，当值为<code>world</code>的时候执行什么函数。</p> <p>值得注意的是：它们之间通信是通过拷贝的形式来传递数据的，进行传递的对象需要经过序列化，接下来在另一端还需要反序列化。这就意味着：</p> <ol><li><strong>我们不能传递不能被序列化的数据</strong>，比如函数，会抛出错误的。</li> <li>在一端改变数据，另外一端不会受影响，因为数据不存在引用，是拷贝过来的。</li></ol> <h4 id=\\\"_2-监听-worker-线程返回的信息\\\"><a href=\\\"#_2-监听-worker-线程返回的信息\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 2. 监听 worker 线程返回的信息</h4> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code>worker<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function-variable function\\\">onmessage</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span>e<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'父进程接收的数据：'</span><span class=\\\"token punctuation\\\">,</span> e<span class=\\\"token punctuation\\\">.</span>data<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token comment\\\">// doSomething();</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br></div></div><h4 id=\\\"_3-主线程关闭-worker-线程\\\"><a href=\\\"#_3-主线程关闭-worker-线程\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 3. 主线程关闭 worker 线程</h4> <p>Worker 线程一旦新建成功，就会始终运行，这样有利于随时响应主线程的通信。</p> <p>这也是 Worker 比较耗费计算机的计算资源(<code>CPU</code>)的原因，一旦使用完毕，就应该关闭 worker 线程。</p> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code>worker<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">terminate</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 主线程关闭worker线程</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br></div></div><h4 id=\\\"_4-监听错误\\\"><a href=\\\"#_4-监听错误\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 4. 监听错误</h4> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token comment\\\">// worker线程报错</span>\\nworker<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function-variable function\\\">onerror</span> <span class=\\\"token operator\\\">=</span> e <span class=\\\"token operator\\\">=&gt;</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token comment\\\">// e.filename - 发生错误的脚本文件名；e.lineno - 出现错误的行号；以及 e.message - 可读性良好的错误消息</span>\\n    console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'onerror'</span><span class=\\\"token punctuation\\\">,</span> e<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br><span class=\\\"line-number\\\">5</span><br></div></div>\"),_vm._ssrNode(\"<p>\",\"</p>\",[_vm._ssrNode(\"也可以像我给出的\"),_vm._ssrNode(\"<a href=\\\"https://codepen.io/OBKoro1/pen/JevMZY?editors=1000\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">\",\"</a>\",[_vm._ssrNode(\"栗子\"),_c('OutboundLink')],2),_vm._ssrNode(\"一样,把两个报错放在一起写，有报错把信息传出来就好了。\")],2),_vm._ssrNode(\" <hr> <h2 id=\\\"worker-线程\\\"><a href=\\\"#worker-线程\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> Worker 线程</h2> <h3 id=\\\"self-代表-worker-进程自身\\\"><a href=\\\"#self-代表-worker-进程自身\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> self 代表 worker 进程自身</h3> <p>worker 线程的执行上下文是一个叫做<code>WorkerGlobalScope</code>的东西跟主线程的上下文(window)不一样。</p> <p>我们可以使用<code>self</code>/<code>WorkerGlobalScope</code>来访问全局对象。</p> <h3 id=\\\"监听主线程传过来的信息：\\\"><a href=\\\"#监听主线程传过来的信息：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 监听主线程传过来的信息：</h3> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code>self<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function-variable function\\\">onmessage</span> <span class=\\\"token operator\\\">=</span> e <span class=\\\"token operator\\\">=&gt;</span> <span class=\\\"token punctuation\\\">{</span>\\n    console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'主线程传来的信息：'</span><span class=\\\"token punctuation\\\">,</span> e<span class=\\\"token punctuation\\\">.</span>data<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token comment\\\">// do something</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br></div></div><h3 id=\\\"发送信息给主线程\\\"><a href=\\\"#发送信息给主线程\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 发送信息给主线程</h3> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code>self<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">postMessage</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span>\\n    hello<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">[</span> <span class=\\\"token string\\\">'这条信息'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'来自worker线程'</span> <span class=\\\"token punctuation\\\">]</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br></div></div><h3 id=\\\"worker-线程关闭自身\\\"><a href=\\\"#worker-线程关闭自身\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> worker 线程关闭自身</h3> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code>self<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">close</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br></div></div><h3 id=\\\"worker-线程加载脚本：\\\"><a href=\\\"#worker-线程加载脚本：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> worker 线程加载脚本：</h3> <p>Worker 线程能够访问一个全局函数 imprtScripts()来引入脚本，该函数接受 0 个或者多个 URI 作为参数。</p> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token function\\\">importScripts</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'http~.js'</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token string\\\">'http~2.js'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br></div></div><ol><li><p>脚本中的全局变量都能被 worker 线程使用。</p></li> <li><p>脚本的下载顺序是不固定的，但执行时会按照传入 importScripts() 中的文件名顺序进行，这个过程是同步的。</p></li></ol> <h3 id=\\\"worker-线程限制\\\"><a href=\\\"#worker-线程限制\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> Worker 线程限制</h3> <p>因为 worker 创造了另外一个线程，不在主线程上，相应的会有一些限制，我们无法使用下列对象：</p> <ol><li>window 对象</li> <li>document 对象</li> <li>DOM 对象</li> <li>parent 对象</li></ol> <p><strong>我们可以使用下列对象/功能</strong>：</p> <ol><li><p>浏览器：navigator 对象</p></li> <li><p>URL：location 对象，只读</p></li> <li><p>发送请求：XMLHttpRequest 对象</p></li> <li><p>定时器：setTimeout/setInterval，在 worker 线程轮询也是很棒！</p></li> <li><p>应用缓存：Application Cache</p></li></ol> <hr> <h3 id=\\\"多个-worker-线程\\\"><a href=\\\"#多个-worker-线程\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 多个 worker 线程</h3> \"),_vm._ssrNode(\"<ol>\",\"</ol>\",[_vm._ssrNode(\"<li>\",\"</li>\",[_vm._ssrNode(\"<p><strong>在主线程内可以创建多个 worker 线程</strong></p> \"),_vm._ssrNode(\"<p>\",\"</p>\",[_vm._ssrNode(\"<a href=\\\"https://codepen.io/OBKoro1/pen/JevMZY?editors=1010\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">\",\"</a>\",[_vm._ssrNode(\"栗子\"),_c('OutboundLink')],2),_vm._ssrNode(\"最下方有。\")],2)],2),_vm._ssrNode(\" <li><p><strong>worker 线程内还可以新建 worker 线程，使用同源的脚本文件创建</strong>。</p> <p>在 worker 线程内再新建 worker 线程就不能使用<code>window.URL.createObjectURL(blob)</code>，需要使用同源的脚本文件来创建新的 worker 线程，因为我们无法访问到<code>window</code>对象。</p> <p>这里不方便演示，跟在主线程创建 worker 线程是一个套路，只是改成了脚本文件形式创建 worker 线程。</p></li>\")],2),_vm._ssrNode(\" <h3 id=\\\"线程间转移二进制数据\\\"><a href=\\\"#线程间转移二进制数据\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 线程间转移二进制数据</h3> <p>因为主线程与 worker 线程之间的通信是拷贝关系，当我们要传递一个巨大的二进制文件给 worker 线程处理时(worker 线程就是用来干这个的)，这时候使用拷贝的方式来传递数据，无疑会造成性能问题。</p> <p><strong>幸运的是，Web Worker 提供了一中转移数据的方式，允许主线程把二进制数据直接转移给子线程</strong>。这种方式比原先拷贝的方式，有巨大的性能提升。</p> <p><strong>一旦数据转移到其他线程，原先线程就无法再使用这些二进制数据了，这是为了防止出现多个线程同时修改数据的麻烦局面</strong></p> \"),_vm._ssrNode(\"<p>\",\"</p>\",[_vm._ssrNode(\"下方栗子出自\"),_vm._ssrNode(\"<a href=\\\"https://juejin.im/post/59c1b3645188250ea1502e46#comment\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">\",\"</a>\",[_vm._ssrNode(\"浅谈 HTML5 Web Worker\"),_c('OutboundLink')],2)],2),_vm._ssrNode(\" <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token comment\\\">// 创建二进制数据</span>\\n<span class=\\\"token keyword\\\">var</span> uInt8Array <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Uint8Array</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">1024</span><span class=\\\"token operator\\\">*</span><span class=\\\"token number\\\">1024</span><span class=\\\"token operator\\\">*</span><span class=\\\"token number\\\">32</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 32MB</span>\\n<span class=\\\"token keyword\\\">for</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">var</span> i <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">;</span> i <span class=\\\"token operator\\\">&lt;</span> uInt8Array <span class=\\\"token punctuation\\\">.</span>length<span class=\\\"token punctuation\\\">;</span> <span class=\\\"token operator\\\">++</span>i<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    uInt8Array<span class=\\\"token punctuation\\\">[</span>i<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span> i<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>uInt8Array<span class=\\\"token punctuation\\\">.</span>length<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 传递前长度:33554432</span>\\n<span class=\\\"token comment\\\">// 字符串形式创建worker线程</span>\\n<span class=\\\"token keyword\\\">var</span> myTask <span class=\\\"token operator\\\">=</span> <span class=\\\"token template-string\\\"><span class=\\\"token string\\\">`\\n    onmessage = function (e) {\\n        var data = e.data;\\n        console.log('worker:', data);\\n    };\\n`</span></span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">var</span> blob <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Blob</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">[</span>myTask<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">var</span> myWorker <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Worker</span><span class=\\\"token punctuation\\\">(</span>window<span class=\\\"token punctuation\\\">.</span><span class=\\\"token constant\\\">URL</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">createObjectURL</span><span class=\\\"token punctuation\\\">(</span>blob<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token comment\\\">// 使用这个格式(a,[a]) 来转移二进制数据</span>\\nmyWorker<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">postMessage</span><span class=\\\"token punctuation\\\">(</span>uInt8Array<span class=\\\"token punctuation\\\">.</span>buffer<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">[</span>uInt8Array<span class=\\\"token punctuation\\\">.</span>buffer<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 发送数据、转移数据</span>\\n\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>uInt8Array<span class=\\\"token punctuation\\\">.</span>length<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 传递后长度:0，原先线程内没有这个数据了</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br><span class=\\\"line-number\\\">5</span><br><span class=\\\"line-number\\\">6</span><br><span class=\\\"line-number\\\">7</span><br><span class=\\\"line-number\\\">8</span><br><span class=\\\"line-number\\\">9</span><br><span class=\\\"line-number\\\">10</span><br><span class=\\\"line-number\\\">11</span><br><span class=\\\"line-number\\\">12</span><br><span class=\\\"line-number\\\">13</span><br><span class=\\\"line-number\\\">14</span><br><span class=\\\"line-number\\\">15</span><br><span class=\\\"line-number\\\">16</span><br><span class=\\\"line-number\\\">17</span><br><span class=\\\"line-number\\\">18</span><br><span class=\\\"line-number\\\">19</span><br><span class=\\\"line-number\\\">20</span><br><span class=\\\"line-number\\\">21</span><br></div></div><blockquote><p>二进制数据有：File、Blob、ArrayBuffer 等类型，也允许在 worker 线程之间发送，<strong>这对于影像处理、声音处理、3D 运算等就非常方便了，不会产生性能负担</strong></p></blockquote> <h3 id=\\\"应用场景：\\\"><a href=\\\"#应用场景：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 应用场景：</h3> <ol><li><p>数学运算</p></li> <li><p>图像、影音等文件处理</p></li> <li><p>大量数据检索</p> <p>比如用户输入时，我们在后台检索答案，或者帮助用户联想，纠错等操作.</p></li> <li><p>耗时任务都丢到 webworker 解放我们的主线程。</p></li></ol> <h3 id=\\\"兼容：\\\"><a href=\\\"#兼容：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 兼容：</h3> \"),_vm._ssrNode(\"<p>\",\"</p>\",[_vm._ssrNode(\"没有找到具体的制定日期，有篇博客是在 10 年的 7 月份写的，也就是说 web worker 至少出现了八年了，以下兼容摘自\"),_vm._ssrNode(\"<a href=\\\"https://developer.mozilla.org/zh-CN/docs/Web/API/Web_Workers_API/Using_web_workers\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">\",\"</a>\",[_vm._ssrNode(\"MDN\"),_c('OutboundLink')],2),_vm._ssrNode(\"：\")],2),_vm._ssrNode(\" <p>Chrome：4, Firefox：3.5, IE：10.0, Opera：10.6, Safari：4</p> <p>现在兼容还是做的比较好的，如果实在不放心的话：</p> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>window<span class=\\\"token punctuation\\\">.</span>Worker<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token operator\\\">...</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token keyword\\\">else</span><span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token operator\\\">...</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br><span class=\\\"line-number\\\">5</span><br></div></div><hr> <h2 id=\\\"结语：\\\"><a href=\\\"#结语：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 结语：</h2> <p>Web Worker的出现，给浏览器带来了后台计算的能力，把耗时的任务分配给worker线程来做，在很大程度上缓解了主线程UI渲染阻塞的问题，提升页面性能。</p> <p>使用起来也不复杂，以后有复杂的问题，记得要丢给我们浏览器的后台(web worker)来处理</p> <p>看完之后，一定要研究一下文中的栗子，自己鼓捣鼓捣，实践出真知！</p> \"),_vm._ssrNode(\"<p>\",\"</p>\",[_vm._ssrNode(\"PS: 推荐一下我上个月写的\"),_vm._ssrNode(\"<a href=\\\"https://juejin.im/post/5bcad1326fb9a05cda779d0b\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">\",\"</a>\",[_vm._ssrNode(\"手摸手教你使用WebSocket\"),_c('OutboundLink')],2),_vm._ssrNode(\"，感兴趣的可以看一下。\")],2),_vm._ssrNode(\" <p>以上2018.11.25</p> <p>参考资料：</p> \"),_vm._ssrNode(\"<p>\",\"</p>\",[_vm._ssrNode(\"<a href=\\\"https://developer.mozilla.org/zh-CN/docs/Web/API/Web_Workers_API/Using_web_workers\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">\",\"</a>\",[_vm._ssrNode(\"MDN\"),_c('OutboundLink')],2)]),_vm._ssrNode(\" \"),_vm._ssrNode(\"<p>\",\"</p>\",[_vm._ssrNode(\"<a href=\\\"http://www.ruanyifeng.com/blog/2018/07/web-worker.html\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">\",\"</a>\",[_vm._ssrNode(\"Web Worker 使用教程\"),_c('OutboundLink')],2)]),_vm._ssrNode(\" \"),_vm._ssrNode(\"<p>\",\"</p>\",[_vm._ssrNode(\"<a href=\\\"https://juejin.im/post/59c1b3645188250ea1502e46\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">\",\"</a>\",[_vm._ssrNode(\"浅谈HTML5 Web Worker\"),_c('OutboundLink')],2)]),_vm._ssrNode(\" \"),_vm._ssrNode(\"<h3 id=\\\"点个star支持我一下\\\">\",\"</h3>\",[_vm._ssrNode(\"<a href=\\\"#点个star支持我一下\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 点个\"),_vm._ssrNode(\"<a href=\\\"https://github.com/OBKoro1/web_accumulate\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">\",\"</a>\",[_vm._ssrNode(\"Star\"),_c('OutboundLink')],2),_vm._ssrNode(\"支持我一下~\")],2),_vm._ssrNode(\" \"),_c('comment-comment')],2)}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }"]}