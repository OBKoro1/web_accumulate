{"remainingRequest":"/Users/koro/work/web_my/web_accumulate/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/koro/work/web_my/web_accumulate/node_modules/cache-loader/dist/cjs.js??ref--1-0!/Users/koro/work/web_my/web_accumulate/node_modules/vue-loader/lib/index.js??ref--1-1!/Users/koro/work/web_my/web_accumulate/node_modules/vuepress/lib/webpack/markdownLoader.js??ref--1-2!/Users/koro/work/web_my/web_accumulate/docs/accumulate/JS/JS基础-继承.md?vue&type=template&id=30a85a1a&","dependencies":[{"path":"/Users/koro/work/web_my/web_accumulate/docs/accumulate/JS/JS基础-继承.md","mtime":1636107879468},{"path":"/Users/koro/work/web_my/web_accumulate/node_modules/cache-loader/dist/cjs.js","mtime":1557296864520},{"path":"/Users/koro/work/web_my/web_accumulate/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1557296867191},{"path":"/Users/koro/work/web_my/web_accumulate/node_modules/cache-loader/dist/cjs.js","mtime":1557296864520},{"path":"/Users/koro/work/web_my/web_accumulate/node_modules/vue-loader/lib/index.js","mtime":1557296867190},{"path":"/Users/koro/work/web_my/web_accumulate/node_modules/vuepress/lib/webpack/markdownLoader.js","mtime":1557296867284}],"contextDependencies":[],"result":["var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"content\"},[_vm._ssrNode(\"<h2 id=\\\"js基础-深入浅出继承\\\"><a href=\\\"#js基础-深入浅出继承\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> JS基础-深入浅出继承</h2> <p>上篇文章详细解析了原型、原型链的相关知识点，这篇文章讲的是和原型链有密切关联的继承，它是前端基础中很重要的一个知识点，它对于代码复用来说非常有用，本篇将详细解析JS中的各种继承方式和优缺点进行，希望看完本篇文章能够对继承以及相关概念理解的更为透彻。</p> <h4 id=\\\"本篇文章需要先理解原型、原型链以及call的相关知识：\\\"><a href=\\\"#本篇文章需要先理解原型、原型链以及call的相关知识：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 本篇文章需要先理解原型、原型链以及<code>call</code>的相关知识：</h4> \"),_vm._ssrNode(\"<p>\",\"</p>\",[_vm._ssrNode(\"<a href=\\\"https://juejin.im/post/5d622f14f265da03a1486408\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">\",\"</a>\",[_vm._ssrNode(\"JS基础-函数、对象和原型、原型链的关系\"),_c('OutboundLink')],2)]),_vm._ssrNode(\" \"),_vm._ssrNode(\"<p>\",\"</p>\",[_vm._ssrNode(\"<a href=\\\"https://juejin.im/post/5d469e0851882544b85c32ef\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">\",\"</a>\",[_vm._ssrNode(\"js基础-面试官想知道你有多理解call,apply,bind？\"),_c('OutboundLink')],2)]),_vm._ssrNode(\" <h3 id=\\\"何为继承？\\\"><a href=\\\"#何为继承？\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 何为继承？</h3> \"),_vm._ssrNode(\"<blockquote>\",\"</blockquote>\",[_vm._ssrNode(\"<p>\",\"</p>\",[_vm._ssrNode(\"<a href=\\\"https://zh.wikipedia.org/wiki/%E7%BB%A7%E6%89%BF_(%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6)\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">\",\"</a>\",[_vm._ssrNode(\"维基百科\"),_c('OutboundLink')],2),_vm._ssrNode(\"：继承可以使得子类具有父类别的各种属性和方法，而不需要再次编写相同的代码。\")],2)]),_vm._ssrNode(\" <p><strong>继承是一个类从另一个类获取方法和属性的过程</strong>。</p> <p>PS：或者是多个类</p> <h4 id=\\\"js实现继承的原理\\\"><a href=\\\"#js实现继承的原理\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> JS实现继承的原理</h4> <blockquote><p>记住这个概念，你会发现JS中的继承都是在实现这个目的，差异是它们的实现方式不同。</p></blockquote> <p><strong>复制父类的属性和方法来重写子类原型对象</strong>。</p> <h3 id=\\\"原型链继承-new-：\\\"><a href=\\\"#原型链继承-new-：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 原型链继承(new)：</h3> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">fatherFn</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>some <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">'父类的this属性'</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\nfatherFn<span class=\\\"token punctuation\\\">.</span>prototype<span class=\\\"token punctuation\\\">.</span>fatherFnSome <span class=\\\"token operator\\\">=</span>  <span class=\\\"token string\\\">'父类原型对象的属性或者方法'</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token comment\\\">// 子类</span>\\n<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">sonFn</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>obkoro1 <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">'子类的this属性'</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token comment\\\">// 核心步骤：重写子类的原型对象</span>\\nsonFn<span class=\\\"token punctuation\\\">.</span>prototype <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">fatherFn</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 将fatherFn的实例赋值给sonFn的prototype</span>\\nsonFn<span class=\\\"token punctuation\\\">.</span>prototype<span class=\\\"token punctuation\\\">.</span>sonFnSome <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">'子类原型对象的属性或者方法'</span> <span class=\\\"token comment\\\">// 子类的属性/方法声明在后面,避免被覆盖</span>\\n<span class=\\\"token comment\\\">// 实例化子类</span>\\n<span class=\\\"token keyword\\\">const</span> sonFnInstance <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">sonFn</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'子类的实例：'</span><span class=\\\"token punctuation\\\">,</span> sonFnInstance<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br><span class=\\\"line-number\\\">5</span><br><span class=\\\"line-number\\\">6</span><br><span class=\\\"line-number\\\">7</span><br><span class=\\\"line-number\\\">8</span><br><span class=\\\"line-number\\\">9</span><br><span class=\\\"line-number\\\">10</span><br><span class=\\\"line-number\\\">11</span><br><span class=\\\"line-number\\\">12</span><br><span class=\\\"line-number\\\">13</span><br><span class=\\\"line-number\\\">14</span><br></div></div><h4 id=\\\"原型链子类实例\\\"><a href=\\\"#原型链子类实例\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 原型链子类实例</h4> <p><img src=\\\"https://github.com/OBKoro1/articleImg_src/blob/master/2019/2019_9_16_inherit_1.png?raw=true\\\" alt=\\\"原型链子类实例\\\"></p> <h4 id=\\\"原型链继承获取父类的属性和方法\\\"><a href=\\\"#原型链继承获取父类的属性和方法\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 原型链继承获取父类的属性和方法</h4> <ol><li><code>fatherFn</code>通过this声明的属性/方法都会绑定在<code>new</code>期间创建的新对象上。</li> <li>新对象的原型是<code>father.prototype</code>,通过原型链的属性查找到<code>father.prototype</code>的属性和方法。</li></ol> <h4 id=\\\"理解new做了什么：\\\"><a href=\\\"#理解new做了什么：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 理解<code>new</code>做了什么：</h4> <blockquote><p>new在本文出现多次，new也是JS基础中很重要的一块内容，很多知识点会涉及到new，不太理解的要多看几遍。</p></blockquote> <ol><li>创建一个全新的对象。</li> <li>这个新对象的原型(<code>__proto__</code>)指向函数的<code>prototype</code>对象。</li> <li>执行函数，函数的this会绑定在新创建的对象上。</li> <li>如果函数没有返回其他对象(包括数组、函数、日期对象等)，那么会自动返回这个新对象。</li> <li>返回的那个对象为构造函数的实例。</li></ol> <h4 id=\\\"构造调用函数返回其他对象\\\"><a href=\\\"#构造调用函数返回其他对象\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 构造调用函数返回其他对象</h4> <blockquote><p><strong>返回其他对象会导致获取不到构造函数的实例，很容易因此引起意外的问题</strong>！</p></blockquote> <p><strong>我们知道了<code>fatherFn</code>的<code>this</code>和<code>prototype</code>的属性/方法都跟<code>new</code>期间创建的新对象有关系</strong>。</p> <p><strong>如果在父类中返回了其他对象(<code>new</code>的第四点)，其他对象没有父类的<code>this</code>和<code>prototype</code>，因此导致原型链继承失败</strong>。</p> <p>我们来测试一下，修改原型链继承中的父类<code>fatherFn</code>：</p> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">fatherFn</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>some <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">'父类的this属性'</span><span class=\\\"token punctuation\\\">;</span>\\n  console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'new fatherFn 期间生成的对象'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">[</span> <span class=\\\"token string\\\">'数组对象'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'函数对象'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'日期对象'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'正则对象'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'等等等'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'都不会返回new期间创建的新对象'</span> <span class=\\\"token punctuation\\\">]</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br><span class=\\\"line-number\\\">5</span><br></div></div><p><img src=\\\"/img/remote/1460000020462550?w=1256&h=800\\\" alt=\\\"原型链继承返回其他对象,将导致原型链继承失败\\\"></p> <p>PS： 本文中构造调用函数都不能返回其他函数，下文不再提及该点。</p> <h4 id=\\\"不要使用对象字面量的形式创建原型方法：\\\"><a href=\\\"#不要使用对象字面量的形式创建原型方法：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 不要使用对象字面量的形式创建原型方法：</h4> <blockquote><p>这种方式很容易在不经意间，清除/覆盖了原型对象原有的属性/方法，不该为了稍微简便一点，而使用这种写法。</p></blockquote> <p>有些人在需要在原型对象上创建多个属性和方法，会使用对象字面量的形式来创建：</p> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code>sonFn<span class=\\\"token punctuation\\\">.</span>prototype <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">fatherFn</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token comment\\\">// 子类的prototype被清空后 重新赋值, 导致上一行代码失效</span>\\nsonFn<span class=\\\"token punctuation\\\">.</span>prototype <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n    sonFnSome<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'子类原型对象的属性'</span><span class=\\\"token punctuation\\\">,</span>\\n    one<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n    two<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n    three<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br><span class=\\\"line-number\\\">5</span><br><span class=\\\"line-number\\\">6</span><br><span class=\\\"line-number\\\">7</span><br><span class=\\\"line-number\\\">8</span><br></div></div><p>还有一种常见的做法，该方式会导致函数原型对象的属性<code>constructor</code>丢失：</p> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">test</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">}</span>\\ntest<span class=\\\"token punctuation\\\">.</span>prototype <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token operator\\\">...</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br></div></div><h4 id=\\\"原型链继承的缺点\\\"><a href=\\\"#原型链继承的缺点\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 原型链继承的缺点</h4> <ol><li><p><strong>父类使用<code>this</code>声明的属性被所有实例共享</strong></p> <p>原因是：实例化的父类(<code>sonFn.prototype = new fatherFn()</code>)是一次性赋值到子类实例的原型(<code>sonFn.prototype</code>)上，它会将父类通过<code>this</code>声明的属性也在赋值到<code>sonFn.prototype</code>上。</p></li></ol> \"),_vm._ssrNode(\"<blockquote>\",\"</blockquote>\",[_vm._ssrNode(\"<p>\",\"</p>\",[_vm._ssrNode(\"值得一提的是：很多博客中说，引用类型的属性被所有实例共享，通常会用数组来举例，实际上数组以及其他父类通过<code>this</code>声明的属性也只是通过\"),_vm._ssrNode(\"<a href=\\\"https://juejin.im/post/5d622f14f265da03a1486408#heading-11\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">\",\"</a>\",[_vm._ssrNode(\"原型链查找\"),_c('OutboundLink')],2),_vm._ssrNode(\"去获取子类实例的原型(<code>sonFn.prototype</code>)上的值。\")],2)]),_vm._ssrNode(\" <ol start=\\\"2\\\"><li>创建子类实例时，无法向父类构造函数传参，不够灵活。</li></ol> <p>这种模式父类的属性、方法一开始就是定义好的，无法向父类传参，不够灵活。</p> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code>sonFn<span class=\\\"token punctuation\\\">.</span>prototype <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">fatherFn</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br></div></div><h3 id=\\\"借用构造函数继承-call\\\"><a href=\\\"#借用构造函数继承-call\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 借用构造函数继承(call)</h3> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">fatherFn</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token operator\\\">...</span>arr<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>some <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">'父类的this属性'</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>params <span class=\\\"token operator\\\">=</span> arr <span class=\\\"token comment\\\">// 父类的参数</span>\\n<span class=\\\"token punctuation\\\">}</span>\\nfatherFn<span class=\\\"token punctuation\\\">.</span>prototype<span class=\\\"token punctuation\\\">.</span>fatherFnSome <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">'父类原型对象的属性或者方法'</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">sonFn</span><span class=\\\"token punctuation\\\">(</span>fatherParams<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token operator\\\">...</span>sonParams<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  fatherFn<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">call</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token operator\\\">...</span>fatherParams<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 核心步骤: 将fatherFn的this指向sonFn的this对象上</span>\\n  <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>obkoro1 <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">'子类的this属性'</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>sonParams <span class=\\\"token operator\\\">=</span> sonParams<span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 子类的参数</span>\\n<span class=\\\"token punctuation\\\">}</span>\\nsonFn<span class=\\\"token punctuation\\\">.</span>prototype<span class=\\\"token punctuation\\\">.</span>sonFnSome <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">'子类原型对象的属性或者方法'</span>\\n<span class=\\\"token keyword\\\">let</span> fatherParamsArr <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token string\\\">'父类的参数1'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'父类的参数2'</span><span class=\\\"token punctuation\\\">]</span>\\n<span class=\\\"token keyword\\\">let</span> sonParamsArr <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token string\\\">'子类的参数1'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'子类的参数2'</span><span class=\\\"token punctuation\\\">]</span>\\n<span class=\\\"token keyword\\\">const</span> sonFnInstance <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">sonFn</span><span class=\\\"token punctuation\\\">(</span>fatherParamsArr<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token operator\\\">...</span>sonParamsArr<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 实例化子类</span>\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'借用构造函数子类实例'</span><span class=\\\"token punctuation\\\">,</span> sonFnInstance<span class=\\\"token punctuation\\\">)</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br><span class=\\\"line-number\\\">5</span><br><span class=\\\"line-number\\\">6</span><br><span class=\\\"line-number\\\">7</span><br><span class=\\\"line-number\\\">8</span><br><span class=\\\"line-number\\\">9</span><br><span class=\\\"line-number\\\">10</span><br><span class=\\\"line-number\\\">11</span><br><span class=\\\"line-number\\\">12</span><br><span class=\\\"line-number\\\">13</span><br><span class=\\\"line-number\\\">14</span><br><span class=\\\"line-number\\\">15</span><br></div></div><h4 id=\\\"借用构造函数继承的子类实例\\\"><a href=\\\"#借用构造函数继承的子类实例\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 借用构造函数继承的子类实例</h4> <p><img src=\\\"/img/remote/1460000020462551?w=852&h=360\\\" alt=\\\"借用构造函数继承的子类实例\\\"></p> <h4 id=\\\"借用构造函数继承做了什么？\\\"><a href=\\\"#借用构造函数继承做了什么？\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 借用构造函数继承做了什么？</h4> <p>声明类，组织参数等，只是辅助的上下文代码，核心是借用构造函数使用<code>call</code>做了什么：</p> <p><strong>一经调用<code>call/apply</code>它们就会立即执行函数，并在函数执行时改变函数的<code>this</code>指向</strong></p> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code>fatherFn<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">call</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token operator\\\">...</span>fatherParams<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> \\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br></div></div><ol><li>在子类中使用<code>call</code>调用父类，<code>fatherFn</code>将会被立即执行，并且将<code>fatherFn</code>函数的this指向<code>sonFn</code>的<code>this</code>。</li> <li>因为函数执行了，所以<code>fatherFn</code>使用this声明的函数都会被<strong>声明到<code>sonFn</code>的<code>this</code>对象</strong>下。</li> <li>实例化子类，this将指向<code>new</code>期间创建的新对象，返回该新对象。</li> <li>对<code>fatherFn.prototype</code>没有任何操作，无法继承。</li></ol> <p>该对象的属性为：子类和父类声明的<code>this</code>属性/方法，它的原型是</p> \"),_vm._ssrNode(\"<p>\",\"</p>\",[_vm._ssrNode(\"PS: 关于call/apply/bind的更多细节，推荐查看我的博客：\"),_vm._ssrNode(\"<a href=\\\"https://juejin.im/post/5d469e0851882544b85c32ef\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">\",\"</a>\",[_vm._ssrNode(\"js基础-面试官想知道你有多理解call,apply,bind？[不看后悔系列]\"),_c('OutboundLink')],2)],2),_vm._ssrNode(\" <h4 id=\\\"借用构造函数继承的优缺点\\\"><a href=\\\"#借用构造函数继承的优缺点\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 借用构造函数继承的优缺点</h4> <p>优点：</p> <ol><li>可以向父类传递参数</li> <li>解决了原型链继承中：父类属性使用<code>this</code>声明的属性会在所有实例共享的问题。</li></ol> <p>缺点：</p> <ol><li>只能继承父类通过<code>this</code>声明的属性/方法，不能继承父类<code>prototype</code>上的属性/方法。</li> <li>父类方法无法复用：因为无法继承父类的<code>prototype</code>，所以每次子类实例化都要执行父类函数，重新声明父类<code>this</code>里所定义的方法，因此方法无法复用。</li></ol> <h3 id=\\\"组合继承-call-new\\\"><a href=\\\"#组合继承-call-new\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 组合继承(call+new)</h3> <blockquote><p><strong>原理</strong>：使用原型链继承(<code>new</code>)将<code>this</code>和<code>prototype</code>声明的属性/方法继承至子类的<code>prototype</code>上，使用借用构造函数来继承父类通过<code>this</code>声明属性和方法至子类实例的属性上。</p></blockquote> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">fatherFn</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token operator\\\">...</span>arr<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>some <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">'父类的this属性'</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>params <span class=\\\"token operator\\\">=</span> arr <span class=\\\"token comment\\\">// 父类的参数</span>\\n<span class=\\\"token punctuation\\\">}</span>\\nfatherFn<span class=\\\"token punctuation\\\">.</span>prototype<span class=\\\"token punctuation\\\">.</span>fatherFnSome <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">'父类原型对象的属性或者方法'</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">sonFn</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  fatherFn<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">call</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'借用构造继承'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'第二次调用'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 借用构造继承: 继承父类通过this声明属性和方法至子类实例的属性上</span>\\n  <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>obkoro1 <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">'子类的this属性'</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\nsonFn<span class=\\\"token punctuation\\\">.</span>prototype <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">fatherFn</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'原型链继承'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'第一次调用'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 原型链继承: 将`this`和`prototype`声明的属性/方法继承至子类的`prototype`上</span>\\nsonFn<span class=\\\"token punctuation\\\">.</span>prototype<span class=\\\"token punctuation\\\">.</span>sonFnSome <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">'子类原型对象的属性或者方法'</span>\\n<span class=\\\"token keyword\\\">const</span> sonFnInstance <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">sonFn</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'组合继承子类实例'</span><span class=\\\"token punctuation\\\">,</span> sonFnInstance<span class=\\\"token punctuation\\\">)</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br><span class=\\\"line-number\\\">5</span><br><span class=\\\"line-number\\\">6</span><br><span class=\\\"line-number\\\">7</span><br><span class=\\\"line-number\\\">8</span><br><span class=\\\"line-number\\\">9</span><br><span class=\\\"line-number\\\">10</span><br><span class=\\\"line-number\\\">11</span><br><span class=\\\"line-number\\\">12</span><br><span class=\\\"line-number\\\">13</span><br></div></div><h4 id=\\\"组合继承的子类实例\\\"><a href=\\\"#组合继承的子类实例\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 组合继承的子类实例</h4> <p><img src=\\\"https://github.com/OBKoro1/articleImg_src/blob/master/2019/2019_9_16_inherit_4.png?raw=true\\\" alt=\\\"组合继承的子类实例\\\"></p> <p>从图中可以看到<code>fatherFn</code>通过<code>this</code>声明的属性/方法，在子类实例的属性上，和其原型上都复制了一份，原因在代码中也有注释：</p> <ol><li>原型链继承: 父类通过<code>this</code>和<code>prototype</code>声明的属性/方法继承至子类的<code>prototype</code>上。</li> <li>借用构造继承: 父类通过this声明属性和方法继承至子类实例的属性上。</li></ol> <h4 id=\\\"组合继承的优缺点\\\"><a href=\\\"#组合继承的优缺点\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 组合继承的优缺点</h4> <p>优点：</p> <p>完整继承(又不是不能用)，解决了：</p> <ol><li>父类通过<code>this</code>声明属性/方法被子类实例共享的问题(原型链继承的问题)\\n每次实例化子类将重新初始化父类通过<code>this</code>声明的属性，实例根据原型链查找规则，每次都会</li> <li>父类通过<code>prototype</code>声明的属性/方法无法继承的问题(借用构造函数的问题)。</li></ol> <p>缺点：</p> <ol><li>两次调用父类函数(<code>new fatherFn()</code>和<code>fatherFn.call(this)</code>)，造成一定的性能损耗。</li> <li>因调用两次父类,导致父类通过<code>this</code>声明的属性/方法，生成两份的问题。</li> <li>原型链上下文丢失：子类和父类通过prototype声明的属性/方法都存在于子类的prototype上</li></ol> <h3 id=\\\"原型式继承-object-create\\\"><a href=\\\"#原型式继承-object-create\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 原型式继承(<code>Object.create()</code>)</h3> <h4 id=\\\"继承对象原型-object-create-实现\\\"><a href=\\\"#继承对象原型-object-create-实现\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 继承对象原型-Object.create()实现</h4> <p>以下是<code>Object.create()</code>的模拟实现，使用<code>Object.create()</code>可以达成同样的效果，基本上现在都是使用<code>Object.create()</code>来做对象的原型继承。</p> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">cloneObject</span><span class=\\\"token punctuation\\\">(</span>obj<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">function</span> <span class=\\\"token constant\\\">F</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token constant\\\">F</span><span class=\\\"token punctuation\\\">.</span>prototype <span class=\\\"token operator\\\">=</span> obj<span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 将被继承的对象作为空函数的prototype</span>\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">F</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 返回new期间创建的新对象,此对象的原型为被继承的对象, 通过原型链查找可以拿到被继承对象的属性</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br><span class=\\\"line-number\\\">5</span><br></div></div><p>PS：上面<code>Object.create()</code>实现原理可以记一下，有些公司可能会让你讲一下它的实现原理。</p> <h4 id=\\\"例子：\\\"><a href=\\\"#例子：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 例子：</h4> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">let</span> oldObj <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span> p<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">1</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">let</span> newObj <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">cloneObject</span><span class=\\\"token punctuation\\\">(</span>oldObj<span class=\\\"token punctuation\\\">)</span>\\noldObj<span class=\\\"token punctuation\\\">.</span>p <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">2</span>\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'oldObj newObj'</span><span class=\\\"token punctuation\\\">,</span> oldObj<span class=\\\"token punctuation\\\">,</span> newObj<span class=\\\"token punctuation\\\">)</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br></div></div><p><img src=\\\"/img/remote/1460000020462553?w=477&h=75\\\" alt=\\\"原型式继承\\\"></p> <h4 id=\\\"原型式继承优缺点：\\\"><a href=\\\"#原型式继承优缺点：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 原型式继承优缺点：</h4> <p>优点： 兼容性好，最简单的对象继承。</p> <p>缺点：</p> <ol><li>因为旧对象(<code>oldObj</code>)是实例对象(<code>newObj</code>)的原型，多个实例共享被继承对象的属性，存在篡改的可能。</li> <li>无法传参</li></ol> <h3 id=\\\"寄生式继承-封装继承过程\\\"><a href=\\\"#寄生式继承-封装继承过程\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 寄生式继承(封装继承过程)</h3> <blockquote><p>创建一个<strong>仅用于封装继承过程的函数，该函数在内部以某种方式来增强对象</strong>，最后返回对象。</p></blockquote> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">createAnother</span><span class=\\\"token punctuation\\\">(</span>original<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">var</span> clone <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">cloneObject</span><span class=\\\"token punctuation\\\">(</span>original<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 继承一个对象 返回新函数</span>\\n  <span class=\\\"token comment\\\">// do something 以某种方式来增强对象</span>\\n  clone<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function-variable function\\\">some</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 方法</span>\\n  clone<span class=\\\"token punctuation\\\">.</span>obkoro1 <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">'封装继承过程'</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 属性</span>\\n  <span class=\\\"token keyword\\\">return</span> clone<span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 返回这个对象</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br><span class=\\\"line-number\\\">5</span><br><span class=\\\"line-number\\\">6</span><br><span class=\\\"line-number\\\">7</span><br></div></div><p>使用场景：专门为对象来做某种固定方式的增强。</p> <h3 id=\\\"寄生组合式继承-call-寄生式封装\\\"><a href=\\\"#寄生组合式继承-call-寄生式封装\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 寄生组合式继承(call+寄生式封装)</h3> <h4 id=\\\"寄生组合式继承原理：\\\"><a href=\\\"#寄生组合式继承原理：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 寄生组合式继承原理：</h4> <ol><li>使用借用构造函数(<code>call</code>)来<strong>继承父类this声明的属性/方法</strong></li> <li>通过寄生式封装函数设置父类prototype为子类prototype的原型来继<strong>承父类的prototype声明的属性/方法</strong>。</li></ol> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">fatherFn</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token operator\\\">...</span>arr<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>some <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">'父类的this属性'</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>params <span class=\\\"token operator\\\">=</span> arr <span class=\\\"token comment\\\">// 父类的参数</span>\\n<span class=\\\"token punctuation\\\">}</span>\\nfatherFn<span class=\\\"token punctuation\\\">.</span>prototype<span class=\\\"token punctuation\\\">.</span>fatherFnSome <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">'父类原型对象的属性或者方法'</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">sonFn</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  fatherFn<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">call</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'借用构造继承'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 核心1 借用构造继承: 继承父类通过this声明属性和方法至子类实例的属性上</span>\\n  <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>obkoro1 <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">'子类的this属性'</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token comment\\\">// 核心2 寄生式继承：封装了son.prototype对象原型式继承father.prototype的过程，并且增强了传入的对象。</span>\\n<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">inheritPrototype</span><span class=\\\"token punctuation\\\">(</span>son<span class=\\\"token punctuation\\\">,</span> father<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">const</span> fatherFnPrototype <span class=\\\"token operator\\\">=</span> Object<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">create</span><span class=\\\"token punctuation\\\">(</span>father<span class=\\\"token punctuation\\\">.</span>prototype<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 原型式继承：浅拷贝father.prototype对象 father.prototype为新对象的原型</span>\\n  son<span class=\\\"token punctuation\\\">.</span>prototype <span class=\\\"token operator\\\">=</span> fatherFnPrototype<span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 设置father.prototype为son.prototype的原型</span>\\n  son<span class=\\\"token punctuation\\\">.</span>prototype<span class=\\\"token punctuation\\\">.</span>constructor <span class=\\\"token operator\\\">=</span> son<span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 修正constructor 指向</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token function\\\">inheritPrototype</span><span class=\\\"token punctuation\\\">(</span>sonFn<span class=\\\"token punctuation\\\">,</span> fatherFn<span class=\\\"token punctuation\\\">)</span>\\nsonFn<span class=\\\"token punctuation\\\">.</span>prototype<span class=\\\"token punctuation\\\">.</span>sonFnSome <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">'子类原型对象的属性或者方法'</span>\\n<span class=\\\"token keyword\\\">const</span> sonFnInstance <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">sonFn</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'寄生组合式继承子类实例'</span><span class=\\\"token punctuation\\\">,</span> sonFnInstance<span class=\\\"token punctuation\\\">)</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br><span class=\\\"line-number\\\">5</span><br><span class=\\\"line-number\\\">6</span><br><span class=\\\"line-number\\\">7</span><br><span class=\\\"line-number\\\">8</span><br><span class=\\\"line-number\\\">9</span><br><span class=\\\"line-number\\\">10</span><br><span class=\\\"line-number\\\">11</span><br><span class=\\\"line-number\\\">12</span><br><span class=\\\"line-number\\\">13</span><br><span class=\\\"line-number\\\">14</span><br><span class=\\\"line-number\\\">15</span><br><span class=\\\"line-number\\\">16</span><br><span class=\\\"line-number\\\">17</span><br><span class=\\\"line-number\\\">18</span><br><span class=\\\"line-number\\\">19</span><br></div></div><h4 id=\\\"寄生组合式继承子类实例\\\"><a href=\\\"#寄生组合式继承子类实例\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 寄生组合式继承子类实例</h4> <p><img src=\\\"https://github.com/OBKoro1/articleImg_src/blob/master/2019/2019_9_16_inherit_6.png?raw=true\\\" alt=\\\"寄生组合式继承子类实例\\\"></p> <h4 id=\\\"寄生组合式继承是最成熟的继承方法：\\\"><a href=\\\"#寄生组合式继承是最成熟的继承方法：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 寄生组合式继承是最成熟的继承方法：</h4> <blockquote><p>寄生组合式继承是最成熟的继承方法, 也是现在最常用的继承方法，众多JS库采用的继承方案也是它。</p></blockquote> <p>寄生组合式继承相对于组合继承有如下优点：</p> <ol><li><p>只调用一次父类<code>fatherFn</code>构造函数。</p></li> <li><p>避免在子类prototype上创建不必要多余的属性。</p></li> <li><p>使用原型式继承父类的prototype，保持了原型链上下文不变。</p> <p>子类的prototype只有子类通过prototype声明的属性/方法和父类prototype上的属性/方法泾渭分明。</p></li></ol> <h3 id=\\\"es6-extends继承：\\\"><a href=\\\"#es6-extends继承：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> ES6 extends继承：</h3> <blockquote><p>ES6继承的原理跟寄生组合式继承是一样的。</p></blockquote> <p>ES6 <code>extends</code>核心代码：</p> <p>这段代码是通过<a href=\\\"%5Bhttps://www.babeljs.cn/repl%5D(https://www.babeljs.cn/repl)\\\">babel在线编译</a>成es5, 用于子类prototype原型式继承父类<code>prototype</code>的属性/方法。</p> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token comment\\\">// 寄生式继承 封装继承过程</span>\\n<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">_inherits</span><span class=\\\"token punctuation\\\">(</span>son<span class=\\\"token punctuation\\\">,</span> father<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token comment\\\">// 原型式继承: 设置father.prototype为son.prototype的原型 用于继承father.prototype的属性/方法</span>\\n  son<span class=\\\"token punctuation\\\">.</span>prototype <span class=\\\"token operator\\\">=</span> Object<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">create</span><span class=\\\"token punctuation\\\">(</span>father <span class=\\\"token operator\\\">&amp;&amp;</span> father<span class=\\\"token punctuation\\\">.</span>prototype<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  son<span class=\\\"token punctuation\\\">.</span>prototype<span class=\\\"token punctuation\\\">.</span>constructor <span class=\\\"token operator\\\">=</span> son<span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 修正constructor 指向</span>\\n  <span class=\\\"token comment\\\">// 将父类设置为子类的原型 用于继承父类的静态属性/方法(father.some)</span>\\n  <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>father<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    Object<span class=\\\"token punctuation\\\">.</span>setPrototypeOf\\n      <span class=\\\"token operator\\\">?</span> Object<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">setPrototypeOf</span><span class=\\\"token punctuation\\\">(</span>son<span class=\\\"token punctuation\\\">,</span> father<span class=\\\"token punctuation\\\">)</span>\\n      <span class=\\\"token punctuation\\\">:</span> son<span class=\\\"token punctuation\\\">.</span>__proto__ <span class=\\\"token operator\\\">=</span> father<span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br><span class=\\\"line-number\\\">5</span><br><span class=\\\"line-number\\\">6</span><br><span class=\\\"line-number\\\">7</span><br><span class=\\\"line-number\\\">8</span><br><span class=\\\"line-number\\\">9</span><br><span class=\\\"line-number\\\">10</span><br><span class=\\\"line-number\\\">11</span><br><span class=\\\"line-number\\\">12</span><br></div></div><p>另外子类是通过借用构造函数继承(<code>call</code>)来继承父类通过<code>this</code>声明的属性/方法，也跟寄生组合式继承一样。</p> <h4 id=\\\"es5继承与es6继承的区别：\\\"><a href=\\\"#es5继承与es6继承的区别：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> ES5继承与ES6继承的区别：</h4> \"),_vm._ssrNode(\"<blockquote>\",\"</blockquote>\",[_vm._ssrNode(\"<p>\",\"</p>\",[_vm._ssrNode(\"本段摘自\"),_vm._ssrNode(\"<a href=\\\"http://es6.ruanyifeng.com/#docs/class-extends#%E7%AE%80%E4%BB%8B\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">\",\"</a>\",[_vm._ssrNode(\"阮一峰-es6入门文档\"),_c('OutboundLink')],2)],2)]),_vm._ssrNode(\" <ul><li><p>ES5的继承实质上是<strong>先创建子类的实例对象，再将父类的方法添加到this上</strong>。</p></li> <li><p>ES6的继承是<strong>先创建父类的实例对象this，再用子类的构造函数修改this</strong>。</p> <p>因为子类没有自己的this对象，所以必须先调用父类的super()方法。</p></li></ul> <h2 id=\\\"扩展：\\\"><a href=\\\"#扩展：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 扩展：</h2> <h3 id=\\\"为什么要修正constructor指向？\\\"><a href=\\\"#为什么要修正constructor指向？\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 为什么要修正constructor指向？</h3> <p>在寄生组合式继承中有一段如下一段修正constructor 指向的代码，很多人对于它的作用以及为什么要修正它不太清楚。</p> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code>son<span class=\\\"token punctuation\\\">.</span>prototype<span class=\\\"token punctuation\\\">.</span>constructor <span class=\\\"token operator\\\">=</span> son<span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 修正constructor 指向</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br></div></div><h4 id=\\\"constructor的作用\\\"><a href=\\\"#constructor的作用\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> constructor的作用</h4> \"),_vm._ssrNode(\"<p>\",\"</p>\",[_vm._ssrNode(\"<a href=\\\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/constructor\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">\",\"</a>\",[_vm._ssrNode(\"MDN\"),_c('OutboundLink')],2),_vm._ssrNode(\"的定义：<strong>返回创建实例对象的<code>Object</code>构造函数的引用</strong>。\")],2),_vm._ssrNode(\" <p>即返回实例对象的构造函数的引用，例如：</p> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">let</span> instance <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">sonFn</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\ninstance<span class=\\\"token punctuation\\\">.</span>constructor <span class=\\\"token comment\\\">// sonFn函数</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br></div></div><h4 id=\\\"constructor的应用场景：\\\"><a href=\\\"#constructor的应用场景：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> <code>constructor</code>的应用场景：</h4> <p><strong>当我们只有实例对象没有构造函数的引用时</strong>：</p> <p>某些场景下，我们对实例对象经过多轮导入导出，我们不知道实例是从哪个函数中构造出来或者追踪实例的构造函数，较为艰难。</p> <p>这个时候就可以通过实例对象的<code>constructor</code>属性来得到构造函数的引用：</p> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">let</span> instance <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">sonFn</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token comment\\\">// 实例化子类</span>\\n<span class=\\\"token keyword\\\">export</span> instance<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token comment\\\">// 多轮导入+导出，导致sonFn追踪非常麻烦，或者不想在文件中再引入sonFn</span>\\n<span class=\\\"token keyword\\\">let</span>  fn <span class=\\\"token operator\\\">=</span> instance<span class=\\\"token punctuation\\\">.</span>constructor\\n<span class=\\\"token comment\\\">// do something： new fn() / fn.prototype / fn.length / fn.arguments等等</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br><span class=\\\"line-number\\\">5</span><br></div></div><h4 id=\\\"保持constructor指向的一致性：\\\"><a href=\\\"#保持constructor指向的一致性：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 保持<code>constructor</code>指向的一致性：</h4> <p>因此每次重写函数的prototype都应该修正一下<code>constructor</code>的指向，以保持读取<code>constructor</code>行为的一致性。</p> <h3 id=\\\"小结\\\"><a href=\\\"#小结\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 小结</h3> <p>继承也是前端的高频面试题，了解本文中继承方法的优缺点，有助于更深刻的理解JS继承机制。除了组合继承和寄生式继承都是由其他方法组合而成的，分块理解会对它们理解的更深刻。</p> <p>建议多看几遍本文，建个<code>html</code>文件试试文中的例子，两相结合更佳！</p> \"),_vm._ssrNode(\"<p>\",\"</p>\",[_vm._ssrNode(\"对prototype还不是很理解的同学，可以再看看：\"),_vm._ssrNode(\"<a href=\\\"https://juejin.im/post/5d622f14f265da03a1486408\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">\",\"</a>\",[_vm._ssrNode(\"JS基础-函数、对象和原型、原型链的关系\"),_c('OutboundLink')],2)],2),_vm._ssrNode(\" \"),_vm._ssrNode(\"<h4 id=\\\"觉得我的博客对你有帮助的话，就给我点个star吧！\\\">\",\"</h4>\",[_vm._ssrNode(\"<a href=\\\"#觉得我的博客对你有帮助的话，就给我点个star吧！\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 觉得我的博客对你有帮助的话，就给我点个\"),_vm._ssrNode(\"<a href=\\\"https://github.com/OBKoro1/web_accumulate\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">\",\"</a>\",[_vm._ssrNode(\"Star\"),_c('OutboundLink')],2),_vm._ssrNode(\"吧！\")],2),_vm._ssrNode(\" \"),_vm._ssrNode(\"<p>\",\"</p>\",[_vm._ssrNode(\"<a href=\\\"http://obkoro1.com/web_accumulate/\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">\",\"</a>\",[_vm._ssrNode(\"前端进阶积累\"),_c('OutboundLink')],2),_vm._ssrNode(\"、\"),_vm._ssrNode(\"<a href=\\\"https://user-gold-cdn.xitu.io/2018/5/1/1631b6f52f7e7015?w=344&h=344&f=jpeg&s=8317\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">\",\"</a>\",[_vm._ssrNode(\"公众号\"),_c('OutboundLink')],2),_vm._ssrNode(\"、\"),_vm._ssrNode(\"<a href=\\\"https://github.com/OBKoro1\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">\",\"</a>\",[_vm._ssrNode(\"GitHub\"),_c('OutboundLink')],2),_vm._ssrNode(\"、wx:OBkoro1、邮箱：obkoro1@foxmail.com\")],2),_vm._ssrNode(\" <p>以上2019/9/22</p> \"),_vm._ssrNode(\"<p>\",\"</p>\",[_vm._ssrNode(\"作者：\"),_vm._ssrNode(\"<a href=\\\"https://github.com/OBKoro1\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">\",\"</a>\",[_vm._ssrNode(\"OBKoro1\"),_c('OutboundLink')],2)],2),_vm._ssrNode(\" <p>参考资料：</p> <p>JS高级程序设计(红宝书)6.3继承</p> \"),_vm._ssrNode(\"<p>\",\"</p>\",[_vm._ssrNode(\"<a href=\\\"https://juejin.im/post/5bcb2e295188255c55472db0\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">\",\"</a>\",[_vm._ssrNode(\"JavaScript常用八种继承方案\"),_c('OutboundLink')],2)]),_vm._ssrNode(\" \"),_vm._ssrNode(\"<h3 id=\\\"点个star支持我一下\\\">\",\"</h3>\",[_vm._ssrNode(\"<a href=\\\"#点个star支持我一下\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 点个\"),_vm._ssrNode(\"<a href=\\\"https://github.com/OBKoro1/web_accumulate\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">\",\"</a>\",[_vm._ssrNode(\"Star\"),_c('OutboundLink')],2),_vm._ssrNode(\"支持我一下~\")],2),_vm._ssrNode(\" \"),_c('comment-comment')],2)}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }"]}