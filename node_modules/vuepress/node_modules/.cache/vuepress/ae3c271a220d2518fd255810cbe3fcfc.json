{"remainingRequest":"/Users/koro/work/web_my/web_accumulate/node_modules/vue-loader/lib/index.js??ref--1-1!/Users/koro/work/web_my/web_accumulate/node_modules/vuepress/lib/webpack/markdownLoader.js??ref--1-2!/Users/koro/work/web_my/web_accumulate/docs/accumulate/ES6/论普通函数和箭头函数的区别以及箭头函数的注意事项和不适用场景.md?vue&type=template&id=5e2b52b4&","dependencies":[{"path":"/Users/koro/work/web_my/web_accumulate/docs/accumulate/ES6/论普通函数和箭头函数的区别以及箭头函数的注意事项和不适用场景.md","mtime":1636107879468},{"path":"/Users/koro/work/web_my/web_accumulate/node_modules/cache-loader/dist/cjs.js","mtime":1557296864520},{"path":"/Users/koro/work/web_my/web_accumulate/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1557296867191},{"path":"/Users/koro/work/web_my/web_accumulate/node_modules/cache-loader/dist/cjs.js","mtime":1557296864520},{"path":"/Users/koro/work/web_my/web_accumulate/node_modules/vue-loader/lib/index.js","mtime":1557296867190},{"path":"/Users/koro/work/web_my/web_accumulate/node_modules/vuepress/lib/webpack/markdownLoader.js","mtime":1557296867284}],"contextDependencies":[],"result":["\n<div class=\"content\"><h2 id=\"论普通函数和箭头函数的区别以及箭头函数的注意事项和不适用场景\"><a class=\"header-anchor\" href=\"#论普通函数和箭头函数的区别以及箭头函数的注意事项和不适用场景\" aria-hidden=\"true\">#</a> 论普通函数和箭头函数的区别以及箭头函数的注意事项和不适用场景</h2>\n<p>箭头函数是ES6的API，相信很多人都知道，因为其语法上相对于普通函数更简洁，深受大家的喜爱。就是这种我们日常开发中一直在使用的API，大部分同学却对它的了解程度还是不够深...</p>\n<h2 id=\"普通函数和箭头函数的区别：\"><a class=\"header-anchor\" href=\"#普通函数和箭头函数的区别：\" aria-hidden=\"true\">#</a> 普通函数和箭头函数的区别：</h2>\n<h3 id=\"箭头函数的this指向规则：\"><a class=\"header-anchor\" href=\"#箭头函数的this指向规则：\" aria-hidden=\"true\">#</a> 箭头函数的this指向规则：</h3>\n<h4 id=\"_1-箭头函数没有prototype-原型-，所以箭头函数本身没有this\"><a class=\"header-anchor\" href=\"#_1-箭头函数没有prototype-原型-，所以箭头函数本身没有this\" aria-hidden=\"true\">#</a> 1. 箭头函数没有<code>prototype</code>(原型)，所以箭头函数本身没有this</h4>\n<!--beforebegin--><div class=\"language-js line-numbers-mode\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token keyword\">let</span> <span class=\"token function-variable function\">a</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// undefined</span>\n</code></pre>\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br></div><!--beforeend--></div><!--afterend--><h4 id=\"_2-箭头函数的this指向在定义的时候继承自外层第一个普通函数的this。\"><a class=\"header-anchor\" href=\"#_2-箭头函数的this指向在定义的时候继承自外层第一个普通函数的this。\" aria-hidden=\"true\">#</a> 2. 箭头函数的this指向在定义的时候继承自外层第一个普通函数的this。</h4>\n<p>下面栗子中在一个函数中定义箭头函数，然后在另一个函数中执行箭头函数。</p>\n<!--beforebegin--><div class=\"language-js line-numbers-mode\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token keyword\">let</span> a<span class=\"token punctuation\">,</span>\n  barObj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> msg<span class=\"token punctuation\">:</span> <span class=\"token string\">'bar的this指向'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\nfooObj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> msg<span class=\"token punctuation\">:</span> <span class=\"token string\">'foo的this指向'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\nbar<span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>barObj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 将bar的this指向barObj</span>\nfoo<span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>fooObj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 将foo的this指向fooObj</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">a</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 结果：{ msg: 'bar的this指向' }</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">bar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function-variable function\">a</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'this指向定义的时候外层第一个普通函数'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// </span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 在bar中定义 this继承于bar函数的this指向</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br><span class=\"line-number\">11</span><br><span class=\"line-number\">12</span><br><span class=\"line-number\">13</span><br></div><!--beforeend--></div><!--afterend--><p>从上面栗子中可以得出两点</p>\n<ol>\n<li><strong>箭头函数的this指向定义时所在的外层第一个普通函数，跟使用位置没有关系</strong>。</li>\n<li><strong>被继承的普通函数的this指向改变，箭头函数的this指向会跟着改变</strong></li>\n</ol>\n<h4 id=\"_3-不能直接修改箭头函数的this指向\"><a class=\"header-anchor\" href=\"#_3-不能直接修改箭头函数的this指向\" aria-hidden=\"true\">#</a> 3. 不能直接修改箭头函数的this指向</h4>\n<p>上个栗子中的foo函数修改一下，尝试直接修改箭头函数的this指向。</p>\n<!--beforebegin--><div class=\"language-js line-numbers-mode\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token keyword\">let</span> fnObj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> msg<span class=\"token punctuation\">:</span> <span class=\"token string\">'尝试直接修改箭头函数的this指向'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  a<span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>fnObj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 结果：{ msg: 'bar的this指向' }</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br></div><!--beforeend--></div><!--afterend--><p>很明显，call显示绑定this指向失败了，包括aaply、bind都一样。</p>\n<blockquote>\n<p>它们(call、aaply、bind)会默认忽略第一个参数，但是可以正常传参。</p>\n</blockquote>\n<p>然后我又通过隐式绑定来尝试同样也失败了，new 调用会报错，这个稍后再说。</p>\n<p>SO，<strong>箭头函数不能直接修改它的this指向</strong>。</p>\n<p>幸运的是，我们可以通过间接的形式来修改箭头函数的指向：</p>\n<p><strong>去修改被继承的普通函数的this指向，然后箭头函数的this指向也会跟着改变</strong>，这在上一个栗子中有演示。</p>\n<!--beforebegin--><div class=\"language-js line-numbers-mode\"><!--afterbegin--><pre v-pre class=\"language-js\"><code>bar<span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>barObj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 将bar普通函数的this指向barObj 然后内部的箭头函数也会指向barObj</span>\n</code></pre>\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br></div><!--beforeend--></div><!--afterend--><h4 id=\"_4-箭头函数外层没有普通函数，严格模式和非严格模式下它的this都会指向window-全局对象\"><a class=\"header-anchor\" href=\"#_4-箭头函数外层没有普通函数，严格模式和非严格模式下它的this都会指向window-全局对象\" aria-hidden=\"true\">#</a> 4. 箭头函数外层没有普通函数，严格模式和非严格模式下它的this都会指向<code>window</code>(全局对象)</h4>\n<blockquote>\n<p>唔，这个问题实际上是面试官提出来的，当时我认为的箭头函数规则就是：箭头函数的this指向继承自外层第一个普通函数的this，现在看来真是不严谨(少说一个定义的时候)，要是面试官问我：定义和执行不在同一个普通函数中，它又指向哪里，肯定歇菜...</p>\n</blockquote>\n<p>既然箭头函数的this指向在定义的时候继承自外层第一个普通函数的this，那么：</p>\n<p><strong>当箭头函数外层没有普通函数，它的this会指向哪里</strong>？</p>\n<p>这里跟我之前写的<a href=\"https://juejin.im/post/5b3715def265da59af40a630#heading-3\" target=\"_blank\" rel=\"noopener noreferrer\">this绑定规则<OutboundLink/></a>不太一样(不懂的可以点进去看一下),普通函数的默认绑定规则是：</p>\n<p>在非严格模式下，默认绑定的this指向全局对象，严格模式下this指向undefined</p>\n<p><strong>如果箭头函数外层没有普通函数继承，它this指向的规则</strong>：</p>\n<p>经过测试，箭头函数在全局作用域下，<strong>严格模式和非严格模式下它的this都会指向<code>window</code>(全局对象)</strong>。</p>\n<p>Tip：测试的时候发现<strong>严格模式在中途声明无效，必须在全局/函数的开头声明才会生效</strong>：</p>\n<!--beforebegin--><div class=\"language-js line-numbers-mode\"><!--afterbegin--><pre v-pre class=\"language-js\"><code>a <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token string\">'use strict'</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 严格模式无效 必须在一开始就声明严格模式</span>\nb <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 不报错</span>\n</code></pre>\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br></div><!--beforeend--></div><!--afterend--><h3 id=\"箭头函数的\"><a class=\"header-anchor\" href=\"#箭头函数的\" aria-hidden=\"true\">#</a> 箭头函数的</h3>\n<h3 id=\"箭头函数的arguments\"><a class=\"header-anchor\" href=\"#箭头函数的arguments\" aria-hidden=\"true\">#</a> 箭头函数的arguments</h3>\n<h4 id=\"箭头函数的this指向全局，使用arguments会报未声明的错误\"><a class=\"header-anchor\" href=\"#箭头函数的this指向全局，使用arguments会报未声明的错误\" aria-hidden=\"true\">#</a> 箭头函数的this指向全局，使用arguments会报未声明的错误</h4>\n<p>如果箭头函数的this指向<code>window</code>(全局对象)使用<code>arguments</code>会报错，未声明<code>arguments</code>。</p>\n<!--beforebegin--><div class=\"language-js line-numbers-mode\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token keyword\">let</span> <span class=\"token function-variable function\">b</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arguments<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">b</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Uncaught ReferenceError: arguments is not defined</span>\n</code></pre>\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br></div><!--beforeend--></div><!--afterend--><p>PS：如果你声明了一个全局变量为<code>arguments</code>，那就不会报错了，但是你为什么要这么做呢？</p>\n<h4 id=\"箭头函数的this指向普通函数时-它的argumens继承于该普通函数\"><a class=\"header-anchor\" href=\"#箭头函数的this指向普通函数时-它的argumens继承于该普通函数\" aria-hidden=\"true\">#</a> 箭头函数的this指向普通函数时,它的<code>argumens</code>继承于该普通函数</h4>\n<p>上面是第一种情况：箭头函数的this指向全局对象，会报arguments未声明的错误。</p>\n<p>第二种情况是：箭头函数的this如果指向普通函数,它的<code>argumens</code>继承于该普通函数。</p>\n<!--beforebegin--><div class=\"language-js line-numbers-mode\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">bar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arguments<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ['外层第二个普通函数的参数']</span>\n  <span class=\"token function\">bb</span><span class=\"token punctuation\">(</span><span class=\"token string\">'外层第一个普通函数的参数'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">function</span> <span class=\"token function\">bb</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arguments<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [\"外层第一个普通函数的参数\"]</span>\n    <span class=\"token keyword\">let</span> <span class=\"token function-variable function\">a</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arguments<span class=\"token punctuation\">,</span> <span class=\"token string\">'arguments继承this指向的那个普通函数'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [\"外层第一个普通函数的参数\"]</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">a</span><span class=\"token punctuation\">(</span><span class=\"token string\">'箭头函数的参数'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// this指向bb</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">bar</span><span class=\"token punctuation\">(</span><span class=\"token string\">'外层第二个普通函数的参数'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br><span class=\"line-number\">11</span><br><span class=\"line-number\">12</span><br></div><!--beforeend--></div><!--afterend--><p>那么应该如何来获取箭头函数不定数量的参数呢？答案是：ES6的rest参数（<code>...</code>扩展符）</p>\n<h4 id=\"rest参数获取函数的多余参数\"><a class=\"header-anchor\" href=\"#rest参数获取函数的多余参数\" aria-hidden=\"true\">#</a> rest参数获取函数的多余参数</h4>\n<p>这是ES6的API，用于获取函数不定数量的参数数组，这个API是用来替代<code>arguments</code>的，API用法如下：</p>\n<!--beforebegin--><div class=\"language-js line-numbers-mode\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token keyword\">let</span> <span class=\"token function-variable function\">a</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>first<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>abc<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>first<span class=\"token punctuation\">,</span> abc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 1 [2, 3, 4]</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">a</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br></div><!--beforeend--></div><!--afterend--><p>上面的栗子展示了，获取函数除第一个确定的参数，以及用一个变量接收其他剩余参数的示例。</p>\n<p>也可以直接接收函数的所有参数，rest参数的用法相对于<code>arguments</code>的优点：</p>\n<ol>\n<li>\n<p>箭头函数和普通函数都可以使用。</p>\n</li>\n<li>\n<p>更加灵活，接收参数的数量完全自定义。</p>\n</li>\n<li>\n<p>可读性更好</p>\n<p>参数都是在函数括号中定义的，不会突然出现一个<code>arguments</code>，以前刚见到的时候，真的好奇怪了！</p>\n</li>\n<li>\n<p>rest是一个真正的数组，可以使用数组的API。</p>\n<p>因为<code>arguments</code>是一个类数组的对象，有些人以为它是真正的数组，所以会出现以下场景：</p>\n<!--beforebegin--><div class=\"language-js line-numbers-mode\"><!--afterbegin--><pre v-pre class=\"language-js\"><code>arguments<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// arguments.push is not a function</span>\n</code></pre>\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br></div><!--beforeend--></div><!--afterend--><p>如上，如果我们需要使用数组的API，需要使用扩展符/Array.from来将它转换成真正的数组:</p>\n<!--beforebegin--><div class=\"language-js line-numbers-mode\"><!--afterbegin--><pre v-pre class=\"language-js\"><code>arguments <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span>arguments<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> 或者 ：arguments <span class=\"token operator\">=</span> Array<span class=\"token punctuation\">.</span><span class=\"token keyword\">from</span><span class=\"token punctuation\">(</span>arguments<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br></div><!--beforeend--></div><!--afterend--></li>\n</ol>\n<p><strong>rest参数有两点需要注意</strong>：</p>\n<ol>\n<li>\n<p>rest必须是函数的最后一位参数：</p>\n<!--beforebegin--><div class=\"language-js line-numbers-mode\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token keyword\">let</span> <span class=\"token function-variable function\">a</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>first<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>rest<span class=\"token punctuation\">,</span> three<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>first<span class=\"token punctuation\">,</span> rest<span class=\"token punctuation\">,</span>three<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 报错：Rest parameter must be last formal parameter</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">a</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br></div><!--beforeend--></div><!--afterend--></li>\n<li>\n<p>函数的length属性，不包括 rest 参数</p>\n<!--beforebegin--><div class=\"language-js line-numbers-mode\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>a<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>length  <span class=\"token comment\">// 0</span>\n<span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>b<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>length  <span class=\"token comment\">// 1</span>\n</code></pre>\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br></div><!--beforeend--></div><!--afterend--></li>\n</ol>\n<p>扩展运算符还可以用于数组，这里是阮一峰老师的<a href=\"http://es6.ruanyifeng.com/#docs/array#%E6%89%A9%E5%B1%95%E8%BF%90%E7%AE%97%E7%AC%A6\" target=\"_blank\" rel=\"noopener noreferrer\">文档<OutboundLink/></a></p>\n<p>PS：感觉这里写多了，但比较喜欢把一个知识点讲清楚...</p>\n<h4 id=\"使用new调用箭头函数会报错\"><a class=\"header-anchor\" href=\"#使用new调用箭头函数会报错\" aria-hidden=\"true\">#</a> 使用<code>new</code>调用箭头函数会报错</h4>\n<p>无论箭头函数的thsi指向哪里，使用<code>new</code>调用箭头函数都会报错，因为箭头函数没有<code>constructor</code></p>\n<!--beforebegin--><div class=\"language-js line-numbers-mode\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token keyword\">let</span> <span class=\"token function-variable function\">a</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> b <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span>  <span class=\"token class-name\">a</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// a is not a constructor</span>\n</code></pre>\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br></div><!--beforeend--></div><!--afterend--><h4 id=\"箭头函数不支持new-target：\"><a class=\"header-anchor\" href=\"#箭头函数不支持new-target：\" aria-hidden=\"true\">#</a> 箭头函数不支持<code>new.target</code>：</h4>\n<p><code>new.target</code>是ES6新引入的属性，普通函数如果通过<code>new</code>调用，<code>new.target</code>会返回该函数的引用。</p>\n<p>此属性主要：用于确定构造函数是否为new调用的。</p>\n<ol>\n<li>\n<p>箭头函数的this指向全局对象，在箭头函数中使用箭头函数会报错</p>\n<!--beforebegin--><div class=\"language-js line-numbers-mode\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token keyword\">let</span> <span class=\"token function-variable function\">a</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span><span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 报错：new.target 不允许在这里使用</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">a</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br></div><!--beforeend--></div><!--afterend--></li>\n<li>\n<p>箭头函数的this指向普通函数，它的new.target就是指向该普通函数的引用。</p>\n<!--beforebegin--><div class=\"language-js line-numbers-mode\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token keyword\">new</span> <span class=\"token class-name\">bb</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">bb</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> <span class=\"token function-variable function\">a</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span><span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 指向函数bb：function bb(){...}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">a</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br></div><!--beforeend--></div><!--afterend--></li>\n</ol>\n<p>更多关于<code>new.target</code>可以看一下阮一峰老师关于这部分的<a href=\"http://es6.ruanyifeng.com/?search=new.target&amp;x=0&amp;y=0#docs/class#new-target-%E5%B1%9E%E6%80%A7\" target=\"_blank\" rel=\"noopener noreferrer\">解释<OutboundLink/></a>。</p>\n<h3 id=\"箭头函数不支持重命名函数参数-普通函数的函数参数支持重命名\"><a class=\"header-anchor\" href=\"#箭头函数不支持重命名函数参数-普通函数的函数参数支持重命名\" aria-hidden=\"true\">#</a> 箭头函数不支持重命名函数参数,普通函数的函数参数支持重命名</h3>\n<p>如下示例，普通函数的函数参数支持重命名，后面出现的会覆盖前面的，箭头函数会抛出错误：</p>\n<!--beforebegin--><div class=\"language-js line-numbers-mode\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">func1</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> arguments<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 2 [1,2]</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">var</span> <span class=\"token function-variable function\">func2</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span>a<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 报错：在此上下文中不允许重复参数名称</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">func1</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token function\">func2</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br></div><!--beforeend--></div><!--afterend--><h3 id=\"箭头函数相对于普通函数语法更简洁优雅：\"><a class=\"header-anchor\" href=\"#箭头函数相对于普通函数语法更简洁优雅：\" aria-hidden=\"true\">#</a> 箭头函数相对于普通函数语法更简洁优雅：</h3>\n<p>讲道理，语法上的不同，也属与它们两个的区别！</p>\n<ol>\n<li>\n<p>箭头函数都是匿名函数，并且都不用写<code>function</code></p>\n</li>\n<li>\n<p>只有一个参数的时候可以省略括号:</p>\n<!--beforebegin--><div class=\"language-js line-numbers-mode\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token keyword\">var</span> <span class=\"token function-variable function\">f</span> <span class=\"token operator\">=</span> a <span class=\"token operator\">=></span> a<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 传入a 返回a</span>\n</code></pre>\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br></div><!--beforeend--></div><!--afterend--></li>\n<li>\n<p>函数只有一条语句时可以省略<code>{}</code>和<code>return</code></p>\n<!--beforebegin--><div class=\"language-js line-numbers-mode\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token keyword\">var</span> <span class=\"token function-variable function\">f</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">,</span>c<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> a<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 传入a,b,c 返回a</span>\n</code></pre>\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br></div><!--beforeend--></div><!--afterend--></li>\n<li>\n<p>简化回调函数，让你的回调函数更优雅：</p>\n</li>\n</ol>\n<!--beforebegin--><div class=\"language-js line-numbers-mode\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> x <span class=\"token operator\">*</span> x<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 普通函数写法 </span>\n<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">=></span> x <span class=\"token operator\">*</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 箭头函数只需要一行</span>\n</code></pre>\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br></div><!--beforeend--></div><!--afterend--><hr>\n<h2 id=\"箭头函数的注意事项及不适用场景\"><a class=\"header-anchor\" href=\"#箭头函数的注意事项及不适用场景\" aria-hidden=\"true\">#</a> 箭头函数的注意事项及不适用场景</h2>\n<h3 id=\"箭头函数的注意事项\"><a class=\"header-anchor\" href=\"#箭头函数的注意事项\" aria-hidden=\"true\">#</a> 箭头函数的注意事项</h3>\n<ol>\n<li>\n<p>一条语句返回对象字面量，需要加括号，或者直接写成多条语句的<code>return</code>形式，</p>\n<p>否则像func中演示的一样，花括号会被解析为多条语句的花括号，不能正确解析</p>\n</li>\n</ol>\n<!--beforebegin--><div class=\"language-js line-numbers-mode\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token keyword\">var</span> <span class=\"token function-variable function\">func1</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span> foo<span class=\"token punctuation\">:</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 想返回一个对象,花括号被当成多条语句来解析，执行后返回undefined</span>\n<span class=\"token keyword\">var</span> <span class=\"token function-variable function\">func2</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>foo<span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 用圆括号是正确的写法</span>\n<span class=\"token keyword\">var</span> <span class=\"token function-variable function\">func2</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n    foo<span class=\"token punctuation\">:</span> <span class=\"token number\">1</span> <span class=\"token comment\">// 更推荐直接当成多条语句的形式来写，可读性高</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br></div><!--beforeend--></div><!--afterend--><ol start=\"2\">\n<li>箭头函数在参数和箭头之间不能换行！</li>\n</ol>\n<!--beforebegin--><div class=\"language-js line-numbers-mode\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token keyword\">var</span> <span class=\"token function-variable function\">func</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n           <span class=\"token operator\">=></span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 报错： Unexpected token =></span>\n</code></pre>\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br></div><!--beforeend--></div><!--afterend--><ol start=\"3\">\n<li>箭头函数的解析顺序相对靠前</li>\n</ol>\n<p>MDN: 虽然箭头函数中的箭头不是运算符，但箭头函数具有与常规函数不同的特殊<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Operator_Precedence\" target=\"_blank\" rel=\"noopener noreferrer\">运算符优先级<OutboundLink/></a>解析规则</p>\n<!--beforebegin--><div class=\"language-js line-numbers-mode\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token keyword\">let</span> a <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span> <span class=\"token operator\">||</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ok</span>\n<span class=\"token keyword\">let</span> b <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span> <span class=\"token operator\">||</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Malformed arrow function parameter list</span>\n<span class=\"token keyword\">let</span> c <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span> <span class=\"token operator\">||</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ok</span>\n</code></pre>\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br></div><!--beforeend--></div><!--afterend--><h3 id=\"箭头函数不适用场景：\"><a class=\"header-anchor\" href=\"#箭头函数不适用场景：\" aria-hidden=\"true\">#</a> 箭头函数不适用场景：</h3>\n<p>围绕两点：箭头函数的this意外指向和代码的可读性。</p>\n<ol>\n<li>定义字面量方法,this的意外指向。</li>\n</ol>\n<p>因为箭头函数的简洁</p>\n<!--beforebegin--><div class=\"language-js line-numbers-mode\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token keyword\">const</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  array<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  sum<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 根据上文学到的：外层没有普通函数this会指向全局对象</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>array<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token string\">'全局对象下没有array，这里会报错'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 找不到push方法</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\nobj<span class=\"token punctuation\">.</span><span class=\"token function\">sum</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br></div><!--beforeend--></div><!--afterend--><p>上述栗子使用普通函数或者ES6中的方法简写的来定义方法，就没有问题了：</p>\n<!--beforebegin--><div class=\"language-js line-numbers-mode\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token comment\">// 这两种写法是等价的</span>\n<span class=\"token function\">sum</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>array<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token string\">'this指向obj'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\nsum<span class=\"token punctuation\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>array<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token string\">'this指向obj'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br></div><!--beforeend--></div><!--afterend--><p>还有一种情况是给普通函数的原型定义方法的时候，通常会在普通函数的外部进行定义，比如说继承/添加方法的时候。</p>\n<p>这时候因为没有在普通函数的内部进行定义，所以this会指向其他普通函数，或者全局对象上，导致bug！</p>\n<ol start=\"2\">\n<li>回调函数的动态this</li>\n</ol>\n<p>下文是一个修改dom文本的操作，因为this指向错误，导致修改失败：</p>\n<!--beforebegin--><div class=\"language-js line-numbers-mode\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token keyword\">const</span> button <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'myButton'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nbutton<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'click'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> <span class=\"token string\">'Clicked button'</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// this又指向了全局</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br></div><!--beforeend--></div><!--afterend--><p>相信你也知道了，改成普通函数就成了。</p>\n<ol start=\"3\">\n<li>\n<p>考虑代码的可读性，使用普通函数</p>\n<ul>\n<li>\n<p>函数体复杂：</p>\n<p>具体表现就是箭头函数中使用多个三元运算符号，就是不换行，非要在一行内写完，非常恶心！</p>\n</li>\n<li>\n<p>行数较多</p>\n</li>\n<li>\n<p>函数内部有大量操作</p>\n</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"文章内容小结：\"><a class=\"header-anchor\" href=\"#文章内容小结：\" aria-hidden=\"true\">#</a> 文章内容小结：</h2>\n<h3 id=\"普通函数和箭头函数的区别：-2\"><a class=\"header-anchor\" href=\"#普通函数和箭头函数的区别：-2\" aria-hidden=\"true\">#</a> 普通函数和箭头函数的区别：</h3>\n<ol>\n<li>箭头函数没有<code>prototype</code>(原型)，所以箭头函数本身没有this</li>\n<li>箭头函数的this在定义的时候继承自外层第一个普通函数的this。</li>\n<li>如果箭头函数外层没有普通函数，严格模式和非严格模式下它的this都会指向<code>window</code>(全局对象)</li>\n<li>箭头函数本身的this指向不能改变，但可以修改它要继承的对象的this。</li>\n<li>箭头函数的this指向全局，使用arguments会报未声明的错误。</li>\n<li>箭头函数的this指向普通函数时,它的<code>argumens</code>继承于该普通函数</li>\n<li>使用<code>new</code>调用箭头函数会报错，因为箭头函数没有<code>constructor</code></li>\n<li>箭头函数不支持<code>new.target</code></li>\n<li>箭头函数不支持重命名函数参数,普通函数的函数参数支持重命名</li>\n<li>箭头函数相对于普通函数语法更简洁优雅</li>\n</ol>\n<h3 id=\"箭头函数的注意事项及不适用场景-2\"><a class=\"header-anchor\" href=\"#箭头函数的注意事项及不适用场景-2\" aria-hidden=\"true\">#</a> 箭头函数的注意事项及不适用场景</h3>\n<p><strong>箭头函数的注意事项</strong>：</p>\n<ol>\n<li>箭头函数一条语句返回对象字面量，需要加括号</li>\n<li>箭头函数在参数和箭头之间不能换行</li>\n<li>箭头函数的解析顺序相对<code>||</code>靠前</li>\n</ol>\n<p><strong>不适用场景</strong>：箭头函数的this意外指向和代码的可读性。</p>\n<hr>\n<h2 id=\"结语\"><a class=\"header-anchor\" href=\"#结语\" aria-hidden=\"true\">#</a> 结语</h2>\n<p>呕心沥血，可以说是很全了，反正第一次问到我的时候只能想到箭头函数的this是继承而来的，以及语法上的简洁性，其他的我都不知道，希望这篇文章能够帮助各位同学学到知识。</p>\n<p>PS：目前找工作中，求大佬们内推，中高级前端，偏JS，Vue，上海杨浦。</p>\n<p><a href=\"http://obkoro1.com/\" target=\"_blank\" rel=\"noopener noreferrer\">博客<OutboundLink/></a>、<a href=\"http://obkoro1.com/web_accumulate/accumulate/\" target=\"_blank\" rel=\"noopener noreferrer\">前端积累文档<OutboundLink/></a>、<a href=\"https://github.com/OBKoro1/articleImg_src/blob/master/juejin/1631b6f52f7e7015.jpeg?raw=true\" target=\"_blank\" rel=\"noopener noreferrer\">公众号<OutboundLink/></a>、<a href=\"https://github.com/OBKoro1\" target=\"_blank\" rel=\"noopener noreferrer\">GitHub<OutboundLink/></a>、wx:OBkoro1、邮箱：obkoro1@foxmail.com</p>\n<p>以上2019.03.22</p>\n<p>参考资料：</p>\n<p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Functions/Arrow_functions\" target=\"_blank\" rel=\"noopener noreferrer\">MDN 箭头函数<OutboundLink/></a></p>\n<p><a href=\"http://es6.ruanyifeng.com/?search=new.target&amp;x=0&amp;y=0#docs/function#%E7%AE%AD%E5%A4%B4%E5%87%BD%E6%95%B0\" target=\"_blank\" rel=\"noopener noreferrer\">阮一峰-ES6入门<OutboundLink/></a></p>\n<p><a href=\"https://zhuanlan.zhihu.com/p/26540168\" target=\"_blank\" rel=\"noopener noreferrer\">什么时候你不能使用箭头函数？<OutboundLink/></a>\n<!-- 特殊字符串：用于修改/删除markdown的结尾提示语-OBKoro1 --></p>\n<h3 id=\"点个star支持我一下\"><a class=\"header-anchor\" href=\"#点个star支持我一下\" aria-hidden=\"true\">#</a> 点个<a href=\"https://github.com/OBKoro1/web_accumulate\" target=\"_blank\" rel=\"noopener noreferrer\">Star<OutboundLink/></a>支持我一下~</h3>\n<!-- '特殊字符串：用于删除编译后的issue组件-OBKoro1 -->\n<!-- more -->\n<comment-comment/>\n</div>\n",null]}