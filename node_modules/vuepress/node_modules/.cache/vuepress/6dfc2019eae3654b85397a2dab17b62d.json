{"remainingRequest":"/Users/koro/work/web_my/web_accumulate/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/koro/work/web_my/web_accumulate/node_modules/cache-loader/dist/cjs.js??ref--1-0!/Users/koro/work/web_my/web_accumulate/node_modules/vue-loader/lib/index.js??ref--1-1!/Users/koro/work/web_my/web_accumulate/node_modules/vuepress/lib/webpack/markdownLoader.js??ref--1-2!/Users/koro/work/web_my/web_accumulate/docs/codeBlack/你或许不知道Vue的这些小技巧.md?vue&type=template&id=5ecb9be4&","dependencies":[{"path":"/Users/koro/work/web_my/web_accumulate/docs/codeBlack/你或许不知道Vue的这些小技巧.md","mtime":1636107879452},{"path":"/Users/koro/work/web_my/web_accumulate/node_modules/cache-loader/dist/cjs.js","mtime":1557296864520},{"path":"/Users/koro/work/web_my/web_accumulate/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1557296867191},{"path":"/Users/koro/work/web_my/web_accumulate/node_modules/cache-loader/dist/cjs.js","mtime":1557296864520},{"path":"/Users/koro/work/web_my/web_accumulate/node_modules/vue-loader/lib/index.js","mtime":1557296867190},{"path":"/Users/koro/work/web_my/web_accumulate/node_modules/vuepress/lib/webpack/markdownLoader.js","mtime":1557296867284}],"contextDependencies":[],"result":["var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"content\"},[_vm._ssrNode(\"<h2 id=\\\"vue-小技巧-小问题2\\\"><a href=\\\"#vue-小技巧-小问题2\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> vue 小技巧&amp;小问题2</h2> <p>用Vue开发一个网页并不难，但是也经常会遇到一些问题，其实大部分的问题都在文档中有所提及，再不然我们通过谷歌也能成功搜索到问题的答案，为了帮助小伙伴们提前踩坑，在遇到问题的时候，心里大概有个谱知道该如何去解决问题。这篇文章是将自己知道的一些小技巧，结合查阅资料整理成的一篇文章。</p> <h3 id=\\\"文章内容总结\\\"><a href=\\\"#文章内容总结\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 文章内容总结:</h3> <ol><li>组件style的scoped</li> <li>Vue 数组/对象更新 视图不更新</li> <li>vue filters 过滤器的使用</li> <li>列表渲染相关</li> <li>深度watch与watch立即触发回调</li> <li>这些情况下不要使用箭头函数</li> <li>路由懒加载写法</li> <li>路由的项目启动页和404页面</li> <li>Vue调试神器:vue-devtools</li></ol> <hr> <h3 id=\\\"组件style的scoped\\\"><a href=\\\"#组件style的scoped\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 组件style的scoped:</h3> <p>问题：在组件中用js动态创建的dom，添加样式不生效。</p> <p><strong>场景</strong>:</p> <div class=\\\"language-html line-numbers-mode\\\"><pre class=\\\"language-html\\\"><code><span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>template</span><span class=\\\"token punctuation\\\">&gt;</span></span>\\n    <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>div</span> <span class=\\\"token attr-name\\\">class</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">&quot;</span>test<span class=\\\"token punctuation\\\">&quot;</span></span><span class=\\\"token punctuation\\\">&gt;</span></span><span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>div</span><span class=\\\"token punctuation\\\">&gt;</span></span>\\n<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>template</span><span class=\\\"token punctuation\\\">&gt;</span></span>\\n<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>script</span><span class=\\\"token punctuation\\\">&gt;</span></span><span class=\\\"token script language-javascript\\\">\\n    <span class=\\\"token keyword\\\">let</span> a<span class=\\\"token operator\\\">=</span>document<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">querySelector</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'.test'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">let</span> newDom<span class=\\\"token operator\\\">=</span>document<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">createElement</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">&quot;div&quot;</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 创建dom</span>\\n    newDom<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">setAttribute</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">&quot;class&quot;</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token string\\\">&quot;testAdd&quot;</span> <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 添加样式</span>\\n    a<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">appendChild</span><span class=\\\"token punctuation\\\">(</span>newDom<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 插入dom</span>\\n</span><span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>script</span><span class=\\\"token punctuation\\\">&gt;</span></span>\\n<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>style</span> <span class=\\\"token attr-name\\\">scoped</span><span class=\\\"token punctuation\\\">&gt;</span></span><span class=\\\"token style language-css\\\">\\n<span class=\\\"token selector\\\">.test</span><span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token property\\\">background</span><span class=\\\"token punctuation\\\">:</span>blue<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token property\\\">height</span><span class=\\\"token punctuation\\\">:</span>100px<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token property\\\">width</span><span class=\\\"token punctuation\\\">:</span>100px<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token selector\\\">.testAdd</span><span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token property\\\">background</span><span class=\\\"token punctuation\\\">:</span>red<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token property\\\">height</span><span class=\\\"token punctuation\\\">:</span>100px<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token property\\\">width</span><span class=\\\"token punctuation\\\">:</span>100px<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</span><span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>style</span><span class=\\\"token punctuation\\\">&gt;</span></span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br><span class=\\\"line-number\\\">5</span><br><span class=\\\"line-number\\\">6</span><br><span class=\\\"line-number\\\">7</span><br><span class=\\\"line-number\\\">8</span><br><span class=\\\"line-number\\\">9</span><br><span class=\\\"line-number\\\">10</span><br><span class=\\\"line-number\\\">11</span><br><span class=\\\"line-number\\\">12</span><br><span class=\\\"line-number\\\">13</span><br><span class=\\\"line-number\\\">14</span><br><span class=\\\"line-number\\\">15</span><br><span class=\\\"line-number\\\">16</span><br><span class=\\\"line-number\\\">17</span><br><span class=\\\"line-number\\\">18</span><br><span class=\\\"line-number\\\">19</span><br><span class=\\\"line-number\\\">20</span><br><span class=\\\"line-number\\\">21</span><br></div></div><p><strong>结果</strong>：</p> <div class=\\\"language-css line-numbers-mode\\\"><pre class=\\\"language-css\\\"><code><span class=\\\"token selector\\\">// test生效   testAdd 不生效\\n&lt;div data-v-1b971ada class=&quot;test&quot;&gt;&lt;div class=&quot;testAdd&quot;&gt;&lt;/div&gt;&lt;/div&gt;\\n\\n.test[data-v-1b971ada]</span><span class=\\\"token punctuation\\\">{</span> // 注意data-v-1b971ada\\n    <span class=\\\"token property\\\">background</span><span class=\\\"token punctuation\\\">:</span>blue<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token property\\\">height</span><span class=\\\"token punctuation\\\">:</span>100px<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token property\\\">width</span><span class=\\\"token punctuation\\\">:</span>100px<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br><span class=\\\"line-number\\\">5</span><br><span class=\\\"line-number\\\">6</span><br><span class=\\\"line-number\\\">7</span><br><span class=\\\"line-number\\\">8</span><br></div></div><p><strong>原因</strong>:</p> \"),_vm._ssrNode(\"<p>\",\"</p>\",[_vm._ssrNode(\"当 <code>&lt;style&gt;</code> 标签有 \"),_vm._ssrNode(\"<a href=\\\"https://vue-loader-v14.vuejs.org/zh-cn/features/scoped-css.html\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">\",\"</a>\",[_vm._ssrNode(\"scoped\"),_c('OutboundLink')],2),_vm._ssrNode(\" 属性时，它的 CSS 只作用于当前组件中的元素。\")],2),_vm._ssrNode(\" <p>它会<strong>为组件中所有的标签和class样式添加一个<code>scoped</code>标识</strong>，就像上面结果中的<code>data-v-1b971ada</code>。</p> <p>所以原因就很清楚了：因为动态添加的dom没有<code>scoped</code>添加的标识，<strong>没有跟<code>testAdd</code>的样式匹配起来</strong>，导致样式失效。</p> <p><strong>解决方式</strong></p> <ul><li>推荐：去掉该组件的scoped</li></ul> <p>每个组件的css并不会很多，当设计到动态添加dom，并为dom添加样式的时候，就可以去掉scoped，会比下面的方法方便很多。</p> <ul><li>可以动态添加style</li></ul> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token comment\\\">// 上面的栗子可以这样添加样式</span>\\nnewDom<span class=\\\"token punctuation\\\">.</span>style<span class=\\\"token punctuation\\\">.</span>height<span class=\\\"token operator\\\">=</span><span class=\\\"token string\\\">'100px'</span><span class=\\\"token punctuation\\\">;</span>\\nnewDom<span class=\\\"token punctuation\\\">.</span>style<span class=\\\"token punctuation\\\">.</span>width<span class=\\\"token operator\\\">=</span><span class=\\\"token string\\\">'100px'</span><span class=\\\"token punctuation\\\">;</span>\\nnewDom<span class=\\\"token punctuation\\\">.</span>style<span class=\\\"token punctuation\\\">.</span>background<span class=\\\"token operator\\\">=</span><span class=\\\"token string\\\">'red'</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br></div></div><hr> <h3 id=\\\"vue-数组-对象更新-视图不更新\\\"><a href=\\\"#vue-数组-对象更新-视图不更新\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> Vue 数组/对象更新 视图不更新</h3> <p>很多时候，我们习惯于这样操作数组和对象:</p> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token function\\\">data</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span> <span class=\\\"token comment\\\">// data数据</span>\\n    <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">{</span>\\n        arr<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">,</span>\\n        obj<span class=\\\"token punctuation\\\">:</span><span class=\\\"token punctuation\\\">{</span>\\n            a<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span>\\n            b<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">2</span>\\n        <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n<span class=\\\"token comment\\\">// 数据更新 数组视图不更新</span>\\n<span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>arr<span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">'OBKoro1'</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>arr<span class=\\\"token punctuation\\\">.</span>length <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">;</span>\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>arr<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span><span class=\\\"token comment\\\">// ['OBKoro1'];</span>\\n<span class=\\\"token comment\\\">// 数据更新 对象视图不更新</span>\\n<span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>obj<span class=\\\"token punctuation\\\">.</span>c <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">'OBKoro1'</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">delete</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>obj<span class=\\\"token punctuation\\\">.</span>a<span class=\\\"token punctuation\\\">;</span>\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>obj<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>  <span class=\\\"token comment\\\">// {b:2,c:'OBKoro1'}</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br><span class=\\\"line-number\\\">5</span><br><span class=\\\"line-number\\\">6</span><br><span class=\\\"line-number\\\">7</span><br><span class=\\\"line-number\\\">8</span><br><span class=\\\"line-number\\\">9</span><br><span class=\\\"line-number\\\">10</span><br><span class=\\\"line-number\\\">11</span><br><span class=\\\"line-number\\\">12</span><br><span class=\\\"line-number\\\">13</span><br><span class=\\\"line-number\\\">14</span><br><span class=\\\"line-number\\\">15</span><br><span class=\\\"line-number\\\">16</span><br><span class=\\\"line-number\\\">17</span><br></div></div><p>由于js的限制，Vue 不能检测以上数组的变动，以及对象的添加/删除，很多人会因为像上面这样操作，出现视图没有更新的问题。</p> <p><strong>解决方式:</strong></p> <ol><li><strong>this.$set(你要改变的数组/对象，你要改变的位置/key，你要改成什么value)</strong></li></ol> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>$<span class=\\\"token keyword\\\">set</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>arr<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">&quot;OBKoro1&quot;</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 改变数组</span>\\n<span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>$<span class=\\\"token keyword\\\">set</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>obj<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">&quot;c&quot;</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">&quot;OBKoro1&quot;</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 改变对象</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br></div></div>\"),_vm._ssrNode(\"<p>\",\"</p>\",[_vm._ssrNode(\"如果还是不懂的话，可以看看这个codepen\"),_vm._ssrNode(\"<a href=\\\"https://codepen.io/OBKoro1/pen/oyjdbZ\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">\",\"</a>\",[_vm._ssrNode(\"demo\"),_c('OutboundLink')],2),_vm._ssrNode(\"。\")],2),_vm._ssrNode(\" <ol start=\\\"2\\\"><li><strong>数组原生方法触发视图更新</strong>:</li></ol> <p>Vue可以监测到数组变化的，<strong>数组原生方法</strong>:</p> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token function\\\">splice</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>、 <span class=\\\"token function\\\">push</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token function\\\">、pop</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token function\\\">、shift</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token function\\\">、unshift</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token function\\\">、sort</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token function\\\">、reverse</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br></div></div><p>意思是<strong>使用这些方法不用我们再进行额外的操作，视图自动进行更新</strong>。</p> \"),_vm._ssrNode(\"<p>\",\"</p>\",[_vm._ssrNode(\"推荐使用<code>splice</code>方法会比较好自定义,因为slice可以在数组的任何位置进行删除/添加操作，这部分可以看看我前几天写的一篇文章:\"),_vm._ssrNode(\"<a href=\\\"https://juejin.im/post/5b0903b26fb9a07a9d70c7e0?utm_source=gold_browser_extension#heading-7\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">\",\"</a>\",[_vm._ssrNode(\"【干货】js 数组详细操作方法及解析合集\"),_c('OutboundLink')],2)],2),_vm._ssrNode(\" <ol start=\\\"3\\\"><li><strong>替换数组/对象</strong></li></ol> <p>比方说:你想遍历这个数组/对象，对每个元素进行处理，然后触发视图更新。</p> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token comment\\\">// 文档中的栗子: filter遍历数组，返回一个新数组，用新数组替换旧数组</span>\\nexample1<span class=\\\"token punctuation\\\">.</span>items <span class=\\\"token operator\\\">=</span> example1<span class=\\\"token punctuation\\\">.</span>items<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">filter</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span>item<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">return</span> item<span class=\\\"token punctuation\\\">.</span>message<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">match</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token regex\\\">/Foo/</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br></div></div><p><strong>举一反三</strong>：可以先把这个数组/对象保存在一个变量中，然后对这个变量进行遍历，等遍历结束后再用<strong>变量替换对象/数组</strong>。</p> <p><strong>并不会重新渲染整个列表</strong>:</p> <p>Vue 为了使得 DOM 元素得到最大范围的重用而实现了一些智能的、启发式的方法，所以用一个含有相同元素的数组去替换原来的数组是非常高效的操作。</p> \"),_vm._ssrNode(\"<p>\",\"</p>\",[_vm._ssrNode(\"如果你还是很困惑，可以看看\"),_vm._ssrNode(\"<a href=\\\"https://cn.vuejs.org/v2/guide/list.html#%E6%95%B0%E7%BB%84%E6%9B%B4%E6%96%B0%E6%A3%80%E6%B5%8B\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">\",\"</a>\",[_vm._ssrNode(\"Vue文档\"),_c('OutboundLink')],2),_vm._ssrNode(\"中关于这部分的解释。\")],2),_vm._ssrNode(\" <hr> <h3 id=\\\"vue-filters-过滤器的使用\\\"><a href=\\\"#vue-filters-过滤器的使用\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> vue filters 过滤器的使用:</h3> <p>过滤器，通常用于后台管理系统，或者一些约定类型，过滤。Vue过滤器用法是很简单，但是很多朋友可能都没有用过，这里稍微讲解一下。</p> <p><strong>在html模板中的两种用法</strong>：</p> <div class=\\\"language-html line-numbers-mode\\\"><pre class=\\\"language-html\\\"><code><span class=\\\"token comment\\\">&lt;!-- 在双花括号中 --&gt;</span>\\n{{ message | filterTest }}\\n<span class=\\\"token comment\\\">&lt;!-- 在 `v-bind` 中 --&gt;</span>\\n<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>div</span> <span class=\\\"token attr-name\\\">:id</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">&quot;</span>message | filterTest<span class=\\\"token punctuation\\\">&quot;</span></span><span class=\\\"token punctuation\\\">&gt;</span></span><span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>div</span><span class=\\\"token punctuation\\\">&gt;</span></span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br></div></div><p><strong>在组件<code>script</code>中的用法</strong>:</p> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">export</span> <span class=\\\"token keyword\\\">default</span> <span class=\\\"token punctuation\\\">{</span>    \\n        <span class=\\\"token function\\\">data</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">{</span>\\n            message<span class=\\\"token punctuation\\\">:</span><span class=\\\"token number\\\">1</span>   \\n        <span class=\\\"token punctuation\\\">}</span>\\n        <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n    filters<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span>  \\n        <span class=\\\"token function\\\">filterTest</span><span class=\\\"token punctuation\\\">(</span>value<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n            <span class=\\\"token comment\\\">// value在这里是message的值</span>\\n            <span class=\\\"token keyword\\\">if</span><span class=\\\"token punctuation\\\">(</span>value<span class=\\\"token operator\\\">===</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">{</span>\\n                <span class=\\\"token keyword\\\">return</span> <span class=\\\"token string\\\">'最后输出这个值'</span><span class=\\\"token punctuation\\\">;</span>\\n            <span class=\\\"token punctuation\\\">}</span>\\n        <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br><span class=\\\"line-number\\\">5</span><br><span class=\\\"line-number\\\">6</span><br><span class=\\\"line-number\\\">7</span><br><span class=\\\"line-number\\\">8</span><br><span class=\\\"line-number\\\">9</span><br><span class=\\\"line-number\\\">10</span><br><span class=\\\"line-number\\\">11</span><br><span class=\\\"line-number\\\">12</span><br><span class=\\\"line-number\\\">13</span><br><span class=\\\"line-number\\\">14</span><br><span class=\\\"line-number\\\">15</span><br></div></div><p>用法就是上面讲的这样，可以自己在组件中试一试就知道了，很简单很好用的。</p> \"),_vm._ssrNode(\"<p>\",\"</p>\",[_vm._ssrNode(\"如果不想自己试，可以点这个\"),_vm._ssrNode(\"<a href=\\\"https://codepen.io/OBKoro1/pen/rKxBMw\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">\",\"</a>\",[_vm._ssrNode(\"demo\"),_c('OutboundLink')],2),_vm._ssrNode(\"里面修改代码就可以了，demo中包括<strong>过滤器串联</strong>、<strong>过滤器传参</strong>。\")],2),_vm._ssrNode(\" \"),_vm._ssrNode(\"<p>\",\"</p>\",[_vm._ssrNode(\"推荐看Vue\"),_vm._ssrNode(\"<a href=\\\"https://cn.vuejs.org/v2/guide/filters.html\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">\",\"</a>\",[_vm._ssrNode(\"过滤器\"),_c('OutboundLink')],2),_vm._ssrNode(\"文档，你会更了解它的。\")],2),_vm._ssrNode(\" <hr> <h3 id=\\\"列表渲染相关\\\"><a href=\\\"#列表渲染相关\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 列表渲染相关</h3> <p><strong>v-for循环绑定model:</strong></p> <p>input在v-for中可以像如下这么进行绑定，我敢打赌很多人不知道。</p> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token comment\\\">// 数据    </span>\\n<span class=\\\"token function\\\">data</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">return</span><span class=\\\"token punctuation\\\">{</span>\\n        obj<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span>\\n            ob<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">&quot;OB&quot;</span><span class=\\\"token punctuation\\\">,</span>\\n            koro1<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">&quot;Koro1&quot;</span>\\n        <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n        model<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span>\\n            ob<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">&quot;默认ob&quot;</span><span class=\\\"token punctuation\\\">,</span>\\n            koro1<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">&quot;默认koro1&quot;</span>\\n        <span class=\\\"token punctuation\\\">}</span>   \\n    <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n<span class=\\\"token comment\\\">// html模板</span>\\n<span class=\\\"token operator\\\">&lt;</span>div v<span class=\\\"token operator\\\">-</span><span class=\\\"token keyword\\\">for</span><span class=\\\"token operator\\\">=</span><span class=\\\"token string\\\">&quot;(value,key) in obj&quot;</span><span class=\\\"token operator\\\">&gt;</span>\\n    <span class=\\\"token operator\\\">&lt;</span>input type<span class=\\\"token operator\\\">=</span><span class=\\\"token string\\\">&quot;text&quot;</span> v<span class=\\\"token operator\\\">-</span>model<span class=\\\"token operator\\\">=</span><span class=\\\"token string\\\">&quot;model[key]&quot;</span><span class=\\\"token operator\\\">&gt;</span>\\n<span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">/</span>div<span class=\\\"token operator\\\">&gt;</span>\\n<span class=\\\"token comment\\\">// input就跟数据绑定在一起了，那两个默认数据也会在input中显示</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br><span class=\\\"line-number\\\">5</span><br><span class=\\\"line-number\\\">6</span><br><span class=\\\"line-number\\\">7</span><br><span class=\\\"line-number\\\">8</span><br><span class=\\\"line-number\\\">9</span><br><span class=\\\"line-number\\\">10</span><br><span class=\\\"line-number\\\">11</span><br><span class=\\\"line-number\\\">12</span><br><span class=\\\"line-number\\\">13</span><br><span class=\\\"line-number\\\">14</span><br><span class=\\\"line-number\\\">15</span><br><span class=\\\"line-number\\\">16</span><br><span class=\\\"line-number\\\">17</span><br><span class=\\\"line-number\\\">18</span><br></div></div>\"),_vm._ssrNode(\"<p>\",\"</p>\",[_vm._ssrNode(\"为此，我做了个\"),_vm._ssrNode(\"<a href=\\\"https://codepen.io/OBKoro1/pen/gKPOgw\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">\",\"</a>\",[_vm._ssrNode(\"demo\"),_c('OutboundLink')],2),_vm._ssrNode(\",你可以点进去试试。\")],2),_vm._ssrNode(\" <p><strong>一段取值的v-for</strong></p> <p>如果我们有一段重复的html模板要渲染，又没有数据关联，我们可以:</p> <div class=\\\"language-html line-numbers-mode\\\"><pre class=\\\"language-html\\\"><code><span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>div</span> <span class=\\\"token attr-name\\\">v-for</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">&quot;</span>n in 5<span class=\\\"token punctuation\\\">&quot;</span></span><span class=\\\"token punctuation\\\">&gt;</span></span>\\n    <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>span</span><span class=\\\"token punctuation\\\">&gt;</span></span>这里会被渲染5次，渲染模板{{n}}<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>span</span><span class=\\\"token punctuation\\\">&gt;</span></span>\\n<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>div</span><span class=\\\"token punctuation\\\">&gt;</span></span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br></div></div><p><strong>v-if尽量不要与v-for在同一节点使用</strong>:</p> <p>v-for 的优先级比 v-if 更高,如果它们处于同一节点的话，那么每一个循环都会运行一遍v-if。</p> <p>如果你想根据循环中的<strong>每一项的数据来判断是否渲染，那么你这样做是对的</strong>:</p> <div class=\\\"language-html line-numbers-mode\\\"><pre class=\\\"language-html\\\"><code><span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>li</span> <span class=\\\"token attr-name\\\">v-for</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">&quot;</span>todo in todos<span class=\\\"token punctuation\\\">&quot;</span></span> <span class=\\\"token attr-name\\\">v-if</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">&quot;</span>todo.type===1<span class=\\\"token punctuation\\\">&quot;</span></span><span class=\\\"token punctuation\\\">&gt;</span></span>\\n    {{ todo }}\\n<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>li</span><span class=\\\"token punctuation\\\">&gt;</span></span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br></div></div><p>如果你想要根据<strong>某些条件跳过循环，而又跟将要渲染的每一项数据没有关系的话，你可以将v-if放在v-for的父节点</strong>：</p> <div class=\\\"language-html line-numbers-mode\\\"><pre class=\\\"language-html\\\"><code>// 根据elseData是否为true 来判断是否渲染，跟每个元素没有关系    \\n<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>ul</span> <span class=\\\"token attr-name\\\">v-if</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">&quot;</span>elseData<span class=\\\"token punctuation\\\">&quot;</span></span><span class=\\\"token punctuation\\\">&gt;</span></span>\\n    <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>li</span> <span class=\\\"token attr-name\\\">v-for</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">&quot;</span>todo in todos<span class=\\\"token punctuation\\\">&quot;</span></span><span class=\\\"token punctuation\\\">&gt;</span></span>\\n    {{ todo }}\\n    <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>li</span><span class=\\\"token punctuation\\\">&gt;</span></span>\\n<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>ul</span><span class=\\\"token punctuation\\\">&gt;</span></span>\\n// 数组是否有数据 跟每个元素没有关系\\n<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>ul</span> <span class=\\\"token attr-name\\\">v-if</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">&quot;</span>todos.length<span class=\\\"token punctuation\\\">&quot;</span></span><span class=\\\"token punctuation\\\">&gt;</span></span>\\n    <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>li</span> <span class=\\\"token attr-name\\\">v-for</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">&quot;</span>todo in todos<span class=\\\"token punctuation\\\">&quot;</span></span><span class=\\\"token punctuation\\\">&gt;</span></span>\\n    {{ todo }}\\n    <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>li</span><span class=\\\"token punctuation\\\">&gt;</span></span>\\n<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>ul</span><span class=\\\"token punctuation\\\">&gt;</span></span>\\n<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>p</span> <span class=\\\"token attr-name\\\">v-else</span><span class=\\\"token punctuation\\\">&gt;</span></span>No todos left!<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>p</span><span class=\\\"token punctuation\\\">&gt;</span></span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br><span class=\\\"line-number\\\">5</span><br><span class=\\\"line-number\\\">6</span><br><span class=\\\"line-number\\\">7</span><br><span class=\\\"line-number\\\">8</span><br><span class=\\\"line-number\\\">9</span><br><span class=\\\"line-number\\\">10</span><br><span class=\\\"line-number\\\">11</span><br><span class=\\\"line-number\\\">12</span><br><span class=\\\"line-number\\\">13</span><br></div></div><p>如上，正确使用v-for与v-if优先级的关系，可以为你节省大量的性能。</p> <hr> <h3 id=\\\"深度watch与watch立即触发回调\\\"><a href=\\\"#深度watch与watch立即触发回调\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 深度watch与watch立即触发回调</h3> <p>watch很多人都在用，但是这watch中的这两个选项<code>deep</code>、<code>immediate</code>，或许不是很多人都知道，我猜。</p> <p><strong>选项：deep</strong></p> <p>在选项参数中指定 <code>deep: true</code>，可以监听对象中属性的变化。</p> <p><strong>选项：immediate</strong></p> <p>在选项参数中指定 immediate: true, 将立即以表达式的当前值触发回调，也就是立即触发一次。</p> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code>watch<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span>\\n    obj<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token function\\\">handler</span><span class=\\\"token punctuation\\\">(</span>val<span class=\\\"token punctuation\\\">,</span> oldVal<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'属性发生变化触发这个回调'</span><span class=\\\"token punctuation\\\">,</span>val<span class=\\\"token punctuation\\\">,</span> oldVal<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n        deep<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token boolean\\\">true</span> <span class=\\\"token comment\\\">// 监听这个对象中的每一个属性变化</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n    step<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span> <span class=\\\"token comment\\\">// 属性</span>\\n        <span class=\\\"token comment\\\">//watch</span>\\n        <span class=\\\"token function\\\">handler</span><span class=\\\"token punctuation\\\">(</span>val<span class=\\\"token punctuation\\\">,</span> oldVal<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">&quot;默认立即触发一次&quot;</span><span class=\\\"token punctuation\\\">,</span> val<span class=\\\"token punctuation\\\">,</span> oldVal<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n        immediate<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token boolean\\\">true</span> <span class=\\\"token comment\\\">// 默认立即触发一次</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br><span class=\\\"line-number\\\">5</span><br><span class=\\\"line-number\\\">6</span><br><span class=\\\"line-number\\\">7</span><br><span class=\\\"line-number\\\">8</span><br><span class=\\\"line-number\\\">9</span><br><span class=\\\"line-number\\\">10</span><br><span class=\\\"line-number\\\">11</span><br><span class=\\\"line-number\\\">12</span><br><span class=\\\"line-number\\\">13</span><br><span class=\\\"line-number\\\">14</span><br><span class=\\\"line-number\\\">15</span><br></div></div>\"),_vm._ssrNode(\"<p>\",\"</p>\",[_vm._ssrNode(\"这两个选项可以同时使用，另外：是的，又有一个\"),_vm._ssrNode(\"<a href=\\\"https://codepen.io/OBKoro1/pen/QxyWMa\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">\",\"</a>\",[_vm._ssrNode(\"demo\"),_c('OutboundLink')],2),_vm._ssrNode(\"。\")],2),_vm._ssrNode(\" <p>还有下面这一点需要注意。</p> <hr> <h3 id=\\\"这些情况下不要使用箭头函数\\\"><a href=\\\"#这些情况下不要使用箭头函数\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 这些情况下不要使用箭头函数:</h3> <ul><li>不应该使用箭头函数来定义一个生命周期方法</li> <li>不应该使用箭头函数来定义 method 函数</li> <li>不应该使用箭头函数来定义计算属性函数</li> <li>不应该对 data 属性使用箭头函数</li> <li>不应该使用箭头函数来定义 watcher 函数</li></ul> <p>示例：</p> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token comment\\\">// 上面watch的栗子：</span>\\nhandler<span class=\\\"token punctuation\\\">:</span><span class=\\\"token punctuation\\\">(</span>val<span class=\\\"token punctuation\\\">,</span> oldVal<span class=\\\"token punctuation\\\">)</span><span class=\\\"token operator\\\">=&gt;</span> <span class=\\\"token punctuation\\\">{</span> <span class=\\\"token comment\\\">// 可以执行</span>\\n    console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">&quot;默认触发一次&quot;</span><span class=\\\"token punctuation\\\">,</span> val<span class=\\\"token punctuation\\\">,</span> oldVal<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n<span class=\\\"token comment\\\">// method：</span>\\nmethods<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span>\\n    plus<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=&gt;</span> <span class=\\\"token punctuation\\\">{</span> <span class=\\\"token comment\\\">// 可以执行</span>\\n        <span class=\\\"token comment\\\">// do something</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token comment\\\">// 生命周期:</span>\\ncreated<span class=\\\"token punctuation\\\">:</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token operator\\\">=&gt;</span><span class=\\\"token punctuation\\\">{</span> <span class=\\\"token comment\\\">// 可以执行</span>\\n    console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'lala'</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>obj<span class=\\\"token punctuation\\\">)</span> \\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br><span class=\\\"line-number\\\">5</span><br><span class=\\\"line-number\\\">6</span><br><span class=\\\"line-number\\\">7</span><br><span class=\\\"line-number\\\">8</span><br><span class=\\\"line-number\\\">9</span><br><span class=\\\"line-number\\\">10</span><br><span class=\\\"line-number\\\">11</span><br><span class=\\\"line-number\\\">12</span><br><span class=\\\"line-number\\\">13</span><br><span class=\\\"line-number\\\">14</span><br></div></div><p>是的，没错，这些都能执行。</p> <p><strong>but</strong>:</p> <p>箭头函数绑定了父级作用域的上下文，<strong>this 将不会按照期望指向 Vue 实例</strong>。</p> <p>也就是说，你<strong>不能使用this来访问你组件中的data数据以及method方法了</strong>。</p> <p>this将会指向undefined。</p> <hr> <h3 id=\\\"路由懒加载写法\\\"><a href=\\\"#路由懒加载写法\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 路由懒加载写法:</h3> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token comment\\\">// 我所采用的方法，个人感觉比较简洁一些，少了一步引入赋值。</span>\\n<span class=\\\"token keyword\\\">const</span> router <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">VueRouter</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span>\\n    routes<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">[</span>\\n    path<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'/app'</span><span class=\\\"token punctuation\\\">,</span>\\n    component<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=&gt;</span> <span class=\\\"token keyword\\\">import</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'./app'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span>  <span class=\\\"token comment\\\">// 引入组件</span>\\n    <span class=\\\"token punctuation\\\">]</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token comment\\\">// Vue路由文档的写法:</span>\\n<span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">app</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=&gt;</span> <span class=\\\"token keyword\\\">import</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'./app.vue'</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token comment\\\">// 引入组件</span>\\n<span class=\\\"token keyword\\\">const</span> router <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">VueRouter</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span>\\n    routes<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">[</span>\\n    <span class=\\\"token punctuation\\\">{</span> path<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'/app'</span><span class=\\\"token punctuation\\\">,</span> component<span class=\\\"token punctuation\\\">:</span> app <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token punctuation\\\">]</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br><span class=\\\"line-number\\\">5</span><br><span class=\\\"line-number\\\">6</span><br><span class=\\\"line-number\\\">7</span><br><span class=\\\"line-number\\\">8</span><br><span class=\\\"line-number\\\">9</span><br><span class=\\\"line-number\\\">10</span><br><span class=\\\"line-number\\\">11</span><br><span class=\\\"line-number\\\">12</span><br><span class=\\\"line-number\\\">13</span><br><span class=\\\"line-number\\\">14</span><br></div></div><p>文档的写法在于问题在于：如果我们的路由比较多的话，是不是要在路由上方引入赋值十几行组件？</p> <p>第一种跟第二种方法相比就是把引入赋值的一步，直接写在<code>component</code>上面，本质上是一样的。两种方式都可以的，大家自由选择哈。</p> <hr> <h3 id=\\\"路由的项目启动页和404页面\\\"><a href=\\\"#路由的项目启动页和404页面\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 路由的项目启动页和404页面</h3> <p>实际上这也就是一个设置而已:</p> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">export</span> <span class=\\\"token keyword\\\">default</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Router</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span>\\n    routes<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">[</span>\\n    <span class=\\\"token punctuation\\\">{</span>\\n        path<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'/'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token comment\\\">// 项目启动页</span>\\n        redirect<span class=\\\"token punctuation\\\">:</span><span class=\\\"token string\\\">'/login'</span>  <span class=\\\"token comment\\\">// 重定向到下方声明的路由 </span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token punctuation\\\">{</span>\\n        path<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'*'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token comment\\\">// 404 页面 </span>\\n        component<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=&gt;</span> <span class=\\\"token keyword\\\">import</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'./notFind'</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token comment\\\">// 或者使用component也可以的</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token punctuation\\\">]</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br><span class=\\\"line-number\\\">5</span><br><span class=\\\"line-number\\\">6</span><br><span class=\\\"line-number\\\">7</span><br><span class=\\\"line-number\\\">8</span><br><span class=\\\"line-number\\\">9</span><br><span class=\\\"line-number\\\">10</span><br><span class=\\\"line-number\\\">11</span><br><span class=\\\"line-number\\\">12</span><br></div></div><p>比如你的域名为:<code>www.baidu.com</code></p> <p>项目启动页指的是: 当你进入<code>www.baidu.com</code>，会自动跳转到login登录页。</p> <p>404页面指的是: 当进入一个没有 声明/没有匹配 的路由页面时就会跳转到404页面。</p> <p>比如进入<code>www.baidu.com/testRouter</code>,就会自动跳转到<code>notFind</code>页面。</p> <p>当你没有声明一个404页面，进入<code>www.baidu.com/testRouter</code>，显示的页面是一片空白。</p> <hr> <h3 id=\\\"vue调试神器-vue-devtools\\\"><a href=\\\"#vue调试神器-vue-devtools\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> Vue调试神器:vue-devtools</h3> <p>每次调试的时候，写一堆<code>console</code>是否很烦？想要<strong>更快知道组件/Vuex内数据的变化</strong>？</p> <p>那么这款<strong>尤大开发</strong>的调试神器:vue-devtools，你真的要了解一下了。</p> <p>这波稳赚不赔，真的能提高开发效率。</p> <p><strong>安装方法</strong>：</p> \"),_vm._ssrNode(\"<ul>\",\"</ul>\",[_vm._ssrNode(\"<li>谷歌商店+科学上网,搜索vue-devtools即可安装。</li> \"),_vm._ssrNode(\"<li>\",\"</li>\",[_vm._ssrNode(\"不会科学上网？\"),_vm._ssrNode(\"<a href=\\\"https://segmentfault.com/a/1190000009682735\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">\",\"</a>\",[_vm._ssrNode(\"手动安装\"),_c('OutboundLink')],2)],2)],2),_vm._ssrNode(\" <p><strong>安装之后</strong>：</p> <p>在chrome开发者工具中会看一个vue的一栏，如下对我们网页应用内数据变化，组件层级等信息能够有更准确快速的了解。</p> <p><img src=\\\"https://github.com/OBKoro1/articleImg_src/blob/master/juejin/163c50e5198f6b8c?raw=true\\\" alt></p> <hr> <h3 id=\\\"前几个月也写过一篇类似的\\\"><a href=\\\"#前几个月也写过一篇类似的\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 前几个月也写过一篇类似的:</h3> \"),_vm._ssrNode(\"<p>\",\"</p>\",[_vm._ssrNode(\"<a href=\\\"https://juejin.im/post/5a587b46f265da3e3b7a7677\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">\",\"</a>\",[_vm._ssrNode(\"Vue 实践过程中的几个问题\"),_c('OutboundLink')],2)]),_vm._ssrNode(\" <hr> <h2 id=\\\"结语\\\"><a href=\\\"#结语\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 结语</h2> <p>本文的内容很多都在Vue文档里面有过说明，推荐大家可以多看看Vue文档，不止看教程篇，还有文档的Api什么的，也都可以看。然后其实还有两三点想写的，因为预计篇幅都会比较长一点，所以准备留到以后的文章里面吧~\\n</p> \"),_vm._ssrNode(\"<h3 id=\\\"点个star支持我一下\\\">\",\"</h3>\",[_vm._ssrNode(\"<a href=\\\"#点个star支持我一下\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 点个\"),_vm._ssrNode(\"<a href=\\\"https://github.com/OBKoro1/codeBlack\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">\",\"</a>\",[_vm._ssrNode(\"Star\"),_c('OutboundLink')],2),_vm._ssrNode(\"支持我一下~\")],2),_vm._ssrNode(\" \"),_c('comment-comment')],2)}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }"]}