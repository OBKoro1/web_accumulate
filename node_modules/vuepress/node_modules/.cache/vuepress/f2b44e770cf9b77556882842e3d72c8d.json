{"remainingRequest":"/Users/koro/work/web_my/web_accumulate/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/koro/work/web_my/web_accumulate/node_modules/cache-loader/dist/cjs.js??ref--1-0!/Users/koro/work/web_my/web_accumulate/node_modules/vue-loader/lib/index.js??ref--1-1!/Users/koro/work/web_my/web_accumulate/node_modules/vuepress/lib/webpack/markdownLoader.js??ref--1-2!/Users/koro/work/web_my/web_accumulate/docs/accumulate/JS/JS基础-call和apply还有bind.md?vue&type=template&id=386cd0fe&","dependencies":[{"path":"/Users/koro/work/web_my/web_accumulate/docs/accumulate/JS/JS基础-call和apply还有bind.md","mtime":1636107879468},{"path":"/Users/koro/work/web_my/web_accumulate/node_modules/cache-loader/dist/cjs.js","mtime":1557296864520},{"path":"/Users/koro/work/web_my/web_accumulate/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1557296867191},{"path":"/Users/koro/work/web_my/web_accumulate/node_modules/cache-loader/dist/cjs.js","mtime":1557296864520},{"path":"/Users/koro/work/web_my/web_accumulate/node_modules/vue-loader/lib/index.js","mtime":1557296867190},{"path":"/Users/koro/work/web_my/web_accumulate/node_modules/vuepress/lib/webpack/markdownLoader.js","mtime":1557296867284}],"contextDependencies":[],"result":["var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"content\"},[_vm._ssrNode(\"<h1 id=\\\"js基础系列-重新认识call-apply-bind\\\"><a href=\\\"#js基础系列-重新认识call-apply-bind\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> JS基础系列-重新认识call apply bind</h1> <p>函数原型链中的 apply，call 和 bind 方法是 JavaScript 中相当重要的概念，与 this 关键字密切相关，相当一部分人对它们的理解还是比较浅显，所谓js基础扎实，绕不开这些基础常用的API，这次让我们来彻底掌握它们吧！</p> <h3 id=\\\"目录\\\"><a href=\\\"#目录\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 目录</h3> <ol><li>call,apply,bind的基本介绍</li> <li>call/apply/bind的核心理念：借用方法</li> <li>call和apply的应用场景</li> <li>bind的应用场景</li> <li>中高级面试题：手写call/apply、bind</li></ol> <hr> <h2 id=\\\"call-apply-bind的基本介绍\\\"><a href=\\\"#call-apply-bind的基本介绍\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> call,apply,bind的基本介绍</h2> <h4 id=\\\"语法：\\\"><a href=\\\"#语法：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 语法：</h4> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code>fun<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">call</span><span class=\\\"token punctuation\\\">(</span>thisArg<span class=\\\"token punctuation\\\">,</span> param1<span class=\\\"token punctuation\\\">,</span> param2<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token operator\\\">...</span><span class=\\\"token punctuation\\\">)</span>\\nfun<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">apply</span><span class=\\\"token punctuation\\\">(</span>thisArg<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">[</span>param1<span class=\\\"token punctuation\\\">,</span>param2<span class=\\\"token punctuation\\\">,</span><span class=\\\"token operator\\\">...</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span>\\nfun<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">bind</span><span class=\\\"token punctuation\\\">(</span>thisArg<span class=\\\"token punctuation\\\">,</span> param1<span class=\\\"token punctuation\\\">,</span> param2<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token operator\\\">...</span><span class=\\\"token punctuation\\\">)</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br></div></div><h4 id=\\\"返回值：\\\"><a href=\\\"#返回值：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 返回值：</h4> <p>call/apply：<code>fun</code>执行的结果\\nbind：返回<code>fun</code>的拷贝，并拥有指定的<code>this</code>值和初始参数</p> <h4 id=\\\"参数\\\"><a href=\\\"#参数\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 参数</h4> <p><code>thisArg</code>(可选):</p> <ol><li><strong><code>fun</code>的<code>this</code>指向<code>thisArg</code>对象</strong></li> <li>非严格模式下：thisArg指定为null，undefined，fun中的this指向window对象.</li> <li>严格模式下：<code>fun</code>的<code>this</code>为<code>undefined</code></li> <li>值为原始值(数字，字符串，布尔值)的this会指向该原始值的自动包装对象，如 String、Number、Boolean</li></ol> <p><code>param1,param2</code>(可选): 传给<code>fun</code>的参数。</p> <ol><li>如果param不传或为 null/undefined，则表示不需要传入任何参数.</li> <li>apply第二个参数为数组，数组内的值为传给<code>fun</code>的参数。</li></ol> <h3 id=\\\"调用call-apply-bind的必须是个函数\\\"><a href=\\\"#调用call-apply-bind的必须是个函数\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 调用<code>call</code>/<code>apply</code>/<code>bind</code>的必须是个函数</h3> <p>call、apply和bind是挂在Function对象上的三个方法,只有函数才有这些方法。</p> <p>只要是函数就可以，比如: <code>Object.prototype.toString</code>就是个函数，我们经常看到这样的用法：<code>Object.prototype.toString.call(data)</code></p> <h3 id=\\\"作用：\\\"><a href=\\\"#作用：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 作用：</h3> <p>改变函数执行时的this指向，目前所有关于它们的运用，都是基于这一点来进行的。</p> <h3 id=\\\"如何不弄混call和apply\\\"><a href=\\\"#如何不弄混call和apply\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 如何不弄混call和apply</h3> <blockquote><p>弄混这两个API的不在少数，不要小看这个问题，记住下面的这个方法就好了。</p></blockquote> <p><code>apply</code>是以<code>a</code>开头，它传给<code>fun</code>的参数是<code>Array</code>，也是以<code>a</code>开头的。</p> <h3 id=\\\"区别：\\\"><a href=\\\"#区别：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 区别：</h3> <h4 id=\\\"call与apply的唯一区别\\\"><a href=\\\"#call与apply的唯一区别\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> call与apply的唯一区别</h4> <p>传给<code>fun</code>的参数写法不同：</p> <ul><li><code>apply</code>是第2个参数，这个参数是一个数组：传给<code>fun</code>参数都写在数组中。</li> <li><code>call</code>从第2~n的参数都是传给<code>fun</code>的。</li></ul> <h4 id=\\\"call-apply与bind的区别\\\"><a href=\\\"#call-apply与bind的区别\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> call/apply与bind的区别</h4> <p><strong>执行</strong>：</p> <ul><li>call/apply改变了函数的this上下文后马上<strong>执行该函数</strong></li> <li>bind则是返回改变了上下文后的函数,<strong>不执行该函数</strong></li></ul> <p><strong>返回值</strong>:</p> <ul><li>call/apply 返回<code>fun</code>的执行结果</li> <li>bind返回fun的拷贝，并指定了fun的this指向，保存了fun的参数。</li></ul> <p>返回值这段在下方bind应用中有详细的示例解析。</p> <h2 id=\\\"call-apply-bind的核心理念：借用方法\\\"><a href=\\\"#call-apply-bind的核心理念：借用方法\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> call/apply/bind的核心理念：借用方法</h2> \"),_vm._ssrNode(\"<p>\",\"</p>\",[_vm._ssrNode(\"看到一个非常棒的\"),_vm._ssrNode(\"<a href=\\\"https://juejin.im/post/5c493086f265da6115111ce4\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">\",\"</a>\",[_vm._ssrNode(\"例子\"),_c('OutboundLink')],2),_vm._ssrNode(\"：\")],2),_vm._ssrNode(\" <p>生活中：</p> <p>平时没时间做饭的我，周末想给孩子炖个腌笃鲜尝尝。但是没有适合的锅，而我又不想出去买。所以就问邻居借了一个锅来用，这样既达到了目的，又节省了开支，一举两得。</p> <p>程序中：</p> <p>A对象有个方法，B对象因为某种原因也需要用到同样的方法，那么这时候我们是单独为 B 对象扩展一个方法呢，还是借用一下 A 对象的方法呢？</p> <p>当然是借用 A 对象的方法啦，既达到了目的，又节省了内存。</p> <p><strong>这就是call/apply/bind的核心理念：借用方法</strong>。</p> <p><strong>借助已实现的方法，改变方法中数据的this指向，减少重复代码，节省内存。</strong></p> <h2 id=\\\"call和apply的应用场景：\\\"><a href=\\\"#call和apply的应用场景：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> call和apply的应用场景：</h2> <blockquote><p>这些应用场景，多加体会就可以发现它们的理念都是：借用方法</p></blockquote> <ol><li>判断数据类型：</li></ol> <p><code>Object.prototype.toString</code>用来判断类型再合适不过，借用它我们几乎可以判断所有类型的数据：</p> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">isType</span><span class=\\\"token punctuation\\\">(</span>data<span class=\\\"token punctuation\\\">,</span> type<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">const</span> typeObj <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token string\\\">'[object String]'</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'string'</span><span class=\\\"token punctuation\\\">,</span>\\n        <span class=\\\"token string\\\">'[object Number]'</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'number'</span><span class=\\\"token punctuation\\\">,</span>\\n        <span class=\\\"token string\\\">'[object Boolean]'</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'boolean'</span><span class=\\\"token punctuation\\\">,</span>\\n        <span class=\\\"token string\\\">'[object Null]'</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'null'</span><span class=\\\"token punctuation\\\">,</span>\\n        <span class=\\\"token string\\\">'[object Undefined]'</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'undefined'</span><span class=\\\"token punctuation\\\">,</span>\\n        <span class=\\\"token string\\\">'[object Object]'</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'object'</span><span class=\\\"token punctuation\\\">,</span>\\n        <span class=\\\"token string\\\">'[object Array]'</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'array'</span><span class=\\\"token punctuation\\\">,</span>\\n        <span class=\\\"token string\\\">'[object Function]'</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'function'</span><span class=\\\"token punctuation\\\">,</span>\\n        <span class=\\\"token string\\\">'[object Date]'</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'date'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token comment\\\">// Object.prototype.toString.call(new Date())</span>\\n        <span class=\\\"token string\\\">'[object RegExp]'</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'regExp'</span><span class=\\\"token punctuation\\\">,</span>\\n        <span class=\\\"token string\\\">'[object Map]'</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'map'</span><span class=\\\"token punctuation\\\">,</span>\\n        <span class=\\\"token string\\\">'[object Set]'</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'set'</span><span class=\\\"token punctuation\\\">,</span>\\n        <span class=\\\"token string\\\">'[object HTMLDivElement]'</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'dom'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token comment\\\">// document.querySelector('#app')</span>\\n        <span class=\\\"token string\\\">'[object WeakMap]'</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'weakMap'</span><span class=\\\"token punctuation\\\">,</span>\\n        <span class=\\\"token string\\\">'[object Window]'</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'window'</span><span class=\\\"token punctuation\\\">,</span>  <span class=\\\"token comment\\\">// Object.prototype.toString.call(window)</span>\\n        <span class=\\\"token string\\\">'[object Error]'</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'error'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token comment\\\">// new Error('1')</span>\\n        <span class=\\\"token string\\\">'[object Arguments]'</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'arguments'</span><span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token keyword\\\">let</span> name <span class=\\\"token operator\\\">=</span> Object<span class=\\\"token punctuation\\\">.</span>prototype<span class=\\\"token punctuation\\\">.</span>toString<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">call</span><span class=\\\"token punctuation\\\">(</span>data<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token comment\\\">// 借用Object.prototype.toString()获取数据类型</span>\\n    <span class=\\\"token keyword\\\">let</span> typeName <span class=\\\"token operator\\\">=</span> typeObj<span class=\\\"token punctuation\\\">[</span>name<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">||</span> <span class=\\\"token string\\\">'未知类型'</span> <span class=\\\"token comment\\\">// 匹配数据类型</span>\\n    <span class=\\\"token keyword\\\">return</span> typeName <span class=\\\"token operator\\\">===</span> type <span class=\\\"token comment\\\">// 判断该数据类型是否为传入的类型</span>\\n<span class=\\\"token punctuation\\\">}</span>\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>\\n    <span class=\\\"token function\\\">isType</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'object'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token comment\\\">// true</span>\\n    <span class=\\\"token function\\\">isType</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'array'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token comment\\\">// true</span>\\n    <span class=\\\"token function\\\">isType</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Date</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'object'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token comment\\\">// false</span>\\n    <span class=\\\"token function\\\">isType</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Date</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'date'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token comment\\\">// true</span>\\n<span class=\\\"token punctuation\\\">)</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br><span class=\\\"line-number\\\">5</span><br><span class=\\\"line-number\\\">6</span><br><span class=\\\"line-number\\\">7</span><br><span class=\\\"line-number\\\">8</span><br><span class=\\\"line-number\\\">9</span><br><span class=\\\"line-number\\\">10</span><br><span class=\\\"line-number\\\">11</span><br><span class=\\\"line-number\\\">12</span><br><span class=\\\"line-number\\\">13</span><br><span class=\\\"line-number\\\">14</span><br><span class=\\\"line-number\\\">15</span><br><span class=\\\"line-number\\\">16</span><br><span class=\\\"line-number\\\">17</span><br><span class=\\\"line-number\\\">18</span><br><span class=\\\"line-number\\\">19</span><br><span class=\\\"line-number\\\">20</span><br><span class=\\\"line-number\\\">21</span><br><span class=\\\"line-number\\\">22</span><br><span class=\\\"line-number\\\">23</span><br><span class=\\\"line-number\\\">24</span><br><span class=\\\"line-number\\\">25</span><br><span class=\\\"line-number\\\">26</span><br><span class=\\\"line-number\\\">27</span><br><span class=\\\"line-number\\\">28</span><br><span class=\\\"line-number\\\">29</span><br><span class=\\\"line-number\\\">30</span><br></div></div><ol start=\\\"2\\\"><li>类数组借用数组的方法：</li></ol> <p>类数组因为不是真正的数组所有没有数组类型上自带的种种方法，所以我们需要去借用数组的方法。</p> <p>比如借用数组的push方法：</p> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">var</span> arrayLike <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'OB'</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'Koro1'</span><span class=\\\"token punctuation\\\">,</span>\\n  length<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">2</span>\\n<span class=\\\"token punctuation\\\">}</span>\\nArray<span class=\\\"token punctuation\\\">.</span>prototype<span class=\\\"token punctuation\\\">.</span>push<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">call</span><span class=\\\"token punctuation\\\">(</span>arrayLike<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'添加元素1'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'添加元素2'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>arrayLike<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token comment\\\">// {&quot;0&quot;:&quot;OB&quot;,&quot;1&quot;:&quot;Koro1&quot;,&quot;2&quot;:&quot;添加元素1&quot;,&quot;3&quot;:&quot;添加元素2&quot;,&quot;length&quot;:4}</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br><span class=\\\"line-number\\\">5</span><br><span class=\\\"line-number\\\">6</span><br><span class=\\\"line-number\\\">7</span><br></div></div><ol start=\\\"3\\\"><li>apply获取数组最大值最小值：</li></ol> <p>apply直接传递数组做要调用方法的参数，也省一步展开数组，比如使用<code>Math.max</code>、<code>Math.min</code>来获取数组的最大值/最小值:</p> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">const</span> arr <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">15</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">6</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">12</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">13</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">16</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">const</span> max <span class=\\\"token operator\\\">=</span> Math<span class=\\\"token punctuation\\\">.</span>max<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">apply</span><span class=\\\"token punctuation\\\">(</span>Math<span class=\\\"token punctuation\\\">,</span> arr<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 16</span>\\n<span class=\\\"token keyword\\\">const</span> min <span class=\\\"token operator\\\">=</span> Math<span class=\\\"token punctuation\\\">.</span>min<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">apply</span><span class=\\\"token punctuation\\\">(</span>Math<span class=\\\"token punctuation\\\">,</span> arr<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 6</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br></div></div><ol start=\\\"4\\\"><li>继承</li></ol> <p>ES5的继承也都是通过借用父类的构造方法来实现父类方法/属性的继承：</p> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token comment\\\">// 父类</span>\\n<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">supFather</span><span class=\\\"token punctuation\\\">(</span>name<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>name <span class=\\\"token operator\\\">=</span> name<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>colors <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token string\\\">'red'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'blue'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'green'</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 复杂类型</span>\\n<span class=\\\"token punctuation\\\">}</span>\\nsupFather<span class=\\\"token punctuation\\\">.</span>prototype<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function-variable function\\\">sayName</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span>age<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>name<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'age'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token comment\\\">// 子类</span>\\n<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">sub</span><span class=\\\"token punctuation\\\">(</span>name<span class=\\\"token punctuation\\\">,</span> age<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token comment\\\">// 借用父类的方法：修改它的this指向,赋值父类的构造函数里面方法、属性到子类上</span>\\n    supFather<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">call</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">,</span> name<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>age <span class=\\\"token operator\\\">=</span> age<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token comment\\\">// 重写子类的prototype，修正constructor指向</span>\\n<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">inheritPrototype</span><span class=\\\"token punctuation\\\">(</span>sonFn<span class=\\\"token punctuation\\\">,</span> fatherFn<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    sonFn<span class=\\\"token punctuation\\\">.</span>prototype <span class=\\\"token operator\\\">=</span> Object<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">create</span><span class=\\\"token punctuation\\\">(</span>fatherFn<span class=\\\"token punctuation\\\">.</span>prototype<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 继承父类的属性以及方法</span>\\n    sonFn<span class=\\\"token punctuation\\\">.</span>prototype<span class=\\\"token punctuation\\\">.</span>constructor <span class=\\\"token operator\\\">=</span> sonFn<span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 修正constructor指向到继承的那个函数上</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token function\\\">inheritPrototype</span><span class=\\\"token punctuation\\\">(</span>sub<span class=\\\"token punctuation\\\">,</span> supFather<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\nsub<span class=\\\"token punctuation\\\">.</span>prototype<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function-variable function\\\">sayAge</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>age<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'foo'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token comment\\\">// 实例化子类，可以在实例上找到属性、方法</span>\\n<span class=\\\"token keyword\\\">const</span> instance1 <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">sub</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">&quot;OBKoro1&quot;</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">24</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">const</span> instance2 <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">sub</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">&quot;小明&quot;</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">18</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\ninstance1<span class=\\\"token punctuation\\\">.</span>colors<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">push</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'black'</span><span class=\\\"token punctuation\\\">)</span>\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>instance1<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token comment\\\">// {&quot;name&quot;:&quot;OBKoro1&quot;,&quot;colors&quot;:[&quot;red&quot;,&quot;blue&quot;,&quot;green&quot;,&quot;black&quot;],&quot;age&quot;:24}</span>\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>instance2<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token comment\\\">// {&quot;name&quot;:&quot;小明&quot;,&quot;colors&quot;:[&quot;red&quot;,&quot;blue&quot;,&quot;green&quot;],&quot;age&quot;:18} </span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br><span class=\\\"line-number\\\">5</span><br><span class=\\\"line-number\\\">6</span><br><span class=\\\"line-number\\\">7</span><br><span class=\\\"line-number\\\">8</span><br><span class=\\\"line-number\\\">9</span><br><span class=\\\"line-number\\\">10</span><br><span class=\\\"line-number\\\">11</span><br><span class=\\\"line-number\\\">12</span><br><span class=\\\"line-number\\\">13</span><br><span class=\\\"line-number\\\">14</span><br><span class=\\\"line-number\\\">15</span><br><span class=\\\"line-number\\\">16</span><br><span class=\\\"line-number\\\">17</span><br><span class=\\\"line-number\\\">18</span><br><span class=\\\"line-number\\\">19</span><br><span class=\\\"line-number\\\">20</span><br><span class=\\\"line-number\\\">21</span><br><span class=\\\"line-number\\\">22</span><br><span class=\\\"line-number\\\">23</span><br><span class=\\\"line-number\\\">24</span><br><span class=\\\"line-number\\\">25</span><br><span class=\\\"line-number\\\">26</span><br><span class=\\\"line-number\\\">27</span><br><span class=\\\"line-number\\\">28</span><br><span class=\\\"line-number\\\">29</span><br></div></div><p>类似的应用场景还有很多，就不赘述了，关键在于它们借用方法的理念，不理解的话多看几遍。</p> <h2 id=\\\"call、apply，该用哪个？、\\\"><a href=\\\"#call、apply，该用哪个？、\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> call、apply，该用哪个？、</h2> <p>call,apply的效果完全一样，它们的区别也在于</p> <ul><li><strong>参数数量/顺序确定就用call，参数数量/顺序不确定的话就用apply</strong>。</li> <li>考虑可读性：参数数量不多就用call，参数数量比较多的话，把参数整合成数组，使用apply。</li> <li>参数集合已经是一个数组的情况，用apply，比如上文的获取数组最大值/最小值。</li></ul> <p>参数数量/顺序不确定的话就用apply，比如以下示例：</p> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">const</span> obj <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n    age<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">24</span><span class=\\\"token punctuation\\\">,</span>\\n    name<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'OBKoro1'</span><span class=\\\"token punctuation\\\">,</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token keyword\\\">const</span> obj2 <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n    age<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">777</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token function\\\">callObj</span><span class=\\\"token punctuation\\\">(</span>obj<span class=\\\"token punctuation\\\">,</span> handle<span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token function\\\">callObj</span><span class=\\\"token punctuation\\\">(</span>obj2<span class=\\\"token punctuation\\\">,</span> handle<span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token comment\\\">// 根据某些条件来决定要传递参数的数量、以及顺序</span>\\n<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">callObj</span><span class=\\\"token punctuation\\\">(</span>thisAge<span class=\\\"token punctuation\\\">,</span> fn<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">let</span> params <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">]</span>\\n    <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>thisAge<span class=\\\"token punctuation\\\">.</span>name<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        params<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">push</span><span class=\\\"token punctuation\\\">(</span>thisAge<span class=\\\"token punctuation\\\">.</span>name<span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>thisAge<span class=\\\"token punctuation\\\">.</span>age<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        params<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">push</span><span class=\\\"token punctuation\\\">(</span>thisAge<span class=\\\"token punctuation\\\">.</span>age<span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n    fn<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">apply</span><span class=\\\"token punctuation\\\">(</span>thisAge<span class=\\\"token punctuation\\\">,</span> params<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token comment\\\">// 数量和顺序不确定 不能使用call</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">handle</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token operator\\\">...</span>params<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'params'</span><span class=\\\"token punctuation\\\">,</span> params<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token comment\\\">// do some thing</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br><span class=\\\"line-number\\\">5</span><br><span class=\\\"line-number\\\">6</span><br><span class=\\\"line-number\\\">7</span><br><span class=\\\"line-number\\\">8</span><br><span class=\\\"line-number\\\">9</span><br><span class=\\\"line-number\\\">10</span><br><span class=\\\"line-number\\\">11</span><br><span class=\\\"line-number\\\">12</span><br><span class=\\\"line-number\\\">13</span><br><span class=\\\"line-number\\\">14</span><br><span class=\\\"line-number\\\">15</span><br><span class=\\\"line-number\\\">16</span><br><span class=\\\"line-number\\\">17</span><br><span class=\\\"line-number\\\">18</span><br><span class=\\\"line-number\\\">19</span><br><span class=\\\"line-number\\\">20</span><br><span class=\\\"line-number\\\">21</span><br><span class=\\\"line-number\\\">22</span><br><span class=\\\"line-number\\\">23</span><br></div></div><h2 id=\\\"bind的应用场景：\\\"><a href=\\\"#bind的应用场景：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> bind的应用场景：</h2> <h4 id=\\\"_1-保存函数参数：\\\"><a href=\\\"#_1-保存函数参数：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 1. 保存函数参数：</h4> <p>首先来看下一道经典的面试题：</p> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">for</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">var</span> i <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">;</span> i <span class=\\\"token operator\\\">&lt;=</span> <span class=\\\"token number\\\">5</span><span class=\\\"token punctuation\\\">;</span> i<span class=\\\"token operator\\\">++</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n   <span class=\\\"token function\\\">setTimeout</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">test</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>i<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token comment\\\">// 依次输出：6 6 6 6 6</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span> i <span class=\\\"token operator\\\">*</span> <span class=\\\"token number\\\">1000</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br><span class=\\\"line-number\\\">5</span><br></div></div><p>造成这个现象的原因是等到<code>setTimeout</code>异步执行时,<code>i</code>已经变成6了。</p> \"),_vm._ssrNode(\"<p>\",\"</p>\",[_vm._ssrNode(\"关于js事件循环机制不理解的同学，可以看我这篇博客：\"),_vm._ssrNode(\"<a href=\\\"https://juejin.im/post/5b24b116e51d4558a65fdb70\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">\",\"</a>\",[_vm._ssrNode(\"Js 的事件循环(Event Loop)机制以及实例讲解\"),_c('OutboundLink')],2)],2),_vm._ssrNode(\" <p>那么如何使他输出: 1,2,3,4,5呢？</p> <p>方法有很多：</p> <ul><li>闭包, 保存变量</li></ul> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">for</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">var</span> i <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">;</span> i <span class=\\\"token operator\\\">&lt;=</span> <span class=\\\"token number\\\">5</span><span class=\\\"token punctuation\\\">;</span> i<span class=\\\"token operator\\\">++</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span>i<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token function\\\">setTimeout</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n            console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'闭包:'</span><span class=\\\"token punctuation\\\">,</span> i<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 依次输出：1 2 3 4 5</span>\\n        <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span> i <span class=\\\"token operator\\\">*</span> <span class=\\\"token number\\\">1000</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">(</span>i<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br><span class=\\\"line-number\\\">5</span><br><span class=\\\"line-number\\\">6</span><br><span class=\\\"line-number\\\">7</span><br></div></div><p>在这里创建了一个闭包，每次循环都会把<code>i</code>的最新值传进去，然后被闭包保存起来。</p> <ul><li><strong>bind</strong></li></ul> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">for</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">var</span> i <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">;</span> i <span class=\\\"token operator\\\">&lt;=</span> <span class=\\\"token number\\\">5</span><span class=\\\"token punctuation\\\">;</span> i<span class=\\\"token operator\\\">++</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token comment\\\">// 缓存参数</span>\\n    <span class=\\\"token function\\\">setTimeout</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span>i<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'bind'</span><span class=\\\"token punctuation\\\">,</span> i<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token comment\\\">// 依次输出：1 2 3 4 5</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">bind</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">null</span><span class=\\\"token punctuation\\\">,</span> i<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span> i <span class=\\\"token operator\\\">*</span> <span class=\\\"token number\\\">1000</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br><span class=\\\"line-number\\\">5</span><br><span class=\\\"line-number\\\">6</span><br></div></div><p><strong>实际上这里也用了闭包，我们知道bind会返回一个函数，这个函数也是闭包</strong>。</p> <p>它保存了函数的this指向、初始参数，每次<code>i</code>的变更都会被bind的闭包存起来，所以输出1-5。</p> <p>具体细节，下面有个手写bind方法，研究一下，就能搞懂了。</p> <ul><li><code>let</code></li></ul> \"),_vm._ssrNode(\"<p>\",\"</p>\",[_vm._ssrNode(\"用<code>let</code>声明<code>i</code>也可以输出1-5: 因为<code>let</code>是块级作用域,所以每次都会创建一个新的变量,所以<code>setTimeout</code>每次读的值都是不同的,\"),_vm._ssrNode(\"<a href=\\\"https://segmentfault.com/q/1010000007541743\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">\",\"</a>\",[_vm._ssrNode(\"详解\"),_c('OutboundLink')],2),_vm._ssrNode(\"。\")],2),_vm._ssrNode(\" <h4 id=\\\"_2-回调函数this丢失问题：\\\"><a href=\\\"#_2-回调函数this丢失问题：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 2. 回调函数this丢失问题：</h4> <p>这是一个常见的问题，下面是我在开发VSCode插件处理<code>webview</code>通信时，遇到的真实问题，一开始以为VSCode的API哪里出问题，调试了一番才发现是<code>this</code>指向丢失的问题。</p> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">Page</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token function\\\">constructor</span><span class=\\\"token punctuation\\\">(</span>callBack<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>className <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">'Page'</span>\\n        <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>MessageCallBack <span class=\\\"token operator\\\">=</span> callBack <span class=\\\"token comment\\\">// </span>\\n        <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">MessageCallBack</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'发给注册页面的信息'</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token comment\\\">// 执行PageA的回调函数</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">PageA</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token function\\\">constructor</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>className <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">'PageA'</span>\\n        <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>pageClass <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Page</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>handleMessage<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token comment\\\">// 注册页面 传递回调函数 问题在这里</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token comment\\\">// 与页面通信回调</span>\\n    <span class=\\\"token function\\\">handleMessage</span><span class=\\\"token punctuation\\\">(</span>msg<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'处理通信'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>className<span class=\\\"token punctuation\\\">,</span> msg<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token comment\\\">//  'Page' this指向错误</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">PageA</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br><span class=\\\"line-number\\\">5</span><br><span class=\\\"line-number\\\">6</span><br><span class=\\\"line-number\\\">7</span><br><span class=\\\"line-number\\\">8</span><br><span class=\\\"line-number\\\">9</span><br><span class=\\\"line-number\\\">10</span><br><span class=\\\"line-number\\\">11</span><br><span class=\\\"line-number\\\">12</span><br><span class=\\\"line-number\\\">13</span><br><span class=\\\"line-number\\\">14</span><br><span class=\\\"line-number\\\">15</span><br><span class=\\\"line-number\\\">16</span><br><span class=\\\"line-number\\\">17</span><br><span class=\\\"line-number\\\">18</span><br></div></div><h4 id=\\\"回调函数this为何会丢失？\\\"><a href=\\\"#回调函数this为何会丢失？\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 回调函数<code>this</code>为何会丢失？</h4> <p>显然声明的时候不会出现问题，执行回调函数的时候也不可能出现问题。</p> <p>问题出在传递回调函数的时候：</p> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>pageClass <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Page</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>handleMessage<span class=\\\"token punctuation\\\">)</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br></div></div><p>因为传递过去的<code>this.handleMessage</code>是一个函数内存地址，没有上下文对象，也就是说该函数没有绑定它的<code>this</code>指向。</p> \"),_vm._ssrNode(\"<p>\",\"</p>\",[_vm._ssrNode(\"那它的<code>this</code>指向于它所应用的\"),_vm._ssrNode(\"<a href=\\\"https://juejin.im/post/5b3715def265da59af40a630#comment\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">\",\"</a>\",[_vm._ssrNode(\"绑定规则\"),_c('OutboundLink')],2),_vm._ssrNode(\"：\")],2),_vm._ssrNode(\" <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">Page</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token function\\\">constructor</span><span class=\\\"token punctuation\\\">(</span>callBack<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>className <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">'Page'</span>\\n        <span class=\\\"token comment\\\">// callBack() // 直接执行的话 由于class 内部是严格模式，所以this 实际指向的是 undefined</span>\\n        <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>MessageCallBack <span class=\\\"token operator\\\">=</span> callBack <span class=\\\"token comment\\\">// 回调函数的this 隐式绑定到class page</span>\\n        <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">MessageCallBack</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'发给注册页面的信息'</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br><span class=\\\"line-number\\\">5</span><br><span class=\\\"line-number\\\">6</span><br><span class=\\\"line-number\\\">7</span><br><span class=\\\"line-number\\\">8</span><br></div></div><p>既然知道问题了，那我们只要绑定回调函数的<code>this</code>指向为<code>PageA</code>就解决问题了。</p> <p><strong>回调函数this丢失的解决方案</strong>：</p> <ol><li><code>bind</code>绑定回调函数的<code>this</code>指向：</li></ol> <p>这是典型bind的应用场景, 绑定this指向，用做回调函数。</p> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>pageClass <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Page</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>handleMessage<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">bind</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token comment\\\">// 绑定回调函数的this指向</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br></div></div><p>PS： 这也是为什么<code>react</code>的<code>render</code>函数在绑定回调函数的时候，也要使用bind绑定一下<code>this</code>的指向，也是因为同样的问题以及原理。</p> <ol start=\\\"2\\\"><li>箭头函数绑定this指向</li></ol> <p>箭头函数的this指向定义的时候外层第一个普通函数的this，在这里指的是class类：<code>PageA</code></p> \"),_vm._ssrNode(\"<p>\",\"</p>\",[_vm._ssrNode(\"这块内容，可以看下我之前写的博客：\"),_vm._ssrNode(\"<a href=\\\"https://juejin.im/post/5c76972af265da2dc4538b64#heading-3\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">\",\"</a>\",[_vm._ssrNode(\"详解箭头函数和普通函数的区别以及箭头函数的注意事项、不适用场景\"),_c('OutboundLink')],2)],2),_vm._ssrNode(\" <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>pageClass <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Page</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=&gt;</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">handleMessage</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token comment\\\">// 箭头函数绑定this指向</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br></div></div><h2 id=\\\"中高级面试题-手写call-apply、bind：\\\"><a href=\\\"#中高级面试题-手写call-apply、bind：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 中高级面试题-手写call/apply、bind：</h2> <p>在大厂的面试中，手写实现call,apply,bind(特别是bind)一直是比较高频的面试题，在这里我们也一起来实现一下这几个函数。</p> <h4 id=\\\"你能手写实现一个call吗？\\\"><a href=\\\"#你能手写实现一个call吗？\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 你能手写实现一个<code>call</code>吗？</h4> <p><strong>思路</strong></p> \"),_vm._ssrNode(\"<ol>\",\"</ol>\",[_vm._ssrNode(\"<li>根据call的规则设置上下文对象,也就是<code>this</code>的指向。</li> \"),_vm._ssrNode(\"<li>\",\"</li>\",[_vm._ssrNode(\"通过设置<code>context</code>的属性,将函数的this指向\"),_vm._ssrNode(\"<a href=\\\"https://juejin.im/post/5b3715def265da59af40a630#heading-4\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">\",\"</a>\",[_vm._ssrNode(\"隐式绑定\"),_c('OutboundLink')],2),_vm._ssrNode(\"到context上\")],2),_vm._ssrNode(\" <li>通过隐式绑定执行函数并传递参数。</li> <li>删除临时属性，返回函数执行结果</li>\")],2),_vm._ssrNode(\" <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code>Function<span class=\\\"token punctuation\\\">.</span>prototype<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function-variable function\\\">myCall</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span>context<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token operator\\\">...</span>arr<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>context <span class=\\\"token operator\\\">===</span> <span class=\\\"token keyword\\\">null</span> <span class=\\\"token operator\\\">||</span> context <span class=\\\"token operator\\\">===</span> undefined<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n       <span class=\\\"token comment\\\">// 指定为 null 和 undefined 的 this 值会自动指向全局对象(浏览器中为window)</span>\\n        context <span class=\\\"token operator\\\">=</span> window \\n    <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">else</span> <span class=\\\"token punctuation\\\">{</span>\\n        context <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">Object</span><span class=\\\"token punctuation\\\">(</span>context<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token comment\\\">// 值为原始值（数字，字符串，布尔值）的 this 会指向该原始值的实例对象</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token keyword\\\">const</span> specialPrototype <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">Symbol</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'特殊属性Symbol'</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token comment\\\">// 用于临时储存函数</span>\\n    context<span class=\\\"token punctuation\\\">[</span>specialPrototype<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 函数的this指向隐式绑定到context上</span>\\n    <span class=\\\"token keyword\\\">let</span> result <span class=\\\"token operator\\\">=</span> context<span class=\\\"token punctuation\\\">[</span>specialPrototype<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token operator\\\">...</span>arr<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 通过隐式绑定执行函数并传递参数</span>\\n    <span class=\\\"token keyword\\\">delete</span> context<span class=\\\"token punctuation\\\">[</span>specialPrototype<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 删除上下文对象的属性</span>\\n    <span class=\\\"token keyword\\\">return</span> result<span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 返回函数执行结果</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br><span class=\\\"line-number\\\">5</span><br><span class=\\\"line-number\\\">6</span><br><span class=\\\"line-number\\\">7</span><br><span class=\\\"line-number\\\">8</span><br><span class=\\\"line-number\\\">9</span><br><span class=\\\"line-number\\\">10</span><br><span class=\\\"line-number\\\">11</span><br><span class=\\\"line-number\\\">12</span><br><span class=\\\"line-number\\\">13</span><br></div></div><h4 id=\\\"判断函数的上下文对象：\\\"><a href=\\\"#判断函数的上下文对象：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 判断函数的上下文对象：</h4> <p>很多人判断函数上下文对象，只是简单的以<code>context</code>是否为false来判断,比如：</p> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token comment\\\">// 判断函数上下文绑定到`window`不够严谨</span>\\ncontext <span class=\\\"token operator\\\">=</span> context <span class=\\\"token operator\\\">?</span> <span class=\\\"token function\\\">Object</span><span class=\\\"token punctuation\\\">(</span>context<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">:</span> window<span class=\\\"token punctuation\\\">;</span> \\ncontext <span class=\\\"token operator\\\">=</span> context <span class=\\\"token operator\\\">||</span> window<span class=\\\"token punctuation\\\">;</span> \\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br></div></div><p>经过测试,以下三种为false的情况,函数的上下文对象都会绑定到<code>window</code>上：</p> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token comment\\\">// 网上的其他绑定函数上下文对象的方案: context = context || window; </span>\\n<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">handle</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token operator\\\">...</span>params<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>test <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">'handle'</span>\\n    console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'params'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token operator\\\">...</span>params<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token comment\\\">// do some thing</span>\\n<span class=\\\"token punctuation\\\">}</span>\\nhandle<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">elseCall</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">''</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token comment\\\">// window</span>\\nhandle<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">elseCall</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token comment\\\">// window</span>\\nhandle<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">elseCall</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token boolean\\\">false</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token comment\\\">// window</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br><span class=\\\"line-number\\\">5</span><br><span class=\\\"line-number\\\">6</span><br><span class=\\\"line-number\\\">7</span><br><span class=\\\"line-number\\\">8</span><br></div></div><p>而<code>call</code>则将函数的上下文对象会绑定到这些原始值的实例对象上：</p> <p><img src=\\\"https://user-gold-cdn.xitu.io/2019/8/4/16c5bdb742a5f2b0?w=474&h=92&f=png&s=18011\\\" alt=\\\"原始值的实例对象\\\"></p> <p>所以正确的解决方案，应该是像我上面那么做：</p> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token comment\\\">// 正确判断函数上下文对象</span>\\n    <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>context <span class=\\\"token operator\\\">===</span> <span class=\\\"token keyword\\\">null</span> <span class=\\\"token operator\\\">||</span> context <span class=\\\"token operator\\\">===</span> undefined<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n       <span class=\\\"token comment\\\">// 指定为 null 和 undefined 的 this 值会自动指向全局对象(浏览器中为window)</span>\\n        context <span class=\\\"token operator\\\">=</span> window \\n    <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">else</span> <span class=\\\"token punctuation\\\">{</span>\\n        context <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">Object</span><span class=\\\"token punctuation\\\">(</span>context<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token comment\\\">// 值为原始值（数字，字符串，布尔值）的 this 会指向该原始值的实例对象</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br><span class=\\\"line-number\\\">5</span><br><span class=\\\"line-number\\\">6</span><br><span class=\\\"line-number\\\">7</span><br></div></div><h3 id=\\\"使用symbol临时储存函数\\\"><a href=\\\"#使用symbol临时储存函数\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 使用<code>Symbol</code>临时储存函数</h3> <p>尽管之前用的属性是<code>testFn</code>但不得不承认，还是有跟上下文对象的原属性冲突的风险,经网友提醒使用<code>Symbol</code>就不会出现冲突了。</p> <p>考虑兼容的话,还是用尽量特殊的属性，比如带上自己的ID：<code>OBKoro1TestFn</code>。</p> <h4 id=\\\"你能手写实现一个apply吗？\\\"><a href=\\\"#你能手写实现一个apply吗？\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 你能手写实现一个<code>apply</code>吗？</h4> <p>思路：</p> <ol><li>传递给函数的参数处理，不太一样，其他部分跟<code>call</code>一样。</li> <li><code>apply</code>接受第二个参数为类数组对象, 这里用了JavaScript权威指南中判断是否为类数组对象的方法。</li></ol> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code>Function<span class=\\\"token punctuation\\\">.</span>prototype<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function-variable function\\\">myApply</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span>context<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>context <span class=\\\"token operator\\\">===</span> <span class=\\\"token keyword\\\">null</span> <span class=\\\"token operator\\\">||</span> context <span class=\\\"token operator\\\">===</span> undefined<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        context <span class=\\\"token operator\\\">=</span> window <span class=\\\"token comment\\\">// 指定为 null 和 undefined 的 this 值会自动指向全局对象(浏览器中为window)</span>\\n    <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">else</span> <span class=\\\"token punctuation\\\">{</span>\\n        context <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">Object</span><span class=\\\"token punctuation\\\">(</span>context<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token comment\\\">// 值为原始值（数字，字符串，布尔值）的 this 会指向该原始值的实例对象</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token comment\\\">// JavaScript权威指南判断是否为类数组对象</span>\\n    <span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">isArrayLike</span><span class=\\\"token punctuation\\\">(</span>o<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>o <span class=\\\"token operator\\\">&amp;&amp;</span>                                    <span class=\\\"token comment\\\">// o不是null、undefined等</span>\\n            <span class=\\\"token keyword\\\">typeof</span> o <span class=\\\"token operator\\\">===</span> <span class=\\\"token string\\\">'object'</span> <span class=\\\"token operator\\\">&amp;&amp;</span>                <span class=\\\"token comment\\\">// o是对象</span>\\n            <span class=\\\"token function\\\">isFinite</span><span class=\\\"token punctuation\\\">(</span>o<span class=\\\"token punctuation\\\">.</span>length<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">&amp;&amp;</span>                   <span class=\\\"token comment\\\">// o.length是有限数值</span>\\n            o<span class=\\\"token punctuation\\\">.</span>length <span class=\\\"token operator\\\">&gt;=</span> <span class=\\\"token number\\\">0</span> <span class=\\\"token operator\\\">&amp;&amp;</span>                        <span class=\\\"token comment\\\">// o.length为非负值</span>\\n            o<span class=\\\"token punctuation\\\">.</span>length <span class=\\\"token operator\\\">===</span> Math<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">floor</span><span class=\\\"token punctuation\\\">(</span>o<span class=\\\"token punctuation\\\">.</span>length<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">&amp;&amp;</span>    <span class=\\\"token comment\\\">// o.length是整数</span>\\n            o<span class=\\\"token punctuation\\\">.</span>length <span class=\\\"token operator\\\">&lt;</span> <span class=\\\"token number\\\">4294967296</span><span class=\\\"token punctuation\\\">)</span>                  <span class=\\\"token comment\\\">// o.length &lt; 2^32</span>\\n            <span class=\\\"token keyword\\\">return</span> <span class=\\\"token boolean\\\">true</span>\\n        <span class=\\\"token keyword\\\">else</span>\\n            <span class=\\\"token keyword\\\">return</span> <span class=\\\"token boolean\\\">false</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token keyword\\\">const</span> specialPrototype <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">Symbol</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'特殊属性Symbol'</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token comment\\\">// 用于临时储存函数</span>\\n    context<span class=\\\"token punctuation\\\">[</span>specialPrototype<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 隐式绑定this指向到context上</span>\\n    <span class=\\\"token keyword\\\">let</span> args <span class=\\\"token operator\\\">=</span> arguments<span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 获取参数数组</span>\\n    <span class=\\\"token keyword\\\">let</span> result\\n    <span class=\\\"token comment\\\">// 处理传进来的第二个参数</span>\\n    <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>args<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token comment\\\">// 是否传递第二个参数</span>\\n        <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token operator\\\">!</span>Array<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">isArray</span><span class=\\\"token punctuation\\\">(</span>args<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">&amp;&amp;</span> <span class=\\\"token operator\\\">!</span><span class=\\\"token function\\\">isArrayLike</span><span class=\\\"token punctuation\\\">(</span>args<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n            <span class=\\\"token keyword\\\">throw</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">TypeError</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'myApply 第二个参数不为数组并且不为类数组对象抛出错误'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">else</span> <span class=\\\"token punctuation\\\">{</span>\\n            args <span class=\\\"token operator\\\">=</span> Array<span class=\\\"token punctuation\\\">.</span><span class=\\\"token keyword\\\">from</span><span class=\\\"token punctuation\\\">(</span>args<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token comment\\\">// 转为数组</span>\\n            result <span class=\\\"token operator\\\">=</span> context<span class=\\\"token punctuation\\\">[</span>specialPrototype<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token operator\\\">...</span>args<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 执行函数并展开数组，传递函数参数</span>\\n        <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">else</span> <span class=\\\"token punctuation\\\">{</span>\\n        result <span class=\\\"token operator\\\">=</span> context<span class=\\\"token punctuation\\\">[</span>specialPrototype<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 执行函数 </span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token keyword\\\">delete</span> context<span class=\\\"token punctuation\\\">[</span>specialPrototype<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 删除上下文对象的属性</span>\\n    <span class=\\\"token keyword\\\">return</span> result<span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 返回函数执行结果</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br><span class=\\\"line-number\\\">5</span><br><span class=\\\"line-number\\\">6</span><br><span class=\\\"line-number\\\">7</span><br><span class=\\\"line-number\\\">8</span><br><span class=\\\"line-number\\\">9</span><br><span class=\\\"line-number\\\">10</span><br><span class=\\\"line-number\\\">11</span><br><span class=\\\"line-number\\\">12</span><br><span class=\\\"line-number\\\">13</span><br><span class=\\\"line-number\\\">14</span><br><span class=\\\"line-number\\\">15</span><br><span class=\\\"line-number\\\">16</span><br><span class=\\\"line-number\\\">17</span><br><span class=\\\"line-number\\\">18</span><br><span class=\\\"line-number\\\">19</span><br><span class=\\\"line-number\\\">20</span><br><span class=\\\"line-number\\\">21</span><br><span class=\\\"line-number\\\">22</span><br><span class=\\\"line-number\\\">23</span><br><span class=\\\"line-number\\\">24</span><br><span class=\\\"line-number\\\">25</span><br><span class=\\\"line-number\\\">26</span><br><span class=\\\"line-number\\\">27</span><br><span class=\\\"line-number\\\">28</span><br><span class=\\\"line-number\\\">29</span><br><span class=\\\"line-number\\\">30</span><br><span class=\\\"line-number\\\">31</span><br><span class=\\\"line-number\\\">32</span><br><span class=\\\"line-number\\\">33</span><br><span class=\\\"line-number\\\">34</span><br><span class=\\\"line-number\\\">35</span><br><span class=\\\"line-number\\\">36</span><br><span class=\\\"line-number\\\">37</span><br></div></div><h4 id=\\\"你能手写实现一个bind吗？\\\"><a href=\\\"#你能手写实现一个bind吗？\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 你能手写实现一个<code>bind</code>吗？</h4> <p><strong>划重点</strong>：</p> <p>手写<code>bind</code>是大厂中的一个高频的面试题，如果面试的中高级前端，只是能说出它们的区别，用法并不能脱颖而出，理解要有足够的深度才能抱得offer归！</p> <p><strong>思路</strong></p> <ol><li>拷贝源函数:\\n<ul><li>通过变量储存源函数</li> <li>使用<code>Object.create</code>复制源函数的prototype给fToBind</li></ul></li> <li>返回拷贝的函数</li> <li>调用拷贝的函数：\\n<ul><li>new调用判断：通过<code>instanceof</code>判断函数是否通过<code>new</code>调用，来决定绑定的<code>context</code></li> <li>绑定this+传递参数</li> <li>返回源函数的执行结果</li></ul></li></ol> <h3 id=\\\"_2019-8-26更新：修复函数没有prototype的情况\\\"><a href=\\\"#_2019-8-26更新：修复函数没有prototype的情况\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 2019/8/26更新：修复函数没有<code>prototype</code>的情况</h3> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code>Function<span class=\\\"token punctuation\\\">.</span>prototype<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function-variable function\\\">myBind</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span>objThis<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token operator\\\">...</span>params<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">const</span> thisFn <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 存储源函数以及上方的params(函数参数)</span>\\n    <span class=\\\"token comment\\\">// 对返回的函数 secondParams 二次传参</span>\\n    <span class=\\\"token keyword\\\">let</span> <span class=\\\"token function-variable function\\\">fToBind</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token operator\\\">...</span>secondParams<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token keyword\\\">const</span> isNew <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">this</span> <span class=\\\"token keyword\\\">instanceof</span> <span class=\\\"token class-name\\\">fToBind</span> <span class=\\\"token comment\\\">// this是否是fToBind的实例 也就是返回的fToBind是否通过new调用</span>\\n        <span class=\\\"token keyword\\\">const</span> context <span class=\\\"token operator\\\">=</span> isNew <span class=\\\"token operator\\\">?</span> <span class=\\\"token keyword\\\">this</span> <span class=\\\"token punctuation\\\">:</span> <span class=\\\"token function\\\">Object</span><span class=\\\"token punctuation\\\">(</span>objThis<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token comment\\\">// new调用就绑定到this上,否则就绑定到传入的objThis上</span>\\n        <span class=\\\"token keyword\\\">return</span> thisFn<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">call</span><span class=\\\"token punctuation\\\">(</span>context<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token operator\\\">...</span>params<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token operator\\\">...</span>secondParams<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 用call调用源函数绑定this的指向并传递参数,返回执行结果</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>thisFn<span class=\\\"token punctuation\\\">.</span>prototype<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token comment\\\">// 复制源函数的prototype给fToBind 一些情况下函数没有prototype，比如箭头函数</span>\\n        fToBind<span class=\\\"token punctuation\\\">.</span>prototype <span class=\\\"token operator\\\">=</span> Object<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">create</span><span class=\\\"token punctuation\\\">(</span>thisFn<span class=\\\"token punctuation\\\">.</span>prototype<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token keyword\\\">return</span> fToBind<span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 返回拷贝的函数</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br><span class=\\\"line-number\\\">5</span><br><span class=\\\"line-number\\\">6</span><br><span class=\\\"line-number\\\">7</span><br><span class=\\\"line-number\\\">8</span><br><span class=\\\"line-number\\\">9</span><br><span class=\\\"line-number\\\">10</span><br><span class=\\\"line-number\\\">11</span><br><span class=\\\"line-number\\\">12</span><br><span class=\\\"line-number\\\">13</span><br><span class=\\\"line-number\\\">14</span><br></div></div><h3 id=\\\"对象缩写方法没有prototype\\\"><a href=\\\"#对象缩写方法没有prototype\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 对象缩写方法没有<code>prototype</code></h3> <p>箭头函数没有<code>prototype</code>，这个我知道的，可是<code>getInfo2</code>就是一个缩写，为什么没有<code>prototype</code>。</p> <p>谷歌/<code>stack overflow</code>都没有找到原因，有大佬指点迷津一下吗？？</p> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">var</span> student <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n    getInfo<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span>name<span class=\\\"token punctuation\\\">,</span> isRegistered<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'this1'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token function\\\">getInfo2</span><span class=\\\"token punctuation\\\">(</span>name<span class=\\\"token punctuation\\\">,</span> isRegistered<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'this2'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token comment\\\">// 没有prototype</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n    getInfo3<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">(</span>name<span class=\\\"token punctuation\\\">,</span> isRegistered<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=&gt;</span> <span class=\\\"token punctuation\\\">{</span>\\n        console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'this3'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token comment\\\">// 没有prototype</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br><span class=\\\"line-number\\\">5</span><br><span class=\\\"line-number\\\">6</span><br><span class=\\\"line-number\\\">7</span><br><span class=\\\"line-number\\\">8</span><br><span class=\\\"line-number\\\">9</span><br><span class=\\\"line-number\\\">10</span><br><span class=\\\"line-number\\\">11</span><br></div></div><h3 id=\\\"小结\\\"><a href=\\\"#小结\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 小结</h3> <p>本来以为这篇会写的很快，结果断断续续的写了好几天，终于把这三个API相关知识介绍清楚了，希望大家看完之后，面试的时候再遇到这个问题，就可以海陆空全方位的装逼了^_^\\n</p> \"),_vm._ssrNode(\"<h3 id=\\\"点个star支持我一下\\\">\",\"</h3>\",[_vm._ssrNode(\"<a href=\\\"#点个star支持我一下\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 点个\"),_vm._ssrNode(\"<a href=\\\"https://github.com/OBKoro1/web_accumulate\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">\",\"</a>\",[_vm._ssrNode(\"Star\"),_c('OutboundLink')],2),_vm._ssrNode(\"支持我一下~\")],2),_vm._ssrNode(\" \"),_c('comment-comment')],2)}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }"]}