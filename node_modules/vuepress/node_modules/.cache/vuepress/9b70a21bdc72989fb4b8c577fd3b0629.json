{"remainingRequest":"/Users/koro/work/web_my/web_accumulate/node_modules/vue-loader/lib/index.js??ref--1-1!/Users/koro/work/web_my/web_accumulate/node_modules/vuepress/lib/webpack/markdownLoader.js??ref--1-2!/Users/koro/work/web_my/web_accumulate/docs/accumulate/tool/忍者秘籍定时器机制.md?vue&type=template&id=143c55b1&","dependencies":[{"path":"/Users/koro/work/web_my/web_accumulate/docs/accumulate/tool/忍者秘籍定时器机制.md","mtime":1636107879475},{"path":"/Users/koro/work/web_my/web_accumulate/node_modules/cache-loader/dist/cjs.js","mtime":1557296864520},{"path":"/Users/koro/work/web_my/web_accumulate/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1557296867191},{"path":"/Users/koro/work/web_my/web_accumulate/node_modules/cache-loader/dist/cjs.js","mtime":1557296864520},{"path":"/Users/koro/work/web_my/web_accumulate/node_modules/vue-loader/lib/index.js","mtime":1557296867190},{"path":"/Users/koro/work/web_my/web_accumulate/node_modules/vuepress/lib/webpack/markdownLoader.js","mtime":1557296867284}],"contextDependencies":[],"result":["\n<div class=\"content\"><h2 id=\"js忍者秘籍中的定时器机制详解\"><a class=\"header-anchor\" href=\"#js忍者秘籍中的定时器机制详解\" aria-hidden=\"true\">#</a> JS忍者秘籍中的定时器机制详解</h2>\n<p>前段时间刚看完《JS忍者秘籍》，虽说是15年出版的，有些东西是过时了，但像对原型链、闭包、正则、定时器之类的机制却是不会过时的，里面很多东西都讲的很细，还是值得一读的，本文将对这本书中对定时器机制的部分进行详细的解析，如果喜欢的话可以点波赞/关注，支持一下，希望大家看完本文可以有所收获。</p>\n<h3 id=\"准备\"><a class=\"header-anchor\" href=\"#准备\" aria-hidden=\"true\">#</a> 准备</h3>\n<p>阅读本文之前，推荐先阅读<a href=\"https://juejin.im/post/5b24b116e51d4558a65fdb70\" target=\"_blank\" rel=\"noopener noreferrer\">Js 的事件循环(Event Loop)机制以及实例讲解<OutboundLink/></a>这篇文章来理解背后发生的事情，本文对事件循环机制不会很仔细的讲解。</p>\n<h3 id=\"定时器解决的问题：\"><a class=\"header-anchor\" href=\"#定时器解决的问题：\" aria-hidden=\"true\">#</a> 定时器解决的问题：</h3>\n<p>由于JS的单线程特性，定时器提供了一种跳出单线程限制的方法，即让一段代码在一定毫秒之后，再异步执行。</p>\n<h3 id=\"设置和清除定时器：\"><a class=\"header-anchor\" href=\"#设置和清除定时器：\" aria-hidden=\"true\">#</a> 设置和清除定时器：</h3>\n<p>直接引用忍者秘籍中的图片：</p>\n<p><img src=\"https://github.com/OBKoro1/articleImg_src/blob/master/juejin/1640c7f6e32c21c3?raw=true\" alt=\"\"></p>\n<h3 id=\"注意：\"><a class=\"header-anchor\" href=\"#注意：\" aria-hidden=\"true\">#</a> 注意：</h3>\n<ol>\n<li>定时器的时间间隔设为0，也会有几毫秒的延迟。</li>\n<li>在使用<code>setTimeout</code>和<code>setInterval</code>的时候最好将其赋值给一个变量，以便取消定时器。</li>\n<li>在使用<code>Vue</code>的时候，<code>setTimeout</code>和<code>setInterval</code>的this指向的是window对象，访问不到组件数据以及方法。</li>\n<li>在使用<code>Vue</code>的时候，路由跳转并不会销毁<code>setInterval</code>，但是组件已经销毁了，这会导致问题。</li>\n<li>在执行线程中<code>setTimeout</code>/<code>setInterval</code>无法保证准时执行回调函数的。</li>\n<li><code>setInterval</code>调用有可能会被废弃以及<code>setInterval</code>的连续执行</li>\n</ol>\n<p>第三点和第四点的解决方法可以参考我之前写的<a href=\"https://juejin.im/post/5a587b46f265da3e3b7a7677#heading-4\" target=\"_blank\" rel=\"noopener noreferrer\">Vue 实践过程中的几个问题<OutboundLink/></a>。</p>\n<p>接下来要讲的是第五点和第六点，这两点是最重要，也是本文要重点解析的内容。</p>\n<h2 id=\"执行线程中的定时器执行\"><a class=\"header-anchor\" href=\"#执行线程中的定时器执行\" aria-hidden=\"true\">#</a> 执行线程中的定时器执行</h2>\n<p>下面来看忍者秘籍中的栗子：</p>\n<p><img src=\"https://github.com/OBKoro1/articleImg_src/blob/master/juejin/1640ca6240fb3eeb?raw=true\" alt=\"\"></p>\n<p>让我们看看这里发生了什么事情：</p>\n<ol>\n<li>首先在0毫秒的时候有一个持续18毫秒的js代码块要执行。</li>\n<li>然后在0毫秒的时候设了两个10毫秒延迟的定时器，<code>setTimeout</code>以及<code>setInterval</code>,<code>setTimeout</code>先设定。</li>\n<li>在第6毫秒的时候有一个发生了鼠标单击事件。</li>\n</ol>\n<h3 id=\"事件排队。\"><a class=\"header-anchor\" href=\"#事件排队。\" aria-hidden=\"true\">#</a> 事件排队。</h3>\n<p>同时发生了这么多事情，由于js的单线程特性，<strong>当线程正在执行状态，有异步事件触发时，它就会排队，并且在线程空闲时才进行执行</strong>。</p>\n<pre><code>    这里的异步事件包括：鼠标单击，定时器触发，ajax请求、promise等事件。\n</code></pre>\n<p>让我们回到栗子中：</p>\n<p>栗子中首先有一个18毫秒的代码块要执行，在这18毫秒中只能执行这段代码块，<strong>其他事件触发了之后只能排队等待执行</strong>。</p>\n<p>在代码块还在运行期间，第6毫秒的时候，发生了一个鼠标单击事件，以及第10毫秒时的<code>setTimeout</code>和<code>setInterval</code>两个处理程序，这三个事件不能立即执行，而是<strong>被添加到等待执行的队列</strong>中。</p>\n<h3 id=\"先进先出-先排队的先执行\"><a class=\"header-anchor\" href=\"#先进先出-先排队的先执行\" aria-hidden=\"true\">#</a> 先进先出(先排队的先执行)</h3>\n<p>18毫秒的时候代码块结束执行，有三个任务在排队等待执行，根据<strong>先进先出的原则，此时会先执行click事件</strong>，<code>setTimeout</code>和<code>setInterval</code>将继续排队等待执行。</p>\n<h3 id=\"setinterval调用被废弃\"><a class=\"header-anchor\" href=\"#setinterval调用被废弃\" aria-hidden=\"true\">#</a> setInterval调用被废弃</h3>\n<p>在click事件执行时，第20毫秒处，第二个<code>setInterval</code>也到期了，因为此时已经click事件占用了线程，所以<code>setInterval</code>还是不能被执行，并且因为此时<strong>队列中已经有一个<code>setInterval</code>正在排队等待执行，所以这一次的<code>setInterval</code>的调用将被废弃</strong>。</p>\n<p><strong>浏览器不会对同一个setInterval处理程序多次添加到待执行队列。</strong></p>\n<h3 id=\"settimeout-setinterval无法保证准时执行回调函数\"><a class=\"header-anchor\" href=\"#settimeout-setinterval无法保证准时执行回调函数\" aria-hidden=\"true\">#</a> <code>setTimeout</code>/<code>setInterval</code>无法保证准时执行回调函数</h3>\n<p>click事件在第28毫秒处结束执行，有两个任务(<code>setTimeout</code>和<code>setInterval</code>)正在等待执行，遵循先进先出的原则，<code>setTimeout</code>早于<code>setInterval</code>设定，所以先执行<code>setTimeout</code>。</p>\n<p>so:<strong>我们期望在第10毫秒处执行的<code>setTimeout</code>处理程序，最终会在第28毫秒处才开始执行</strong>，这就是上文提到的<code>setTimeout</code>/<code>setInterval</code>无法保证准时执行回调函数。</p>\n<p>在30毫秒处，<code>setInterval</code>又触发了，因为队列中已经有<code>setInterval</code>在排队，所以这次的触发又作废了。</p>\n<h3 id=\"setinterval的连续执行\"><a class=\"header-anchor\" href=\"#setinterval的连续执行\" aria-hidden=\"true\">#</a> setInterval的连续执行</h3>\n<p><code>setTimeout</code>执行结束，在第36毫秒处，队列中的<code>setInterval</code>处理程序才开始执行，<code>setInterval</code>需要执行6毫秒。</p>\n<p>在第40毫秒的时候<code>setInterval</code>再次触发，因为此时<strong>上一个<code>setInterval</code>正在执行期间，队列中并没有<code>setInterval</code>在排队，这次触发的<code>setInterval</code>将进入队列等候</strong>。</p>\n<p>所以：<code>setInterval</code>的处理时长不能比设定的间隔长，否则<code>setInterval</code>将会没有间隔的重复执行</p>\n<p>第42毫秒的时候，<strong>第一个<code>setInterval</code>结束，然后队列中的<code>setInterval</code>立即开始执行</strong>，在48毫秒的时候完成执行。然后50毫秒的时候再次触发<code>setInterval</code>，此时没有任务在排队，将会立即执行。</p>\n<h3 id=\"settimeout按照一定的间隔周期性的触发定时器。\"><a class=\"header-anchor\" href=\"#settimeout按照一定的间隔周期性的触发定时器。\" aria-hidden=\"true\">#</a> setTimeout按照一定的间隔周期性的触发定时器。</h3>\n<p>上文说了，<strong><code>setInterval</code>的处理时长不能比设定的间隔长，否则<code>setInterval</code>将会没有间隔的重复执行</strong>。</p>\n<p>但是对这个问题，很多情况下，我们并不能清晰的把控处理程序所消耗的时长，为了我们能<strong>按照一定的间隔周期性的触发定时器</strong>，忍者秘籍中提供了下面这种使用方法：</p>\n<!--beforebegin--><div class=\"language-js line-numbers-mode\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token comment\">// 实际上我不止在忍者秘籍中见过，在很多地方都见过这种技术。</span>\n<span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token function\">repeatMe</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// do something</span>\n    <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span>repeatMe<span class=\"token punctuation\">,</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n    <span class=\"token comment\">// 执行完处理程序的内容后，在末尾再间隔10毫秒来调用该程序，这样就能保证一定是10毫秒的周期调用</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br></div><!--beforeend--></div><!--afterend--><hr>\n<h3 id=\"忍者秘籍中关于定时器的其他知识：\"><a class=\"header-anchor\" href=\"#忍者秘籍中关于定时器的其他知识：\" aria-hidden=\"true\">#</a> 忍者秘籍中关于定时器的其他知识：</h3>\n<ul>\n<li>定时器不能非常细粒化的控制执行的时间，书中建议在15ms以上。</li>\n<li>可以使用定时器来分解长时间运行的任务，这里可以自行谷歌。</li>\n</ul>\n<h3 id=\"任务队列只有排队这么简单吗？\"><a class=\"header-anchor\" href=\"#任务队列只有排队这么简单吗？\" aria-hidden=\"true\">#</a> 任务队列只有排队这么简单吗？</h3>\n<p>事实上，关于任务队列并不是只有简单的排队而已，忍者秘籍中提到为了方便，使用了这个概念，如果希望能更清晰的了解背后的机制，再次推荐阅读一下：<a href=\"https://juejin.im/post/5b24b116e51d4558a65fdb70\" target=\"_blank\" rel=\"noopener noreferrer\">Js 的事件循环(Event Loop)机制以及实例讲解<OutboundLink/></a>，</p>\n<h2 id=\"小结\"><a class=\"header-anchor\" href=\"#小结\" aria-hidden=\"true\">#</a> 小结</h2>\n<p>这上面所有一切，都是由js单线程特性导致的，所以会有事件排队、先进先出、setInterval调用被废弃、定时器无法保证准时执行回调函数以及出现setInterval的连续执行，时刻记住这一特性，很多关于事件执行顺序的问题都能想的通，并且找出解决方法。\n<!-- 特殊字符串：用于修改/删除markdown的结尾提示语-OBKoro1 --></p>\n<h3 id=\"点个star支持我一下\"><a class=\"header-anchor\" href=\"#点个star支持我一下\" aria-hidden=\"true\">#</a> 点个<a href=\"https://github.com/OBKoro1/web_accumulate\" target=\"_blank\" rel=\"noopener noreferrer\">Star<OutboundLink/></a>支持我一下~</h3>\n<!-- '特殊字符串：用于删除编译后的issue组件-OBKoro1 -->\n<!-- more -->\n<comment-comment/>\n</div>\n",null]}