{"remainingRequest":"/Users/koro/work/web_my/web_accumulate/node_modules/vue-loader/lib/index.js??ref--1-1!/Users/koro/work/web_my/web_accumulate/node_modules/vuepress/lib/webpack/markdownLoader.js??ref--1-2!/Users/koro/work/web_my/web_accumulate/docs/accumulate/JS/函数防抖和函数节流.md?vue&type=template&id=5e999946&","dependencies":[{"path":"/Users/koro/work/web_my/web_accumulate/docs/accumulate/JS/函数防抖和函数节流.md","mtime":1636107879468},{"path":"/Users/koro/work/web_my/web_accumulate/node_modules/cache-loader/dist/cjs.js","mtime":1557296864520},{"path":"/Users/koro/work/web_my/web_accumulate/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1557296867191},{"path":"/Users/koro/work/web_my/web_accumulate/node_modules/cache-loader/dist/cjs.js","mtime":1557296864520},{"path":"/Users/koro/work/web_my/web_accumulate/node_modules/vue-loader/lib/index.js","mtime":1557296867190},{"path":"/Users/koro/work/web_my/web_accumulate/node_modules/vuepress/lib/webpack/markdownLoader.js","mtime":1557296867284}],"contextDependencies":[],"result":["\n<div class=\"content\"><!--\n * @Author: shuyu.wu\n * @LastEditors: shuyu.wu\n * @Description:\n * @Date: 2019-01-23 20:04:27\n * @LastEditTime: 2019-02-23 18:19:45\n -->\n<h1 id=\"防抖函数-节流函数\"><a class=\"header-anchor\" href=\"#防抖函数-节流函数\" aria-hidden=\"true\">#</a> 防抖函数&amp;节流函数</h1>\n<p>节流函数和防抖函数是 JS 比较重要的概念，应用好了可以提高很大的性能，在面试中也是很高频的一个考点。下面一起来看看这两种方法是如何使用的：</p>\n<h2 id=\"防抖函数-debounce\"><a class=\"header-anchor\" href=\"#防抖函数-debounce\" aria-hidden=\"true\">#</a> 防抖函数(debounce):</h2>\n<h3 id=\"概念：\"><a class=\"header-anchor\" href=\"#概念：\" aria-hidden=\"true\">#</a> 概念：</h3>\n<p><strong>在事件被触发 n 秒后再执行回调，如果在这 n 秒内又被触发，则重新计时</strong>。</p>\n<h3 id=\"生活中的栗子：\"><a class=\"header-anchor\" href=\"#生活中的栗子：\" aria-hidden=\"true\">#</a> 生活中的栗子：</h3>\n<p>如果有人进电梯（触发事件），那电梯将在 10 秒钟后出发（执行事件），这时如果又有人进电梯了（在 10 秒内再次触发该事件），我们又得等 10 秒再出发（重新计时）。</p>\n<h3 id=\"代码栗子：\"><a class=\"header-anchor\" href=\"#代码栗子：\" aria-hidden=\"true\">#</a> 代码栗子：</h3>\n<!--beforebegin--><div class=\"language-js line-numbers-mode\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token comment\">/**\n * @description: 防抖函数：函数被触发 n 秒后再执行回调，如果在这 n 秒内又被触发，则重新计时\n * @param {Function} fn 要执行的函数\n * @param {Number} wait  wait毫秒后执行回调\n * @param {*} ...arr 传递给fn的参数\n */</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">debounce</span><span class=\"token punctuation\">(</span>fn<span class=\"token punctuation\">,</span> wait<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>arr<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> timer <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>timer<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// 如果有一个函数在等待执行 清除定时器 下面重新计时</span>\n      <span class=\"token function\">clearTimeout</span><span class=\"token punctuation\">(</span>timer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      timer <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 清空timer 下次重启定时器</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">// 设定时器/重置定时器</span>\n    timer <span class=\"token operator\">=</span> <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// wait时间后 执行回调 期间再触发debounce 需要重新等待</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> wait<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// 要防抖的函数</span>\n<span class=\"token keyword\">let</span> <span class=\"token function-variable function\">actionFn</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'回调'</span><span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">setInterval</span><span class=\"token punctuation\">(</span><span class=\"token function\">debounce</span><span class=\"token punctuation\">(</span>actionFn<span class=\"token punctuation\">,</span> <span class=\"token number\">500</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'actionFn参数1'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'参数2'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 第一次在1500ms后触发，之后每1000ms触发一次</span>\n<span class=\"token function\">setInterval</span><span class=\"token punctuation\">(</span><span class=\"token function\">debounce</span><span class=\"token punctuation\">(</span>actionFn<span class=\"token punctuation\">,</span> <span class=\"token number\">2000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 还没执行就一直重复触发,不会执行</span>\n</code></pre>\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br><span class=\"line-number\">11</span><br><span class=\"line-number\">12</span><br><span class=\"line-number\">13</span><br><span class=\"line-number\">14</span><br><span class=\"line-number\">15</span><br><span class=\"line-number\">16</span><br><span class=\"line-number\">17</span><br><span class=\"line-number\">18</span><br><span class=\"line-number\">19</span><br><span class=\"line-number\">20</span><br><span class=\"line-number\">21</span><br><span class=\"line-number\">22</span><br><span class=\"line-number\">23</span><br><span class=\"line-number\">24</span><br><span class=\"line-number\">25</span><br><span class=\"line-number\">26</span><br></div><!--beforeend--></div><!--afterend--><div class=\"tip custom-block\"><p class=\"custom-block-title\">可以这样理解</p>\n<p>函数触发停止一段时间后(期间不能再触发 debounce，否则将重新计时)，再执行回调函数</p>\n</div>\n<h3 id=\"机制：\"><a class=\"header-anchor\" href=\"#机制：\" aria-hidden=\"true\">#</a> 机制：</h3>\n<p>防抖函数主要利用定时器的延迟执行特性，根据是否有定时器在等待执行：</p>\n<ul>\n<li>触发了一个事件后：如果有一个定时任务待执行，就清除定时器，重新计时。</li>\n<li>如果没有任务待执行，就定时执行这个事件。</li>\n</ul>\n<h3 id=\"应用场景：\"><a class=\"header-anchor\" href=\"#应用场景：\" aria-hidden=\"true\">#</a> 应用场景：</h3>\n<ol>\n<li>表单的连续点击，防止重复提交。比如重复发送一篇文章。</li>\n<li>类百度的搜索，连续输入等输入停止后再搜索。</li>\n<li>一直拖动浏览器窗口，只想触发一次事件等。</li>\n</ol>\n<h2 id=\"节流函数-throttle\"><a class=\"header-anchor\" href=\"#节流函数-throttle\" aria-hidden=\"true\">#</a> 节流函数(throttle):</h2>\n<h3 id=\"概念：-2\"><a class=\"header-anchor\" href=\"#概念：-2\" aria-hidden=\"true\">#</a> 概念：</h3>\n<p><strong>规定一个单位时间，在这个单位时间内，只能有一次触发事件的回调函数执行(单位时间内有事件被多次触发则，只生效一次)</strong>。</p>\n<h3 id=\"生活中的栗子：-2\"><a class=\"header-anchor\" href=\"#生活中的栗子：-2\" aria-hidden=\"true\">#</a> 生活中的栗子：</h3>\n<p>漏水的自来水水龙头，尽管水龙头里面有很多水(一直在触发事件)，但还是一滴一滴的往下滴(单位事件内只生效一次)。</p>\n<h3 id=\"代码栗子：-2\"><a class=\"header-anchor\" href=\"#代码栗子：-2\" aria-hidden=\"true\">#</a> 代码栗子：</h3>\n<!--beforebegin--><div class=\"language-js line-numbers-mode\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token comment\">/**\n * @description: 节流函数：规定一个单位时间，在这个单位时间内，只能有一次触发事件的回调函数执行\n * @param {Function} fn 要执行的函数\n * @param {Number} gapTime  单位时间\n * @param {*} ...arr 传递给fn的参数\n */</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">throttle</span><span class=\"token punctuation\">(</span>fn<span class=\"token punctuation\">,</span> gapTime<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>arr<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> last <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 上次执行时间 第一次马上执行</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> nowTime <span class=\"token operator\">=</span> Date<span class=\"token punctuation\">.</span><span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 当前时间</span>\n    <span class=\"token comment\">// 当前时间-上次执行的时间是否超过间隔时间 就执行回调</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nowTime <span class=\"token operator\">-</span> last <span class=\"token operator\">></span> gapTime<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ...arr为fn的参数</span>\n      last <span class=\"token operator\">=</span> nowTime<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 重置上次执行时间为当前时间 方便下次执行</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">let</span> <span class=\"token function-variable function\">actionFn</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'回调'</span><span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 要执行的函数</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">setInterval</span><span class=\"token punctuation\">(</span><span class=\"token function\">throttle</span><span class=\"token punctuation\">(</span>actionFn<span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'actionFn参数1'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'参数2'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 每隔10毫秒都会触发一次throttle，每隔一秒触发一次actionFn回调(1秒内再次触发被丢弃)</span>\n</code></pre>\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br><span class=\"line-number\">11</span><br><span class=\"line-number\">12</span><br><span class=\"line-number\">13</span><br><span class=\"line-number\">14</span><br><span class=\"line-number\">15</span><br><span class=\"line-number\">16</span><br><span class=\"line-number\">17</span><br><span class=\"line-number\">18</span><br><span class=\"line-number\">19</span><br><span class=\"line-number\">20</span><br><span class=\"line-number\">21</span><br><span class=\"line-number\">22</span><br></div><!--beforeend--></div><!--afterend--><h3 id=\"机制：-2\"><a class=\"header-anchor\" href=\"#机制：-2\" aria-hidden=\"true\">#</a> 机制：</h3>\n<p>节流函数根据时间差是否超过给定时间(gapTime)来决定是否触发回调。</p>\n<h3 id=\"应用场景：-2\"><a class=\"header-anchor\" href=\"#应用场景：-2\" aria-hidden=\"true\">#</a> 应用场景：</h3>\n<ol>\n<li>自动保存草稿功能，当用户在输入的时候(一直触发事件),单位时间内只保存一次草稿。</li>\n<li>游戏中的刷新率</li>\n</ol>\n<h2 id=\"作用和本质：\"><a class=\"header-anchor\" href=\"#作用和本质：\" aria-hidden=\"true\">#</a> 作用和本质：</h2>\n<ul>\n<li>\n<p>防抖函数和节流函数主要解决的问题是：<strong>防止函数”短时间“的重复执行</strong>。</p>\n</li>\n<li>\n<p>它们本质上是：<strong>在时间轴上控制函数的执行次数</strong>。</p>\n</li>\n</ul>\n<h2 id=\"应用实例，需要加个括号：\"><a class=\"header-anchor\" href=\"#应用实例，需要加个括号：\" aria-hidden=\"true\">#</a> 应用实例，需要加个括号：</h2>\n<p>因为返回<code>debounce</code>和<code>throttle</code>返回的是一个函数，所以如果不是自动执行的事件监听回调，我们应该再后面加个<code>()</code>，执行返回的闭包函数。</p>\n<!--beforebegin--><div class=\"language-js line-numbers-mode\"><!--afterbegin--><pre v-pre class=\"language-js\"><code>document<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onclick</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// throttle(actionFn, 1000) 这样不会执行 只返回了一个闭包函数</span>\n  <span class=\"token function\">throttle</span><span class=\"token punctuation\">(</span>actionFn<span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'执行函数参数1'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'执行函数参数2'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 执行闭包函数</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br></div><!--beforeend--></div><!--afterend--><!-- 特殊字符串：用于修改/删除markdown的结尾提示语-OBKoro1 -->\n<h3 id=\"点个star支持我一下\"><a class=\"header-anchor\" href=\"#点个star支持我一下\" aria-hidden=\"true\">#</a> 点个<a href=\"https://github.com/OBKoro1/web_accumulate\" target=\"_blank\" rel=\"noopener noreferrer\">Star<OutboundLink/></a>支持我一下~</h3>\n<!-- '特殊字符串：用于删除编译后的issue组件-OBKoro1 -->\n<!-- more -->\n<comment-comment/>\n</div>\n",null]}