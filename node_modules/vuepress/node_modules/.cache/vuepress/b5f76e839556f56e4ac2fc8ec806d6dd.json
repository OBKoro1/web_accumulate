{"remainingRequest":"/Users/koro/work/web_my/web_accumulate/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/koro/work/web_my/web_accumulate/node_modules/cache-loader/dist/cjs.js??ref--1-0!/Users/koro/work/web_my/web_accumulate/node_modules/vue-loader/lib/index.js??ref--1-1!/Users/koro/work/web_my/web_accumulate/node_modules/vuepress/lib/webpack/markdownLoader.js??ref--1-2!/Users/koro/work/web_my/web_accumulate/docs/accumulate/tool/浏览器重绘重排.md?vue&type=template&id=77aa0bad&","dependencies":[{"path":"/Users/koro/work/web_my/web_accumulate/docs/accumulate/tool/浏览器重绘重排.md","mtime":1636107879475},{"path":"/Users/koro/work/web_my/web_accumulate/node_modules/cache-loader/dist/cjs.js","mtime":1557296864520},{"path":"/Users/koro/work/web_my/web_accumulate/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1557296867191},{"path":"/Users/koro/work/web_my/web_accumulate/node_modules/cache-loader/dist/cjs.js","mtime":1557296864520},{"path":"/Users/koro/work/web_my/web_accumulate/node_modules/vue-loader/lib/index.js","mtime":1557296867190},{"path":"/Users/koro/work/web_my/web_accumulate/node_modules/vuepress/lib/webpack/markdownLoader.js","mtime":1557296867284}],"contextDependencies":[],"result":["var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"content\"},[_vm._ssrNode(\"<h2 id=\\\"轻松掌握浏览器重绘重排原理\\\"><a href=\\\"#轻松掌握浏览器重绘重排原理\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 轻松掌握浏览器重绘重排原理</h2> <p><img src=\\\"https://github.com/OBKoro1/articleImg_src/blob/master/weibo_img_move/005Y4rCogy1fya3fh2jm3j30ku0dwtb2.jpg?raw=true\\\" alt></p> <p>很多人都知道要减少浏览器的重排和重绘，但对其中的具体原理以及如何具体操作并不是很了解，当突然提起这个话题的时候，还是会一脸懵逼。希望大家可以耐着性子阅读本文，仔细琢磨，彻底掌握这个知识点！</p> \"),_vm._ssrNode(\"<blockquote>\",\"</blockquote>\",[_vm._ssrNode(\"<p>\",\"</p>\",[_vm._ssrNode(\"<a href=\\\"http://obkoro1.com/\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">\",\"</a>\",[_vm._ssrNode(\"博客\"),_c('OutboundLink')],2),_vm._ssrNode(\"、\"),_vm._ssrNode(\"<a href=\\\"http://obkoro1.com/web_accumulate/accumulate/\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">\",\"</a>\",[_vm._ssrNode(\"前端积累文档\"),_c('OutboundLink')],2),_vm._ssrNode(\"、\"),_vm._ssrNode(\"<a href=\\\"https://github.com/OBKoro1/articleImg_src/blob/master/juejin/1631b6f52f7e7015.jpeg?raw=true\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">\",\"</a>\",[_vm._ssrNode(\"公众号\"),_c('OutboundLink')],2),_vm._ssrNode(\"、\"),_vm._ssrNode(\"<a href=\\\"https://github.com/OBKoro1\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">\",\"</a>\",[_vm._ssrNode(\"GitHub\"),_c('OutboundLink')],2)],2)]),_vm._ssrNode(\" <h3 id=\\\"网页生成过程：\\\"><a href=\\\"#网页生成过程：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 网页生成过程：</h3> <ol><li>HTML被HTML解析器解析成DOM 树</li> <li>css则被css解析器解析成CSSOM 树</li> <li>结合DOM树和CSSOM树，生成一棵渲染树(Render Tree)</li> <li>生成布局（flow），即将所有渲染树的所有节点进行平面合成</li> <li>将布局绘制（paint）在屏幕上</li></ol> <p>第四步和第五步是最耗时的部分，这两步合起来，就是我们通常所说的<strong>渲染</strong>。</p> <p>网上找了一张图片，我加了注释会更直观一些：</p> <p><img src=\\\"https://github.com/OBKoro1/articleImg_src/blob/master/juejin/167b642d014afaf1?raw=true\\\" alt></p> <hr> <h2 id=\\\"渲染：\\\"><a href=\\\"#渲染：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 渲染：</h2> <p><strong>网页生成的时候，至少会渲染一次</strong>。</p> <p><strong>在用户访问的过程中，还会不断重新渲染</strong></p> <p>重新渲染需要重复之前的第四步(重新生成布局)+第五步(重新绘制)或者只有第五个步(重新绘制)。</p> <h3 id=\\\"重排比重绘大：\\\"><a href=\\\"#重排比重绘大：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 重排比重绘大：</h3> <p>大，在这个语境里的意思是：谁能影响谁？</p> <ul><li>重绘：某些元素的外观被改变，例如：元素的填充颜色</li> <li>重排：重新生成布局，重新排列元素。</li></ul> <p>就如上面的概念一样，<strong>单单改变元素的外观，肯定不会引起网页重新生成布局，但当浏览器完成重排之后，将会重新绘制受到此次重排影响的部分</strong>。</p> <pre><code>比如改变元素高度，这个元素乃至周边dom都需要重新绘制。\\n</code></pre> <p>也就是说：<strong>&quot;重绘&quot;不一定会出现&quot;重排&quot;，&quot;重排&quot;必然会出现&quot;重绘&quot;</strong></p> <h2 id=\\\"重排-reflow-：\\\"><a href=\\\"#重排-reflow-：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 重排(reflow)：</h2> <h3 id=\\\"概念：\\\"><a href=\\\"#概念：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 概念：</h3> <p>当DOM的变化影响了元素的几何信息(DOM对象的位置和尺寸大小)，浏览器需要重新计算元素的几何属性，将其安放在界面中的正确位置，这个过程叫做重排。</p> <p>重排也叫回流,重排的过程以下面这种理解方式更清晰一些：</p> <blockquote><p>回流就好比向河里(文档流)扔了一块石头(dom变化)，激起涟漪，然后引起周边水流受到波及，所以叫做回流</p></blockquote> <h3 id=\\\"常见引起重排属性和方法\\\"><a href=\\\"#常见引起重排属性和方法\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 常见引起重排属性和方法</h3> <p><strong>任何会改变元素几何信息(元素的位置和尺寸大小)的操作，都会触发重排</strong>，下面列一些栗子：</p> <ol><li>添加或者删除可见的DOM元素；</li> <li>元素尺寸改变——边距、填充、边框、宽度和高度</li> <li>内容变化，比如用户在input框中输入文字</li> <li>浏览器窗口尺寸改变——resize事件发生时</li> <li>计算 offsetWidth 和 offsetHeight 属性</li> <li>设置 style 属性的值</li></ol> <table><thead><tr><th style=\\\"text-align:left\\\">常见引起重排属性和方法</th> <th style=\\\"text-align:left\\\"></th> <th style=\\\"text-align:left\\\"></th> <th style=\\\"text-align:left\\\"></th></tr></thead> <tbody><tr><td style=\\\"text-align:left\\\">width</td> <td style=\\\"text-align:left\\\">height</td> <td style=\\\"text-align:left\\\">margin</td> <td style=\\\"text-align:left\\\">padding</td></tr> <tr><td style=\\\"text-align:left\\\">display</td> <td style=\\\"text-align:left\\\">border</td> <td style=\\\"text-align:left\\\">position</td> <td style=\\\"text-align:left\\\">overflow</td></tr> <tr><td style=\\\"text-align:left\\\">clientWidth</td> <td style=\\\"text-align:left\\\">clientHeight</td> <td style=\\\"text-align:left\\\">clientTop</td> <td style=\\\"text-align:left\\\">clientLeft</td></tr> <tr><td style=\\\"text-align:left\\\">offsetWidth</td> <td style=\\\"text-align:left\\\">offsetHeight</td> <td style=\\\"text-align:left\\\">offsetTop</td> <td style=\\\"text-align:left\\\">offsetLeft</td></tr> <tr><td style=\\\"text-align:left\\\">scrollWidth</td> <td style=\\\"text-align:left\\\">scrollHeight</td> <td style=\\\"text-align:left\\\">scrollTop</td> <td style=\\\"text-align:left\\\">scrollLeft</td></tr> <tr><td style=\\\"text-align:left\\\">scrollIntoView()</td> <td style=\\\"text-align:left\\\">scrollTo()</td> <td style=\\\"text-align:left\\\">getComputedStyle()</td> <td style=\\\"text-align:left\\\"></td></tr> <tr><td style=\\\"text-align:left\\\">getBoundingClientRect()</td> <td style=\\\"text-align:left\\\">scrollIntoViewIfNeeded()</td> <td style=\\\"text-align:left\\\"></td> <td style=\\\"text-align:left\\\"></td></tr></tbody></table> <h3 id=\\\"重排影响的范围：\\\"><a href=\\\"#重排影响的范围：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 重排影响的范围：</h3> <p>由于浏览器渲染界面是基于流失布局模型的，所以触发重排时会对周围DOM重新排列，影响的范围有两种：</p> <ul><li>全局范围：从根节点<code>html</code>开始对整个渲染树进行重新布局。</li> <li>局部范围：对渲染树的某部分或某一个渲染对象进行重新布局</li></ul> <p><strong>全局范围重排</strong>：</p> <div class=\\\"language-html line-numbers-mode\\\"><pre class=\\\"language-html\\\"><code><span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>body</span><span class=\\\"token punctuation\\\">&gt;</span></span>\\n  <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>div</span> <span class=\\\"token attr-name\\\">class</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">&quot;</span>hello<span class=\\\"token punctuation\\\">&quot;</span></span><span class=\\\"token punctuation\\\">&gt;</span></span>\\n    <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>h4</span><span class=\\\"token punctuation\\\">&gt;</span></span>hello<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>h4</span><span class=\\\"token punctuation\\\">&gt;</span></span>\\n    <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>p</span><span class=\\\"token punctuation\\\">&gt;</span></span><span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>strong</span><span class=\\\"token punctuation\\\">&gt;</span></span>Name:<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>strong</span><span class=\\\"token punctuation\\\">&gt;</span></span>BDing<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>p</span><span class=\\\"token punctuation\\\">&gt;</span></span>\\n    <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>h5</span><span class=\\\"token punctuation\\\">&gt;</span></span>male<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>h5</span><span class=\\\"token punctuation\\\">&gt;</span></span>\\n    <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>ol</span><span class=\\\"token punctuation\\\">&gt;</span></span>\\n      <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>li</span><span class=\\\"token punctuation\\\">&gt;</span></span>coding<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>li</span><span class=\\\"token punctuation\\\">&gt;</span></span>\\n      <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>li</span><span class=\\\"token punctuation\\\">&gt;</span></span>loving<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>li</span><span class=\\\"token punctuation\\\">&gt;</span></span>\\n    <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>ol</span><span class=\\\"token punctuation\\\">&gt;</span></span>\\n  <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>div</span><span class=\\\"token punctuation\\\">&gt;</span></span>\\n<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>body</span><span class=\\\"token punctuation\\\">&gt;</span></span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br><span class=\\\"line-number\\\">5</span><br><span class=\\\"line-number\\\">6</span><br><span class=\\\"line-number\\\">7</span><br><span class=\\\"line-number\\\">8</span><br><span class=\\\"line-number\\\">9</span><br><span class=\\\"line-number\\\">10</span><br><span class=\\\"line-number\\\">11</span><br></div></div><p>当p节点上发生reflow时，hello和body也会重新渲染，甚至h5和ol都会收到影响。</p> <p><strong>局部范围重排：</strong></p> <p>用局部布局来解释这种现象：把一个dom的宽高之类的几何信息定死，然后在dom内部触发重排，就只会重新渲染该dom内部的元素，而不会影响到外界。</p> <h3 id=\\\"尽可能的减少重排的次数、重排范围：\\\"><a href=\\\"#尽可能的减少重排的次数、重排范围：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 尽可能的减少重排的次数、重排范围：</h3> <p>重排需要更新渲染树,性能花销非常大:</p> <p>它们的代价是高昂的，会破坏用户体验，并且让UI展示非常迟缓，我们需要尽可能的减少触发重排的次数。</p> <p>重排的性能花销跟渲染树有多少节点需要重新构建有关系：</p> <p>所以我们应该尽量以局部布局的形式组织<code>html</code>结构，尽可能小的影响重排的范围。</p> <p>而不是像全局范围的示例代码一样一溜的堆砌标签，随便一个元素触发重排都会导致全局范围的重排。</p> <h2 id=\\\"重绘-repaints\\\"><a href=\\\"#重绘-repaints\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 重绘(Repaints):</h2> <p><strong>概念</strong>：</p> <p>当一个元素的外观发生改变，但没有改变布局,重新把元素外观绘制出来的过程，叫做重绘。</p> <p><strong>常见的引起重绘的属性</strong>:</p> <table><thead><tr><th style=\\\"text-align:center\\\"></th> <th style=\\\"text-align:center\\\"></th> <th style=\\\"text-align:center\\\"></th> <th style=\\\"text-align:center\\\"></th></tr></thead> <tbody><tr><td style=\\\"text-align:center\\\">color</td> <td style=\\\"text-align:center\\\">border-style</td> <td style=\\\"text-align:center\\\">visibility</td> <td style=\\\"text-align:center\\\">background</td></tr> <tr><td style=\\\"text-align:center\\\">text-decoration</td> <td style=\\\"text-align:center\\\">background-image</td> <td style=\\\"text-align:center\\\">background-position</td> <td style=\\\"text-align:center\\\">background-repeat</td></tr> <tr><td style=\\\"text-align:center\\\">outline-color</td> <td style=\\\"text-align:center\\\">outline</td> <td style=\\\"text-align:center\\\">outline-style</td> <td style=\\\"text-align:center\\\">border-radius</td></tr> <tr><td style=\\\"text-align:center\\\">outline-width</td> <td style=\\\"text-align:center\\\">box-shadow</td> <td style=\\\"text-align:center\\\">background-size</td> <td style=\\\"text-align:center\\\"></td></tr></tbody></table> <hr> <h2 id=\\\"浏览器的渲染队列：\\\"><a href=\\\"#浏览器的渲染队列：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 浏览器的渲染队列：</h2> <p>思考以下代码将会触发几次渲染？</p> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code>div<span class=\\\"token punctuation\\\">.</span>style<span class=\\\"token punctuation\\\">.</span>left <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">'10px'</span><span class=\\\"token punctuation\\\">;</span>\\ndiv<span class=\\\"token punctuation\\\">.</span>style<span class=\\\"token punctuation\\\">.</span>top <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">'10px'</span><span class=\\\"token punctuation\\\">;</span>\\ndiv<span class=\\\"token punctuation\\\">.</span>style<span class=\\\"token punctuation\\\">.</span>width <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">'20px'</span><span class=\\\"token punctuation\\\">;</span>\\ndiv<span class=\\\"token punctuation\\\">.</span>style<span class=\\\"token punctuation\\\">.</span>height <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">'20px'</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br></div></div><p>根据我们上文的定义，这段代码理论上会触发4次重排+重绘，因为每一次都改变了元素的几何属性，实际上最后只触发了一次重排，这都得益于浏览器的<strong>渲染队列机制</strong>：</p> <p>当我们修改了元素的几何属性，导致浏览器触发重排或重绘时。它会把该操作放进渲染队列，等到队列中的操作到了<strong>一定的数量或者到了一定的时间间隔</strong>时，浏览器就会批量执行这些操作。</p> <h3 id=\\\"强制刷新队列\\\"><a href=\\\"#强制刷新队列\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 强制刷新队列:</h3> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code>div<span class=\\\"token punctuation\\\">.</span>style<span class=\\\"token punctuation\\\">.</span>left <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">'10px'</span><span class=\\\"token punctuation\\\">;</span>\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>div<span class=\\\"token punctuation\\\">.</span>offsetLeft<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\ndiv<span class=\\\"token punctuation\\\">.</span>style<span class=\\\"token punctuation\\\">.</span>top <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">'10px'</span><span class=\\\"token punctuation\\\">;</span>\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>div<span class=\\\"token punctuation\\\">.</span>offsetTop<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\ndiv<span class=\\\"token punctuation\\\">.</span>style<span class=\\\"token punctuation\\\">.</span>width <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">'20px'</span><span class=\\\"token punctuation\\\">;</span>\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>div<span class=\\\"token punctuation\\\">.</span>offsetWidth<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\ndiv<span class=\\\"token punctuation\\\">.</span>style<span class=\\\"token punctuation\\\">.</span>height <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">'20px'</span><span class=\\\"token punctuation\\\">;</span>\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>div<span class=\\\"token punctuation\\\">.</span>offsetHeight<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br><span class=\\\"line-number\\\">5</span><br><span class=\\\"line-number\\\">6</span><br><span class=\\\"line-number\\\">7</span><br><span class=\\\"line-number\\\">8</span><br></div></div><p>这段代码会触发4次重排+重绘，因为在<code>console</code>中你请求的这几个样式信息，无论何时浏览器都会立即执行渲染队列的任务，即使该值与你操作中修改的值没关联。</p> <p><strong>因为队列中，可能会有影响到这些值的操作，为了给我们最精确的值，浏览器会立即重排+重绘</strong>。</p> <p><strong>强制刷新队列的style样式请求</strong>：</p> <ol><li>offsetTop, offsetLeft, offsetWidth, offsetHeight</li> <li>scrollTop, scrollLeft, scrollWidth, scrollHeight</li> <li>clientTop, clientLeft, clientWidth, clientHeight</li> <li>getComputedStyle(), 或者 IE的 currentStyle</li></ol> <p><strong>我们在开发中，应该谨慎的使用这些style请求，注意上下文关系,避免一行代码一个重排，这对性能是个巨大的消耗</strong></p> <h2 id=\\\"重排优化建议\\\"><a href=\\\"#重排优化建议\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 重排优化建议</h2> <p>就像上文提到的我们要尽可能的减少重排次数、重排范围，这样说很泛，下面是一些行之有效的建议，大家可以参考一下。</p> <h3 id=\\\"_1-分离读写操作\\\"><a href=\\\"#_1-分离读写操作\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 1. 分离读写操作</h3> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code>div<span class=\\\"token punctuation\\\">.</span>style<span class=\\\"token punctuation\\\">.</span>left <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">'10px'</span><span class=\\\"token punctuation\\\">;</span>\\ndiv<span class=\\\"token punctuation\\\">.</span>style<span class=\\\"token punctuation\\\">.</span>top <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">'10px'</span><span class=\\\"token punctuation\\\">;</span>\\ndiv<span class=\\\"token punctuation\\\">.</span>style<span class=\\\"token punctuation\\\">.</span>width <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">'20px'</span><span class=\\\"token punctuation\\\">;</span>\\ndiv<span class=\\\"token punctuation\\\">.</span>style<span class=\\\"token punctuation\\\">.</span>height <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">'20px'</span><span class=\\\"token punctuation\\\">;</span>\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>div<span class=\\\"token punctuation\\\">.</span>offsetLeft<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>div<span class=\\\"token punctuation\\\">.</span>offsetTop<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>div<span class=\\\"token punctuation\\\">.</span>offsetWidth<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>div<span class=\\\"token punctuation\\\">.</span>offsetHeight<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br><span class=\\\"line-number\\\">5</span><br><span class=\\\"line-number\\\">6</span><br><span class=\\\"line-number\\\">7</span><br><span class=\\\"line-number\\\">8</span><br></div></div><p>还是上面触发4次重排+重绘的代码，这次只触发了一次重排：</p> <p>在第一个<code>console</code>的时候，浏览器把之前上面四个写操作的渲染队列都给清空了。剩下的console，因为渲染队列本来就是空的，所以并没有触发重排，仅仅拿值而已。</p> <h3 id=\\\"_2-样式集中改变\\\"><a href=\\\"#_2-样式集中改变\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 2. 样式集中改变</h3> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code>div<span class=\\\"token punctuation\\\">.</span>style<span class=\\\"token punctuation\\\">.</span>left <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">'10px'</span><span class=\\\"token punctuation\\\">;</span>\\ndiv<span class=\\\"token punctuation\\\">.</span>style<span class=\\\"token punctuation\\\">.</span>top <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">'10px'</span><span class=\\\"token punctuation\\\">;</span>\\ndiv<span class=\\\"token punctuation\\\">.</span>style<span class=\\\"token punctuation\\\">.</span>width <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">'20px'</span><span class=\\\"token punctuation\\\">;</span>\\ndiv<span class=\\\"token punctuation\\\">.</span>style<span class=\\\"token punctuation\\\">.</span>height <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">'20px'</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br></div></div><p>虽然现在大部分浏览器有渲染队列优化，不排除有些浏览器以及老版本的浏览器效率仍然低下：</p> <p>建议通过改变class或者csstext属性集中改变样式</p> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token comment\\\">// bad</span>\\n<span class=\\\"token keyword\\\">var</span> left <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">10</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">var</span> top <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">10</span><span class=\\\"token punctuation\\\">;</span>\\nel<span class=\\\"token punctuation\\\">.</span>style<span class=\\\"token punctuation\\\">.</span>left <span class=\\\"token operator\\\">=</span> left <span class=\\\"token operator\\\">+</span> <span class=\\\"token string\\\">&quot;px&quot;</span><span class=\\\"token punctuation\\\">;</span>\\nel<span class=\\\"token punctuation\\\">.</span>style<span class=\\\"token punctuation\\\">.</span>top  <span class=\\\"token operator\\\">=</span> top  <span class=\\\"token operator\\\">+</span> <span class=\\\"token string\\\">&quot;px&quot;</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token comment\\\">// good </span>\\nel<span class=\\\"token punctuation\\\">.</span>className <span class=\\\"token operator\\\">+=</span> <span class=\\\"token string\\\">&quot; theclassname&quot;</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token comment\\\">// good</span>\\nel<span class=\\\"token punctuation\\\">.</span>style<span class=\\\"token punctuation\\\">.</span>cssText <span class=\\\"token operator\\\">+=</span> <span class=\\\"token string\\\">&quot;; left: &quot;</span> <span class=\\\"token operator\\\">+</span> left <span class=\\\"token operator\\\">+</span> <span class=\\\"token string\\\">&quot;px; top: &quot;</span> <span class=\\\"token operator\\\">+</span> top <span class=\\\"token operator\\\">+</span> <span class=\\\"token string\\\">&quot;px;&quot;</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br><span class=\\\"line-number\\\">5</span><br><span class=\\\"line-number\\\">6</span><br><span class=\\\"line-number\\\">7</span><br><span class=\\\"line-number\\\">8</span><br><span class=\\\"line-number\\\">9</span><br></div></div><h3 id=\\\"_3-缓存布局信息\\\"><a href=\\\"#_3-缓存布局信息\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 3. 缓存布局信息</h3> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token comment\\\">// bad 强制刷新 触发两次重排</span>\\ndiv<span class=\\\"token punctuation\\\">.</span>style<span class=\\\"token punctuation\\\">.</span>left <span class=\\\"token operator\\\">=</span> div<span class=\\\"token punctuation\\\">.</span>offsetLeft <span class=\\\"token operator\\\">+</span> <span class=\\\"token number\\\">1</span> <span class=\\\"token operator\\\">+</span> <span class=\\\"token string\\\">'px'</span><span class=\\\"token punctuation\\\">;</span>\\ndiv<span class=\\\"token punctuation\\\">.</span>style<span class=\\\"token punctuation\\\">.</span>top <span class=\\\"token operator\\\">=</span> div<span class=\\\"token punctuation\\\">.</span>offsetTop <span class=\\\"token operator\\\">+</span> <span class=\\\"token number\\\">1</span> <span class=\\\"token operator\\\">+</span> <span class=\\\"token string\\\">'px'</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token comment\\\">// good 缓存布局信息 相当于读写分离</span>\\n<span class=\\\"token keyword\\\">var</span> curLeft <span class=\\\"token operator\\\">=</span> div<span class=\\\"token punctuation\\\">.</span>offsetLeft<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">var</span> curTop <span class=\\\"token operator\\\">=</span> div<span class=\\\"token punctuation\\\">.</span>offsetTop<span class=\\\"token punctuation\\\">;</span>\\ndiv<span class=\\\"token punctuation\\\">.</span>style<span class=\\\"token punctuation\\\">.</span>left <span class=\\\"token operator\\\">=</span> curLeft <span class=\\\"token operator\\\">+</span> <span class=\\\"token number\\\">1</span> <span class=\\\"token operator\\\">+</span> <span class=\\\"token string\\\">'px'</span><span class=\\\"token punctuation\\\">;</span>\\ndiv<span class=\\\"token punctuation\\\">.</span>style<span class=\\\"token punctuation\\\">.</span>top <span class=\\\"token operator\\\">=</span> curTop <span class=\\\"token operator\\\">+</span> <span class=\\\"token number\\\">1</span> <span class=\\\"token operator\\\">+</span> <span class=\\\"token string\\\">'px'</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br><span class=\\\"line-number\\\">5</span><br><span class=\\\"line-number\\\">6</span><br><span class=\\\"line-number\\\">7</span><br><span class=\\\"line-number\\\">8</span><br><span class=\\\"line-number\\\">9</span><br></div></div><h3 id=\\\"_4-离线改变dom\\\"><a href=\\\"#_4-离线改变dom\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 4. 离线改变dom</h3> \"),_vm._ssrNode(\"<ul>\",\"</ul>\",[_vm._ssrNode(\"<li><p>隐藏要操作的dom</p> <p>在要操作dom之前，通过display隐藏dom，当操作完成之后，才将元素的display属性为可见，因为不可见的元素不会触发重排和重绘。</p> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code>dom<span class=\\\"token punctuation\\\">.</span>display <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">'none'</span>\\n<span class=\\\"token comment\\\">// 修改dom样式</span>\\ndom<span class=\\\"token punctuation\\\">.</span>display <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">'block'</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br></div></div></li> \"),_vm._ssrNode(\"<li>\",\"</li>\",[_vm._ssrNode(\"<p>\",\"</p>\",[_vm._ssrNode(\"通过使用\"),_vm._ssrNode(\"<a href=\\\"https://developer.mozilla.org/zh-CN/docs/Web/API/DocumentFragment\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">\",\"</a>\",[_vm._ssrNode(\"DocumentFragment\"),_c('OutboundLink')],2),_vm._ssrNode(\"创建一个<code>dom</code>碎片,在它上面批量操作dom，操作完成之后，再添加到文档中，这样只会触发一次重排。\")],2)]),_vm._ssrNode(\" <li><p>复制节点，在副本上工作，然后替换它！</p></li>\")],2),_vm._ssrNode(\" <h3 id=\\\"_5-position属性为absolute或fixed\\\"><a href=\\\"#_5-position属性为absolute或fixed\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 5. position属性为absolute或fixed</h3> <p>position属性为absolute或fixed的元素，重排开销比较小，不用考虑它对其他元素的影响</p> <h3 id=\\\"_6-优化动画\\\"><a href=\\\"#_6-优化动画\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 6. 优化动画</h3> \"),_vm._ssrNode(\"<ul>\",\"</ul>\",[_vm._ssrNode(\"<li><p>可以把动画效果应用到position属性为absolute或fixed的元素上，这样对其他元素影响较小</p> <p>动画效果还应牺牲一些平滑，来换取速度，这中间的度自己衡量：</p> <p>比如实现一个动画，以1个像素为单位移动这样最平滑，但是reflow就会过于频繁，大量消耗CPU资源，如果以3个像素为单位移动则会好很多。</p></li> \"),_vm._ssrNode(\"<li>\",\"</li>\",[_vm._ssrNode(\"<p>启用GPPU加速</p> \"),_vm._ssrNode(\"<p>\",\"</p>\",[_vm._ssrNode(\"此部分来自\"),_vm._ssrNode(\"<a href=\\\"http://caibaojian.com/css-reflow-repaint.html\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">\",\"</a>\",[_vm._ssrNode(\"优化CSS重排重绘与浏览器性能\"),_c('OutboundLink')],2)],2),_vm._ssrNode(\" <p><strong>GPU(图像加速器)：</strong></p> <p>GPU 硬件加速是指应用 GPU 的图形性能对浏览器中的一些图形操作交给 GPU 来完成，因为 GPU 是专门为处理图形而设计，所以它在速度和能耗上更有效率。</p> <p>GPU 加速通常包括以下几个部分：Canvas2D，布局合成, CSS3转换（transitions），CSS3 3D变换（transforms），WebGL和视频(video)。</p> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token comment\\\">/*\\n * 根据上面的结论\\n * 将 2d transform 换成 3d\\n * 就可以强制开启 GPU 加速\\n * 提高动画性能\\n */</span>\\ndiv <span class=\\\"token punctuation\\\">{</span>\\n  transform<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token function\\\">translate3d</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">10</span>px<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">10</span>px<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br><span class=\\\"line-number\\\">5</span><br><span class=\\\"line-number\\\">6</span><br><span class=\\\"line-number\\\">7</span><br><span class=\\\"line-number\\\">8</span><br><span class=\\\"line-number\\\">9</span><br></div></div>\")],2)],2),_vm._ssrNode(\" <hr> <h2 id=\\\"结语\\\"><a href=\\\"#结语\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 结语</h2> <p>重排也是导致DOM脚本执行效率低的关键因素之一，重排与重绘作为大厂经常出现的面试题，并且涉及的性能优化，这是前端必须掌握的基本概念/技能之一(敲黑板!)。</p> <p>重排会不断触发这是不可避免的，但我们在开发时，应尽量按照文中的建议来组织代码，这种优化，需要平时有意识的去做，一点一滴的去做，希望大家重视一下。</p> <p>以上2018.12.17</p> <p>参考资料：</p> \"),_vm._ssrNode(\"<p>\",\"</p>\",[_vm._ssrNode(\"<a href=\\\"http://www.ruanyifeng.com/blog/2015/09/web-page-performance-in-depth.html\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">\",\"</a>\",[_vm._ssrNode(\"网页性能管理详解\"),_c('OutboundLink')],2)]),_vm._ssrNode(\" \"),_vm._ssrNode(\"<p>\",\"</p>\",[_vm._ssrNode(\"<a href=\\\"http://caibaojian.com/css-reflow-repaint.html\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">\",\"</a>\",[_vm._ssrNode(\"优化CSS重排重绘与浏览器性能\"),_c('OutboundLink')],2)]),_vm._ssrNode(\" \"),_vm._ssrNode(\"<h3 id=\\\"点个star支持我一下\\\">\",\"</h3>\",[_vm._ssrNode(\"<a href=\\\"#点个star支持我一下\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 点个\"),_vm._ssrNode(\"<a href=\\\"https://github.com/OBKoro1/web_accumulate\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">\",\"</a>\",[_vm._ssrNode(\"Star\"),_c('OutboundLink')],2),_vm._ssrNode(\"支持我一下~\")],2),_vm._ssrNode(\" \"),_c('comment-comment')],2)}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }"]}