{"remainingRequest":"/Users/koro/work/web_my/web_accumulate/node_modules/vue-loader/lib/index.js??ref--1-1!/Users/koro/work/web_my/web_accumulate/node_modules/vuepress/lib/webpack/markdownLoader.js??ref--1-2!/Users/koro/work/web_my/web_accumulate/docs/accumulate/JS/手摸手教你使用WebSocket.md?vue&type=template&id=1a30a680&","dependencies":[{"path":"/Users/koro/work/web_my/web_accumulate/docs/accumulate/JS/手摸手教你使用WebSocket.md","mtime":1636107879468},{"path":"/Users/koro/work/web_my/web_accumulate/node_modules/cache-loader/dist/cjs.js","mtime":1557296864520},{"path":"/Users/koro/work/web_my/web_accumulate/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1557296867191},{"path":"/Users/koro/work/web_my/web_accumulate/node_modules/cache-loader/dist/cjs.js","mtime":1557296864520},{"path":"/Users/koro/work/web_my/web_accumulate/node_modules/vue-loader/lib/index.js","mtime":1557296867190},{"path":"/Users/koro/work/web_my/web_accumulate/node_modules/vuepress/lib/webpack/markdownLoader.js","mtime":1557296867284}],"contextDependencies":[],"result":["\n<div class=\"content\"><h2 id=\"手摸手教你使用websocket\"><a class=\"header-anchor\" href=\"#手摸手教你使用websocket\" aria-hidden=\"true\">#</a> 手摸手教你使用WebSocket</h2>\n<p><img src=\"https://github.com/OBKoro1/articleImg_src/blob/master/weibo_img_move/005Y4rColy1fwhfykkrenj30w00k075m.jpg?raw=true\" alt=\"\"></p>\n<p>在本篇文章之前，<code>WebSocket</code>很多人听说过，没见过，没用过，以为是个很高大上的技术，实际上这个技术并不神秘，可以说是个很容易就能掌握的技术，希望在看完本文之后，马上把文中的栗子拿出来自己试一试，实践出真知。</p>\n<blockquote>\n<p>游泳、健身了解一下：<a href=\"http://obkoro1.com/\" target=\"_blank\" rel=\"noopener noreferrer\">博客<OutboundLink/></a>、<a href=\"http://obkoro1.com/web_accumulate/accumulate/\" target=\"_blank\" rel=\"noopener noreferrer\">前端积累文档<OutboundLink/></a>、<a href=\"https://github.com/OBKoro1/articleImg_src/blob/master/juejin/1631b6f52f7e7015.jpeg?raw=true\" target=\"_blank\" rel=\"noopener noreferrer\">公众号<OutboundLink/></a>、<a href=\"https://github.com/OBKoro1\" target=\"_blank\" rel=\"noopener noreferrer\">GitHub<OutboundLink/></a></p>\n</blockquote>\n<h3 id=\"websocket解决了什么问题：\"><a class=\"header-anchor\" href=\"#websocket解决了什么问题：\" aria-hidden=\"true\">#</a> <code>WebSocket</code>解决了什么问题：</h3>\n<p>客户端(浏览器)和服务器端进行通信，只能由客户端发起<code>ajax</code>请求，才能进行通信，服务器端无法主动向客户端推送信息。</p>\n<p>当出现类似体育赛事、聊天室、实时位置之类的场景时，客户端要获取服务器端的变化，就只能通过轮询(定时请求)来了解服务器端有没有新的信息变化。</p>\n<blockquote>\n<p>轮询效率低，非常浪费资源(需要不断发送请求，不停链接服务器)</p>\n</blockquote>\n<p><strong>WebSocket的出现，让服务器端可以主动向服务器端发送信息，使得浏览器具备了实时双向通信的能力,这就是<code>WebSocket</code>解决的问题</strong></p>\n<h3 id=\"一个超简单的栗子：\"><a class=\"header-anchor\" href=\"#一个超简单的栗子：\" aria-hidden=\"true\">#</a> 一个超简单的栗子：</h3>\n<p><strong>新建一个<code>html</code>文件，将本栗子找个地方跑一下试试，即可轻松入门<code>WebSocket</code>：</strong></p>\n<!--beforebegin--><div class=\"language-js line-numbers-mode\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">socketConnect</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 客户端与服务器进行连接</span>\n    <span class=\"token keyword\">let</span> ws <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">WebSocket</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 返回`WebSocket`对象，赋值给变量ws</span>\n    <span class=\"token comment\">// 连接成功回调</span>\n    ws<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onopen</span> <span class=\"token operator\">=</span> e <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'连接成功'</span><span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">)</span>\n        ws<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token string\">'我发送消息给服务端'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 客户端与服务器端通信</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">// 监听服务器端返回的信息</span>\n    ws<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onmessage</span> <span class=\"token operator\">=</span> e <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'服务器端返回：'</span><span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span>\n        <span class=\"token comment\">// do something</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> ws<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 返回websocket对象</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">let</span> wsValue <span class=\"token operator\">=</span> <span class=\"token function\">socketConnect</span><span class=\"token punctuation\">(</span><span class=\"token string\">'ws://121.40.165.18:8800'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// websocket对象</span>\n</code></pre>\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br><span class=\"line-number\">11</span><br><span class=\"line-number\">12</span><br><span class=\"line-number\">13</span><br><span class=\"line-number\">14</span><br><span class=\"line-number\">15</span><br><span class=\"line-number\">16</span><br></div><!--beforeend--></div><!--afterend--><p>上述栗子中<code>WebSocket</code>的接口地址出自：<a href=\"http://www.blue-zero.com/WebSocket/\" target=\"_blank\" rel=\"noopener noreferrer\">WebSocket 在线测试<OutboundLink/></a>，在开发的时候也可以用于测试后端给的地址是否可用。</p>\n<h3 id=\"websocket的class类：\"><a class=\"header-anchor\" href=\"#websocket的class类：\" aria-hidden=\"true\">#</a> webSocket的class类：</h3>\n<p>当项目中很多地方使用WebSocket，把它封成一个class类，是更好的选择。</p>\n<p><strong>下面的栗子，做了非常详细的注释，建个html文件也可直接使用</strong>，websocket的常用<code>API</code>都放进去了。</p>\n<p><strong>下方注释的代码，先不用管，涉及到心跳机制，用于保持WebSocket连接的</strong></p>\n<!--beforebegin--><div class=\"language-js line-numbers-mode\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token keyword\">class</span> <span class=\"token class-name\">WebSocketClass</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">/**\n     * @description: 初始化实例属性，保存参数\n     * @param {String} url ws的接口\n     * @param {Function} msgCallback 服务器信息的回调传数据给函数\n     * @param {String} name 可选值 用于区分ws，用于debugger\n     */</span>\n    <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">,</span> msgCallback<span class=\"token punctuation\">,</span> name <span class=\"token operator\">=</span> <span class=\"token string\">'default'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>url <span class=\"token operator\">=</span> url<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>msgCallback <span class=\"token operator\">=</span> msgCallback<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>ws <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// websocket对象</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>status <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// websocket是否关闭</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">/**\n     * @description: 初始化 连接websocket或重连webSocket时调用\n     * @param {*} 可选值 要传的数据\n     */</span>\n    <span class=\"token function\">connect</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// 新建 WebSocket 实例</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>ws <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">WebSocket</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>url<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>ws<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onopen</span> <span class=\"token operator\">=</span> e <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\">// 连接ws成功回调</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>status <span class=\"token operator\">=</span> <span class=\"token string\">'open'</span><span class=\"token punctuation\">;</span>\n            console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">连接成功`</span></span><span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">)</span>\n            <span class=\"token comment\">// this.heartCheck();</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>data <span class=\"token operator\">!==</span> undefined<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token comment\">// 有要传的数据,就发给后端</span>\n                <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>ws<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token comment\">// 监听服务器端返回的信息</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>ws<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onmessage</span> <span class=\"token operator\">=</span> e <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\">// 把数据传给回调函数，并执行回调</span>\n            <span class=\"token comment\">// if (e.data === 'pong') {</span>\n            <span class=\"token comment\">//     this.pingPong = 'pong'; // 服务器端返回pong,修改pingPong的状态</span>\n            <span class=\"token comment\">// }</span>\n            <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">msgCallback</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token comment\">// ws关闭回调</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>ws<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onclose</span> <span class=\"token operator\">=</span> e <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">closeHandle</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 判断是否关闭</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token comment\">// ws出错回调</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onerror</span> <span class=\"token operator\">=</span> e <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">closeHandle</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 判断是否关闭</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">// heartCheck() {</span>\n    <span class=\"token comment\">//     // 心跳机制的时间可以自己与后端约定</span>\n    <span class=\"token comment\">//     this.pingPong = 'ping'; // ws的心跳机制状态值</span>\n    <span class=\"token comment\">//     this.pingInterval = setInterval(() => {</span>\n    <span class=\"token comment\">//         if (this.ws.readyState === 1) {</span>\n    <span class=\"token comment\">//             // 检查ws为链接状态 才可发送</span>\n    <span class=\"token comment\">//             this.ws.send('ping'); // 客户端发送ping</span>\n    <span class=\"token comment\">//         }</span>\n    <span class=\"token comment\">//     }, 10000)</span>\n    <span class=\"token comment\">//     this.pongInterval = setInterval(() => {</span>\n    <span class=\"token comment\">//         this.pingPong = false;</span>\n    <span class=\"token comment\">//         if (this.pingPong === 'ping') {</span>\n    <span class=\"token comment\">//             this.closeHandle('pingPong没有改变为pong'); // 没有返回pong 重启webSocket</span>\n    <span class=\"token comment\">//         }</span>\n    <span class=\"token comment\">//         // 重置为ping 若下一次 ping 发送失败 或者pong返回失败(pingPong不会改成pong)，将重启</span>\n    <span class=\"token comment\">//         console.log('返回pong')</span>\n    <span class=\"token comment\">//         this.pingPong = 'ping'</span>\n    <span class=\"token comment\">//     }, 20000)</span>\n    <span class=\"token comment\">// }</span>\n    <span class=\"token comment\">// 发送信息给服务器</span>\n    <span class=\"token function\">sendHandle</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">发送消息给服务器:`</span></span><span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>ws<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token function\">closeHandle</span><span class=\"token punctuation\">(</span>e <span class=\"token operator\">=</span> <span class=\"token string\">'err'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// 因为webSocket并不稳定，规定只能手动关闭(调closeMyself方法)，否则就重连</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>status <span class=\"token operator\">!==</span> <span class=\"token string\">'close'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">断开，重连websocket`</span></span><span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">)</span>\n            <span class=\"token comment\">// if (this.pingInterval !== undefined &amp;&amp; this.pongInterval !== undefined) {</span>\n            <span class=\"token comment\">//     // 清除定时器</span>\n            <span class=\"token comment\">//     clearInterval(this.pingInterval);</span>\n            <span class=\"token comment\">//     clearInterval(this.pongInterval);</span>\n            <span class=\"token comment\">// }</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">connect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 重连</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n            console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">websocket手动关闭`</span></span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">// 手动关闭WebSocket</span>\n    <span class=\"token function\">closeMyself</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token string\">`关闭</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">`</span></span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>status <span class=\"token operator\">=</span> <span class=\"token string\">'close'</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>ws<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">someFn</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'接收服务器消息的回调：'</span><span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// const wsValue = new WebSocketClass('ws://121.40.165.18:8800', someFn, 'wsName'); // 这个链接一天只能发送消息50次</span>\n<span class=\"token keyword\">const</span> wsValue <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">WebSocketClass</span><span class=\"token punctuation\">(</span><span class=\"token string\">'wss://echo.websocket.org'</span><span class=\"token punctuation\">,</span> someFn<span class=\"token punctuation\">,</span> <span class=\"token string\">'wsName'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 阮一峰老师教程链接</span>\nwsValue<span class=\"token punctuation\">.</span><span class=\"token function\">connect</span><span class=\"token punctuation\">(</span><span class=\"token string\">'立即与服务器通信'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 连接服务器</span>\n<span class=\"token comment\">// setTimeout(() => {</span>\n<span class=\"token comment\">//     wsValue.sendHandle('传消息给服务器')</span>\n<span class=\"token comment\">// }, 1000);</span>\n<span class=\"token comment\">// setTimeout(() => {</span>\n<span class=\"token comment\">//     wsValue.closeMyself(); // 关闭ws</span>\n<span class=\"token comment\">// }, 10000)</span>\n</code></pre>\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br><span class=\"line-number\">11</span><br><span class=\"line-number\">12</span><br><span class=\"line-number\">13</span><br><span class=\"line-number\">14</span><br><span class=\"line-number\">15</span><br><span class=\"line-number\">16</span><br><span class=\"line-number\">17</span><br><span class=\"line-number\">18</span><br><span class=\"line-number\">19</span><br><span class=\"line-number\">20</span><br><span class=\"line-number\">21</span><br><span class=\"line-number\">22</span><br><span class=\"line-number\">23</span><br><span class=\"line-number\">24</span><br><span class=\"line-number\">25</span><br><span class=\"line-number\">26</span><br><span class=\"line-number\">27</span><br><span class=\"line-number\">28</span><br><span class=\"line-number\">29</span><br><span class=\"line-number\">30</span><br><span class=\"line-number\">31</span><br><span class=\"line-number\">32</span><br><span class=\"line-number\">33</span><br><span class=\"line-number\">34</span><br><span class=\"line-number\">35</span><br><span class=\"line-number\">36</span><br><span class=\"line-number\">37</span><br><span class=\"line-number\">38</span><br><span class=\"line-number\">39</span><br><span class=\"line-number\">40</span><br><span class=\"line-number\">41</span><br><span class=\"line-number\">42</span><br><span class=\"line-number\">43</span><br><span class=\"line-number\">44</span><br><span class=\"line-number\">45</span><br><span class=\"line-number\">46</span><br><span class=\"line-number\">47</span><br><span class=\"line-number\">48</span><br><span class=\"line-number\">49</span><br><span class=\"line-number\">50</span><br><span class=\"line-number\">51</span><br><span class=\"line-number\">52</span><br><span class=\"line-number\">53</span><br><span class=\"line-number\">54</span><br><span class=\"line-number\">55</span><br><span class=\"line-number\">56</span><br><span class=\"line-number\">57</span><br><span class=\"line-number\">58</span><br><span class=\"line-number\">59</span><br><span class=\"line-number\">60</span><br><span class=\"line-number\">61</span><br><span class=\"line-number\">62</span><br><span class=\"line-number\">63</span><br><span class=\"line-number\">64</span><br><span class=\"line-number\">65</span><br><span class=\"line-number\">66</span><br><span class=\"line-number\">67</span><br><span class=\"line-number\">68</span><br><span class=\"line-number\">69</span><br><span class=\"line-number\">70</span><br><span class=\"line-number\">71</span><br><span class=\"line-number\">72</span><br><span class=\"line-number\">73</span><br><span class=\"line-number\">74</span><br><span class=\"line-number\">75</span><br><span class=\"line-number\">76</span><br><span class=\"line-number\">77</span><br><span class=\"line-number\">78</span><br><span class=\"line-number\">79</span><br><span class=\"line-number\">80</span><br><span class=\"line-number\">81</span><br><span class=\"line-number\">82</span><br><span class=\"line-number\">83</span><br><span class=\"line-number\">84</span><br><span class=\"line-number\">85</span><br><span class=\"line-number\">86</span><br><span class=\"line-number\">87</span><br><span class=\"line-number\">88</span><br><span class=\"line-number\">89</span><br><span class=\"line-number\">90</span><br><span class=\"line-number\">91</span><br><span class=\"line-number\">92</span><br><span class=\"line-number\">93</span><br><span class=\"line-number\">94</span><br><span class=\"line-number\">95</span><br><span class=\"line-number\">96</span><br><span class=\"line-number\">97</span><br><span class=\"line-number\">98</span><br><span class=\"line-number\">99</span><br><span class=\"line-number\">100</span><br><span class=\"line-number\">101</span><br><span class=\"line-number\">102</span><br><span class=\"line-number\">103</span><br><span class=\"line-number\">104</span><br><span class=\"line-number\">105</span><br></div><!--beforeend--></div><!--afterend--><p>栗子里面我直接写在了一起，可以把<code>class</code>放在一个js文件里面,<code>export</code>出去，然后在需要用的地方再<code>import</code>进来，把参数传进去就可以用了。</p>\n<h2 id=\"websocket不稳定\"><a class=\"header-anchor\" href=\"#websocket不稳定\" aria-hidden=\"true\">#</a> WebSocket不稳定</h2>\n<p>WebSocket并不稳定，在使用一段时间后，可能会断开连接，貌似至今没有一个为何会断开连接的公论，所以我们需要让WebSocket保持连接状态，这里推荐两种方法。</p>\n<h3 id=\"websocket设置变量，判断是否手动关闭连接：\"><a class=\"header-anchor\" href=\"#websocket设置变量，判断是否手动关闭连接：\" aria-hidden=\"true\">#</a> WebSocket设置变量，判断是否手动关闭连接：</h3>\n<p><strong><code>class</code>类中就是用的这种方式</strong>:设置一个变量，在webSocket关闭/报错的回调中，判断是不是手动关闭的，如果不是的话，就重新连接，这样做的优缺点如下：</p>\n<ul>\n<li>优点：请求较少(相对于心跳连接)，易设置。</li>\n<li>缺点：可能会导致丢失数据,在断开重连的这段时间中，恰好双方正在通信。</li>\n</ul>\n<h3 id=\"websocket心跳机制：\"><a class=\"header-anchor\" href=\"#websocket心跳机制：\" aria-hidden=\"true\">#</a> WebSocket心跳机制：</h3>\n<blockquote>\n<p>因为第一种方案的缺点，并且可能会有其他一些未知情况导致断开连接而没有触发Error或Close事件。这样就导致实际连接已经断开了，而客户端和服务端却不知道，还在傻傻的等着消息来。</p>\n</blockquote>\n<p>然后聪明的程序猿们想出了一种叫做<strong>心跳机制</strong>的解决方法：</p>\n<p>客户端就像心跳一样每隔固定的时间发送一次<code>ping</code>，来告诉服务器，我还活着，而服务器也会返回<code>pong</code>，来告诉客户端，服务器还活着。</p>\n<p><strong>具体的实现方法，在上面<code>class</code>的注释中，将其打开，即可看到效果</strong>。</p>\n<h2 id=\"关于websocket\"><a class=\"header-anchor\" href=\"#关于websocket\" aria-hidden=\"true\">#</a> 关于WebSocket</h2>\n<p>怕一开始就堆太多文字性的内容，把各位吓跑了，现在大家已经会用了，我们再回头来看看WebSocket的其他知识点。</p>\n<h3 id=\"websocket的当前状态-websocket-readystate\"><a class=\"header-anchor\" href=\"#websocket的当前状态-websocket-readystate\" aria-hidden=\"true\">#</a> WebSocket的当前状态:<code>WebSocket.readyState</code></h3>\n<p>下面是<code>WebSocket.readyState</code>的四个值(四种状态)：</p>\n<ul>\n<li>0: 表示正在连接</li>\n<li>1: 表示连接成功，可以通信了</li>\n<li>2: 表示连接正在关闭</li>\n<li>3: 表示连接已经关闭，或者打开连接失败</li>\n</ul>\n<p>我们可以利用当前状态来做一些事情，比如上面栗子中当WebSocket链接成功后，才允许客户端发送<code>ping</code>。</p>\n<!--beforebegin--><div class=\"language-js line-numbers-mode\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>ws<span class=\"token punctuation\">.</span>readyState <span class=\"token operator\">===</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 检查ws为链接状态 才可发送</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>ws<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token string\">'ping'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 客户端发送ping</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br></div><!--beforeend--></div><!--afterend--><h3 id=\"websocket还可以发送-接收-二进制数据\"><a class=\"header-anchor\" href=\"#websocket还可以发送-接收-二进制数据\" aria-hidden=\"true\">#</a> <code>WebSocket</code>还可以发送/接收 二进制数据</h3>\n<p>这里我也没有试过，我是看阮一峰老师的<a href=\"http://www.ruanyifeng.com/blog/2017/05/websocket.html\" target=\"_blank\" rel=\"noopener noreferrer\">WebSocket教程<OutboundLink/></a>才知道有这么个东西，有兴趣的可以再去谷歌，大家知道一下就可以。</p>\n<p>二进制数据包括：<code>blob</code>对象和<code>Arraybuffer</code>对象，所以我们需要分开来处理。</p>\n<!--beforebegin--><div class=\"language-js line-numbers-mode\"><!--afterbegin--><pre v-pre class=\"language-js\"><code>    <span class=\"token comment\">// 接收数据</span>\nws<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onmessage</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">.</span>data <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">ArrayBuffer</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// 判断 ArrayBuffer 对象</span>\n    <span class=\"token punctuation\">}</span>\n    \n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">.</span>data <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Blob</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// 判断 Blob 对象</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 发送 Blob 对象的例子</span>\n<span class=\"token keyword\">let</span> file <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'input[type=\"file\"]'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>files<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\nws<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span>file<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 发送 ArrayBuffer 对象的例子</span>\n<span class=\"token keyword\">var</span> img <span class=\"token operator\">=</span> canvas_context<span class=\"token punctuation\">.</span><span class=\"token function\">getImageData</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">400</span><span class=\"token punctuation\">,</span> <span class=\"token number\">320</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> binary <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Uint8Array</span><span class=\"token punctuation\">(</span>img<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> img<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    binary<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> img<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\nws<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span>binary<span class=\"token punctuation\">.</span>buffer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br><span class=\"line-number\">11</span><br><span class=\"line-number\">12</span><br><span class=\"line-number\">13</span><br><span class=\"line-number\">14</span><br><span class=\"line-number\">15</span><br><span class=\"line-number\">16</span><br><span class=\"line-number\">17</span><br><span class=\"line-number\">18</span><br><span class=\"line-number\">19</span><br><span class=\"line-number\">20</span><br><span class=\"line-number\">21</span><br><span class=\"line-number\">22</span><br></div><!--beforeend--></div><!--afterend--><p><strong>如果你要发送的二进制数据很大的话，如何判断发送完毕：</strong></p>\n<p><code>webSocket.bufferedAmount</code>属性，表示还有多少字节的二进制数据没有发送出去：</p>\n<!--beforebegin--><div class=\"language-js line-numbers-mode\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token keyword\">var</span> data <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayBuffer</span><span class=\"token punctuation\">(</span><span class=\"token number\">10000000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nsocket<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>socket<span class=\"token punctuation\">.</span>bufferedAmount <span class=\"token operator\">===</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 发送完毕</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 发送还没结束</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br></div><!--beforeend--></div><!--afterend--><p>上述栗子出自阮一峰老师的<a href=\"http://www.ruanyifeng.com/blog/2017/05/websocket.html\" target=\"_blank\" rel=\"noopener noreferrer\">WebSocket教程<OutboundLink/></a></p>\n<h3 id=\"websocket的优点：\"><a class=\"header-anchor\" href=\"#websocket的优点：\" aria-hidden=\"true\">#</a> WebSocket的优点：</h3>\n<p>最后再吹一波WebSocket：</p>\n<ol>\n<li>\n<p>双向通信(一开始说的，也是最重要的一点)。</p>\n</li>\n<li>\n<p>数据格式比较轻量，性能开销小，通信高效</p>\n<p>协议控制的数据包头部较小，而HTTP协议每次通信都需要携带完整的头部</p>\n</li>\n<li>\n<p>更好的二进制支持</p>\n</li>\n<li>\n<p>没有同源限制，客户端可以与任意服务器通信</p>\n</li>\n<li>\n<p>与 HTTP 协议有着良好的兼容性。默认端口也是80和443，并且握手阶段采用 HTTP 协议，因此握手时不容易屏蔽，能通过各种 HTTP 代理服务器</p>\n</li>\n</ol>\n<hr>\n<h2 id=\"结语\"><a class=\"header-anchor\" href=\"#结语\" aria-hidden=\"true\">#</a> 结语</h2>\n<p>看了本文之后，如果还是有点迷糊的话，一定要把文中的两个栗子，新建个html文件跑起来，自己鼓捣鼓捣一下。不然读多少博客/教程都没有用，实践才出真知，切勿纸上谈兵。</p>\n<p>以上2018.10.22</p>\n<p>参考资料：</p>\n<p><a href=\"http://www.ruanyifeng.com/blog/2017/05/websocket.html\" target=\"_blank\" rel=\"noopener noreferrer\">WebSocket 教程<OutboundLink/></a></p>\n<p><a href=\"https://www.cnblogs.com/tugenhua0707/p/8648044.html\" target=\"_blank\" rel=\"noopener noreferrer\">理解WebSocket心跳及重连机制<OutboundLink/></a></p>\n<p><a href=\"https://www.cnblogs.com/chyingp/p/websocket-deep-in.html\" target=\"_blank\" rel=\"noopener noreferrer\">WebSocket协议：5分钟从入门到精通<OutboundLink/></a>\n<!-- 特殊字符串：用于修改/删除markdown的结尾提示语-OBKoro1 --></p>\n<h3 id=\"点个star支持我一下\"><a class=\"header-anchor\" href=\"#点个star支持我一下\" aria-hidden=\"true\">#</a> 点个<a href=\"https://github.com/OBKoro1/web_accumulate\" target=\"_blank\" rel=\"noopener noreferrer\">Star<OutboundLink/></a>支持我一下~</h3>\n<!-- '特殊字符串：用于删除编译后的issue组件-OBKoro1 -->\n<!-- more -->\n<comment-comment/>\n</div>\n",null]}