{"remainingRequest":"/Users/koro/work/web_my/web_accumulate/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/koro/work/web_my/web_accumulate/node_modules/cache-loader/dist/cjs.js??ref--1-0!/Users/koro/work/web_my/web_accumulate/node_modules/vue-loader/lib/index.js??ref--1-1!/Users/koro/work/web_my/web_accumulate/node_modules/vuepress/lib/webpack/markdownLoader.js??ref--1-2!/Users/koro/work/web_my/web_accumulate/docs/accumulate/ES6/let和const命令.md?vue&type=template&id=f38a464e&","dependencies":[{"path":"/Users/koro/work/web_my/web_accumulate/docs/accumulate/ES6/let和const命令.md","mtime":1636107879468},{"path":"/Users/koro/work/web_my/web_accumulate/node_modules/cache-loader/dist/cjs.js","mtime":1557296864520},{"path":"/Users/koro/work/web_my/web_accumulate/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1557296867191},{"path":"/Users/koro/work/web_my/web_accumulate/node_modules/cache-loader/dist/cjs.js","mtime":1557296864520},{"path":"/Users/koro/work/web_my/web_accumulate/node_modules/vue-loader/lib/index.js","mtime":1557296867190},{"path":"/Users/koro/work/web_my/web_accumulate/node_modules/vuepress/lib/webpack/markdownLoader.js","mtime":1557296867284}],"contextDependencies":[],"result":["var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"content\"},[_vm._ssrNode(\"<h1 id=\\\"var和let-const的区别\\\"><a href=\\\"#var和let-const的区别\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> var和let/const的区别</h1> \"),_vm._ssrNode(\"<p>\",\"</p>\",[_vm._ssrNode(\"<code>let</code>和<code>const</code>是 ES6 新增的命令，用于声明变量，这两个命令跟 ES5 的<code>var</code>有许多不同，并且<code>let</code>和<code>const</code>也有一些细微的不同，再认真阅读了\\b阮一峰老师的\"),_vm._ssrNode(\"<a href=\\\"http://es6.ruanyifeng.com/#docs/let\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">\",\"</a>\",[_vm._ssrNode(\"文档\"),_c('OutboundLink')],2),_vm._ssrNode(\"后，发现还是有一些不知道的细节...\")],2),_vm._ssrNode(\" \"),_vm._ssrNode(\"<blockquote>\",\"</blockquote>\",[_vm._ssrNode(\"<p>\",\"</p>\",[_vm._ssrNode(\"<a href=\\\"http://obkoro1.com/\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">\",\"</a>\",[_vm._ssrNode(\"博客\"),_c('OutboundLink')],2),_vm._ssrNode(\"、\"),_vm._ssrNode(\"<a href=\\\"http://obkoro1.com/web_accumulate/accumulate/\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">\",\"</a>\",[_vm._ssrNode(\"前端积累文档\"),_c('OutboundLink')],2),_vm._ssrNode(\"、\"),_vm._ssrNode(\"<a href=\\\"https://github.com/OBKoro1/articleImg_src/blob/master/juejin/1631b6f52f7e7015.jpeg?raw=true\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">\",\"</a>\",[_vm._ssrNode(\"公众号\"),_c('OutboundLink')],2),_vm._ssrNode(\"、\"),_vm._ssrNode(\"<a href=\\\"https://github.com/OBKoro1\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">\",\"</a>\",[_vm._ssrNode(\"GitHub\"),_c('OutboundLink')],2)],2)]),_vm._ssrNode(\" <h2 id=\\\"内容：\\\"><a href=\\\"#内容：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 内容：</h2> <p><strong><code>var</code>和<code>let</code>/<code>const</code>的区别</strong></p> <ol><li><p>块级作用域</p></li> <li><p>不存在变量提升</p></li> <li><p>暂时性死区</p></li> <li><p>不可重复声明</p></li> <li><p>let、const声明的\\b全局变量不会挂在顶层对象下面</p></li></ol> <p><strong><code>const</code>命令两个注意点:</strong></p> <ol><li><p>const 声明之后必须马上赋值，否则会报错</p></li> <li><p>const 简单类型一旦声明就不能再更改，\\b复杂类型(数组、对象等)指针指向的地址不能更改，内部数据可以更改。</p></li></ol> <h3 id=\\\"为什么需要块级作用域\\\"><a href=\\\"#为什么需要块级作用域\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 为什么需要块级作用域?</h3> <p>ES5只有全局作用域和函数作用域，没有块级作用域。</p> <p>这带来很多不合理的场景:</p> <ol><li>内层变量可能覆盖外层变量</li> <li>用来计数的循环变量泄露为全局变量</li></ol> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">var</span> tmp <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Date</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">f</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>tmp<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 想打印外层的时间作用域</span>\\n  <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token boolean\\\">false</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">var</span> tmp <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">'hello world'</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 这里声明的作用域为整个函数</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token function\\\">f</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// undefined</span>\\n\\n<span class=\\\"token keyword\\\">var</span> s <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">'hello'</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">for</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">var</span> i <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">;</span> i <span class=\\\"token operator\\\">&lt;</span> s<span class=\\\"token punctuation\\\">.</span>length<span class=\\\"token punctuation\\\">;</span> i<span class=\\\"token operator\\\">++</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>s<span class=\\\"token punctuation\\\">[</span>i<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// i应该为此次for循环使用的变量</span>\\n<span class=\\\"token punctuation\\\">}</span>\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>i<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 5 全局范围都可以读到</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br><span class=\\\"line-number\\\">5</span><br><span class=\\\"line-number\\\">6</span><br><span class=\\\"line-number\\\">7</span><br><span class=\\\"line-number\\\">8</span><br><span class=\\\"line-number\\\">9</span><br><span class=\\\"line-number\\\">10</span><br><span class=\\\"line-number\\\">11</span><br><span class=\\\"line-number\\\">12</span><br><span class=\\\"line-number\\\">13</span><br><span class=\\\"line-number\\\">14</span><br></div></div><h3 id=\\\"块级作用域\\\"><a href=\\\"#块级作用域\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 块级作用域</h3> <ol><li>作用域</li></ol> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">f1</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">let</span> n <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">5</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token boolean\\\">true</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">let</span> n <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">10</span><span class=\\\"token punctuation\\\">;</span>\\n    console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>n<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 10 内层的n</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n  console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>n<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 5 当前层的n</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br><span class=\\\"line-number\\\">5</span><br><span class=\\\"line-number\\\">6</span><br><span class=\\\"line-number\\\">7</span><br><span class=\\\"line-number\\\">8</span><br></div></div><ol start=\\\"2\\\"><li>块级作用域任意嵌套</li></ol> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token punctuation\\\">{</span><span class=\\\"token keyword\\\">let</span> insane <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">'Hello World'</span><span class=\\\"token punctuation\\\">}</span>\\n  console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>insane<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 报错 读不到子作用域的变量</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br></div></div><ol start=\\\"3\\\"><li>块级作用域真正使代码分割成块了</li></ol> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token punctuation\\\">{</span>\\n<span class=\\\"token keyword\\\">let</span> a <span class=\\\"token operator\\\">=</span> <span class=\\\"token operator\\\">...</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token operator\\\">...</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">{</span>\\n<span class=\\\"token keyword\\\">let</span> a <span class=\\\"token operator\\\">=</span> <span class=\\\"token operator\\\">...</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token operator\\\">...</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br><span class=\\\"line-number\\\">5</span><br><span class=\\\"line-number\\\">6</span><br><span class=\\\"line-number\\\">7</span><br><span class=\\\"line-number\\\">8</span><br></div></div><p>以上形式，<strong>可以用于测试一些想法，不用担心变量重名，也不用担心外界干扰</strong></p> <h3 id=\\\"块级作用域声明函数：\\\"><a href=\\\"#块级作用域声明函数：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 块级作用域声明函数：</h3> \"),_vm._ssrNode(\"<blockquote>\",\"</blockquote>\",[_vm._ssrNode(\"<p>\",\"</p>\",[_vm._ssrNode(\"在块级作用域声明函数，因为浏览器的要\\b兼容老代码，会产生一些\"),_vm._ssrNode(\"<a href=\\\"http://es6.ruanyifeng.com/#docs/let#%E5%9D%97%E7%BA%A7%E4%BD%9C%E7%94%A8%E5%9F%9F%E4%B8%8E%E5%87%BD%E6%95%B0%E5%A3%B0%E6%98%8E\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">\",\"</a>\",[_vm._ssrNode(\"问题\"),_c('OutboundLink')],2),_vm._ssrNode(\"！\")],2)]),_vm._ssrNode(\" <p><strong>在块级作用域声明函数，最好使用匿名函数的形式</strong>。</p> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">if</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token boolean\\\">true</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">let</span> <span class=\\\"token function-variable function\\\">a</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 作用域为块级 令声明的函数作用域范围更清晰</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br></div></div><p><strong>ES6 的块级作用域允许声明函数的规则，只在使用大括号的情况下成立，如果没有使用大括号，就会报错</strong>。</p> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token comment\\\">// 报错</span>\\n<span class=\\\"token string\\\">'use strict'</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token boolean\\\">true</span><span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">f</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">}</span> <span class=\\\"token comment\\\">// 我们需要给if加个{}</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br></div></div><h3 id=\\\"不存在变量提升\\\"><a href=\\\"#不存在变量提升\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 不存在变量提升</h3> <p><strong>变量提升的现象</strong>：在同一作用域下，变量可以在声明之前使用，值为 undefined</p> <p>ES5 时使用<code>var</code>声明变量，经常会出现变量提升的现象。</p> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token comment\\\">// var 的情况</span>\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>foo<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 输出undefined</span>\\n<span class=\\\"token keyword\\\">var</span> foo <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token comment\\\">// let 的情况</span>\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>bar<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 报错ReferenceError</span>\\n<span class=\\\"token keyword\\\">let</span> bar <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br><span class=\\\"line-number\\\">5</span><br><span class=\\\"line-number\\\">6</span><br><span class=\\\"line-number\\\">7</span><br></div></div><h3 id=\\\"暂时性死区：\\\"><a href=\\\"#暂时性死区：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 暂时性死区：</h3> <p>只要一进入当前作用域，所要使用的变量就已经存在了，但是不可获取，<strong>只有等到声明变量的那一行代码出现，才可以获取和使用该变量</strong></p> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">var</span> tmp <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">123</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 声明</span>\\n<span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token boolean\\\">true</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  tmp <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">'abc'</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 报错 因为本区域有tmp声明变量</span>\\n  <span class=\\\"token keyword\\\">let</span> tmp<span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 绑定if这个块级的作用域 不能出现tmp变量</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br><span class=\\\"line-number\\\">5</span><br></div></div><p><strong>暂时性死区和不能变量提升的意义在于:</strong></p> <p>为了减少运行时错误，防止在变量声明前就使用这个变量，从而导致意料之外的行为。</p> <h3 id=\\\"不允许重复声明变量\\\"><a href=\\\"#不允许重复声明变量\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 不允许重复声明变量</h3> <blockquote><p>在测试时出现这种情况:<code>var a= '声明';const a = '不报错'</code>，这种情况是因为babel在转化的时候，做了一些处理，在浏览器的控制台中测试，就成功报错</p></blockquote> <p><code>let</code>、<code>const</code>不允许在相同作用域内，重复声明同一个变量</p> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">func</span><span class=\\\"token punctuation\\\">(</span>arg<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">let</span> arg<span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 报错</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">func</span><span class=\\\"token punctuation\\\">(</span>arg<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">let</span> arg<span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 不报错</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br><span class=\\\"line-number\\\">5</span><br><span class=\\\"line-number\\\">6</span><br><span class=\\\"line-number\\\">7</span><br><span class=\\\"line-number\\\">8</span><br><span class=\\\"line-number\\\">9</span><br></div></div><h3 id=\\\"let、const声明的全局变量不会挂在顶层对象下面\\\"><a href=\\\"#let、const声明的全局变量不会挂在顶层对象下面\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> let、const声明的\\b全局变量不会挂在顶层对象下面</h3> <ol><li>浏览器环境顶层对象是: <code>window</code></li> <li>node环境顶层对象是: <code>global</code></li> <li>var声明的全局变量会挂在顶层对象下面，而let、const不会挂在顶层对象下面。如下面这个栗子</li></ol> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">var</span> a <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token comment\\\">// 如果在 Node环境，可以写成 global.a</span>\\n<span class=\\\"token comment\\\">// 或者采用通用方法，写成 this.a</span>\\nwindow<span class=\\\"token punctuation\\\">.</span>a <span class=\\\"token comment\\\">// 1</span>\\n\\n<span class=\\\"token keyword\\\">let</span> b <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">;</span>\\nwindow<span class=\\\"token punctuation\\\">.</span>b <span class=\\\"token comment\\\">// undefined</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br><span class=\\\"line-number\\\">5</span><br><span class=\\\"line-number\\\">6</span><br><span class=\\\"line-number\\\">7</span><br></div></div><h2 id=\\\"const命令\\\"><a href=\\\"#const命令\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> const命令</h2> <ol><li><p><strong>一旦声明，必须马上赋值</strong></p> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">let</span> p<span class=\\\"token punctuation\\\">;</span> <span class=\\\"token keyword\\\">var</span> p1<span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 不报错</span>\\n<span class=\\\"token keyword\\\">const</span> p3 <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">'马上赋值'</span>\\n<span class=\\\"token keyword\\\">const</span> p3<span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 报错 没有赋值</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br></div></div></li> <li><p><strong>const一旦声明值就不能改变</strong></p> <h4 id=\\\"简单类型-不能改动\\\"><a href=\\\"#简单类型-不能改动\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 简单类型:不能改动</h4> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">const</span> p <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">'不能改变'</span><span class=\\\"token punctuation\\\">;</span>\\np <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">'报错'</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br></div></div><h4 id=\\\"复杂类型-变量指针不能变\\\"><a href=\\\"#复杂类型-变量指针不能变\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> \\b复杂类型:变量指针不能变</h4> <p>考虑如下情况：</p> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">const</span> p <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token string\\\">'不能改动'</span><span class=\\\"token punctuation\\\">]</span>\\n<span class=\\\"token keyword\\\">const</span> p2 <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n  name<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'OBKoro1'</span>\\n<span class=\\\"token punctuation\\\">}</span>\\np<span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">'不报错'</span>\\np2<span class=\\\"token punctuation\\\">.</span>name <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">'\\b不报错'</span>\\np <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token string\\\">'报错'</span><span class=\\\"token punctuation\\\">]</span>\\np2 <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n  name<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'报错'</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br><span class=\\\"line-number\\\">5</span><br><span class=\\\"line-number\\\">6</span><br><span class=\\\"line-number\\\">7</span><br><span class=\\\"line-number\\\">8</span><br><span class=\\\"line-number\\\">9</span><br><span class=\\\"line-number\\\">10</span><br></div></div><p>const所说的一旦声明值就不能改变，实际上指的是：<strong>变量指向的那个内存地址所保存的数据不得改动</strong></p> <ul><li><p>简单类型(number、string、boolean)：<strong>内存地址就是值,即常量(一变就报错)</strong>.</p></li> <li><p>复杂类型(对象、数组等)：<strong>地址保存的是一个指针，<code>const</code>只能保证指针是固定的(总是指向同一个地址),它内部的值是可以改变的(不要以为const就安全了！)</strong></p> <p>所以只要不重新赋值整个数组/对象， 因为保存的是一个指针，所以对数组使用的<code>push</code>、<code>shift</code>、<code>splice</code>等方法也是允许的\\b，你就是把值一个一个全都删光了都不会报错。</p></li></ul> <blockquote><p>复杂类型还有函数，正则等，这点也要注意一下。</p></blockquote></li></ol> <h2 id=\\\"总结\\\"><a href=\\\"#总结\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 总结:</h2> <p>再总结一下，看到这些名词，脑子里应该会有对应的理解，如果没有的话，那可以再看看对应的内容。</p> <h3 id=\\\"var和let-const的区别-2\\\"><a href=\\\"#var和let-const的区别-2\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> <code>var</code>和<code>let</code>/<code>const</code>的区别:</h3> <ol><li>块级作用域</li> <li>不存在变量提升</li> <li>暂时性死区</li> <li>不可重复声明</li> <li>let、const声明的\\b全局变量不会挂在顶层对象下面</li></ol> <h3 id=\\\"const命令两个注意点\\\"><a href=\\\"#const命令两个注意点\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> <code>const</code>命令两个注意点:</h3> <ol><li><p>\\b<code>let</code>可以先声明稍后再赋值,而<code>const</code>在 声明之后必须马上赋值，否则会报错</p></li> <li><p>const 简单类型一旦声明就不能再更改，\\b复杂类型(数组、对象等)指针指向的地址不能更改，内部数据可以更改。</p></li></ol> <h3 id=\\\"let、const使用场景\\\"><a href=\\\"#let、const使用场景\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> let、const使用场景:</h3> <ol><li><code>let</code>使用场景：变量，用以替代<code>var</code>。</li> <li><code>const</code>使用场景：常量、声明匿名函数、箭头函数的时候。</li></ol> <p>参考资料：</p> \"),_vm._ssrNode(\"<p>\",\"</p>\",[_vm._ssrNode(\"<a href=\\\"http://es6.ruanyifeng.com/#docs/let\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">\",\"</a>\",[_vm._ssrNode(\"let 和 const 命令\"),_c('OutboundLink')],2)]),_vm._ssrNode(\" \"),_vm._ssrNode(\"<h3 id=\\\"点个star支持我一下\\\">\",\"</h3>\",[_vm._ssrNode(\"<a href=\\\"#点个star支持我一下\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 点个\"),_vm._ssrNode(\"<a href=\\\"https://github.com/OBKoro1/web_accumulate\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">\",\"</a>\",[_vm._ssrNode(\"Star\"),_c('OutboundLink')],2),_vm._ssrNode(\"支持我一下~\")],2),_vm._ssrNode(\" \"),_c('comment-comment')],2)}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }"]}