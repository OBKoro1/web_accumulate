{"remainingRequest":"/Users/koro/work/web_my/web_accumulate/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/koro/work/web_my/web_accumulate/node_modules/cache-loader/dist/cjs.js??ref--1-0!/Users/koro/work/web_my/web_accumulate/node_modules/vue-loader/lib/index.js??ref--1-1!/Users/koro/work/web_my/web_accumulate/node_modules/vuepress/lib/webpack/markdownLoader.js??ref--1-2!/Users/koro/work/web_my/web_accumulate/docs/accumulate/tool/ESLint插件.md?vue&type=template&id=edda353e&","dependencies":[{"path":"/Users/koro/work/web_my/web_accumulate/docs/accumulate/tool/ESLint插件.md","mtime":1636107879469},{"path":"/Users/koro/work/web_my/web_accumulate/node_modules/cache-loader/dist/cjs.js","mtime":1557296864520},{"path":"/Users/koro/work/web_my/web_accumulate/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1557296867191},{"path":"/Users/koro/work/web_my/web_accumulate/node_modules/cache-loader/dist/cjs.js","mtime":1557296864520},{"path":"/Users/koro/work/web_my/web_accumulate/node_modules/vue-loader/lib/index.js","mtime":1557296867190},{"path":"/Users/koro/work/web_my/web_accumulate/node_modules/vuepress/lib/webpack/markdownLoader.js","mtime":1557296867284}],"contextDependencies":[],"result":["var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"content\"},[_vm._ssrNode(\"<h2 id=\\\"手摸手教你写个eslint插件以及了解eslint的运行原理\\\"><a href=\\\"#手摸手教你写个eslint插件以及了解eslint的运行原理\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 手摸手教你写个ESLint插件以及了解ESLint的运行原理</h2> <p>这篇文章目的是介绍如何创建一个ESLint插件和创建一个<code>ESLint</code> <code>rule</code>，用以帮助我们更深入的理解ESLint的运行原理，并且在有必要时可以根据需求创建出一个完美满足自己需求的Lint规则。</p> <h3 id=\\\"插件目标\\\"><a href=\\\"#插件目标\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 插件目标</h3> <p>禁止项目中<code>setTimeout</code>的第二个参数是数字。</p> <p>PS： 如果是数字的话，很容易就成为魔鬼数字，没有人知道为什么是这个数字, 这个数字有什么含义。</p> <h3 id=\\\"使用模板初始化项目：\\\"><a href=\\\"#使用模板初始化项目：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 使用模板初始化项目：</h3> <h4 id=\\\"_1-安装npm包\\\"><a href=\\\"#_1-安装npm包\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 1. 安装NPM包</h4> <p>ESLint官方为了方便开发者开发插件，提供了使用Yeoman模板(<code>generator-eslint</code>)。</p> <p>对于Yeoman我们只需知道它是一个脚手架工具，用于生成包含指定框架结构的工程化目录结构。</p> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code>npm install <span class=\\\"token operator\\\">-</span>g yo generator<span class=\\\"token operator\\\">-</span>eslint\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br></div></div><h4 id=\\\"_2-创建一个文件夹：\\\"><a href=\\\"#_2-创建一个文件夹：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 2. 创建一个文件夹：</h4> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code>mkdir eslint<span class=\\\"token operator\\\">-</span>plugin<span class=\\\"token operator\\\">-</span>demo\\ncd eslint<span class=\\\"token operator\\\">-</span>plugin<span class=\\\"token operator\\\">-</span>demo\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br></div></div><h4 id=\\\"_3-命令行初始化eslint插件的项目结构\\\"><a href=\\\"#_3-命令行初始化eslint插件的项目结构\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 3. 命令行初始化ESLint插件的项目结构:</h4> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code>yo eslint<span class=\\\"token punctuation\\\">:</span>plugin\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br></div></div><p>下面进入命令行交互流程，流程结束后生成ESLint插件项目框架和文件。</p> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token operator\\\">?</span> What is your name<span class=\\\"token operator\\\">?</span> OBKoro1\\n<span class=\\\"token operator\\\">?</span> What is the plugin <span class=\\\"token constant\\\">ID</span><span class=\\\"token operator\\\">?</span> korolint   <span class=\\\"token comment\\\">// 这个插件的ID是什么</span>\\n<span class=\\\"token operator\\\">?</span> Type a short description <span class=\\\"token keyword\\\">of</span> <span class=\\\"token keyword\\\">this</span> plugin<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token constant\\\">XX</span>公司的定制ESLint rule <span class=\\\"token comment\\\">// 输入这个插件的描述</span>\\n<span class=\\\"token operator\\\">?</span> Does <span class=\\\"token keyword\\\">this</span> plugin contain custom ESLint rules<span class=\\\"token operator\\\">?</span> Yes <span class=\\\"token comment\\\">// 这个插件包含自定义ESLint规则吗?</span>\\n<span class=\\\"token operator\\\">?</span> Does <span class=\\\"token keyword\\\">this</span> plugin contain one or more processors<span class=\\\"token operator\\\">?</span> No <span class=\\\"token comment\\\">// 这个插件包含一个或多个处理器吗</span>\\n<span class=\\\"token comment\\\">// 处理器用于处理js以外的文件 比如.vue文件</span>\\n   create <span class=\\\"token keyword\\\">package</span><span class=\\\"token punctuation\\\">.</span>json\\n   create lib<span class=\\\"token operator\\\">/</span>index<span class=\\\"token punctuation\\\">.</span>js\\n   create <span class=\\\"token constant\\\">README</span><span class=\\\"token punctuation\\\">.</span>md\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br><span class=\\\"line-number\\\">5</span><br><span class=\\\"line-number\\\">6</span><br><span class=\\\"line-number\\\">7</span><br><span class=\\\"line-number\\\">8</span><br><span class=\\\"line-number\\\">9</span><br></div></div><p>现在可以看到在文件夹内生成了一些文件夹和文件，但我们还需要创建规则具体细节的文件。</p> <h4 id=\\\"_4-创建规则\\\"><a href=\\\"#_4-创建规则\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 4. 创建规则</h4> <blockquote><p>上一个命令行生成的是ESLint插件的项目模板，这个命令行是生成ESLint插件具体规则的文件。</p></blockquote> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code>yo eslint<span class=\\\"token punctuation\\\">:</span>rule <span class=\\\"token comment\\\">// 生成 eslint rule的模板文件</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br></div></div><p>创建规则命令行交互：</p> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token operator\\\">?</span> What is your name<span class=\\\"token operator\\\">?</span> OBKoro1\\n<span class=\\\"token operator\\\">?</span> Where will <span class=\\\"token keyword\\\">this</span> rule be published<span class=\\\"token operator\\\">?</span> <span class=\\\"token punctuation\\\">(</span>Use arrow keys<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token comment\\\">// 这个规则将在哪里发布？</span>\\n❯ ESLint Core  <span class=\\\"token comment\\\">// 官方核心规则 (目前有200多个规则)</span>\\n  ESLint Plugin  <span class=\\\"token comment\\\">// 选择ESLint插件</span>\\n<span class=\\\"token operator\\\">?</span> What is the rule <span class=\\\"token constant\\\">ID</span><span class=\\\"token operator\\\">?</span> settimeout<span class=\\\"token operator\\\">-</span>no<span class=\\\"token operator\\\">-</span>number  <span class=\\\"token comment\\\">// 规则的ID</span>\\n<span class=\\\"token operator\\\">?</span> Type a short description <span class=\\\"token keyword\\\">of</span> <span class=\\\"token keyword\\\">this</span> rule<span class=\\\"token punctuation\\\">:</span> setTimeout 第二个参数禁止是数字  <span class=\\\"token comment\\\">// 输入该规则的描述</span>\\n<span class=\\\"token operator\\\">?</span> Type a short example <span class=\\\"token keyword\\\">of</span> the code that will fail<span class=\\\"token punctuation\\\">:</span>  占位  <span class=\\\"token comment\\\">// 输入一个失败例子的代码</span>\\n   create docs<span class=\\\"token operator\\\">/</span>rules<span class=\\\"token operator\\\">/</span>settimeout<span class=\\\"token operator\\\">-</span>no<span class=\\\"token operator\\\">-</span>number<span class=\\\"token punctuation\\\">.</span>md\\n   create lib<span class=\\\"token operator\\\">/</span>rules<span class=\\\"token operator\\\">/</span>settimeout<span class=\\\"token operator\\\">-</span>no<span class=\\\"token operator\\\">-</span>number<span class=\\\"token punctuation\\\">.</span>js\\n   create tests<span class=\\\"token operator\\\">/</span>lib<span class=\\\"token operator\\\">/</span>rules<span class=\\\"token operator\\\">/</span>settimeout<span class=\\\"token operator\\\">-</span>no<span class=\\\"token operator\\\">-</span>number<span class=\\\"token punctuation\\\">.</span>js\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br><span class=\\\"line-number\\\">5</span><br><span class=\\\"line-number\\\">6</span><br><span class=\\\"line-number\\\">7</span><br><span class=\\\"line-number\\\">8</span><br><span class=\\\"line-number\\\">9</span><br><span class=\\\"line-number\\\">10</span><br></div></div><h4 id=\\\"加了具体规则文件的项目结构\\\"><a href=\\\"#加了具体规则文件的项目结构\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 加了具体规则文件的项目结构</h4> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token punctuation\\\">.</span>\\n├── <span class=\\\"token constant\\\">README</span><span class=\\\"token punctuation\\\">.</span>md\\n├── docs <span class=\\\"token comment\\\">// 使用文档</span>\\n│   └── rules <span class=\\\"token comment\\\">// 所有规则的文档</span>\\n│       └── settimeout<span class=\\\"token operator\\\">-</span>no<span class=\\\"token operator\\\">-</span>number<span class=\\\"token punctuation\\\">.</span>md <span class=\\\"token comment\\\">// 具体规则文档</span>\\n├── lib <span class=\\\"token comment\\\">// eslint 规则开发</span>\\n│   ├── index<span class=\\\"token punctuation\\\">.</span>js 引入<span class=\\\"token operator\\\">+</span>导出rules文件夹的规则\\n│   └── rules <span class=\\\"token comment\\\">// 此目录下可以构建多个规则</span>\\n│       └── settimeout<span class=\\\"token operator\\\">-</span>no<span class=\\\"token operator\\\">-</span>number<span class=\\\"token punctuation\\\">.</span>js <span class=\\\"token comment\\\">// 规则细节</span>\\n├── <span class=\\\"token keyword\\\">package</span><span class=\\\"token punctuation\\\">.</span>json\\n└── tests <span class=\\\"token comment\\\">// 单元测试</span>\\n    └── lib\\n        └── rules\\n            └── settimeout<span class=\\\"token operator\\\">-</span>no<span class=\\\"token operator\\\">-</span>number<span class=\\\"token punctuation\\\">.</span>js <span class=\\\"token comment\\\">// 测试该规则的文件</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br><span class=\\\"line-number\\\">5</span><br><span class=\\\"line-number\\\">6</span><br><span class=\\\"line-number\\\">7</span><br><span class=\\\"line-number\\\">8</span><br><span class=\\\"line-number\\\">9</span><br><span class=\\\"line-number\\\">10</span><br><span class=\\\"line-number\\\">11</span><br><span class=\\\"line-number\\\">12</span><br><span class=\\\"line-number\\\">13</span><br><span class=\\\"line-number\\\">14</span><br></div></div><h4 id=\\\"_4-安装项目依赖\\\"><a href=\\\"#_4-安装项目依赖\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 4. 安装项目依赖</h4> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code>npm install\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br></div></div><hr> <p>以上是开发ESLint插件具体规则的准备工作，下面先来看看AST和ESLint原理的相关知识，为我们开发ESLint <code>rule</code> 打一下基础。</p> <h3 id=\\\"ast——抽象语法树\\\"><a href=\\\"#ast——抽象语法树\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> AST——抽象语法树</h3> <p>AST是: <code>Abstract Syntax Tree</code>的简称，中文叫做：抽象语法树。</p> <h4 id=\\\"ast的作用\\\"><a href=\\\"#ast的作用\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> AST的作用</h4> <p>将代码抽象成树状数据结构，方便后续分析检测代码。</p> <h4 id=\\\"代码被解析成ast的样子\\\"><a href=\\\"#代码被解析成ast的样子\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 代码被解析成AST的样子</h4> \"),_vm._ssrNode(\"<p>\",\"</p>\",[_vm._ssrNode(\"<a href=\\\"https://astexplorer.net/\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">\",\"</a>\",[_vm._ssrNode(\"astexplorer.net\"),_c('OutboundLink')],2),_vm._ssrNode(\"是一个工具网站：它能查看代码被解析成AST的样子。\")],2),_vm._ssrNode(\" <p>如下图：<strong>在右侧选中一个值时，左侧对应区域也变成高亮区域，这样可以在AST中很方便的选中对应的代码</strong>。</p> <h4 id=\\\"ast-选择器：\\\"><a href=\\\"#ast-选择器：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> AST 选择器：</h4> <p>下图中被圈起来的部分，称为AST selectors(选择器)。</p> <p><strong>AST 选择器的作用</strong>：使用代码通过选择器来选中特定的代码片段，然后再对代码进行静态分析。</p> \"),_vm._ssrNode(\"<p>\",\"</p>\",[_vm._ssrNode(\"AST 选择器很多，ESLint官方专门有一个仓库列出了所有类型的选择器: \"),_vm._ssrNode(\"<a href=\\\"https://github.com/estree/estree\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">\",\"</a>\",[_vm._ssrNode(\"estree\"),_c('OutboundLink')],2)],2),_vm._ssrNode(\" <p>下文中开发ESLint <code>rule</code>就需要用到选择器，等下用到了就懂了，现在知道一下就好了。</p> <p><img src=\\\"https://github.com/OBKoro1/articleImg_src/blob/master/2019/2019_11_19_AST.png?raw=true\\\" alt=\\\"将代码解析成AST\\\"></p> <hr> <h3 id=\\\"eslint的运行原理\\\"><a href=\\\"#eslint的运行原理\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> ESLint的运行原理</h3> <p>在开发规则之前，我们需要ESLint是怎么运行的，了解插件为什么需要这么写。</p> <h3 id=\\\"_1-将代码解析成ast\\\"><a href=\\\"#_1-将代码解析成ast\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 1. 将代码解析成AST</h3> \"),_vm._ssrNode(\"<p>\",\"</p>\",[_vm._ssrNode(\"ESLint使用JavaScript解析器\"),_vm._ssrNode(\"<a href=\\\"https://github.com/eslint/espree\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">\",\"</a>\",[_vm._ssrNode(\"Espree\"),_c('OutboundLink')],2),_vm._ssrNode(\"把JS代码解析成AST。\")],2),_vm._ssrNode(\" <p>PS：解析器：是将代码解析成AST的工具，ES6、react、vue都开发了对应的解析器所以ESLint能检测它们的，ESLint也是因此一统前端Lint工具的。</p> <h3 id=\\\"_2-深度遍历ast，监听匹配过程。\\\"><a href=\\\"#_2-深度遍历ast，监听匹配过程。\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 2. 深度遍历AST，监听匹配过程。</h3> <p>在拿到AST之后，ESLint会以&quot;从上至下&quot;再&quot;从下至上&quot;的顺序遍历每个选择器两次。</p> <h4 id=\\\"_3-触发监听选择器的rule回调\\\"><a href=\\\"#_3-触发监听选择器的rule回调\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 3. 触发监听选择器的<code>rule</code>回调</h4> <p>在深度遍历的过程中，生效的每条规则都会对其中的某一个或多个选择器进行监听，每当匹配到选择器，监听该选择器的rule，都会触发对应的回调。</p> <h4 id=\\\"_4-具体的检测规则等细节内容。\\\"><a href=\\\"#_4-具体的检测规则等细节内容。\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 4. 具体的检测规则等细节内容。</h4> <hr> <h2 id=\\\"开发规则\\\"><a href=\\\"#开发规则\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 开发规则</h2> <h3 id=\\\"规则默认模板\\\"><a href=\\\"#规则默认模板\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 规则默认模板</h3> <p>打开<code>rule</code>生成的模板文件<code>lib/rules/settimeout-no-number.js</code>, 清理一下文件，删掉不必要的选项：</p> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code>module<span class=\\\"token punctuation\\\">.</span>exports <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n    meta<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span>\\n        docs<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span>\\n            description<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">&quot;setTimeout 第二个参数禁止是数字&quot;</span><span class=\\\"token punctuation\\\">,</span>\\n        <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n        fixable<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">null</span><span class=\\\"token punctuation\\\">,</span>  <span class=\\\"token comment\\\">// 修复函数</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n   <span class=\\\"token comment\\\">// rule 核心</span>\\n    create<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span>context<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n       <span class=\\\"token comment\\\">// 公共变量和函数应该在此定义</span>\\n        <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">{</span>\\n            <span class=\\\"token comment\\\">// 返回事件钩子</span>\\n        <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br><span class=\\\"line-number\\\">5</span><br><span class=\\\"line-number\\\">6</span><br><span class=\\\"line-number\\\">7</span><br><span class=\\\"line-number\\\">8</span><br><span class=\\\"line-number\\\">9</span><br><span class=\\\"line-number\\\">10</span><br><span class=\\\"line-number\\\">11</span><br><span class=\\\"line-number\\\">12</span><br><span class=\\\"line-number\\\">13</span><br><span class=\\\"line-number\\\">14</span><br><span class=\\\"line-number\\\">15</span><br></div></div>\"),_vm._ssrNode(\"<p>\",\"</p>\",[_vm._ssrNode(\"删掉的配置项，有些是ESLint官方核心规则才是用到的配置项，有些是暂时不必了解的配置，需要用到的时候，可以自行查阅\"),_vm._ssrNode(\"<a href=\\\"https://cn.eslint.org/docs/developer-guide/working-with-rules\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">\",\"</a>\",[_vm._ssrNode(\"ESLint 文档\"),_c('OutboundLink')],2)],2),_vm._ssrNode(\" <h3 id=\\\"create方法-监听选择器\\\"><a href=\\\"#create方法-监听选择器\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> create方法-监听选择器</h3> <blockquote><p>上文ESLint原理第三部中提到的：在深度遍历的过程中，生效的每条规则都会对其中的某一个或多个选择器进行监听，每当匹配到选择器，监听该选择器的rule，都会触发对应的回调。</p></blockquote> <p><code>create</code>返回一个对象，对象的属性设为选择器，ESLint会收集这些选择器，在AST遍历过程中会执行所有监听该选择器的回调。</p> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token comment\\\">// rule 核心</span>\\ncreate<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span>context<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token comment\\\">// 公共变量和函数应该在此定义</span>\\n    <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token comment\\\">// 返回事件钩子</span>\\n        Identifier<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">(</span>node<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=&gt;</span> <span class=\\\"token punctuation\\\">{</span>\\n            <span class=\\\"token comment\\\">// node是选中的内容，是我们监听的部分, 它的值参考AST</span>\\n        <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br><span class=\\\"line-number\\\">5</span><br><span class=\\\"line-number\\\">6</span><br><span class=\\\"line-number\\\">7</span><br><span class=\\\"line-number\\\">8</span><br><span class=\\\"line-number\\\">9</span><br><span class=\\\"line-number\\\">10</span><br></div></div><h3 id=\\\"观察ast：\\\"><a href=\\\"#观察ast：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 观察AST：</h3> <p>创建一个ESLint <code>rule</code>需要观察代码解析成AST，选中你要检测的代码，然后进行一些判断。</p> \"),_vm._ssrNode(\"<p>\",\"</p>\",[_vm._ssrNode(\"以下代码都是通过\"),_vm._ssrNode(\"<a href=\\\"https://astexplorer.net/\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">\",\"</a>\",[_vm._ssrNode(\"astexplorer.net\"),_c('OutboundLink')],2),_vm._ssrNode(\"在线解析的。\")],2),_vm._ssrNode(\" <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token function\\\">setTimeout</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token operator\\\">=&gt;</span><span class=\\\"token punctuation\\\">{</span>\\n\\tconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'settimeout'</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">1000</span><span class=\\\"token punctuation\\\">)</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br></div></div><p><img src=\\\"https://github.com/OBKoro1/articleImg_src/blob/master/2019/AST_setTimeout.png?raw=true\\\" alt=\\\"setTimeout第二个参数为数字时的AST\\\"></p> <h3 id=\\\"rule完整文件\\\"><a href=\\\"#rule完整文件\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> rule完整文件</h3> <p><code>lib/rules/settimeout-no-number.js</code>:</p> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code>module<span class=\\\"token punctuation\\\">.</span>exports <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n    meta<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span>\\n        docs<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span>\\n            description<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">&quot;setTimeout 第二个参数禁止是数字&quot;</span><span class=\\\"token punctuation\\\">,</span>\\n        <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n        fixable<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">null</span><span class=\\\"token punctuation\\\">,</span>  <span class=\\\"token comment\\\">// 修复函数</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token comment\\\">// rule 核心</span>\\n    create<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span>context<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token comment\\\">// 公共变量和函数应该在此定义</span>\\n        <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">{</span>\\n            <span class=\\\"token comment\\\">// 返回事件钩子</span>\\n            <span class=\\\"token string\\\">'CallExpression'</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">(</span>node<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=&gt;</span> <span class=\\\"token punctuation\\\">{</span>\\n                <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>node<span class=\\\"token punctuation\\\">.</span>callee<span class=\\\"token punctuation\\\">.</span>name <span class=\\\"token operator\\\">!==</span> <span class=\\\"token string\\\">'setTimeout'</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token keyword\\\">return</span> <span class=\\\"token comment\\\">// 不是定时器即过滤</span>\\n                <span class=\\\"token keyword\\\">const</span> timeNode <span class=\\\"token operator\\\">=</span> node<span class=\\\"token punctuation\\\">.</span>arguments <span class=\\\"token operator\\\">&amp;&amp;</span> node<span class=\\\"token punctuation\\\">.</span>arguments<span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">]</span> <span class=\\\"token comment\\\">// 获取第二个参数</span>\\n                <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token operator\\\">!</span>timeNode<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token keyword\\\">return</span> <span class=\\\"token comment\\\">// 没有第二个参数</span>\\n                <span class=\\\"token comment\\\">// 检测报错第二个参数是数字 报错</span>\\n                <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>timeNode<span class=\\\"token punctuation\\\">.</span>type <span class=\\\"token operator\\\">===</span> <span class=\\\"token string\\\">'Literal'</span> <span class=\\\"token operator\\\">&amp;&amp;</span> <span class=\\\"token keyword\\\">typeof</span> timeNode<span class=\\\"token punctuation\\\">.</span>value <span class=\\\"token operator\\\">===</span> <span class=\\\"token string\\\">'number'</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n                    context<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">report</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span>\\n                        node<span class=\\\"token punctuation\\\">,</span>\\n                        message<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'setTimeout第二个参数禁止是数字'</span>\\n                    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n                <span class=\\\"token punctuation\\\">}</span>\\n            <span class=\\\"token punctuation\\\">}</span>\\n        <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br><span class=\\\"line-number\\\">5</span><br><span class=\\\"line-number\\\">6</span><br><span class=\\\"line-number\\\">7</span><br><span class=\\\"line-number\\\">8</span><br><span class=\\\"line-number\\\">9</span><br><span class=\\\"line-number\\\">10</span><br><span class=\\\"line-number\\\">11</span><br><span class=\\\"line-number\\\">12</span><br><span class=\\\"line-number\\\">13</span><br><span class=\\\"line-number\\\">14</span><br><span class=\\\"line-number\\\">15</span><br><span class=\\\"line-number\\\">16</span><br><span class=\\\"line-number\\\">17</span><br><span class=\\\"line-number\\\">18</span><br><span class=\\\"line-number\\\">19</span><br><span class=\\\"line-number\\\">20</span><br><span class=\\\"line-number\\\">21</span><br><span class=\\\"line-number\\\">22</span><br><span class=\\\"line-number\\\">23</span><br><span class=\\\"line-number\\\">24</span><br><span class=\\\"line-number\\\">25</span><br><span class=\\\"line-number\\\">26</span><br><span class=\\\"line-number\\\">27</span><br></div></div>\"),_vm._ssrNode(\"<p>\",\"</p>\",[_vm._ssrNode(\"context.report()：这个方法是用来通知ESLint这段代码是警告或错误的，用法如上。在\"),_vm._ssrNode(\"<a href=\\\"https://cn.eslint.org/docs/developer-guide/working-with-rules#the-context-object\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">\",\"</a>\",[_vm._ssrNode(\"这里\"),_c('OutboundLink')],2),_vm._ssrNode(\"查看<code>context</code>和<code>context.report()</code>的文档。\")],2),_vm._ssrNode(\" <p>规则写完了，<strong>原理就是依据<code>AST</code>解析的结果，做针对性的检测，过滤出我们要选中的代码，然后对代码的值进行逻辑判断</strong>。</p> <p>可能现在会有点懵逼，但是不要紧，我们来写一下测试用例，然后用<code>debugger</code>来看一下代码是怎么运行的。</p> <h3 id=\\\"测试用例：\\\"><a href=\\\"#测试用例：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 测试用例：</h3> <p>测试文件<code>tests/lib/rules/settimeout-no-number.js</code>:</p> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token comment\\\">/**\\n * @fileoverview setTimeout 第二个参数禁止是数字\\n * @author OBKoro1\\n */</span>\\n<span class=\\\"token string\\\">&quot;use strict&quot;</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">var</span> rule <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">require</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">&quot;../../../lib/rules/settimeout-no-number&quot;</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token comment\\\">// 引入rule</span>\\n    RuleTester <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">require</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">&quot;eslint&quot;</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span>RuleTester<span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">var</span> ruleTester <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">RuleTester</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span>\\n    parserOptions<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span>\\n        ecmaVersion<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">7</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token comment\\\">// 默认支持语法为es5 </span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token comment\\\">// 运行测试用例</span>\\nruleTester<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">run</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">&quot;settimeout-no-number&quot;</span><span class=\\\"token punctuation\\\">,</span> rule<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token comment\\\">// 正确的测试用例</span>\\n    valid<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">[</span>\\n        <span class=\\\"token punctuation\\\">{</span>\\n            code<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'let someNumber = 1000; setTimeout(()=&gt;{ console.log(11) },someNumber)'</span>\\n        <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n        <span class=\\\"token punctuation\\\">{</span>\\n            code<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'setTimeout(()=&gt;{ console.log(11) },someNumber)'</span>\\n        <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token comment\\\">// 错误的测试用例</span>\\n    invalid<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">[</span>\\n        <span class=\\\"token punctuation\\\">{</span>\\n            code<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'setTimeout(()=&gt;{ console.log(11) },1000)'</span><span class=\\\"token punctuation\\\">,</span>\\n            errors<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">{</span>\\n                message<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">&quot;setTimeout第二个参数禁止是数字&quot;</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token comment\\\">// 与rule抛出的错误保持一致</span>\\n                type<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">&quot;CallExpression&quot;</span> <span class=\\\"token comment\\\">// rule监听的对应钩子</span>\\n            <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">]</span>\\n        <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token punctuation\\\">]</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br><span class=\\\"line-number\\\">5</span><br><span class=\\\"line-number\\\">6</span><br><span class=\\\"line-number\\\">7</span><br><span class=\\\"line-number\\\">8</span><br><span class=\\\"line-number\\\">9</span><br><span class=\\\"line-number\\\">10</span><br><span class=\\\"line-number\\\">11</span><br><span class=\\\"line-number\\\">12</span><br><span class=\\\"line-number\\\">13</span><br><span class=\\\"line-number\\\">14</span><br><span class=\\\"line-number\\\">15</span><br><span class=\\\"line-number\\\">16</span><br><span class=\\\"line-number\\\">17</span><br><span class=\\\"line-number\\\">18</span><br><span class=\\\"line-number\\\">19</span><br><span class=\\\"line-number\\\">20</span><br><span class=\\\"line-number\\\">21</span><br><span class=\\\"line-number\\\">22</span><br><span class=\\\"line-number\\\">23</span><br><span class=\\\"line-number\\\">24</span><br><span class=\\\"line-number\\\">25</span><br><span class=\\\"line-number\\\">26</span><br><span class=\\\"line-number\\\">27</span><br><span class=\\\"line-number\\\">28</span><br><span class=\\\"line-number\\\">29</span><br><span class=\\\"line-number\\\">30</span><br><span class=\\\"line-number\\\">31</span><br><span class=\\\"line-number\\\">32</span><br><span class=\\\"line-number\\\">33</span><br><span class=\\\"line-number\\\">34</span><br><span class=\\\"line-number\\\">35</span><br></div></div><p>下面来学习一下怎么在VSCode中调试node文件，用于观察<code>rule</code>是怎么运行的。</p> <p>实际上打<code>console</code>的形式，也是可以的，但是在调试的时候打console实在是有点慢，对于node这种节点来说，信息也不全，所以我还是比较推荐通过<code>debugger</code>的方式来调试<code>rule</code>。</p> <h3 id=\\\"在vscode中调试node文件\\\"><a href=\\\"#在vscode中调试node文件\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 在VSCode中调试node文件</h3> <ol><li>点击下图中的设置按钮, 将会打开一个文件<code>launch.json</code></li> <li>在文件中填入如下内容，用于调试node文件。</li> <li>在<code>rule</code>文件中打<code>debugger</code>或者在代码行数那里点一下小红点。</li> <li>点击图中的开始按钮，进入<code>debugger</code></li></ol> <p><img src=\\\"https://github.com/OBKoro1/articleImg_src/blob/master/2019/vscode_set.jpg?raw=true\\\" alt=\\\"vscode 设置\\\"></p> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token comment\\\">// 使用 IntelliSense 了解相关属性。 </span>\\n    <span class=\\\"token comment\\\">// 悬停以查看现有属性的描述。</span>\\n    <span class=\\\"token comment\\\">// 欲了解更多信息，请访问: https://go.microsoft.com/fwlink/?linkid=830387</span>\\n    <span class=\\\"token string\\\">&quot;version&quot;</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">&quot;0.2.0&quot;</span><span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token string\\\">&quot;configurations&quot;</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">[</span>\\n        <span class=\\\"token punctuation\\\">{</span>\\n            <span class=\\\"token string\\\">&quot;type&quot;</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">&quot;node&quot;</span><span class=\\\"token punctuation\\\">,</span>\\n            <span class=\\\"token string\\\">&quot;request&quot;</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">&quot;launch&quot;</span><span class=\\\"token punctuation\\\">,</span>\\n            <span class=\\\"token string\\\">&quot;name&quot;</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">&quot;启动程序&quot;</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token comment\\\">// 调试界面的名称</span>\\n            <span class=\\\"token comment\\\">// 运行项目下的这个文件：</span>\\n            <span class=\\\"token string\\\">&quot;program&quot;</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">&quot;${workspaceFolder}/tests/lib/rules/settimeout-no-number.js&quot;</span><span class=\\\"token punctuation\\\">,</span>\\n            <span class=\\\"token string\\\">&quot;args&quot;</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">]</span> <span class=\\\"token comment\\\">// node 文件的参数</span>\\n        <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n        <span class=\\\"token comment\\\">// 下面是用于调试package.json的命令 之前可以用，貌似vscode出了点bug导致现在用不了了</span>\\n        <span class=\\\"token punctuation\\\">{</span>\\n            <span class=\\\"token string\\\">&quot;name&quot;</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">&quot;Launch via NPM&quot;</span><span class=\\\"token punctuation\\\">,</span>\\n            <span class=\\\"token string\\\">&quot;type&quot;</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">&quot;node&quot;</span><span class=\\\"token punctuation\\\">,</span>\\n            <span class=\\\"token string\\\">&quot;request&quot;</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">&quot;launch&quot;</span><span class=\\\"token punctuation\\\">,</span>\\n            <span class=\\\"token string\\\">&quot;runtimeExecutable&quot;</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">&quot;npm&quot;</span><span class=\\\"token punctuation\\\">,</span>\\n            <span class=\\\"token string\\\">&quot;runtimeArgs&quot;</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">[</span>\\n                <span class=\\\"token string\\\">&quot;run-script&quot;</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">&quot;dev&quot;</span>    <span class=\\\"token comment\\\">//这里的dev就对应package.json中的scripts中的dev</span>\\n            <span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">,</span>\\n            <span class=\\\"token string\\\">&quot;port&quot;</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">9229</span>    <span class=\\\"token comment\\\">//这个端口是调试的端口，不是项目启动的端口</span>\\n        <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token punctuation\\\">]</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br><span class=\\\"line-number\\\">5</span><br><span class=\\\"line-number\\\">6</span><br><span class=\\\"line-number\\\">7</span><br><span class=\\\"line-number\\\">8</span><br><span class=\\\"line-number\\\">9</span><br><span class=\\\"line-number\\\">10</span><br><span class=\\\"line-number\\\">11</span><br><span class=\\\"line-number\\\">12</span><br><span class=\\\"line-number\\\">13</span><br><span class=\\\"line-number\\\">14</span><br><span class=\\\"line-number\\\">15</span><br><span class=\\\"line-number\\\">16</span><br><span class=\\\"line-number\\\">17</span><br><span class=\\\"line-number\\\">18</span><br><span class=\\\"line-number\\\">19</span><br><span class=\\\"line-number\\\">20</span><br><span class=\\\"line-number\\\">21</span><br><span class=\\\"line-number\\\">22</span><br><span class=\\\"line-number\\\">23</span><br><span class=\\\"line-number\\\">24</span><br><span class=\\\"line-number\\\">25</span><br><span class=\\\"line-number\\\">26</span><br><span class=\\\"line-number\\\">27</span><br></div></div><h3 id=\\\"运行测试用例进入断点\\\"><a href=\\\"#运行测试用例进入断点\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 运行测试用例进入断点</h3> <ol><li>在<code>lib/rules/settimeout-no-number.js</code>中打一些<code>debugger</code></li> <li>点击开始按钮，以调试的形式运行测试文件<code>tests/lib/rules/settimeout-no-number.js</code></li> <li>开始调试<code>rule</code>。</li></ol> <hr> <h3 id=\\\"发布插件\\\"><a href=\\\"#发布插件\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 发布插件</h3> <p>eslint插件都是以<code>npm</code>包的形式来引用的，所以需要把插件发布一下：</p> \"),_vm._ssrNode(\"<ol>\",\"</ol>\",[_vm._ssrNode(\"<li>\",\"</li>\",[_vm._ssrNode(\"<p>\",\"</p>\",[_vm._ssrNode(\"注册：如果你还未注册npm账号的话，需要去\"),_vm._ssrNode(\"<a href=\\\"https://www.npmjs.com/signup\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">\",\"</a>\",[_vm._ssrNode(\"注册\"),_c('OutboundLink')],2),_vm._ssrNode(\"一下。\")],2)]),_vm._ssrNode(\" <li><p>登录npm: <code>npm login</code></p></li> <li><p>发布<code>npm</code>包: <code>npm publish</code>即可，ESLint已经把<code>package.json</code>弄好了。</p></li>\")],2),_vm._ssrNode(\" <h3 id=\\\"集成到项目\\\"><a href=\\\"#集成到项目\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 集成到项目:</h3> <p>安装<code>npm</code>包：<code>npm i eslint-plugin-korolint -D</code></p> <ol><li>常规的方法: <code>引入插件一条条写入规则</code></li></ol> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token comment\\\">// .eslintrc.js</span>\\nmodule<span class=\\\"token punctuation\\\">.</span>exports <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n  plugins<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">[</span> <span class=\\\"token string\\\">'korolint'</span> <span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">,</span>\\n  rules<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span> \\n    <span class=\\\"token string\\\">&quot;korolint/settimeout-no-number&quot;</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">&quot;error&quot;</span>\\n <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br><span class=\\\"line-number\\\">5</span><br><span class=\\\"line-number\\\">6</span><br><span class=\\\"line-number\\\">7</span><br></div></div><ol start=\\\"2\\\"><li><code>extends</code>继承插件配置：</li></ol> \"),_vm._ssrNode(\"<p>\",\"</p>\",[_vm._ssrNode(\"当规则比较多的时候，用户一条条去写，未免也太麻烦了，所以ESLint可以\"),_vm._ssrNode(\"<a href=\\\"https://cn.eslint.org/docs/developer-guide/working-with-plugins#configs-in-plugins\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">\",\"</a>\",[_vm._ssrNode(\"继承插件的配置\"),_c('OutboundLink')],2),_vm._ssrNode(\"：\")],2),_vm._ssrNode(\" <p>修改一下<code>lib/rules/index.js</code>文件:</p> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token string\\\">'use strict'</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">var</span> requireIndex <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">require</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'requireindex'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">const</span> output <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n  rules<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token function\\\">requireIndex</span><span class=\\\"token punctuation\\\">(</span>__dirname <span class=\\\"token operator\\\">+</span> <span class=\\\"token string\\\">'/rules'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token comment\\\">// 导出所有规则</span>\\n  configs<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token comment\\\">// 导出自定义规则 在项目中直接引用</span>\\n    koroRule<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span>\\n      plugins<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token string\\\">'korolint'</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token comment\\\">// 引入插件</span>\\n      rules<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token comment\\\">// 开启规则</span>\\n        <span class=\\\"token string\\\">'korolint/settimeout-no-number'</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'error'</span>\\n      <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\nmodule<span class=\\\"token punctuation\\\">.</span>exports <span class=\\\"token operator\\\">=</span> output<span class=\\\"token punctuation\\\">;</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br><span class=\\\"line-number\\\">5</span><br><span class=\\\"line-number\\\">6</span><br><span class=\\\"line-number\\\">7</span><br><span class=\\\"line-number\\\">8</span><br><span class=\\\"line-number\\\">9</span><br><span class=\\\"line-number\\\">10</span><br><span class=\\\"line-number\\\">11</span><br><span class=\\\"line-number\\\">12</span><br><span class=\\\"line-number\\\">13</span><br><span class=\\\"line-number\\\">14</span><br><span class=\\\"line-number\\\">15</span><br><span class=\\\"line-number\\\">16</span><br></div></div><p>使用方法：</p> <p>使用<code>extends</code>来继承插件的配置，<code>extends</code>不止这种继承方式，即使你传入一个npm包，一个文件的相对路径地址，eslint也能继承其中的配置。</p> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token comment\\\">// .eslintrc.js</span>\\nmodule<span class=\\\"token punctuation\\\">.</span>exports <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">extends</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">[</span> <span class=\\\"token string\\\">'plugin:korolint/koroRule'</span> <span class=\\\"token punctuation\\\">]</span> <span class=\\\"token comment\\\">// 继承插件导出的配置</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br></div></div><p>PS : 这种使用方式, npm的包名不能为<code>eslint-plugin-xx-xx</code>,只能为<code>eslint-plugin-xx</code>否则会有报错，被这个问题搞得头疼o(╥﹏╥)o</p> <h2 id=\\\"扩展：\\\"><a href=\\\"#扩展：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 扩展：</h2> <p>以上内容足够开发一个插件，这里是一些扩展知识点。</p> <h3 id=\\\"遍历方向：\\\"><a href=\\\"#遍历方向：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 遍历方向：</h3> <p>上文中说过: 在拿到AST之后，ESLint会以&quot;从上至下&quot;再&quot;从下至上&quot;的顺序遍历每个选择器两次。</p> <p>我们所监听的<strong>选择器默认会在&quot;从上至下&quot;的过程中触发，如果需要在&quot;从下至上&quot;的过程中执行则需要添加<code>:exit</code></strong>，在上文中<code>CallExpression</code>就变为<code>CallExpression:exit</code>。</p> <p><strong>注意</strong>：一段代码解析后可能包含多次同一个选择器，选择器的钩子也会多次触发。</p> <h3 id=\\\"fix函数：自动修复rule错误\\\"><a href=\\\"#fix函数：自动修复rule错误\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> fix函数：自动修复rule错误</h3> <p><strong>修复效果</strong>：</p> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token comment\\\">// 修复前</span>\\n<span class=\\\"token function\\\">setTimeout</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=&gt;</span> <span class=\\\"token punctuation\\\">{</span>\\n\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">1000</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token comment\\\">// 修复后 变量名故意写错 为了让用户去修改它</span>\\n<span class=\\\"token keyword\\\">const</span> countNumber1 <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">1000</span>\\n<span class=\\\"token function\\\">setTimeout</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=&gt;</span> <span class=\\\"token punctuation\\\">{</span>\\n\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span> countNumber2<span class=\\\"token punctuation\\\">)</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br><span class=\\\"line-number\\\">5</span><br><span class=\\\"line-number\\\">6</span><br><span class=\\\"line-number\\\">7</span><br><span class=\\\"line-number\\\">8</span><br><span class=\\\"line-number\\\">9</span><br></div></div><ol><li>在rule的meta对象上打开修复功能:</li></ol> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token comment\\\">// rule文件</span>\\nmodule<span class=\\\"token punctuation\\\">.</span>exports <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n  meta<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span>\\n    docs<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span>\\n      description<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'setTimeout 第二个参数禁止是数字'</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n    fixable<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'code'</span> <span class=\\\"token comment\\\">// 打开修复功能</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br><span class=\\\"line-number\\\">5</span><br><span class=\\\"line-number\\\">6</span><br><span class=\\\"line-number\\\">7</span><br><span class=\\\"line-number\\\">8</span><br><span class=\\\"line-number\\\">9</span><br></div></div><ol start=\\\"2\\\"><li>在<code>context.report()</code>上提供一个<code>fix</code>函数:</li></ol> \"),_vm._ssrNode(\"<p>\",\"</p>\",[_vm._ssrNode(\"把上文的<code>context.report</code>修改一下，增加一个<code>fix</code>方法即可，更详细的介绍可以看一下\"),_vm._ssrNode(\"<a href=\\\"https://cn.eslint.org/docs/developer-guide/working-with-rules#applying-fixes\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">\",\"</a>\",[_vm._ssrNode(\"文档\"),_c('OutboundLink')],2),_vm._ssrNode(\"。\")],2),_vm._ssrNode(\" <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code>context<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">report</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span>\\n    node<span class=\\\"token punctuation\\\">,</span>\\n    message<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'setTimeout第二个参数禁止是数字'</span><span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token function\\\">fix</span><span class=\\\"token punctuation\\\">(</span>fixer<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token keyword\\\">const</span> numberValue <span class=\\\"token operator\\\">=</span> timeNode<span class=\\\"token punctuation\\\">.</span>value<span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token keyword\\\">const</span> statementString <span class=\\\"token operator\\\">=</span> <span class=\\\"token template-string\\\"><span class=\\\"token string\\\">`const countNumber = </span><span class=\\\"token interpolation\\\"><span class=\\\"token interpolation-punctuation punctuation\\\">${</span>numberValue<span class=\\\"token interpolation-punctuation punctuation\\\">}</span></span><span class=\\\"token string\\\">\\\\n`</span></span>\\n        <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">[</span>\\n        <span class=\\\"token comment\\\">// 修改数字为变量</span>\\n        fixer<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">replaceTextRange</span><span class=\\\"token punctuation\\\">(</span>node<span class=\\\"token punctuation\\\">.</span>arguments<span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">.</span>range<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'countNumber'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span>\\n        <span class=\\\"token comment\\\">// 在setTimeout之前增加一行声明变量的代码 用户自行修改变量名</span>\\n        fixer<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">insertTextBeforeRange</span><span class=\\\"token punctuation\\\">(</span>node<span class=\\\"token punctuation\\\">.</span>range<span class=\\\"token punctuation\\\">,</span> statementString<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span>\\n        <span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br><span class=\\\"line-number\\\">5</span><br><span class=\\\"line-number\\\">6</span><br><span class=\\\"line-number\\\">7</span><br><span class=\\\"line-number\\\">8</span><br><span class=\\\"line-number\\\">9</span><br><span class=\\\"line-number\\\">10</span><br><span class=\\\"line-number\\\">11</span><br><span class=\\\"line-number\\\">12</span><br><span class=\\\"line-number\\\">13</span><br><span class=\\\"line-number\\\">14</span><br></div></div><h3 id=\\\"项目地址\\\"><a href=\\\"#项目地址\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 项目地址:</h3> \"),_vm._ssrNode(\"<p>\",\"</p>\",[_vm._ssrNode(\"<a href=\\\"https://github.com/OBKoro1/eslint-plugin-korolint\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">\",\"</a>\",[_vm._ssrNode(\"eslint-plugin-korolint\"),_c('OutboundLink')],2)]),_vm._ssrNode(\" <hr> <p>呼~ 这篇博客断断续续，写了好几周，终于完成了！</p> <p>大家有看到这篇博客的话，建议跟着博客的一起动手写一下，动手实操一下比你mark一百篇文章都来的有用，花不了很长时间的，希望各位看完本文，都能够更深入的了解到ESLint的运行原理。</p> <h4 id=\\\"觉得我的博客对你有帮助的话，就关注一下-点个赞吧！\\\"><a href=\\\"#觉得我的博客对你有帮助的话，就关注一下-点个赞吧！\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 觉得我的博客对你有帮助的话，就关注一下/点个赞吧！</h4> \"),_vm._ssrNode(\"<p>\",\"</p>\",[_vm._ssrNode(\"<a href=\\\"http://obkoro1.com/web_accumulate/\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">\",\"</a>\",[_vm._ssrNode(\"前端进阶积累\"),_c('OutboundLink')],2),_vm._ssrNode(\"、\"),_vm._ssrNode(\"<a href=\\\"https://user-gold-cdn.xitu.io/2018/5/1/1631b6f52f7e7015?w=344&h=344&f=jpeg&s=8317\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">\",\"</a>\",[_vm._ssrNode(\"公众号\"),_c('OutboundLink')],2),_vm._ssrNode(\"、\"),_vm._ssrNode(\"<a href=\\\"https://github.com/OBKoro1\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">\",\"</a>\",[_vm._ssrNode(\"GitHub\"),_c('OutboundLink')],2),_vm._ssrNode(\"、wx:OBkoro1、邮箱：obkoro1@foxmail.com\")],2),_vm._ssrNode(\" <h4 id=\\\"基友带我飞\\\"><a href=\\\"#基友带我飞\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 基友带我飞</h4> \"),_vm._ssrNode(\"<p>\",\"</p>\",[_vm._ssrNode(\"ESLint插件是向基友\"),_vm._ssrNode(\"<a href=\\\"https://juejin.im/user/5ba9f38ce51d450e8477bd7a/posts\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">\",\"</a>\",[_vm._ssrNode(\"yeyan1996\"),_c('OutboundLink')],2),_vm._ssrNode(\"学习的，在遇到问题的时候，也是他指点我的，特此感谢。\")],2),_vm._ssrNode(\" <p>参考资料：</p> \"),_vm._ssrNode(\"<p>\",\"</p>\",[_vm._ssrNode(\"<a href=\\\"https://cn.eslint.org/docs/developer-guide/working-with-rules\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">\",\"</a>\",[_vm._ssrNode(\"创建规则\"),_c('OutboundLink')],2),_vm._ssrNode(\" \"),_vm._ssrNode(\"<a href=\\\"https://zhuanlan.zhihu.com/p/53680918\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">\",\"</a>\",[_vm._ssrNode(\"ESLint 工作原理探讨\"),_c('OutboundLink')],2)],2),_vm._ssrNode(\" \"),_vm._ssrNode(\"<h3 id=\\\"点个star支持我一下\\\">\",\"</h3>\",[_vm._ssrNode(\"<a href=\\\"#点个star支持我一下\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 点个\"),_vm._ssrNode(\"<a href=\\\"https://github.com/OBKoro1/web_accumulate\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">\",\"</a>\",[_vm._ssrNode(\"Star\"),_c('OutboundLink')],2),_vm._ssrNode(\"支持我一下~\")],2),_vm._ssrNode(\" \"),_c('comment-comment')],2)}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }"]}