{"remainingRequest":"/Users/koro/work/web_my/web_accumulate/node_modules/vue-loader/lib/index.js??ref--1-1!/Users/koro/work/web_my/web_accumulate/node_modules/vuepress/lib/webpack/markdownLoader.js??ref--1-2!/Users/koro/work/web_my/web_accumulate/docs/codeBlack/vue小技巧.md?vue&type=template&id=5c242a54&","dependencies":[{"path":"/Users/koro/work/web_my/web_accumulate/docs/codeBlack/vue小技巧.md","mtime":1636107879452},{"path":"/Users/koro/work/web_my/web_accumulate/node_modules/cache-loader/dist/cjs.js","mtime":1557296864520},{"path":"/Users/koro/work/web_my/web_accumulate/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1557296867191},{"path":"/Users/koro/work/web_my/web_accumulate/node_modules/cache-loader/dist/cjs.js","mtime":1557296864520},{"path":"/Users/koro/work/web_my/web_accumulate/node_modules/vue-loader/lib/index.js","mtime":1557296867190},{"path":"/Users/koro/work/web_my/web_accumulate/node_modules/vuepress/lib/webpack/markdownLoader.js","mtime":1557296867284}],"contextDependencies":[],"result":["\n<div class=\"content\"><h2 id=\"vue-小技巧-小问题1\"><a class=\"header-anchor\" href=\"#vue-小技巧-小问题1\" aria-hidden=\"true\">#</a> vue 小技巧&amp;小问题1</h2>\n<h3 id=\"路由变化页面数据不刷新问题\"><a class=\"header-anchor\" href=\"#路由变化页面数据不刷新问题\" aria-hidden=\"true\">#</a> 路由变化页面数据不刷新问题</h3>\n<blockquote>\n<p>场景：比如文章详情数据，依赖路由的<code>params</code>参数获取的(ajax 写在 created 生命周期里面)，因为路由懒加载的关系，退出页面再进入另一个文章页面并不会运行 created 组件生命周期，导致文章数据还是上一个文章的数据。</p>\n</blockquote>\n<p><strong>解决方法：watch 监听路由是否变化</strong></p>\n<!--beforebegin--><div class=\"language-js line-numbers-mode\"><!--afterbegin--><pre v-pre class=\"language-js\"><code>     watch<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token string\">'$route'</span> <span class=\"token punctuation\">(</span>to<span class=\"token punctuation\">,</span> <span class=\"token keyword\">from</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// 监听路由是否变化</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$route<span class=\"token punctuation\">.</span>params<span class=\"token punctuation\">.</span>articleId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token comment\">// 是否有文章id</span>\n          <span class=\"token comment\">// 获取文章数据</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n</code></pre>\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br></div><!--beforeend--></div><!--afterend--><h3 id=\"settimeout-setinterval-无法用-this-访问-vue-实例\"><a class=\"header-anchor\" href=\"#settimeout-setinterval-无法用-this-访问-vue-实例\" aria-hidden=\"true\">#</a> setTimeout/setInterval 无法用 this 访问 VUe 实例</h3>\n<p><strong>场景</strong>：</p>\n<!--beforebegin--><div class=\"language-js line-numbers-mode\"><!--afterbegin--><pre v-pre class=\"language-js\"><code>      <span class=\"token function\">mounted</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            <span class=\"token comment\">// this指向改变</span>\n            <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// setInterval同理</span>\n              console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 此时this指向Window对象</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n</code></pre>\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br></div><!--beforeend--></div><!--afterend--><p><strong>解决方法：使用箭头函数</strong></p>\n<!--beforebegin--><div class=\"language-js line-numbers-mode\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token comment\">// 箭头函数访问this实例</span>\n<span class=\"token comment\">// 因为箭头函数本身没有绑定this 继承上一个不是箭头函数的函数的this</span>\n<span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">500</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 使用变量保存this指向 通过变量访问this实例</span>\n<span class=\"token keyword\">let</span> self <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 使用self变量访问this实例</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br></div><!--beforeend--></div><!--afterend--><h3 id=\"setinterval-路由跳转继续运行并没有销毁\"><a class=\"header-anchor\" href=\"#setinterval-路由跳转继续运行并没有销毁\" aria-hidden=\"true\">#</a> setInterval 路由跳转继续运行并没有销毁</h3>\n<p><strong>场景</strong>：</p>\n<p>比如一些弹幕，走马灯文字，这类需要定时调用的，<strong>路由跳转之后，因为组件已经销毁了，但是 setInterval 还没有销毁</strong>，还在继续后台调用，控制台会不断报错，如果运算量大的话，无法及时清除，会导致严重的页面卡顿。</p>\n<p><strong>解决办法：在组件生命周期 beforeDestroy 停止 setInterval</strong></p>\n<p>组件销毁前执行的钩子函数，跟其他生命周期钩子函数的用法相同。</p>\n<!--beforebegin--><div class=\"language-js line-numbers-mode\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token function\">beforeDestroy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">//我通常是把setInterval()定时器赋值给this实例，然后就可以像下面这么暂停。</span>\n   <span class=\"token function\">clearInterval</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>intervalid<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n</code></pre>\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br></div><!--beforeend--></div><!--afterend--><h3 id=\"vue-滚动行为-浏览器回退记忆位置-用法\"><a class=\"header-anchor\" href=\"#vue-滚动行为-浏览器回退记忆位置-用法\" aria-hidden=\"true\">#</a> vue 滚动行为(浏览器回退记忆位置)用法</h3>\n<p>这个我当时做的时候以为很难，后来做好了才发现就是一个设置而已（前提是要开启路由的 History 模式），下面做一个简单的分享。</p>\n<p><strong>路由设置</strong></p>\n<ol>\n<li>要使用这一功能，首先需要开启 vue-router 的 <a href=\"https://router.vuejs.org/zh-cn/essentials/history-mode.html\" target=\"_blank\" rel=\"noopener noreferrer\">history 模式<OutboundLink/></a></li>\n</ol>\n<p>如果之前一直使用的是<code>hash</code>模式(默认模式)，项目已经开发了一段时间，然后转 history 模式很可能会遇到：<a href=\"https://juejin.im/post/5a3f629cf265da430d5839ed\" target=\"_blank\" rel=\"noopener noreferrer\">这些问题<OutboundLink/></a></p>\n<ol start=\"2\">\n<li>滚动行为具体设置如下：</li>\n</ol>\n<!--beforebegin--><div class=\"language-js line-numbers-mode\"><!--afterbegin--><pre v-pre class=\"language-js\"><code>        <span class=\"token keyword\">const</span> router <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">VueRouter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n          mode<span class=\"token punctuation\">:</span> <span class=\"token string\">'history'</span><span class=\"token punctuation\">,</span>\n        <span class=\"token function\">scrollBehavior</span> <span class=\"token punctuation\">(</span>to<span class=\"token punctuation\">,</span> <span class=\"token keyword\">from</span><span class=\"token punctuation\">,</span> savedPosition<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>savedPosition<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// 如果savedPosition存在，滚动条会自动跳到记录的值的地方</span>\n              <span class=\"token keyword\">return</span> savedPosition\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n              <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span> x<span class=\"token punctuation\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">:</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">}</span><span class=\"token comment\">// savedPosition也是一个记录x轴和y轴位置的对象</span>\n             <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>，\n          routes<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span><span class=\"token punctuation\">]</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br><span class=\"line-number\">11</span><br></div><!--beforeend--></div><!--afterend--><p><a href=\"https://router.vuejs.org/zh-cn/advanced/scroll-behavior.html\" target=\"_blank\" rel=\"noopener noreferrer\">vue 滚动行为文档<OutboundLink/></a>，可以进到这里看看更详细的信息。</p>\n<h3 id=\"vue-路由拦截浏览器后退实现草稿保存类似需求\"><a class=\"header-anchor\" href=\"#vue-路由拦截浏览器后退实现草稿保存类似需求\" aria-hidden=\"true\">#</a> vue 路由拦截浏览器后退实现草稿保存类似需求</h3>\n<p><strong>场景</strong>：</p>\n<p>为了防止用户突然离开，没有保存已输入的信息。</p>\n<p><strong>用法</strong>：</p>\n<!--beforebegin--><div class=\"language-js line-numbers-mode\"><!--afterbegin--><pre v-pre class=\"language-js\"><code>    <span class=\"token comment\">//在路由组件中：</span>\n    <span class=\"token function\">mounted</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function\">beforeRouteLeave</span> <span class=\"token punctuation\">(</span>to<span class=\"token punctuation\">,</span> <span class=\"token keyword\">from</span><span class=\"token punctuation\">,</span> next<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>用户已经输入信息<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// 出现弹窗提醒保存草稿，或者自动后台为其保存</span>\n      <span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span>\n        <span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 用户离开</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n</code></pre>\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br></div><!--beforeend--></div><!--afterend--><p>类似的还有<code>beforeEach</code>、<code>beforeRouteUpdate</code>，也分为全局钩子和组件钩子，见<a href=\"https://router.vuejs.org/zh-cn/advanced/navigation-guards.html\" target=\"_blank\" rel=\"noopener noreferrer\">路由文档<OutboundLink/></a>。</p>\n<h3 id=\"v-once-只渲染元素和组件一次，优化更新渲染性能\"><a class=\"header-anchor\" href=\"#v-once-只渲染元素和组件一次，优化更新渲染性能\" aria-hidden=\"true\">#</a> v-once 只渲染元素和组件一次，优化更新渲染性能</h3>\n<p>觉得<a href=\"https://cn.vuejs.org/v2/api/#v-cloak\" target=\"_blank\" rel=\"noopener noreferrer\">v-once<OutboundLink/></a>这个 api 蛮 6 的，应该很多小伙伴都没有注意到这个 api。</p>\n<p><strong>文档介绍</strong>：</p>\n<p><img src=\"https://github.com/OBKoro1/articleImg_src/blob/master/juejin/160ffd6c2dcf70e1?raw=true\" alt=\"v-once文档介绍\"></p>\n<p>这个 api 在我看来主要用于那些一次性渲染，并且不会再有操作更改这些渲染的值，这样就可以优化双向绑定的更新性能。</p>\n<p><a href=\"https://cn.vuejs.org/v2/guide/components.html#%E5%AF%B9%E4%BD%8E%E5%BC%80%E9%94%80%E7%9A%84%E9%9D%99%E6%80%81%E7%BB%84%E4%BB%B6%E4%BD%BF%E7%94%A8-v-once\" target=\"_blank\" rel=\"noopener noreferrer\">文档<OutboundLink/></a>推荐：对低开销的静态组件使用 v-once</p>\n<p>尽管在 Vue 中渲染 HTML 很快，不过当组件中包含大量静态内容时，可以考虑使用 v-once 将渲染结果缓存起来，就像这样：</p>\n<!--beforebegin--><div class=\"language-js line-numbers-mode\"><!--afterbegin--><pre v-pre class=\"language-js\"><code>    Vue<span class=\"token punctuation\">.</span><span class=\"token function\">component</span><span class=\"token punctuation\">(</span><span class=\"token string\">'terms-of-service'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n      template<span class=\"token punctuation\">:</span> <span class=\"token string\">'\\\n        &lt;div v-once>\\\n          &lt;h1>Terms of Service&lt;/h1>\\\n          ...很多静态内容...\\\n        &lt;/div>\\\n      '</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br></div><!--beforeend--></div><!--afterend--><h3 id=\"vue-风格指南推荐：\"><a class=\"header-anchor\" href=\"#vue-风格指南推荐：\" aria-hidden=\"true\">#</a> vue 风格指南推荐：</h3>\n<p>vue 框架还有一个<a href=\"https://cn.vuejs.org/v2/style-guide/\" target=\"_blank\" rel=\"noopener noreferrer\">风格指南<OutboundLink/></a>推荐，如下图所示，大家也可以学习一波。</p>\n<p><img src=\"https://github.com/OBKoro1/articleImg_src/blob/master/juejin/160fff0ec0147156?raw=true\" alt=\"vue风格指南\">\n<!-- 特殊字符串：用于修改/删除markdown的结尾提示语-OBKoro1 --></p>\n<h3 id=\"点个star支持我一下\"><a class=\"header-anchor\" href=\"#点个star支持我一下\" aria-hidden=\"true\">#</a> 点个<a href=\"https://github.com/OBKoro1/codeBlack\" target=\"_blank\" rel=\"noopener noreferrer\">Star<OutboundLink/></a>支持我一下~</h3>\n<!-- '特殊字符串：用于删除编译后的issue组件-OBKoro1 -->\n<!-- more -->\n<comment-comment/>\n</div>\n",null]}