{"remainingRequest":"/Users/koro/work/web_my/web_accumulate/node_modules/vue-loader/lib/index.js??ref--1-1!/Users/koro/work/web_my/web_accumulate/node_modules/vuepress/lib/webpack/markdownLoader.js??ref--1-2!/Users/koro/work/web_my/web_accumulate/docs/accumulate/tool/Eslint自动修复格式错误.md?vue&type=template&id=7b795ab0&","dependencies":[{"path":"/Users/koro/work/web_my/web_accumulate/docs/accumulate/tool/Eslint自动修复格式错误.md","mtime":1636107879469},{"path":"/Users/koro/work/web_my/web_accumulate/node_modules/cache-loader/dist/cjs.js","mtime":1557296864520},{"path":"/Users/koro/work/web_my/web_accumulate/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1557296867191},{"path":"/Users/koro/work/web_my/web_accumulate/node_modules/cache-loader/dist/cjs.js","mtime":1557296864520},{"path":"/Users/koro/work/web_my/web_accumulate/node_modules/vue-loader/lib/index.js","mtime":1557296867190},{"path":"/Users/koro/work/web_my/web_accumulate/node_modules/vuepress/lib/webpack/markdownLoader.js","mtime":1557296867284}],"contextDependencies":[],"result":["\n<div class=\"content\"><h2 id=\"vscode保存时自动修复eslint错误\"><a class=\"header-anchor\" href=\"#vscode保存时自动修复eslint错误\" aria-hidden=\"true\">#</a> VsCode保存时自动修复Eslint错误</h2>\n<p>同一个项目，保持代码风格的一致，是非常重要的一个规范。但事实上项目小组成员的代码校验规则、格式化工具通常都不一致，为了避免项目到后期出现无法维护的问题，项目成员使用同一套校验规则，同一个格式化方式是相当好的步骤之一。</p>\n<blockquote>\n<p>游泳、健身了解一下：<a href=\"http://obkoro1.com/\" target=\"_blank\" rel=\"noopener noreferrer\">博客<OutboundLink/></a>、<a href=\"http://obkoro1.com/web_accumulate/accumulate/\" target=\"_blank\" rel=\"noopener noreferrer\">前端积累文档<OutboundLink/></a>、<a href=\"https://github.com/OBKoro1/articleImg_src/blob/master/juejin/1631b6f52f7e7015.jpeg?raw=true\" target=\"_blank\" rel=\"noopener noreferrer\">公众号<OutboundLink/></a></p>\n</blockquote>\n<h2 id=\"保存时自动统一代码风格：\"><a class=\"header-anchor\" href=\"#保存时自动统一代码风格：\" aria-hidden=\"true\">#</a> 保存时自动统一代码风格：</h2>\n<p>先通过一些简单的配置，然后：</p>\n<ul>\n<li><code>Ctrl</code>+<code>s</code> / <code>command</code>+<code>s</code> 时自动修复代码的格式错误</li>\n<li>自动修复的规则是读取项目根目录的Eslint规则</li>\n<li>这样就能保证项目成员都是一套验证规则的代码风格</li>\n</ul>\n<hr>\n<h2 id=\"配置：\"><a class=\"header-anchor\" href=\"#配置：\" aria-hidden=\"true\">#</a> 配置：</h2>\n<h3 id=\"_1-安装vscode的eslint和vetur插件\"><a class=\"header-anchor\" href=\"#_1-安装vscode的eslint和vetur插件\" aria-hidden=\"true\">#</a> 1.安装VsCode的<code>EsLint</code>和<code>vetur</code>插件</h3>\n<p>如图安装<code>EsLint</code>插件：</p>\n<p><img src=\"https://github.com/OBKoro1/articleImg_src/blob/master/juejin/165e132647eca15f?raw=true\" alt=\"\"></p>\n<h3 id=\"_2-为项目安装eslint包：\"><a class=\"header-anchor\" href=\"#_2-为项目安装eslint包：\" aria-hidden=\"true\">#</a> 2.为项目安装<code>EsLint</code>包：</h3>\n<p><img src=\"https://github.com/OBKoro1/articleImg_src/blob/master/juejin/165e136abe3b1feb?raw=true\" alt=\"\"></p>\n<p>注意要安装在开发环境上，还有就是如果你使用的是脚手架的话，选了Eslint选项，会自带这些包。</p>\n<h3 id=\"_3-在项目的根目录下添加-eslintrc-js\"><a class=\"header-anchor\" href=\"#_3-在项目的根目录下添加-eslintrc-js\" aria-hidden=\"true\">#</a> 3.在项目的根目录下添加<code>.eslintrc.js</code></h3>\n<p>用于校验代码格式，根据项目情况，可自行编写校验规则：</p>\n<!--beforebegin--><div class=\"language-js line-numbers-mode\"><!--afterbegin--><pre v-pre class=\"language-js\"><code>module<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Eslint规则</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br></div><!--beforeend--></div><!--afterend--><h3 id=\"_4-首选项设置：\"><a class=\"header-anchor\" href=\"#_4-首选项设置：\" aria-hidden=\"true\">#</a> 4.首选项设置：</h3>\n<p>将下面这部分放入首选项设置中：</p>\n<!--beforebegin--><div class=\"language-json line-numbers-mode\"><!--afterbegin--><pre v-pre class=\"language-json\"><code><span class=\"token property\">\"eslint.autoFixOnSave\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>  //  启用保存时自动修复<span class=\"token punctuation\">,</span>默认只支持.js文件\n<span class=\"token property\">\"eslint.validate\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token string\">\"javascript\"</span><span class=\"token punctuation\">,</span>  //  用eslint的规则检测js文件\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token property\">\"language\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"vue\"</span><span class=\"token punctuation\">,</span>   // 检测vue文件\n        <span class=\"token property\">\"autoFix\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span>   //  为vue文件开启保存自动修复的功能\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token property\">\"language\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"html\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token property\">\"autoFix\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n</code></pre>\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br><span class=\"line-number\">11</span><br><span class=\"line-number\">12</span><br></div><!--beforeend--></div><!--afterend--><p>想了解更多的话，推荐看一下VsCode的<a href=\"https://marketplace.visualstudio.com/items?itemName=dbaeumer.vscode-eslint\" target=\"_blank\" rel=\"noopener noreferrer\">EsLint<OutboundLink/></a>插件</p>\n<h3 id=\"大功告成：\"><a class=\"header-anchor\" href=\"#大功告成：\" aria-hidden=\"true\">#</a> 大功告成：</h3>\n<p>点开文件，你可能会看到如下报错，无需一个一个去改，只要保存一下文件，就可以自动修复这些代码格式上的问题了。</p>\n<p><img src=\"https://github.com/OBKoro1/articleImg_src/blob/master/juejin/165e151df42747c4?raw=true\" alt=\"\"></p>\n<p><strong>注意：</strong></p>\n<p>如果整个文件都飘红的话，不会一次性修改如果的格式问题，会一下改一部分，你可能需要多按几次保存。</p>\n<h3 id=\"一键修复项目格式问题：\"><a class=\"header-anchor\" href=\"#一键修复项目格式问题：\" aria-hidden=\"true\">#</a> 一键修复项目格式问题：</h3>\n<p>遇到下面这两种情况：</p>\n<ul>\n<li>你刚刚引入这个自动修复，但你项目的文件比较多，且你又比较懒。</li>\n<li>隔一段时间，修复一下代码格式上的问题</li>\n</ul>\n<p>你可以像下面这样，在<code>package.json</code>里面的<code>scripts</code>里面新增一条如下命令：</p>\n<!--beforebegin--><div class=\"language-js line-numbers-mode\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token string\">\"lint\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"eslint --ext .js,.vue src --fix\"</span>\n</code></pre>\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br></div><!--beforeend--></div><!--afterend--><p><img src=\"https://github.com/OBKoro1/articleImg_src/blob/master/juejin/165e1561a9b92866?raw=true\" alt=\"\"></p>\n<p><code>--ext</code>后面跟上的<code>.js</code>、<code>.vue</code>是你要检测文件的后缀，<code>.vue</code>后面的<code>src</code>是要检测的哪个目录下面的文件。</p>\n<p><code>--fix</code>的作用是自动修复根据你配置的规则检测出来的格式问题</p>\n<p><strong>一键修复:</strong></p>\n<p>输入如下命令行，就可以自动<strong>修复你<code>src</code>文件夹下面的所有根据你配置的规则检测出来的格式问题</strong>。</p>\n<!--beforebegin--><div class=\"language-js line-numbers-mode\"><!--afterbegin--><pre v-pre class=\"language-js\"><code>npm run lint\n</code></pre>\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br></div><!--beforeend--></div><!--afterend--><h3 id=\"eslintignore-不检测一些文件：\"><a class=\"header-anchor\" href=\"#eslintignore-不检测一些文件：\" aria-hidden=\"true\">#</a> .eslintignore 不检测一些文件：</h3>\n<p>在项目的根目录创建一个<code>.eslintignore</code>文件，用于让<code>EsLint</code>不检测一些文件。</p>\n<p>比如引的一些别人的文件，插件等,比如文件中：</p>\n<!--beforebegin--><div class=\"language- line-numbers-mode\"><!--afterbegin--><pre v-pre class=\"language-text\"><code>src/test/* \nsrc/test2/* \n</code></pre>\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br></div><!--beforeend--></div><!--afterend--><p>文件中的内容像上面这样写，这里第一行是不检测src目录下的test文件夹下面的所有文件。</p>\n<h3 id=\"自定义规则：\"><a class=\"header-anchor\" href=\"#自定义规则：\" aria-hidden=\"true\">#</a> 自定义规则：</h3>\n<!--beforebegin--><div class=\"language-js line-numbers-mode\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token comment\">// .eslintrc.js文件</span>\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">\"rules\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// 自定义规则</span>\n        <span class=\"token string\">\"no-console\"</span><span class=\"token punctuation\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\"no-const-assign\"</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> \n        <span class=\"token string\">\"no-extra-bind\"</span><span class=\"token punctuation\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br></div><!--beforeend--></div><!--afterend--><p><strong>0、1、2的意思：</strong></p>\n<ul>\n<li><code>&quot;off&quot;</code> 或 0 - 关闭这项规则</li>\n<li><code>&quot;warn&quot;</code> 或 1 - 将规则视为一个警告</li>\n<li><code>&quot;error&quot;</code> 或 2 - 将规则视为一个错误</li>\n</ul>\n<h2 id=\"小结\"><a class=\"header-anchor\" href=\"#小结\" aria-hidden=\"true\">#</a> 小结</h2>\n<p>使用自动VsCode+EsLint格式化代码，在团队内部相互去看别人的代码的时候，就可以更容易的看的懂，能够极大的降低团队的沟通成本和提高心情,设置这么方便，赶紧在团队中用起来吧！\n<!-- 特殊字符串：用于修改/删除markdown的结尾提示语-OBKoro1 --></p>\n<h3 id=\"点个star支持我一下\"><a class=\"header-anchor\" href=\"#点个star支持我一下\" aria-hidden=\"true\">#</a> 点个<a href=\"https://github.com/OBKoro1/web_accumulate\" target=\"_blank\" rel=\"noopener noreferrer\">Star<OutboundLink/></a>支持我一下~</h3>\n<!-- '特殊字符串：用于删除编译后的issue组件-OBKoro1 -->\n<!-- more -->\n<comment-comment/>\n</div>\n",null]}