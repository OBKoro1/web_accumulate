{"remainingRequest":"/Users/koro/work/web_my/web_accumulate/node_modules/vue-loader/lib/index.js??ref--1-1!/Users/koro/work/web_my/web_accumulate/node_modules/vuepress/lib/webpack/markdownLoader.js??ref--1-2!/Users/koro/work/web_my/web_accumulate/docs/accumulate/effect/input的一些坑点分享.md?vue&type=template&id=1801d6b6&","dependencies":[{"path":"/Users/koro/work/web_my/web_accumulate/docs/accumulate/effect/input的一些坑点分享.md","mtime":1636107879469},{"path":"/Users/koro/work/web_my/web_accumulate/node_modules/cache-loader/dist/cjs.js","mtime":1557296864520},{"path":"/Users/koro/work/web_my/web_accumulate/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1557296867191},{"path":"/Users/koro/work/web_my/web_accumulate/node_modules/cache-loader/dist/cjs.js","mtime":1557296864520},{"path":"/Users/koro/work/web_my/web_accumulate/node_modules/vue-loader/lib/index.js","mtime":1557296867190},{"path":"/Users/koro/work/web_my/web_accumulate/node_modules/vuepress/lib/webpack/markdownLoader.js","mtime":1557296867284}],"contextDependencies":[],"result":["\n<div class=\"content\"><h2 id=\"input-的一些坑点分享\"><a class=\"header-anchor\" href=\"#input-的一些坑点分享\" aria-hidden=\"true\">#</a> input 的一些坑点分享</h2>\n<h2 id=\"本文内容包括：\"><a class=\"header-anchor\" href=\"#本文内容包括：\" aria-hidden=\"true\">#</a> 本文内容包括：</h2>\n<ol>\n<li>移动端底部 input 被弹出的键盘遮挡。</li>\n<li>控制 input 显/隐密码。</li>\n<li>在 input 中输入 emoji 表情导致请求失败。</li>\n<li>input 多行输入显示换行。</li>\n<li>输入框首尾清除空格-trim()</li>\n<li>在 input 中监听键盘事件</li>\n</ol>\n<hr>\n<h3 id=\"移动端底部-input-被弹出的键盘遮挡\"><a class=\"header-anchor\" href=\"#移动端底部-input-被弹出的键盘遮挡\" aria-hidden=\"true\">#</a> 移动端底部 input 被弹出的键盘遮挡</h3>\n<p>input 输入框是通过<code>position:fixed</code>一直放在页面底部，当点击 input 进行输入的时候，就会出现如下图片情况（有的机型会遮挡一些）。</p>\n<p>当时这个问题是去年在 ios 中遇到的，在最新版的 ios 系统中，貌似解决了这个 bug，但是为了向下兼容以及防止其他其他机型也出现这个问题，大家可以稍微记一下这个解决方法。</p>\n<p><img src=\"https://github.com/OBKoro1/articleImg_src/blob/master/juejin/16353072dcc21218?raw=true\" alt=\"\"></p>\n<p>在解决这个问题的时候，有试过下面这种方法:</p>\n<p><s>在 input 的 focus 事件中，开启一个定时器，然后每隔 300 毫秒进行一次 document.body.scrollTop=document.body.scrollHeight 的调整，运行 3 次即可。</s></p>\n<p>当时还以为解决了，但是当你底部评论区还有很多内容，你每次点击 input，想要输入的时候，整个页面通过<code>scrollTop</code>就会不断的向下滚动，这个体验不用说自己也知道是相当失败的，然后就再去找解决方法，结果就有了下面这个。</p>\n<h4 id=\"element-scrollintoview\"><a class=\"header-anchor\" href=\"#element-scrollintoview\" aria-hidden=\"true\">#</a> Element.scrollIntoView()</h4>\n<p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Element/scrollIntoView\" target=\"_blank\" rel=\"noopener noreferrer\">Element.scrollIntoView()<OutboundLink/></a>:方法<strong>让当前的元素滚动到浏览器窗口的可视区域内</strong>。</p>\n<!--beforebegin--><div class=\"language-js line-numbers-mode\"><!--afterbegin--><pre v-pre class=\"language-js\"><code>document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'#inputId'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">scrollIntoView</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//只要在input的点击事件，或者获取焦点的事件中，加入这个api就好了</span>\n</code></pre>\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br></div><!--beforeend--></div><!--afterend--><p>这个 api 还可以设置对齐方法，选择将 input 放在屏幕的上方/下方，类似的 api 还有:<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Element/scrollIntoViewIfNeeded\" target=\"_blank\" rel=\"noopener noreferrer\">Element.scrollIntoViewIfNeeded()<OutboundLink/></a>，这两个是解决同一个问题的，选择一个用就可以了。</p>\n<hr>\n<h3 id=\"控制-input-显-隐密码\"><a class=\"header-anchor\" href=\"#控制-input-显-隐密码\" aria-hidden=\"true\">#</a> 控制 input 显/隐密码</h3>\n<p>这个就很简单了，只需更改 input 的 type 属性值就可以了。可以看一下 codepen 的<a href=\"https://codepen.io/OBKoro1/pen/VxxgyG\" target=\"_blank\" rel=\"noopener noreferrer\">demo<OutboundLink/></a></p>\n<!--beforebegin--><div class=\"language-js line-numbers-mode\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token comment\">//点击函数，获取dom，判断更改属性。</span>\n<span class=\"token function\">show</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> input<span class=\"token operator\">=</span>document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"inputId\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>input<span class=\"token punctuation\">.</span>type<span class=\"token operator\">==</span><span class=\"token string\">\"password\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        input<span class=\"token punctuation\">.</span>type<span class=\"token operator\">=</span><span class=\"token string\">'text'</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span>\n        input<span class=\"token punctuation\">.</span>type<span class=\"token operator\">=</span><span class=\"token string\">'password'</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br></div><!--beforeend--></div><!--afterend--><hr>\n<h3 id=\"在-input-中输入-emoji-表情导致请求失败\"><a class=\"header-anchor\" href=\"#在-input-中输入-emoji-表情导致请求失败\" aria-hidden=\"true\">#</a> 在 input 中输入 emoji 表情导致请求失败</h3>\n<p>现在用户输入 emoji 简直已经成为了习惯，如果前后端没有对 emoji 表情进行处理，那么用户在上传的时候，就会请求失败。</p>\n<p><strong>通常这个问题是后端那边处理比较合适的</strong>，前端是做不了这件事的，或者说很难做这件事。</p>\n<p>之前看过一篇<a href=\"https://www.bbsmax.com/A/nAJvkxjY5r/\" target=\"_blank\" rel=\"noopener noreferrer\">文章<OutboundLink/></a>，这个文章里面讲了怎么在上传和拿数据下来的时候不会报错，但是不能在显示的时候转换为表情。</p>\n<p>ps:之前拿微信用户名的时候，有些人可能在微信昵称上面就会包含表情，<strong>如果后端没对表情处理转换，那么普通请求也会出错</strong>。</p>\n<p>之所以说这个，当表单请求错误的时候各位如果实在找不到问题可以往这方面考虑一下，我真的被坑过的 o(╥﹏╥)o。</p>\n<hr>\n<h3 id=\"textarea-多行回车换行，显示的时候换行设置：\"><a class=\"header-anchor\" href=\"#textarea-多行回车换行，显示的时候换行设置：\" aria-hidden=\"true\">#</a> textarea 多行回车换行，显示的时候换行设置：</h3>\n<p>在使用<code>textarea</code>标签输入多行文本的时候，如果没有对多行文本显示处理，会导致没有换行的情况,就比如下面这种情况，用户在<code>textarea</code>是有换行的。</p>\n<p><img src=\"https://github.com/OBKoro1/articleImg_src/blob/master/juejin/1635388bf4dca899?raw=true\" alt=\"\"></p>\n<h4 id=\"css-属性-white-space\"><a class=\"header-anchor\" href=\"#css-属性-white-space\" aria-hidden=\"true\">#</a> Css 属性:<a href=\"http://www.w3school.com.cn/cssref/pr_text_white-space.asp\" target=\"_blank\" rel=\"noopener noreferrer\">white-space<OutboundLink/></a></h4>\n<p>white-space 属性用于设置如何处理元素内的空白，其中包括空白符和换行符。</p>\n<p><img src=\"https://github.com/OBKoro1/articleImg_src/blob/master/juejin/16353927aec80539?raw=true\" alt=\"\"></p>\n<p>只要在<strong>显示内容的地方将该属性设置为<code>white-space: pre-line</code>或者<code>white-space:pre-wrap</code>，多行文本就可以换行了</strong>。</p>\n<h4 id=\"设置之后，显示效果：\"><a class=\"header-anchor\" href=\"#设置之后，显示效果：\" aria-hidden=\"true\">#</a> 设置之后，显示效果：</h4>\n<p><img src=\"https://github.com/OBKoro1/articleImg_src/blob/master/juejin/1635d9d75136f6d8?raw=true\" alt=\"\"></p>\n<hr>\n<h3 id=\"输入框首尾清除空格-trim\"><a class=\"header-anchor\" href=\"#输入框首尾清除空格-trim\" aria-hidden=\"true\">#</a> 输入框首尾清除空格-trim()</h3>\n<p>输入框清除首尾空格是 input 较为常见的需求，通常在上传的时候将首尾空格去除掉。一般使用:字符串的原生方法<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/Trim\" target=\"_blank\" rel=\"noopener noreferrer\">trim()<OutboundLink/></a> 从一个字符串的两端删除空白字符。</p>\n<p>trim() 方法并不影响原字符串本身，它返回的是一个新的字符串。</p>\n<h4 id=\"原生清除方法\"><a class=\"header-anchor\" href=\"#原生清除方法\" aria-hidden=\"true\">#</a> 原生清除方法:</h4>\n<!--beforebegin--><div class=\"language-js line-numbers-mode\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token comment\">//原生方法获取值，清除首尾空格上传str2</span>\n<span class=\"token keyword\">let</span> str2 <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'inputId'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">trim</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br></div><!--beforeend--></div><!--afterend--><h4 id=\"vue-清除方法：\"><a class=\"header-anchor\" href=\"#vue-清除方法：\" aria-hidden=\"true\">#</a> Vue 清除方法：</h4>\n<p>Vue 提供了<a href=\"https://cn.vuejs.org/v2/guide/forms.html#trim\" target=\"_blank\" rel=\"noopener noreferrer\">修饰符<OutboundLink/></a>删除首尾空格， 加了修饰符<code>.trim</code>会自动过滤用户输入的首尾空白字符</p>\n<!--beforebegin--><div class=\"language-html line-numbers-mode\"><!--afterbegin--><pre v-pre class=\"language-html\"><code><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">v-model.trim</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>msg<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n</code></pre>\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br></div><!--beforeend--></div><!--afterend--><p>貌似 angular 也提供了类似过滤的方法，感兴趣的可以自己去查一下。</p>\n<hr>\n<h3 id=\"在-input-中监听键盘事件\"><a class=\"header-anchor\" href=\"#在-input-中监听键盘事件\" aria-hidden=\"true\">#</a> 在 input 中监听键盘事件</h3>\n<p>在用户登录或者搜索框的时候，一般都会监听键盘事件绑定回车按键，来执行登录/搜索 等操作。</p>\n<h4 id=\"原生绑定\"><a class=\"header-anchor\" href=\"#原生绑定\" aria-hidden=\"true\">#</a> 原生绑定:</h4>\n<!--beforebegin--><div class=\"language-js line-numbers-mode\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token operator\">&lt;</span>input onkeydown<span class=\"token operator\">=</span><span class=\"token string\">\"keydownMsg(event)\"</span> type<span class=\"token operator\">=</span><span class=\"token string\">\"text\"</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">keydownMsg</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  keyCode <span class=\"token operator\">=</span> key<span class=\"token punctuation\">.</span>keyCode<span class=\"token punctuation\">;</span> <span class=\"token comment\">//获取按键代码</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>keyCode <span class=\"token operator\">==</span> <span class=\"token number\">13</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">//判断按下的是否为回车键</span>\n    <span class=\"token comment\">// 在input上监听到回车 do something</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br></div><!--beforeend--></div><!--afterend--><h4 id=\"vue-按键修饰符\"><a class=\"header-anchor\" href=\"#vue-按键修饰符\" aria-hidden=\"true\">#</a> Vue 按键修饰符</h4>\n<p>Vue 为监听键盘事件，提供了<a href=\"https://cn.vuejs.org/v2/guide/events.html#%E6%8C%89%E9%94%AE%E4%BF%AE%E9%A5%B0%E7%AC%A6\" target=\"_blank\" rel=\"noopener noreferrer\">按键修饰符<OutboundLink/></a>，并且为常用的按键提供了别名，使用方法如下:当回车按键在 input 中被按下的时候，会触发里面的函数。</p>\n<!--beforebegin--><div class=\"language-html line-numbers-mode\"><!--afterbegin--><pre v-pre class=\"language-html\"><code><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">@keyup.enter</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>enterActive<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n</code></pre>\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br></div><!--beforeend--></div><!--afterend--><!-- 特殊字符串：用于修改/删除markdown的结尾提示语-OBKoro1 -->\n<h3 id=\"点个star支持我一下\"><a class=\"header-anchor\" href=\"#点个star支持我一下\" aria-hidden=\"true\">#</a> 点个<a href=\"https://github.com/OBKoro1/web_accumulate\" target=\"_blank\" rel=\"noopener noreferrer\">Star<OutboundLink/></a>支持我一下~</h3>\n<!-- '特殊字符串：用于删除编译后的issue组件-OBKoro1 -->\n<!-- more -->\n<comment-comment/>\n</div>\n",null]}