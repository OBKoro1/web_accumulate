{"remainingRequest":"/Users/koro/work/web_my/web_accumulate/node_modules/vue-loader/lib/index.js??ref--1-1!/Users/koro/work/web_my/web_accumulate/node_modules/vuepress/lib/webpack/markdownLoader.js??ref--1-2!/Users/koro/work/web_my/web_accumulate/docs/accumulate/tool/http缓存.md?vue&type=template&id=f1d2df88&","dependencies":[{"path":"/Users/koro/work/web_my/web_accumulate/docs/accumulate/tool/http缓存.md","mtime":1636107879475},{"path":"/Users/koro/work/web_my/web_accumulate/node_modules/cache-loader/dist/cjs.js","mtime":1557296864520},{"path":"/Users/koro/work/web_my/web_accumulate/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1557296867191},{"path":"/Users/koro/work/web_my/web_accumulate/node_modules/cache-loader/dist/cjs.js","mtime":1557296864520},{"path":"/Users/koro/work/web_my/web_accumulate/node_modules/vue-loader/lib/index.js","mtime":1557296867190},{"path":"/Users/koro/work/web_my/web_accumulate/node_modules/vuepress/lib/webpack/markdownLoader.js","mtime":1557296867284}],"contextDependencies":[],"result":["\n<div class=\"content\"><h2 id=\"谈论http缓存时我们在谈论什么\"><a class=\"header-anchor\" href=\"#谈论http缓存时我们在谈论什么\" aria-hidden=\"true\">#</a> 谈论HTTP缓存时我们在谈论什么</h2>\n<p>在浏览器众多缓存中的HTTP缓存可能很多人对这个的概念并没有很清晰，每个人都知道进入一次网页之后再刷新一次页面，加载速度会比首次加载快非常多，每个人都知道这是浏览器缓存的magic，但是对此背后的原因可能不甚了解...</p>\n<h3 id=\"当我们在谈论http缓存时我们在谈论什么\"><a class=\"header-anchor\" href=\"#当我们在谈论http缓存时我们在谈论什么\" aria-hidden=\"true\">#</a> 当我们在谈论HTTP缓存时我们在谈论什么:</h3>\n<p>我们实际上是在谈论下面这两种情况:</p>\n<p><img src=\"https://github.com/OBKoro1/articleImg_src/blob/master/juejin/163e32ac608a1146?raw=true\" alt=\"\"></p>\n<p>如上图，浏览器对静态资源的HTTP缓存有两种情况，一种是强缓存(本地缓存)，另一种是弱缓存(协商缓存)。</p>\n<hr>\n<h3 id=\"缓存流程：\"><a class=\"header-anchor\" href=\"#缓存流程：\" aria-hidden=\"true\">#</a> 缓存流程：</h3>\n<h4 id=\"浏览器第一次请求资源时：\"><a class=\"header-anchor\" href=\"#浏览器第一次请求资源时：\" aria-hidden=\"true\">#</a> 浏览器第一次请求资源时：</h4>\n<p><img src=\"https://github.com/OBKoro1/articleImg_src/blob/master/juejin/163e323d0879019f?raw=true\" alt=\"图片出自网络\"></p>\n<p>浏览器<strong>第一次请求资源时，必须下载所有的资源，然后根据响应的header内容来决定，如何缓存资源</strong>。可能采用的是强缓存，也可能是弱缓存</p>\n<h4 id=\"浏览器后续请求资源时的匹配流程：\"><a class=\"header-anchor\" href=\"#浏览器后续请求资源时的匹配流程：\" aria-hidden=\"true\">#</a> 浏览器后续请求资源时的匹配流程：</h4>\n<p><img src=\"https://github.com/OBKoro1/articleImg_src/blob/master/juejin/163e33ba0484fb14?raw=true\" alt=\"\"></p>\n<p>由上图可以知道当浏览器请求一个静态资源时的HTTP流程：</p>\n<ol>\n<li>强缓存阶段：先在本地查找该资源，如果发现该资源，并且其他限制也没有问题(比如:缓存有效时间)，就命中强缓存，返回200，直接使用强缓存，并且不会发送请求到服务器</li>\n<li>弱缓存阶段：在本地缓存中找到该资源，发送一个http请求到服务器，服务器判断这个资源没有被改动过，则返回304，让浏览器使用该资源。</li>\n<li>缓存失败阶段(重新请求)：当服务器发现该资源被修改过，或者在本地没有找到该缓存资源，服务器则返回该资源的数据。</li>\n</ol>\n<h3 id=\"强缓存与弱缓存的区别：\"><a class=\"header-anchor\" href=\"#强缓存与弱缓存的区别：\" aria-hidden=\"true\">#</a> 强缓存与弱缓存的区别：</h3>\n<p><strong>获取资源形式</strong>： 都是从缓存中获取资源的。</p>\n<p><strong>状态码</strong>： 强缓存返回200(from cache),弱缓存返回304状态码</p>\n<p><strong>请求(最大区别)</strong>：</p>\n<p>强缓存不发送请求，直接从缓存中取。</p>\n<p>弱缓存需要发送一个请求，验证这个文件是否可以使用（有没有被改动过）。</p>\n<hr>\n<h3 id=\"强缓存：\"><a class=\"header-anchor\" href=\"#强缓存：\" aria-hidden=\"true\">#</a> 强缓存：</h3>\n<p>强缓存是利用Expires或者Cache-Control，让原始服务器为文件设置一个过期时间，在多长时间内可以将这些内容视为最新的。</p>\n<p>若时间未过期，则命中强缓存，使用缓存文件不发送请求。</p>\n<h3 id=\"cache-control\"><a class=\"header-anchor\" href=\"#cache-control\" aria-hidden=\"true\">#</a> Cache-Control</h3>\n<p>Cache-Control 是http1.1中为了弥补<code>Expires</code>的缺陷而加入的，当Expires和Cache-Control同时存在时，Cache-Control优先级高于Expires。</p>\n<p><strong>选项</strong>：</p>\n<p>可缓存性:</p>\n<p><code>public</code>： 服务器端和浏览器端都能缓存</p>\n<p><code>private</code>: 只能浏览器端缓存</p>\n<p><code>no-cache</code>:  强制浏览器在使用cache拷贝之前先<strong>提交一个http请求到源服务器进行确认</strong>。http请求没有减少，会减少一个响应体(文件内容),这种个选项类似弱缓存。</p>\n<p><code>only-if-cached</code>: 表明客户端只接受已缓存的响应，并且不要向原始服务器检查是否有更新的拷贝。</p>\n<p>到期设置：</p>\n<p><code>max-age=60</code>：设置缓存存储的最大周期，超过这个时间缓存被认为过期(单位秒)。 这里是60秒</p>\n<p>其他设置：</p>\n<p><code>no-store</code>: 不缓存，使用协商缓存</p>\n<p><code>must-revalidate</code>: 缓存必须在使用之前验证旧资源的状态，并且不可使用过期资源。</p>\n<p>更多设置，移动<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Cache-Control\" target=\"_blank\" rel=\"noopener noreferrer\">MDN<OutboundLink/></a></p>\n<!--beforebegin--><div class=\"language-js line-numbers-mode\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token comment\">// 示例</span>\nCache<span class=\"token operator\">-</span>Control<span class=\"token punctuation\">:</span> no<span class=\"token operator\">-</span>cache<span class=\"token punctuation\">,</span> no<span class=\"token operator\">-</span>store<span class=\"token punctuation\">,</span> must<span class=\"token operator\">-</span>revalidate\nCache<span class=\"token operator\">-</span>Control<span class=\"token punctuation\">:</span><span class=\"token keyword\">public</span><span class=\"token punctuation\">,</span> max<span class=\"token operator\">-</span>age<span class=\"token operator\">=</span><span class=\"token number\">31536000</span>\nCache<span class=\"token operator\">-</span>Control<span class=\"token punctuation\">:</span> max<span class=\"token operator\">-</span>age<span class=\"token operator\">=</span><span class=\"token number\">3600</span><span class=\"token punctuation\">,</span> must<span class=\"token operator\">-</span>revalidate\n</code></pre>\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br></div><!--beforeend--></div><!--afterend--><h3 id=\"http1-0时代的缓存-expires-pragma\"><a class=\"header-anchor\" href=\"#http1-0时代的缓存-expires-pragma\" aria-hidden=\"true\">#</a> http1.0时代的缓存 Expires+Pragma</h3>\n<p><strong>Expires用于设置缓存到期时间</strong>：</p>\n<p>指定缓存到期GMT的绝对时间，如果设了max-age，max-age就会覆盖expires，如果expires到期需要重新请求。</p>\n<!--beforebegin--><div class=\"language-js line-numbers-mode\"><!--afterbegin--><pre v-pre class=\"language-js\"><code>Expires<span class=\"token punctuation\">:</span>Sat<span class=\"token punctuation\">,</span> <span class=\"token number\">09</span> Jun <span class=\"token number\">2018</span> <span class=\"token number\">08</span><span class=\"token punctuation\">:</span><span class=\"token number\">13</span><span class=\"token punctuation\">:</span><span class=\"token number\">56</span> <span class=\"token constant\">GMT</span>\n</code></pre>\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br></div><!--beforeend--></div><!--afterend--><p>有一个问题是由于使用具体时间，如果时间表示出错或者没有转换到正确的时区都可能造成缓存生命周期出错。</p>\n<p><strong>Pragma禁用缓存：</strong></p>\n<p><code>Pragma : no-cache</code> 表示防止客户端缓存，需要强制从服务器获取最新的数据；</p>\n<!--beforebegin--><div class=\"language-js line-numbers-mode\"><!--afterbegin--><pre v-pre class=\"language-js\"><code>Pragma <span class=\"token punctuation\">:</span> no<span class=\"token operator\">-</span>cache  <span class=\"token comment\">//只有这一个用法 禁用缓存，强制从服务器获取最新的数据； </span>\n</code></pre>\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br></div><!--beforeend--></div><!--afterend--><h3 id=\"强缓存命中-from-memory-cache-from-disk-cache\"><a class=\"header-anchor\" href=\"#强缓存命中-from-memory-cache-from-disk-cache\" aria-hidden=\"true\">#</a> 强缓存命中 from memory cache &amp; from disk cache</h3>\n<p>在测试的时候，看到命中强缓存时，有两种状态，200 (from memory cache) cache &amp; 200 (from disk cache)，于是去找了一下这两者的区别：</p>\n<p>memory cache: 将资源存到<strong>内存</strong>中，从内存中获取。</p>\n<p>disk cache：将资源缓存到<strong>磁盘</strong>中，从磁盘中获取。</p>\n<p>二者最大的区别在于：<strong>当退出进程时，内存中的数据会被清空，而磁盘的数据不会</strong>。</p>\n<p>更详细的介绍推荐这篇<a href=\"https://blog.csdn.net/baidu_38742725/article/details/77181078\" target=\"_blank\" rel=\"noopener noreferrer\">文章<OutboundLink/></a></p>\n<hr>\n<h3 id=\"弱缓存：\"><a class=\"header-anchor\" href=\"#弱缓存：\" aria-hidden=\"true\">#</a> 弱缓存：</h3>\n<p>如果强缓存时间过期，或者没有设置，导致未命中的话。就进入到了弱缓存的阶段了，</p>\n<p><strong>Last-Modified &amp; if-modified-since:</strong></p>\n<p>Last-Modified与If-Modified-Since是一对报文头，属于http 1.0。</p>\n<p>last-modified是web服务器认为文件的最后修改时间，<code>last-modified</code>是第一次请求文件的时候，<strong>服务器返回</strong>的一个属性。</p>\n<!--beforebegin--><div class=\"language-js line-numbers-mode\"><!--afterbegin--><pre v-pre class=\"language-js\"><code>Last<span class=\"token operator\">-</span>Modified<span class=\"token punctuation\">:</span> Sat<span class=\"token punctuation\">,</span> <span class=\"token number\">09</span> Jun <span class=\"token number\">2018</span> <span class=\"token number\">08</span><span class=\"token punctuation\">:</span><span class=\"token number\">13</span><span class=\"token punctuation\">:</span><span class=\"token number\">56</span> <span class=\"token constant\">GMT</span> \n</code></pre>\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br></div><!--beforeend--></div><!--afterend--><p>第二次请求这个文件时，浏览器把<code>If-Modified-Since</code><strong>发送给服务器</strong>，询问该时间之后文件是否被修改过。</p>\n<!--beforebegin--><div class=\"language-js line-numbers-mode\"><!--afterbegin--><pre v-pre class=\"language-js\"><code>If<span class=\"token operator\">-</span>Modified<span class=\"token operator\">-</span>Since<span class=\"token punctuation\">:</span> Sat<span class=\"token punctuation\">,</span> <span class=\"token number\">09</span> Jun <span class=\"token number\">2018</span> <span class=\"token number\">08</span><span class=\"token punctuation\">:</span><span class=\"token number\">13</span><span class=\"token punctuation\">:</span><span class=\"token number\">56</span> <span class=\"token constant\">GMT</span> <span class=\"token comment\">// 跟Last-Modified的值一样</span>\n</code></pre>\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br></div><!--beforeend--></div><!--afterend--><p><strong>ETag &amp; If-None-Match</strong></p>\n<p>ETag与If-None-Match是一对报文，属于http 1.1。</p>\n<p><strong>ETag是一个文件的唯一标志符</strong>。就像一个哈希或者指纹，每个文件都有一个单独的标志，只要这个文件发生了改变，这个标志就会发生变化。</p>\n<p>ETag机制类似于乐观锁机制，如果请求报文的ETag与服务器的不一致，则表示该资源已经被修改过来，需要发最新的内容给浏览器。</p>\n<p><code>ETag</code>也是首次请求的时候，服务器返回的:</p>\n<!--beforebegin--><div class=\"language-js line-numbers-mode\"><!--afterbegin--><pre v-pre class=\"language-js\"><code>ETag<span class=\"token punctuation\">:</span> <span class=\"token string\">\"8F759D4F67D66A7244638AD249675BE2\"</span> <span class=\"token comment\">// 长这样</span>\n</code></pre>\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br></div><!--beforeend--></div><!--afterend--><p><code>If-None-Match</code>也是浏览器发送到服务器验证，文件是否改变的:</p>\n<!--beforebegin--><div class=\"language-js line-numbers-mode\"><!--afterbegin--><pre v-pre class=\"language-js\"><code>If<span class=\"token operator\">-</span>None<span class=\"token operator\">-</span>Match<span class=\"token punctuation\">:</span> <span class=\"token string\">\"8F759D4F67D66A7244638AD249675BE2\"</span> <span class=\"token comment\">// 跟ETag的值一样</span>\n</code></pre>\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br></div><!--beforeend--></div><!--afterend--><h3 id=\"etag-lastmodified过程如下\"><a class=\"header-anchor\" href=\"#etag-lastmodified过程如下\" aria-hidden=\"true\">#</a> <strong>Etag/lastModified过程如下:</strong></h3>\n<ol>\n<li>客户端第一次向服务器发起请求,服务器将附加<code>Last-Modified/ETag</code>到所提供的资源上去</li>\n<li>当再一次请求资源,<strong>如果没有命中强缓存</strong>,在执行在验证时,<strong>将上次请求时服务器返回的Last-Modified/ETag一起传递给服务器</strong>。</li>\n<li>服务器检查该Last-Modified或ETag，并判断出该资源<strong>页面自上次客户端请求之后还未被修改，返回响应304和一个空的响应体</strong>。</li>\n</ol>\n<h3 id=\"同时使用两个报文头\"><a class=\"header-anchor\" href=\"#同时使用两个报文头\" aria-hidden=\"true\">#</a> 同时使用两个报文头:</h3>\n<p>同时使用这两个报文头，<strong>两个都匹配才会命中弱缓存</strong>，否则将重新请求资源。</p>\n<p><img src=\"https://github.com/OBKoro1/articleImg_src/blob/master/juejin/163e3d5d5e2119a5?raw=true\" alt=\"\"></p>\n<h3 id=\"etag-主要为了解决-last-modified-无法解决的一些问题：\"><a class=\"header-anchor\" href=\"#etag-主要为了解决-last-modified-无法解决的一些问题：\" aria-hidden=\"true\">#</a> Etag 主要为了解决 Last-Modified 无法解决的一些问题：</h3>\n<ol>\n<li>一些文件也许内容并不改变(仅仅改变的修改时间)，这个时候我们不希望文件重新加载。（Etag值会触发缓存，Last-Modified不会触发）</li>\n<li>If-Modified-Since能检查到的粒度是秒级的，当修改非常频繁时，Last-Modified会触发缓存，而Etag的值不会触发，重新加载。</li>\n<li>某些服务器不能精确的得到文件的最后修改时间。</li>\n</ol>\n<hr>\n<h3 id=\"用户操作行为与缓存\"><a class=\"header-anchor\" href=\"#用户操作行为与缓存\" aria-hidden=\"true\">#</a> 用户操作行为与缓存</h3>\n<p>F5刷新导致强缓存失效。</p>\n<p>ctrl+F5强制刷新页面强缓存，弱缓存都会失效。</p>\n<p><img src=\"https://github.com/OBKoro1/articleImg_src/blob/master/juejin/163e4019ed29d0ae?raw=true\" alt=\"图片出自网络\"></p>\n<h3 id=\"如何设置？\"><a class=\"header-anchor\" href=\"#如何设置？\" aria-hidden=\"true\">#</a> 如何设置？</h3>\n<p>一般是服务器端设置这些请求头的，我自己试了用阿里云服务器设置<code>Cache-Control</code>，设置一下很方便的。</p>\n<hr>\n<h3 id=\"小结\"><a class=\"header-anchor\" href=\"#小结\" aria-hidden=\"true\">#</a> 小结</h3>\n<p>通过网络重复请求资源既缓慢，成本又高，缓存和重用以前获取的资源的能力成为优化性能很关键的一个方面,也是大厂面试时很频繁出现的内容，掌握好这块知识点是非常重要的，希望本文能给你带来些收获。</p>\n<p>文章如有不正确的地方欢迎各位路过的大佬鞭策！喜欢的话，赶紧点波<s>订阅</s>关注/喜欢。\n<!-- 特殊字符串：用于修改/删除markdown的结尾提示语-OBKoro1 --></p>\n<h3 id=\"点个star支持我一下\"><a class=\"header-anchor\" href=\"#点个star支持我一下\" aria-hidden=\"true\">#</a> 点个<a href=\"https://github.com/OBKoro1/web_accumulate\" target=\"_blank\" rel=\"noopener noreferrer\">Star<OutboundLink/></a>支持我一下~</h3>\n<!-- '特殊字符串：用于删除编译后的issue组件-OBKoro1 -->\n<!-- more -->\n<comment-comment/>\n</div>\n",null]}