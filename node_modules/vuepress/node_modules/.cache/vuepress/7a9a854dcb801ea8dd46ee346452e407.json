{"remainingRequest":"/Users/koro/work/web_my/web_accumulate/node_modules/vue-loader/lib/index.js??ref--1-1!/Users/koro/work/web_my/web_accumulate/node_modules/vuepress/lib/webpack/markdownLoader.js??ref--1-2!/Users/koro/work/web_my/web_accumulate/docs/codeBlack/执行shell命令行.md?vue&type=template&id=212bf18a&","dependencies":[{"path":"/Users/koro/work/web_my/web_accumulate/docs/codeBlack/执行shell命令行.md","mtime":1636107879452},{"path":"/Users/koro/work/web_my/web_accumulate/node_modules/cache-loader/dist/cjs.js","mtime":1557296864520},{"path":"/Users/koro/work/web_my/web_accumulate/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1557296867191},{"path":"/Users/koro/work/web_my/web_accumulate/node_modules/cache-loader/dist/cjs.js","mtime":1557296864520},{"path":"/Users/koro/work/web_my/web_accumulate/node_modules/vue-loader/lib/index.js","mtime":1557296867190},{"path":"/Users/koro/work/web_my/web_accumulate/node_modules/vuepress/lib/webpack/markdownLoader.js","mtime":1557296867284}],"contextDependencies":[],"result":["\n<div class=\"content\"><h2 id=\"论如何在node使用命令行\"><a class=\"header-anchor\" href=\"#论如何在node使用命令行\" aria-hidden=\"true\">#</a> 论如何在node使用命令行</h2>\n<p>演示一下如何在node中使用<code>git add .</code>等命令行。</p>\n<h3 id=\"项目代码一键上传\"><a class=\"header-anchor\" href=\"#项目代码一键上传\" aria-hidden=\"true\">#</a> 项目代码一键上传</h3>\n<p>在项目根目录创建<code>deploy.js</code>, 使用<code>node</code>运行该文件：</p>\n<!--beforebegin--><div class=\"language-js line-numbers-mode\"><!--afterbegin--><pre v-pre class=\"language-js\"><code>node deploy<span class=\"token punctuation\">.</span>js <span class=\"token string\">'参数1'</span> <span class=\"token string\">'参数2'</span>\n</code></pre>\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br></div><!--beforeend--></div><!--afterend--><p>对的, 启动node进程是可以传入参数的：</p>\n<h3 id=\"启动node进程时传入参数：\"><a class=\"header-anchor\" href=\"#启动node进程时传入参数：\" aria-hidden=\"true\">#</a> 启动node进程时传入参数：</h3>\n<p><a href=\"http://nodejs.cn/api/process/process_argv.html\" target=\"_blank\" rel=\"noopener noreferrer\">process.argv<OutboundLink/></a>是<code>node</code>自带的属性，这是一个数组,数组的前两个元素是默认值：</p>\n<ol>\n<li><code>process.argv[0]</code>: <code>process.execPath</code>(返回启动 Node.js 进程的可执行文件的绝对路径名)</li>\n<li><code>process.argv[1]</code>: 正在执行的 JavaScript 文件的路径</li>\n<li><code>process.argv[2]、process.argv[3]...</code>: 这里是传入的参数</li>\n</ol>\n<!--beforebegin--><div class=\"language-js line-numbers-mode\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token comment\">// process.argv</span>\n<span class=\"token punctuation\">[</span> <span class=\"token string\">'/usr/local/bin/node'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">'/Users/obkoro1/work/itemName/deploy.js'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">'参数1'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'参数2'</span> <span class=\"token punctuation\">]</span>\n</code></pre>\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br></div><!--beforeend--></div><!--afterend--><h3 id=\"deploy-js\"><a class=\"header-anchor\" href=\"#deploy-js\" aria-hidden=\"true\">#</a> deploy.js</h3>\n<p>执行命令行主要是靠node自带模块：<code>child_process</code>的<a href=\"http://nodejs.cn/api/child_process.html#child_process_child_process_execsync_command_options\" target=\"_blank\" rel=\"noopener noreferrer\">execSync<OutboundLink/></a>方法来创建一个子进程运行命令。</p>\n<p>运行方法如上所示，拷贝下面的代码来试一试就知道了。</p>\n<h3 id=\"代码：\"><a class=\"header-anchor\" href=\"#代码：\" aria-hidden=\"true\">#</a> 代码：</h3>\n<!--beforebegin--><div class=\"language-js line-numbers-mode\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token comment\">// deploy.js</span>\n<span class=\"token comment\">// node内置模块 同步执行命令行</span>\n<span class=\"token keyword\">const</span> execSync <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'child_process'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>execSync<span class=\"token punctuation\">;</span> \n<span class=\"token keyword\">const</span> commitParam <span class=\"token operator\">=</span> process<span class=\"token punctuation\">.</span>argv<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token comment\">// commit 参数</span>\n<span class=\"token function\">myExecSync</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token string\">`git add . &amp;&amp; git commit -m </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>commitParam<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> &amp;&amp; git pull &amp;&amp; git push`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/**\n * @description: 同步执行命令行\n * @param {string} cmd 字符串\n * @Date: 2019-08-02 17:43:41\n */</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">myExecSync</span><span class=\"token punctuation\">(</span>cmd<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// 除了该方法直到子进程完全关闭后才返回 执行完毕 返回</span>\n  <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> output <span class=\"token operator\">=</span> <span class=\"token function\">execSync</span><span class=\"token punctuation\">(</span>\n      cmd<span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">{</span>\n        encoding<span class=\"token punctuation\">:</span> <span class=\"token string\">'utf8'</span><span class=\"token punctuation\">,</span>\n        timeout<span class=\"token punctuation\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n        maxBuffer<span class=\"token punctuation\">:</span> <span class=\"token number\">200</span> <span class=\"token operator\">*</span> <span class=\"token number\">1024</span><span class=\"token punctuation\">,</span>\n        killSignal<span class=\"token punctuation\">:</span> <span class=\"token string\">'SIGTERM'</span><span class=\"token punctuation\">,</span>\n        cwd<span class=\"token punctuation\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>\n        env<span class=\"token punctuation\">:</span> <span class=\"token keyword\">null</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">,</span> stdout<span class=\"token punctuation\">,</span> stderr<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// 进程错误时 回调</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token string\">`执行命令</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>cmd<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">出错:</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>err<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">err</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token string\">`执行命令</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>cmd<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">出错:</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>err<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br><span class=\"line-number\">11</span><br><span class=\"line-number\">12</span><br><span class=\"line-number\">13</span><br><span class=\"line-number\">14</span><br><span class=\"line-number\">15</span><br><span class=\"line-number\">16</span><br><span class=\"line-number\">17</span><br><span class=\"line-number\">18</span><br><span class=\"line-number\">19</span><br><span class=\"line-number\">20</span><br><span class=\"line-number\">21</span><br><span class=\"line-number\">22</span><br><span class=\"line-number\">23</span><br><span class=\"line-number\">24</span><br><span class=\"line-number\">25</span><br><span class=\"line-number\">26</span><br><span class=\"line-number\">27</span><br><span class=\"line-number\">28</span><br><span class=\"line-number\">29</span><br><span class=\"line-number\">30</span><br><span class=\"line-number\">31</span><br><span class=\"line-number\">32</span><br><span class=\"line-number\">33</span><br><span class=\"line-number\">34</span><br><span class=\"line-number\">35</span><br><span class=\"line-number\">36</span><br></div><!--beforeend--></div><!--afterend--><!-- 特殊字符串：用于修改/删除markdown的结尾提示语-OBKoro1 -->\n<h3 id=\"点个star支持我一下\"><a class=\"header-anchor\" href=\"#点个star支持我一下\" aria-hidden=\"true\">#</a> 点个<a href=\"https://github.com/OBKoro1/codeBlack\" target=\"_blank\" rel=\"noopener noreferrer\">Star<OutboundLink/></a>支持我一下~</h3>\n<!-- '特殊字符串：用于删除编译后的issue组件-OBKoro1 -->\n<!-- more -->\n<comment-comment/>\n</div>\n",null]}