{"remainingRequest":"/Users/koro/work/web_my/web_accumulate/node_modules/vue-loader/lib/index.js??ref--1-1!/Users/koro/work/web_my/web_accumulate/node_modules/vuepress/lib/webpack/markdownLoader.js??ref--1-2!/Users/koro/work/web_my/web_accumulate/docs/accumulate/Vue/vue钩子函数.md?vue&type=template&id=6c87eb15&","dependencies":[{"path":"/Users/koro/work/web_my/web_accumulate/docs/accumulate/Vue/vue钩子函数.md","mtime":1636107879470},{"path":"/Users/koro/work/web_my/web_accumulate/node_modules/cache-loader/dist/cjs.js","mtime":1557296864520},{"path":"/Users/koro/work/web_my/web_accumulate/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1557296867191},{"path":"/Users/koro/work/web_my/web_accumulate/node_modules/cache-loader/dist/cjs.js","mtime":1557296864520},{"path":"/Users/koro/work/web_my/web_accumulate/node_modules/vue-loader/lib/index.js","mtime":1557296867190},{"path":"/Users/koro/work/web_my/web_accumulate/node_modules/vuepress/lib/webpack/markdownLoader.js","mtime":1557296867284}],"contextDependencies":[],"result":["\n<div class=\"content\"><h2 id=\"vue的钩子函数-路由导航守卫、keep-alive、生命周期钩子\"><a class=\"header-anchor\" href=\"#vue的钩子函数-路由导航守卫、keep-alive、生命周期钩子\" aria-hidden=\"true\">#</a> Vue的钩子函数[路由导航守卫、keep-alive、生命周期钩子]</h2>\n<p>说到Vue的钩子函数，可能很多人只停留在一些很简单常用的钩子(<code>created</code>,<code>mounted</code>)，而且对于里面的区别，什么时候该用什么钩子，并没有仔细的去研究过，且Vue的生命周期在面试中也算是比较高频的考点，那么该如何回答这类问题，让人有眼前一亮的感觉呢...</p>\n<h2 id=\"vue-router导航守卫：\"><a class=\"header-anchor\" href=\"#vue-router导航守卫：\" aria-hidden=\"true\">#</a> Vue-Router导航守卫：</h2>\n<p>有的时候，我们需要通过路由来进行一些操作，比如最常见的登录权限验证，当用户满足条件时，才让其进入导航，否则就取消跳转，并跳到登录页面让其登录。</p>\n<p>为此我们有很多种方法可以植入路由的导航过程：<strong>全局的, 单个路由独享的, 或者组件级的</strong>,推荐优先阅读<a href=\"https://router.vuejs.org/zh/guide/advanced/navigation-guards.html\" target=\"_blank\" rel=\"noopener noreferrer\">路由文档<OutboundLink/></a></p>\n<h3 id=\"全局守卫\"><a class=\"header-anchor\" href=\"#全局守卫\" aria-hidden=\"true\">#</a> 全局守卫</h3>\n<p>vue-router全局有三个守卫：</p>\n<ol>\n<li>router.beforeEach 全局前置守卫 进入路由之前</li>\n<li>router.beforeResolve 全局解析守卫(2.5.0+) 在beforeRouteEnter调用之后调用</li>\n<li>router.afterEach 全局后置钩子 进入路由之后</li>\n</ol>\n<p><strong>使用方法</strong>：</p>\n<!--beforebegin--><div class=\"language-js line-numbers-mode\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token comment\">// main.js 入口文件</span>\n<span class=\"token keyword\">import</span> router <span class=\"token keyword\">from</span> <span class=\"token string\">'./router'</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 引入路由</span>\nrouter<span class=\"token punctuation\">.</span><span class=\"token function\">beforeEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>to<span class=\"token punctuation\">,</span> <span class=\"token keyword\">from</span><span class=\"token punctuation\">,</span> next<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span> \n    <span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nrouter<span class=\"token punctuation\">.</span><span class=\"token function\">beforeResolve</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>to<span class=\"token punctuation\">,</span> <span class=\"token keyword\">from</span><span class=\"token punctuation\">,</span> next<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nrouter<span class=\"token punctuation\">.</span><span class=\"token function\">afterEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>to<span class=\"token punctuation\">,</span> <span class=\"token keyword\">from</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'afterEach 全局后置钩子'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br><span class=\"line-number\">11</span><br></div><!--beforeend--></div><!--afterend--><h4 id=\"to-from-next-这三个参数：\"><a class=\"header-anchor\" href=\"#to-from-next-这三个参数：\" aria-hidden=\"true\">#</a> to,from,next 这三个参数：</h4>\n<p>to和from是<strong>将要进入和将要离开的路由对象</strong>,路由对象指的是平时通过this.$route获取到的路由对象。</p>\n<p><strong>next:Function</strong> 这个参数是个函数，且<strong>必须调用，否则不能进入路由</strong>(页面空白)。</p>\n<ul>\n<li>next() 进入该路由。</li>\n<li>next(false): 取消进入路由，url地址重置为from路由地址(也就是将要离开的路由地址)。</li>\n<li>next 跳转新路由，当前的导航被中断，重新开始一个新的导航。</li>\n</ul>\n<!--beforebegin--><div class=\"language-js line-numbers-mode\"><!--afterbegin--><pre v-pre class=\"language-js\"><code>        <span class=\"token function\">我们可以这样跳转：next</span><span class=\"token punctuation\">(</span><span class=\"token string\">'path地址'</span><span class=\"token punctuation\">)</span><span class=\"token function\">或者next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>path<span class=\"token punctuation\">:</span><span class=\"token string\">''</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token function\">或者next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>name<span class=\"token punctuation\">:</span><span class=\"token string\">''</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n        且允许设置诸如 replace<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span>、name<span class=\"token punctuation\">:</span> <span class=\"token string\">'home'</span> 之类的选项\n        以及你用在router<span class=\"token operator\">-</span>link或router<span class=\"token punctuation\">.</span>push的对象选项。\n</code></pre>\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br></div><!--beforeend--></div><!--afterend--><h3 id=\"路由独享守卫\"><a class=\"header-anchor\" href=\"#路由独享守卫\" aria-hidden=\"true\">#</a> 路由独享守卫</h3>\n<p>如果你不想全局配置守卫的话，你可以为某些路由单独配置守卫：</p>\n<!--beforebegin--><div class=\"language-js line-numbers-mode\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token keyword\">const</span> router <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">VueRouter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    routes<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">{</span>\n        path<span class=\"token punctuation\">:</span> <span class=\"token string\">'/foo'</span><span class=\"token punctuation\">,</span>\n        component<span class=\"token punctuation\">:</span> Foo<span class=\"token punctuation\">,</span>\n        beforeEnter<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span>to<span class=\"token punctuation\">,</span> <span class=\"token keyword\">from</span><span class=\"token punctuation\">,</span> next<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span> \n        <span class=\"token comment\">// 参数用法什么的都一样,调用顺序在全局前置守卫后面，所以不会被全局守卫覆盖</span>\n        <span class=\"token comment\">// ...</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br><span class=\"line-number\">11</span><br><span class=\"line-number\">12</span><br></div><!--beforeend--></div><!--afterend--><h3 id=\"路由组件内的守卫：\"><a class=\"header-anchor\" href=\"#路由组件内的守卫：\" aria-hidden=\"true\">#</a> 路由组件内的守卫：</h3>\n<ol>\n<li>beforeRouteEnter 进入路由前</li>\n<li>beforeRouteUpdate (2.2) 路由复用同一个组件时</li>\n<li>beforeRouteLeave 离开当前路由时</li>\n</ol>\n<p><strong>文档中的介绍：</strong></p>\n<!--beforebegin--><div class=\"language-js line-numbers-mode\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token function\">beforeRouteEnter</span> <span class=\"token punctuation\">(</span>to<span class=\"token punctuation\">,</span> <span class=\"token keyword\">from</span><span class=\"token punctuation\">,</span> next<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"token comment\">// 在路由独享守卫后调用 不！能！获取组件实例 `this`，组件实例还没被创建</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token function\">beforeRouteUpdate</span> <span class=\"token punctuation\">(</span>to<span class=\"token punctuation\">,</span> <span class=\"token keyword\">from</span><span class=\"token punctuation\">,</span> next<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"token comment\">// 在当前路由改变，但是该组件被复用时调用 可以访问组件实例 `this`</span>\n<span class=\"token comment\">// 举例来说，对于一个带有动态参数的路径 /foo/:id，在 /foo/1 和 /foo/2 之间跳转的时候，</span>\n<span class=\"token comment\">// 由于会渲染同样的 Foo 组件，因此组件实例会被复用。而这个钩子就会在这个情况下被调用。</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token function\">beforeRouteLeave</span> <span class=\"token punctuation\">(</span>to<span class=\"token punctuation\">,</span> <span class=\"token keyword\">from</span><span class=\"token punctuation\">,</span> next<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"token comment\">// 导航离开该组件的对应路由时调用，可以访问组件实例 `this`</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br><span class=\"line-number\">11</span><br></div><!--beforeend--></div><!--afterend--><p><strong>beforeRouteEnter访问this</strong></p>\n<p>因为钩子在组件实例还没被创建的时候调用，所以不能获取组件实例 <code>this</code>，可以通过传一个回调给<code>next</code>来访问组件实例\n。</p>\n<p>但是<strong>回调的执行时机在mounted后面</strong>,所以在我看来这里对this的访问意义不太大，可以放在<code>created</code>或者<code>mounted</code>里面。</p>\n<!--beforebegin--><div class=\"language-js line-numbers-mode\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token function\">beforeRouteEnter</span> <span class=\"token punctuation\">(</span>to<span class=\"token punctuation\">,</span> <span class=\"token keyword\">from</span><span class=\"token punctuation\">,</span> next<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'在路由独享守卫后调用'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">next</span><span class=\"token punctuation\">(</span>vm <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// 通过 `vm` 访问组件实例`this` 执行回调的时机在mounted后面，</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br></div><!--beforeend--></div><!--afterend--><p><strong>beforeRouteLeave：</strong></p>\n<p>导航离开该组件的对应路由时调用，我们用它来禁止用户离开，比如还未保存草稿，或者在用户离开前，将<code>setInterval</code>销毁，防止离开之后，定时器还在调用。</p>\n<!--beforebegin--><div class=\"language-js line-numbers-mode\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token function\">beforeRouteLeave</span> <span class=\"token punctuation\">(</span>to<span class=\"token punctuation\">,</span> <span class=\"token keyword\">from</span> <span class=\"token punctuation\">,</span> next<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>文章保存<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 允许离开或者可以跳到别的路由 上面讲过了</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 取消离开</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br></div><!--beforeend--></div><!--afterend--><h3 id=\"关于钩子的一些知识：\"><a class=\"header-anchor\" href=\"#关于钩子的一些知识：\" aria-hidden=\"true\">#</a> 关于钩子的一些知识：</h3>\n<h4 id=\"路由钩子函数的错误捕获\"><a class=\"header-anchor\" href=\"#路由钩子函数的错误捕获\" aria-hidden=\"true\">#</a> 路由钩子函数的错误捕获</h4>\n<p>如果我们在全局守卫/路由独享守卫/组件路由守卫的钩子函数中有错误，可以这样捕获：</p>\n<!--beforebegin--><div class=\"language-js line-numbers-mode\"><!--afterbegin--><pre v-pre class=\"language-js\"><code>router<span class=\"token punctuation\">.</span><span class=\"token function\">onError</span><span class=\"token punctuation\">(</span>callback <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span> \n<span class=\"token comment\">// 2.4.0新增 并不常用，了解一下就可以了 </span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>callback<span class=\"token punctuation\">,</span> <span class=\"token string\">'callback'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br></div><!--beforeend--></div><!--afterend--><p>在路由文档中还有更多的<a href=\"https://router.vuejs.org/zh/api/#router-%E5%AE%9E%E4%BE%8B%E6%96%B9%E6%B3%95\" target=\"_blank\" rel=\"noopener noreferrer\">实例方法<OutboundLink/></a>：动态添加路由等，有兴趣可以了解一下。</p>\n<h4 id=\"跳转死循环，页面永远空白\"><a class=\"header-anchor\" href=\"#跳转死循环，页面永远空白\" aria-hidden=\"true\">#</a> 跳转死循环，页面永远空白</h4>\n<p>我了解到的，很多人会碰到这个问题，来看一下这段伪代码：</p>\n<!--beforebegin--><div class=\"language-js line-numbers-mode\"><!--afterbegin--><pre v-pre class=\"language-js\"><code>router<span class=\"token punctuation\">.</span><span class=\"token function\">beforeEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>to<span class=\"token punctuation\">,</span> <span class=\"token keyword\">from</span><span class=\"token punctuation\">,</span> next<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>登录<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span>\n        <span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> name<span class=\"token punctuation\">:</span> <span class=\"token string\">'login'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br></div><!--beforeend--></div><!--afterend--><p>看逻辑貌似是对的，但是当我们跳转到<code>login</code>之后，因为此时还是未登录状态，所以会一直跳转到<code>login</code>然后死循环，页面一直是空白的，所以：我们需要把判断条件稍微改一下。</p>\n<!--beforebegin--><div class=\"language-js line-numbers-mode\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>登录 <span class=\"token operator\">||</span> to<span class=\"token punctuation\">.</span>name <span class=\"token operator\">===</span> <span class=\"token string\">'login'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span> <span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span> <span class=\"token comment\">// 登录，或者将要前往login页面的时候，就允许进入路由</span>\n</code></pre>\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br></div><!--beforeend--></div><!--afterend--><h4 id=\"全局后置钩子的跳转：\"><a class=\"header-anchor\" href=\"#全局后置钩子的跳转：\" aria-hidden=\"true\">#</a> 全局后置钩子的跳转：</h4>\n<p>文档中提到因为router.afterEach不接受<code>next</code>函数所以也不会改变导航本身，意思就是只能当成一个钩子来使用，但是我自己在试的时候发现，我们可以通过这种形式来实现跳转：</p>\n<!--beforebegin--><div class=\"language-js line-numbers-mode\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token comment\">// main.js 入口文件</span>\n<span class=\"token keyword\">import</span> router <span class=\"token keyword\">from</span> <span class=\"token string\">'./router'</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 引入路由</span>\nrouter<span class=\"token punctuation\">.</span><span class=\"token function\">afterEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>to<span class=\"token punctuation\">,</span> <span class=\"token keyword\">from</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>未登录 <span class=\"token operator\">&amp;&amp;</span> to<span class=\"token punctuation\">.</span>name <span class=\"token operator\">!==</span> <span class=\"token string\">'login'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    router<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> name<span class=\"token punctuation\">:</span> <span class=\"token string\">'login'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 跳转login</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br></div><!--beforeend--></div><!--afterend--><p>额，通过router.beforeEach 也完全可以实现且更好，我就骚一下。</p>\n<h3 id=\"完整的路由导航解析流程-不包括其他生命周期-：\"><a class=\"header-anchor\" href=\"#完整的路由导航解析流程-不包括其他生命周期-：\" aria-hidden=\"true\">#</a> 完整的路由导航解析流程(不包括其他生命周期)：</h3>\n<ol>\n<li>触发进入其他路由。</li>\n<li>调用要离开路由的组件守卫<code>beforeRouteLeave</code></li>\n<li>调用局前置守卫：<code>beforeEach</code></li>\n<li>在重用的组件里调用 <code>beforeRouteUpdate</code></li>\n<li>调用路由独享守卫 <code>beforeEnter</code>。</li>\n<li>解析异步路由组件。</li>\n<li>在将要进入的路由组件中调用<code>beforeRouteEnter</code></li>\n<li>调用全局解析守卫 <code>beforeResolve</code></li>\n<li>导航被确认。</li>\n<li>调用全局后置钩子的 <code>afterEach</code> 钩子。</li>\n<li>触发DOM更新(<code>mounted</code>)。</li>\n<li>执行<code>beforeRouteEnter</code> 守卫中传给 next 的回调函数</li>\n</ol>\n<hr>\n<h2 id=\"你不知道的keep-alive-我猜你不知道\"><a class=\"header-anchor\" href=\"#你不知道的keep-alive-我猜你不知道\" aria-hidden=\"true\">#</a> 你不知道的keep-alive[我猜你不知道]</h2>\n<p>在开发Vue项目的时候，大部分组件是没必要多次渲染的，所以Vue提供了一个内置组件<code>keep-alive</code>来<strong>缓存组件内部状态，避免重新渲染</strong>，<a href=\"https://cn.vuejs.org/v2/api/#keep-alive\" target=\"_blank\" rel=\"noopener noreferrer\">文档在这里<OutboundLink/></a>。</p>\n<blockquote>\n<p>文档：和 <code>&lt;transition&gt;</code>相似，<code>&lt;keep-alive&gt;</code> 是一个抽象组件：它自身不会渲染一个 DOM 元素，也不会出现在父组件链中。</p>\n</blockquote>\n<h3 id=\"用法：\"><a class=\"header-anchor\" href=\"#用法：\" aria-hidden=\"true\">#</a> 用法：</h3>\n<p><strong>缓存动态组件：</strong></p>\n<p><code>&lt;keep-alive&gt;</code>包裹动态组件时，会缓存不活动的组件实例，而不是销毁它们，此种方式并无太大的实用意义。</p>\n<!--beforebegin--><div class=\"language-html line-numbers-mode\"><!--afterbegin--><pre v-pre class=\"language-html\"><code><span class=\"token comment\">&lt;!-- 基本 --></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>keep-alive</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>component</span> <span class=\"token attr-name\">:is</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>view<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>component</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>keep-alive</span><span class=\"token punctuation\">></span></span>\n<span class=\"token comment\">&lt;!-- 多个条件判断的子组件 --></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>keep-alive</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>comp-a</span> <span class=\"token attr-name\">v-if</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>a > 1<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>comp-a</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>comp-b</span> <span class=\"token attr-name\">v-else</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>comp-b</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>keep-alive</span><span class=\"token punctuation\">></span></span>\n</code></pre>\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br></div><!--beforeend--></div><!--afterend--><p><strong>缓存路由组件：</strong></p>\n<p>使用<code>keep-alive</code>可以将所有路径匹配到的路由组件都缓存起来，包括路由组件里面的组件，<code>keep-alive</code>大多数使用场景就是这种。</p>\n<!--beforebegin--><div class=\"language-html line-numbers-mode\"><!--afterbegin--><pre v-pre class=\"language-html\"><code><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>keep-alive</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>router-view</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>router-view</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>keep-alive</span><span class=\"token punctuation\">></span></span>\n</code></pre>\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br></div><!--beforeend--></div><!--afterend--><h3 id=\"生命周期钩子：\"><a class=\"header-anchor\" href=\"#生命周期钩子：\" aria-hidden=\"true\">#</a> 生命周期钩子：</h3>\n<p>这篇既然是Vue钩子函数的专场，那肯定要扣题呀~</p>\n<p>在被<code>keep-alive</code>包含的组件/路由中，会多出两个生命周期的钩子:<code>activated</code> 与 <code>deactivated</code>。</p>\n<blockquote>\n<p>文档：在 2.2.0 及其更高版本中，activated 和 deactivated 将会在 <code>&lt;keep-alive&gt;</code> 树内的<strong>所有嵌套组件</strong>中触发。</p>\n</blockquote>\n<p><strong>activated在组件第一次渲染时会被调用，之后在每次缓存组件被激活时调用</strong>。</p>\n<p><strong>activated调用时机：</strong></p>\n<p>第一次进入缓存路由/组件，在<code>mounted</code>后面，<code>beforeRouteEnter</code>守卫传给 next 的回调函数之前调用：</p>\n<!--beforebegin--><div class=\"language-js line-numbers-mode\"><!--afterbegin--><pre v-pre class=\"language-js\"><code>        beforeMount<span class=\"token operator\">=></span> 如果你是从别的路由<span class=\"token operator\">/</span><span class=\"token function\">组件进来</span><span class=\"token punctuation\">(</span>组件销毁destroyed<span class=\"token operator\">/</span>或离开缓存deactivated<span class=\"token punctuation\">)</span><span class=\"token operator\">=></span>\n        mounted<span class=\"token operator\">=></span> activated 进入缓存组件 <span class=\"token operator\">=></span> 执行 beforeRouteEnter回调\n</code></pre>\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br></div><!--beforeend--></div><!--afterend--><p>因为组件被缓存了，<strong>再次进入缓存路由/组件时，不会触发这些钩子</strong>：</p>\n<!--beforebegin--><div class=\"language-js line-numbers-mode\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token comment\">// beforeCreate created beforeMount mounted 都不会触发。</span>\n</code></pre>\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br></div><!--beforeend--></div><!--afterend--><p>所以之后的调用时机是：</p>\n<!--beforebegin--><div class=\"language-js line-numbers-mode\"><!--afterbegin--><pre v-pre class=\"language-js\"><code>        组件销毁destroyed<span class=\"token operator\">/</span>或离开缓存deactivated <span class=\"token operator\">=></span> activated 进入当前缓存组件 \n        <span class=\"token operator\">=></span> 执行 beforeRouteEnter回调\n        <span class=\"token comment\">// 组件缓存或销毁，嵌套组件的销毁和缓存也在这里触发</span>\n</code></pre>\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br></div><!--beforeend--></div><!--afterend--><p><strong>deactivated：组件被停用(离开路由)时调用</strong></p>\n<p><strong>使用了<code>keep-alive</code>就不会调用<code>beforeDestroy</code>(组件销毁前钩子)和<code>destroyed</code>(组件销毁)，因为组件没被销毁，被缓存起来了</strong>。</p>\n<p>这个钩子可以看作<code>beforeDestroy</code>的替代，如果你缓存了组件，要在组件销毁的的时候做一些事情，你可以放在这个钩子里。</p>\n<p>如果你离开了路由，会依次触发：</p>\n<!--beforebegin--><div class=\"language-js line-numbers-mode\"><!--afterbegin--><pre v-pre class=\"language-js\"><code>        组件内的离开当前路由钩子beforeRouteLeave <span class=\"token operator\">=></span>  路由前置守卫 beforeEach <span class=\"token operator\">=></span>\n        全局后置钩子afterEach <span class=\"token operator\">=></span> deactivated 离开缓存组件 <span class=\"token operator\">=></span> activated <span class=\"token function\">进入缓存组件</span><span class=\"token punctuation\">(</span>如果你进入的也是缓存路由<span class=\"token punctuation\">)</span>\n        <span class=\"token comment\">// 如果离开的组件没有缓存的话 beforeDestroy会替换deactivated </span>\n        <span class=\"token comment\">// 如果进入的路由也没有缓存的话  全局后置钩子afterEach=>销毁 destroyed=> beforeCreate等</span>\n</code></pre>\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br></div><!--beforeend--></div><!--afterend--><p>那么，如果我只是想缓存其中几个路由/组件，那该怎么做？</p>\n<h3 id=\"缓存你想缓存的路由：\"><a class=\"header-anchor\" href=\"#缓存你想缓存的路由：\" aria-hidden=\"true\">#</a> 缓存你想缓存的路由：</h3>\n<h4 id=\"vue2-1-0之前\"><a class=\"header-anchor\" href=\"#vue2-1-0之前\" aria-hidden=\"true\">#</a> Vue2.1.0之前:</h4>\n<p>想实现类似的操作，你可以：</p>\n<ol>\n<li>配置一下路由元信息</li>\n<li>创建两个<code>keep-alive</code>标签</li>\n<li>使用<code>v-if</code>通过路由元信息判断缓存哪些路由。</li>\n</ol>\n<!--beforebegin--><div class=\"language-js line-numbers-mode\"><!--afterbegin--><pre v-pre class=\"language-js\"><code>        <span class=\"token operator\">&lt;</span>keep<span class=\"token operator\">-</span>alive<span class=\"token operator\">></span>\n            <span class=\"token operator\">&lt;</span>router<span class=\"token operator\">-</span>view v<span class=\"token operator\">-</span><span class=\"token keyword\">if</span><span class=\"token operator\">=</span><span class=\"token string\">\"$route.meta.keepAlive\"</span><span class=\"token operator\">></span>\n                <span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span>这里是会被缓存的路由<span class=\"token operator\">--</span><span class=\"token operator\">></span>\n            <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>router<span class=\"token operator\">-</span>view<span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>keep<span class=\"token operator\">-</span>alive<span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>router<span class=\"token operator\">-</span>view v<span class=\"token operator\">-</span><span class=\"token keyword\">if</span><span class=\"token operator\">=</span><span class=\"token string\">\"!$route.meta.keepAlive\"</span><span class=\"token operator\">></span>\n            <span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span>因为用的是v<span class=\"token operator\">-</span><span class=\"token keyword\">if</span> 所以下面还要创建一个未缓存的路由视图出口<span class=\"token operator\">--</span><span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>router<span class=\"token operator\">-</span>view<span class=\"token operator\">></span>\n        <span class=\"token comment\">//router配置</span>\n        <span class=\"token keyword\">new</span> <span class=\"token class-name\">Router</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n          routes<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>\n            <span class=\"token punctuation\">{</span>\n              path<span class=\"token punctuation\">:</span> <span class=\"token string\">'/'</span><span class=\"token punctuation\">,</span>\n              name<span class=\"token punctuation\">:</span> <span class=\"token string\">'home'</span><span class=\"token punctuation\">,</span>\n              component<span class=\"token punctuation\">:</span> Home<span class=\"token punctuation\">,</span>\n              meta<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n                keepAlive<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span> <span class=\"token comment\">// 需要被缓存</span>\n              <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n            <span class=\"token punctuation\">{</span>\n              path<span class=\"token punctuation\">:</span> <span class=\"token string\">'/:id'</span><span class=\"token punctuation\">,</span>\n              name<span class=\"token punctuation\">:</span> <span class=\"token string\">'edit'</span><span class=\"token punctuation\">,</span>\n              component<span class=\"token punctuation\">:</span> Edit<span class=\"token punctuation\">,</span>\n              meta<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n                keepAlive<span class=\"token punctuation\">:</span> <span class=\"token boolean\">false</span> <span class=\"token comment\">// 不需要被缓存</span>\n              <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n          <span class=\"token punctuation\">]</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br><span class=\"line-number\">11</span><br><span class=\"line-number\">12</span><br><span class=\"line-number\">13</span><br><span class=\"line-number\">14</span><br><span class=\"line-number\">15</span><br><span class=\"line-number\">16</span><br><span class=\"line-number\">17</span><br><span class=\"line-number\">18</span><br><span class=\"line-number\">19</span><br><span class=\"line-number\">20</span><br><span class=\"line-number\">21</span><br><span class=\"line-number\">22</span><br><span class=\"line-number\">23</span><br><span class=\"line-number\">24</span><br><span class=\"line-number\">25</span><br><span class=\"line-number\">26</span><br><span class=\"line-number\">27</span><br><span class=\"line-number\">28</span><br><span class=\"line-number\">29</span><br></div><!--beforeend--></div><!--afterend--><h4 id=\"vue2-1-0版本之后：\"><a class=\"header-anchor\" href=\"#vue2-1-0版本之后：\" aria-hidden=\"true\">#</a> Vue2.1.0版本之后：</h4>\n<p>使用路由元信息的方式，要多创建一个<code>router-view</code>标签，并且每个路由都要配置一个元信息，是可以实现我们想要的效果，但是过于繁琐了点。</p>\n<p>幸运的是在Vue2.1.0之后，Vue新增了两个属性配合<code>keep-alive</code>来有条件地缓存 路由/组件。</p>\n<p><strong>新增属性：</strong></p>\n<ul>\n<li><code>include</code>：匹配的 路由/组件 会被缓存</li>\n<li><code>exclude</code>：匹配的 路由/组件 不会被缓存</li>\n</ul>\n<p><code>include</code>和<code>exclude</code>支持三种方式来有条件的缓存路由：采用逗号分隔的字符串形式，正则形式，数组形式。</p>\n<p>正则和数组形式，必须采用<code>v-bind</code>形式来使用。</p>\n<p><strong>缓存组件的使用方式</strong>：</p>\n<!--beforebegin--><div class=\"language-html line-numbers-mode\"><!--afterbegin--><pre v-pre class=\"language-html\"><code>        <span class=\"token comment\">&lt;!-- 逗号分隔字符串 --></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>keep-alive</span> <span class=\"token attr-name\">include</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>a,b<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n          <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>component</span> <span class=\"token attr-name\">:is</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>view<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>component</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>keep-alive</span><span class=\"token punctuation\">></span></span>\n        \n        <span class=\"token comment\">&lt;!-- 正则表达式 (使用 `v-bind`) --></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>keep-alive</span> <span class=\"token attr-name\">:include</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>/a|b/<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n          <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>component</span> <span class=\"token attr-name\">:is</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>view<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>component</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>keep-alive</span><span class=\"token punctuation\">></span></span>\n        \n        <span class=\"token comment\">&lt;!-- 数组 (使用 `v-bind`) --></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>keep-alive</span> <span class=\"token attr-name\">:include</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>[<span class=\"token punctuation\">'</span>a<span class=\"token punctuation\">'</span>, <span class=\"token punctuation\">'</span>b<span class=\"token punctuation\">'</span>]<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n          <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>component</span> <span class=\"token attr-name\">:is</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>view<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>component</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>keep-alive</span><span class=\"token punctuation\">></span></span>\n</code></pre>\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br><span class=\"line-number\">11</span><br><span class=\"line-number\">12</span><br><span class=\"line-number\">13</span><br><span class=\"line-number\">14</span><br></div><!--beforeend--></div><!--afterend--><p><strong>但更多场景中，我们会使用<code>keep-alive</code>来缓存路由</strong>：</p>\n<!--beforebegin--><div class=\"language-html line-numbers-mode\"><!--afterbegin--><pre v-pre class=\"language-html\"><code>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>keep-alive</span> <span class=\"token attr-name\">include</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">'</span>a<span class=\"token punctuation\">'</span></span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>router-view</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>router-view</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>keep-alive</span><span class=\"token punctuation\">></span></span>\n</code></pre>\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br></div><!--beforeend--></div><!--afterend--><p><strong>匹配规则：</strong></p>\n<ol>\n<li><strong>首先匹配组件的name选项</strong>，如果<code>name</code>选项不可用。</li>\n<li>则匹配它的<strong>局部注册名称</strong>。 (父组件 <code>components</code> 选项的键值)</li>\n<li><strong>匿名组件，不可匹配</strong>。</li>\n</ol>\n<p>比如路由组件没有<code>name</code>选项，并且没有注册的组件名。</p>\n<ol start=\"4\">\n<li>只能匹配当前被包裹的组件，<strong>不能匹配更下面嵌套的子组件</strong>。</li>\n</ol>\n<p>比如用在路由上，只能匹配路由组件的<code>name</code>选项，不能匹配路由组件里面的嵌套组件的<code>name</code>选项。</p>\n<ol start=\"5\">\n<li>文档：<code>&lt;keep-alive&gt;</code><strong>不会在函数式组件中正常工作</strong>，因为它们没有缓存实例。</li>\n<li><strong><code>exclude</code>的优先级大于<code>include</code></strong></li>\n</ol>\n<p>也就是说：当<code>include</code>和<code>exclude</code>同时存在时，<code>exclude</code>生效，<code>include</code>不生效。</p>\n<!--beforebegin--><div class=\"language-html line-numbers-mode\"><!--afterbegin--><pre v-pre class=\"language-html\"><code>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>keep-alive</span> <span class=\"token attr-name\">include</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>a,b<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">exclude</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>a<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n        <span class=\"token comment\">&lt;!--只有a不被缓存--></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>router-view</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>router-view</span><span class=\"token punctuation\">></span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>keep-alive</span><span class=\"token punctuation\">></span></span>\n</code></pre>\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br></div><!--beforeend--></div><!--afterend--><p><strong>当组件被<code>exclude</code>匹配，该组件将不会被缓存，不会调用<code>activated</code> 和 <code>deactivated</code></strong>。</p>\n<hr>\n<h2 id=\"组件生命周期钩子：\"><a class=\"header-anchor\" href=\"#组件生命周期钩子：\" aria-hidden=\"true\">#</a> 组件生命周期钩子：</h2>\n<p>关于组件的生命周期，是时候放出这张图片了：</p>\n<p><img src=\"https://github.com/OBKoro1/articleImg_src/blob/master/juejin/164bbf610b61f3cd?raw=true\" alt=\"\"></p>\n<p>这张图片已经讲得很清楚了，很多人这部分也很清楚了，大部分生命周期并不会用到，这里提一下几点：</p>\n<ol>\n<li>\n<p><strong>ajax请求最好放在<code>created</code>里面</strong>，因为此时已经可以访问<code>this</code>了，请求到数据就可以直接放在<code>data</code>里面。</p>\n<p>这里也碰到过几次，面试官问：ajax请求应该放在哪个生命周期。</p>\n</li>\n<li>\n<p><strong>关于dom的操作要放在<code>mounted</code>里面</strong>，在<code>mounted</code>前面访问dom会是<code>undefined</code>。</p>\n</li>\n<li>\n<p>每次进入/离开组件都要做一些事情，用什么钩子：</p>\n</li>\n</ol>\n<ul>\n<li>\n<p>不缓存：</p>\n<p>进入的时候可以用<code>created</code>和<code>mounted</code>钩子，离开的时候用<code>beforeDestory</code>和<code>destroyed</code>钩子,<code>beforeDestory</code>可以访问<code>this</code>，<code>destroyed</code>不可以访问<code>this</code>。</p>\n</li>\n<li>\n<p>缓存了组件：</p>\n<p>缓存了组件之后，再次进入组件不会触发<code>beforeCreate</code>、<code>created</code> 、<code>beforeMount</code>、 <code>mounted</code>，<strong>如果你想每次进入组件都做一些事情的话，你可以放在<code>activated</code>进入缓存组件的钩子中</strong>。</p>\n<p>同理：离开缓存组件的时候，<code>beforeDestroy</code>和<code>destroyed</code>并不会触发，可以使用<code>deactivated</code>离开缓存组件的钩子来代替。</p>\n</li>\n</ul>\n<hr>\n<h2 id=\"触发钩子的完整顺序：\"><a class=\"header-anchor\" href=\"#触发钩子的完整顺序：\" aria-hidden=\"true\">#</a> 触发钩子的完整顺序：</h2>\n<p>将路由导航、<code>keep-alive</code>、和组件生命周期钩子结合起来的，触发顺序，假设是从a组件离开，第一次进入b组件：</p>\n<ol>\n<li><code>beforeRouteLeave</code>:路由组件的组件离开路由前钩子，可取消路由离开。</li>\n<li><code>beforeEach</code>: 路由全局前置守卫，可用于登录验证、全局路由loading等。</li>\n<li><code>beforeEnter</code>: 路由独享守卫</li>\n<li><code>beforeRouteEnter</code>: 路由组件的组件进入路由前钩子。</li>\n<li><code>beforeResolve</code>:<a href=\"https://router.vuejs.org/zh/guide/advanced/navigation-guards.html#%E5%85%A8%E5%B1%80%E8%A7%A3%E6%9E%90%E5%AE%88%E5%8D%AB\" target=\"_blank\" rel=\"noopener noreferrer\">路由全局解析守卫<OutboundLink/></a></li>\n<li><code>afterEach</code>:路由全局后置钩子</li>\n<li><code>beforeCreate</code>:组件生命周期，不能访问<code>this</code>。</li>\n<li><code>created</code>:组件生命周期，可以访问<code>this</code>，不能访问dom。</li>\n<li><code>beforeMount</code>:组件生命周期</li>\n<li><code>deactivated</code>: 离开缓存组件a，或者触发a的<code>beforeDestroy</code>和<code>destroyed</code>组件销毁钩子。</li>\n<li><code>mounted</code>:访问/操作dom。</li>\n<li><code>activated</code>:进入缓存组件，进入a的嵌套子组件(如果有的话)。</li>\n<li>执行beforeRouteEnter回调函数next。</li>\n</ol>\n<hr>\n<h2 id=\"小结\"><a class=\"header-anchor\" href=\"#小结\" aria-hidden=\"true\">#</a> 小结</h2>\n<p>Vue提供了很多钩子，但很多钩子我们几乎不会用到，只有清楚这些钩子函数的触发顺序以及背后的一些限制等，这样我们才能够正确的使用这些钩子，希望看了本文的同学，能对这些钩子有更加清晰的认识，使用起来更加得心应手。\n<!-- 特殊字符串：用于修改/删除markdown的结尾提示语-OBKoro1 --></p>\n<h3 id=\"点个star支持我一下\"><a class=\"header-anchor\" href=\"#点个star支持我一下\" aria-hidden=\"true\">#</a> 点个<a href=\"https://github.com/OBKoro1/web_accumulate\" target=\"_blank\" rel=\"noopener noreferrer\">Star<OutboundLink/></a>支持我一下~</h3>\n<!-- '特殊字符串：用于删除编译后的issue组件-OBKoro1 -->\n<!-- more -->\n<comment-comment/>\n</div>\n",null]}