{"remainingRequest":"/Users/koro/work/web_my/web_accumulate/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/koro/work/web_my/web_accumulate/node_modules/cache-loader/dist/cjs.js??ref--1-0!/Users/koro/work/web_my/web_accumulate/node_modules/vue-loader/lib/index.js??ref--1-1!/Users/koro/work/web_my/web_accumulate/node_modules/vuepress/lib/webpack/markdownLoader.js??ref--1-2!/Users/koro/work/web_my/web_accumulate/docs/accumulate/effect/退出页面发送请求.md?vue&type=template&id=53ce5012&","dependencies":[{"path":"/Users/koro/work/web_my/web_accumulate/docs/accumulate/effect/退出页面发送请求.md","mtime":1636107879469},{"path":"/Users/koro/work/web_my/web_accumulate/node_modules/cache-loader/dist/cjs.js","mtime":1557296864520},{"path":"/Users/koro/work/web_my/web_accumulate/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1557296867191},{"path":"/Users/koro/work/web_my/web_accumulate/node_modules/cache-loader/dist/cjs.js","mtime":1557296864520},{"path":"/Users/koro/work/web_my/web_accumulate/node_modules/vue-loader/lib/index.js","mtime":1557296867190},{"path":"/Users/koro/work/web_my/web_accumulate/node_modules/vuepress/lib/webpack/markdownLoader.js","mtime":1557296867284}],"contextDependencies":[],"result":["var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"content\"},[_vm._ssrNode(\"<h2 id=\\\"web-sendbeacon-刷新-关闭页面之前发送请求\\\"><a href=\\\"#web-sendbeacon-刷新-关闭页面之前发送请求\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> Web sendBeacon 刷新/关闭页面之前发送请求</h2> <h3 id=\\\"背景：\\\"><a href=\\\"#背景：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 背景：</h3> <p><strong>有一个任务非常耗时会消耗后台大量算力，所以在退出页面的时候，要求前端这边发送一个请求来杀死任务</strong>。</p> <p>一开始以为这个需求非常简单，就是在进入其他路由前，发送一下请求，杀死一下任务就好了。</p> <p>然而现实狠狠的打了我的脸，因为退出页面的场景不止切换路由~</p> <h3 id=\\\"退出页面场景：\\\"><a href=\\\"#退出页面场景：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 退出页面场景：</h3> <ol><li>还在本网站，跳到其他路由</li> <li><strong>刷新页面/关闭页面</strong>也需要发送请求来杀死任务</li></ol> <h3 id=\\\"还在本网站，跳到其他路由\\\"><a href=\\\"#还在本网站，跳到其他路由\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 还在本网站，跳到其他路由</h3> <p>这个比较简单，在<code>Vue</code>中可以通过路由离开的钩子<code>beforeRouteLeave</code>来实现：</p> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code> <span class=\\\"token function\\\">beforeRouteLeave</span><span class=\\\"token punctuation\\\">(</span>to<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">from</span><span class=\\\"token punctuation\\\">,</span> next<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>任务运行中<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token comment\\\">// 发送请求</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token keyword\\\">else</span><span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token function\\\">next</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token boolean\\\">true</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token comment\\\">// 用户离开</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n <span class=\\\"token punctuation\\\">}</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br><span class=\\\"line-number\\\">5</span><br><span class=\\\"line-number\\\">6</span><br><span class=\\\"line-number\\\">7</span><br></div></div><p><strong>刷新页面/关闭页面的情况：</strong></p> <p>然而在刷新页面的时候，<code>beforeRouteLeave</code>并不会执行，接着想到了下面这两个<code>API</code>.</p> <h2 id=\\\"beforeunload和unload\\\"><a href=\\\"#beforeunload和unload\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> <code>beforeunload</code>和<code>unload</code></h2> <h3 id=\\\"beforeunload-当浏览器窗口关闭或者刷新时触发\\\"><a href=\\\"#beforeunload-当浏览器窗口关闭或者刷新时触发\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> beforeunload 当浏览器窗口关闭或者刷新时触发:</h3> <p><strong>介绍</strong>：</p> <p>使用这个<code>API</code>可以阻止页面直接关闭，用户通过点击确定/取消按钮，来决定是否不关闭/刷新当前页面。</p> <p>在 chrome 下长这个样子，你们肯定都见过：</p> <p><img src=\\\"https://github.com/OBKoro1/articleImg_src/blob/master/weibo_img_move/005Y4rCogy1g0bvkiozjwj30bt04vglt.jpg?raw=true\\\" alt></p> <p><strong>如何使用</strong></p> <p>这个 API 的使用非常简单，只要在页面加载的时候监听一下此事件，在需要出现弹窗的时候<strong>return 一个可以转化为 true 的值</strong>,就可以了。</p> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token comment\\\">// 页面卸载之前</span>\\n<span class=\\\"token keyword\\\">let</span> killTask <span class=\\\"token operator\\\">=</span> <span class=\\\"token boolean\\\">false</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 是否杀死任务</span>\\nwindow<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function-variable function\\\">onbeforeunload</span> <span class=\\\"token operator\\\">=</span> e <span class=\\\"token operator\\\">=&gt;</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>任务运行 <span class=\\\"token operator\\\">&amp;&amp;</span> 对应页面<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    killTask <span class=\\\"token operator\\\">=</span> <span class=\\\"token boolean\\\">true</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">return</span> <span class=\\\"token string\\\">'您可能有数据没有保存'</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 在部分浏览器可以修改弹窗标题</span>\\n  <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">else</span> <span class=\\\"token punctuation\\\">{</span>\\n    killTask <span class=\\\"token operator\\\">=</span> <span class=\\\"token boolean\\\">false</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token comment\\\">// 没有return一个可以转化为true的值 就不会出现弹窗</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br><span class=\\\"line-number\\\">5</span><br><span class=\\\"line-number\\\">6</span><br><span class=\\\"line-number\\\">7</span><br><span class=\\\"line-number\\\">8</span><br><span class=\\\"line-number\\\">9</span><br><span class=\\\"line-number\\\">10</span><br><span class=\\\"line-number\\\">11</span><br></div></div><p><strong>出现此弹窗的浏览器行为</strong>：</p> <p>以下行为是基于 chorme：</p> <ol><li><p>焦点：你没有点击取消/确定之前，焦点会一直在此弹窗上</p></li> <li><p>你无法在出现弹窗的页面上执行任何操作</p></li> <li><p>在其他页面也只能执行简单的点击操作，弹窗还是存在页面中间，无法使用键盘，</p></li> <li><p>键盘：键盘被绑定在弹窗上，只能通过按键<code>Esc</code>、<code>Enter</code>来执行取消/确定操作</p></li> <li><p><strong>弹窗不是页面的 dom，是浏览器的行为</strong></p></li> <li><p><strong>用户取消/确定，没有回调 API，无法得知</strong></p></li></ol> <p><strong>弹窗标题</strong>：</p> <p>chrome 中刷新页面的标题：<code>重新加载此网站?</code></p> <p>chrome 中关闭页面的标题：<code>离开此网站?</code></p> <p>现在大部分浏览器都不允许修改弹窗的标题，这个是为了安全考虑，来保证用户不受到错误信息的误导，</p> <p><strong>迷茫</strong>：</p> <p>一开始我以为既然可以拦截到用户的刷新/关闭页面的操作，出现了上面那个弹窗，这个需求就已经做完了的时候。</p> <p>然后发现，<strong>浏览器竟然没有提供用户点击确定/取消刷新页面的回调</strong>。</p> <p>到这里我陷入了迷茫，盯着<code>beforeunload</code>这个 API 思考了起了人生的意义(其实是在发呆)，盯着盯着，从<code>beforeunload</code>的<code>before</code>我也就想到了<code>unload</code>这个 API。</p> <p>瞬间又燃起了斗志，何不试试这个<code>unload</code>？</p> <h3 id=\\\"unload当页面正在被卸载的时候触发该事件\\\"><a href=\\\"#unload当页面正在被卸载的时候触发该事件\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> <code>unload</code>当页面正在被卸载的时候触发该事件</h3> <p><strong>介绍</strong></p> <p>当页面正在被卸载的时候触发该事件，该事件不可取消，为不可逆操作。</p> <p><strong>使用</strong></p> <p>直接监听该事件就可以了。</p> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code>window<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function-variable function\\\">onunload</span> <span class=\\\"token operator\\\">=</span> e <span class=\\\"token operator\\\">=&gt;</span> <span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">}</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br></div></div><p><strong>结合需求</strong>:</p> <p><code>killTask</code>为<code>beforeunload</code>时定义的变量，每次进入回调，都会给<code>killTask</code>赋值，使用这个值就可以判断什么时候可以发送请求杀死任务。</p> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code>window<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function-variable function\\\">onunload</span> <span class=\\\"token operator\\\">=</span> e <span class=\\\"token operator\\\">=&gt;</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>killTask <span class=\\\"token operator\\\">&amp;&amp;</span> 对应页面<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token comment\\\">// 发送请求</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br><span class=\\\"line-number\\\">5</span><br></div></div><p>到这里大家肯定以为已经做出来了该需求，事实上，并没有！</p> <p><strong>无法发送异步请求</strong></p> <p>我使用的是<code>axios</code>来发送请求，请求发出去了，但是被取消了，服务器那边根本没有收到请求，如下。</p> <p><img src=\\\"https://github.com/OBKoro1/articleImg_src/blob/master/weibo_img_move/005Y4rCogy1g0bvl43w8gj31gd06n761.jpg?raw=true\\\" alt></p> <p>经过一顿分析:发现是<code>axios</code>请求是异步的问题，谷歌之后发现axios不支持同步的请求</p> \"),_vm._ssrNode(\"<p>\",\"</p>\",[_vm._ssrNode(\"<strong>\",\"</strong>\",[_vm._ssrNode(\"最后使用原生的\"),_vm._ssrNode(\"<a href=\\\"http://www.w3school.com.cn/xml/xml_http.asp\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">\",\"</a>\",[_vm._ssrNode(\"XMLHttpRequest\"),_c('OutboundLink')],2),_vm._ssrNode(\"对象\")],2),_vm._ssrNode(\"，让请求同步\")],2),_vm._ssrNode(\" <p><s>大功告成！</s> 实际上，上面才是我第一次要发的内容，而下面更好的解决方法！</p> <h2 id=\\\"缺陷与更好的建议：\\\"><a href=\\\"#缺陷与更好的建议：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 缺陷与更好的建议：</h2> \"),_vm._ssrNode(\"<p>\",\"</p>\",[_vm._ssrNode(\"当我把这篇文章发布在公众号上，被\"),_vm._ssrNode(\"<a href=\\\"https://mp.weixin.qq.com/s/3taWHBu0vxRXP7WDax5M-Q\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">\",\"</a>\",[_vm._ssrNode(\"奇舞周刊\"),_c('OutboundLink')],2),_vm._ssrNode(\"转载了，上面一些大佬给我提了一些建议。\")],2),_vm._ssrNode(\" <p>研究了一下，结果...好吧！我承认我是菜鸡。</p> <p>hey~ 不过这正是我写博客的收获之一，分享经验，收获知识！</p> <h3 id=\\\"性能缺陷：\\\"><a href=\\\"#性能缺陷：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 性能缺陷：</h3> <p>XHR同步请求会阻碍页面卸载，如果是刷新/跳转页面的话，<strong>页面重新展示速度会变慢，导致性能问题</strong>。</p> <p>毕竟<strong>向网络发送请求并获得响应可能会超级慢</strong>，有可能是用户网络环境比较差，又或者是服务器挂了，请求一直没返回回来...</p> <p>基于性能问题，大佬们推荐<strong>使用Beacon代替XHR</strong>，然后经过一番搜索...</p> <h3 id=\\\"beacon-api\\\"><a href=\\\"#beacon-api\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> Beacon API</h3> <ol><li><strong>Beacon API用于将少量数据通过post请求发送到服务器</strong>。</li> <li><strong><code>Beacon</code>是非阻塞请求，不需要响应</strong></li></ol> <h4 id=\\\"完美解决性能缺陷问题：\\\"><a href=\\\"#完美解决性能缺陷问题：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 完美解决性能缺陷问题：</h4> <ol><li><strong>浏览器将 <code>Beacon</code> 请求排队让它在空闲的时候执行并立即返回控制</strong></li> <li>它在<code>unload</code>状态下也可以异步发送，不阻塞页面刷新/跳转等操作。</li></ol> <p>所以**<code>Beacon</code>可以完美解决上面提到的因XHR同步请求阻塞而引起的性能缺陷问题**。</p> <h4 id=\\\"使用：navigator-sendbeacon\\\"><a href=\\\"#使用：navigator-sendbeacon\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 使用：<code>navigator.sendBeacon()</code></h4> <p><strong>完整API</strong>：</p> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">let</span> result <span class=\\\"token operator\\\">=</span> navigator<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">sendBeacon</span><span class=\\\"token punctuation\\\">(</span>url<span class=\\\"token punctuation\\\">,</span> data<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br></div></div><p><code>Beacon</code>是挂在<code>navigator</code>下面的，上面就是它的完整API。</p> <p><code>result</code>是一个布尔值，代表这次发送请求的结果:</p> <ul><li>如果浏览器接受并且把请求排队了则返回 tru</li> <li>如果在这个过程中出现了问题就返回 false</li></ul> <p><code>navigator.sendBeacon</code>接受两个参数：</p> <ol><li>url: 请求的 URL。请求是 POST 请求。</li> <li>data: 要发送的数据。 数据类型可以是：ArrayBufferView, Blob,  FormData，Sting。</li></ol> <p>来看一个用<code>FormData</code>来传递数据的栗子，你就懂了：</p> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token comment\\\">// 创建一个新的 FormData 并添加一个键值对</span>\\n<span class=\\\"token keyword\\\">let</span> data <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">FormData</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\ndata<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">append</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'hello'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'world'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">let</span> result <span class=\\\"token operator\\\">=</span> navigator<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">sendBeacon</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'./src'</span><span class=\\\"token punctuation\\\">,</span> data<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>result<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span> \\n  console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'请求成功排队 等待执行'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">else</span> <span class=\\\"token punctuation\\\">{</span>\\n  console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'失败'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br><span class=\\\"line-number\\\">5</span><br><span class=\\\"line-number\\\">6</span><br><span class=\\\"line-number\\\">7</span><br><span class=\\\"line-number\\\">8</span><br><span class=\\\"line-number\\\">9</span><br></div></div><h4 id=\\\"浏览器支持：\\\"><a href=\\\"#浏览器支持：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 浏览器支持：</h4> <p>浏览器支持：Edge：14+，Firefox：31+，Chrome：39+，Opera：26+，IE：不支持。</p> <p>虽然现在浏览器对<code>sendBeacon</code>的支持很好，我们对其做一下兼容性处理也是有必要的：</p> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>navigator<span class=\\\"token punctuation\\\">.</span>sendBeacon<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token comment\\\">// Beacon 代码</span>\\n<span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">else</span> <span class=\\\"token punctuation\\\">{</span>\\n <span class=\\\"token comment\\\">// 回退到 XHR同步请求或者不做处理</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br><span class=\\\"line-number\\\">5</span><br></div></div><h4 id=\\\"web-wroker中使用beacon\\\"><a href=\\\"#web-wroker中使用beacon\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> web wroker中使用Beacon</h4> <p>因为<code>Beacon</code>是挂在<code>navigator</code>下面，而web worker也有<code>navigator</code>，去找了一下，真的给我找到了。</p> \"),_vm._ssrNode(\"<p>\",\"</p>\",[_vm._ssrNode(\"这儿有一个MDN提供的\"),_vm._ssrNode(\"<a href=\\\"https://developer.mozilla.org/en-US/docs/Web/API/Beacon_API/Using_the_Beacon_API#WorkerNavigator.sendBeacon()\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">\",\"</a>\",[_vm._ssrNode(\"栗子\"),_c('OutboundLink')],2),_vm._ssrNode(\"，可以点进去看一下。\")],2),_vm._ssrNode(\" \"),_vm._ssrNode(\"<p>\",\"</p>\",[_vm._ssrNode(\"PS：对web worker不熟悉的同学可以看我这篇\"),_vm._ssrNode(\"<a href=\\\"https://juejin.im/post/5bf8fa045188252f170e0dcb\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">\",\"</a>\",[_vm._ssrNode(\"文章\"),_c('OutboundLink')],2)],2),_vm._ssrNode(\" <h4 id=\\\"beacon其他相关\\\"><a href=\\\"#beacon其他相关\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> Beacon其他相关</h4> <ul><li><strong>客户端优化：可以将 Beacon 请求合并到其他请求上，一同处理</strong>, 尤其在移动环境下。</li> <li><strong>Beacon更多的情况是用于做前端埋点，监控用户活动</strong>，它的初衷也基于此。</li></ul> <h2 id=\\\"小结\\\"><a href=\\\"#小结\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 小结</h2> <p>本文总共讲了三个API，<code>beforeunload</code>、<code>unload</code>和<code>Beacon</code>，<code>Beacon</code>这个API估计知道的人比较少，以后遇到前端埋点和页面卸载前发送请求的需求，记得使用这三个API。</p> <p>以上2019.02.19</p> \"),_vm._ssrNode(\"<p>\",\"</p>\",[_vm._ssrNode(\"<a href=\\\"http://obkoro1.com/\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">\",\"</a>\",[_vm._ssrNode(\"博客\"),_c('OutboundLink')],2),_vm._ssrNode(\"、\"),_vm._ssrNode(\"<a href=\\\"http://obkoro1.com/web_accumulate/accumulate/\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">\",\"</a>\",[_vm._ssrNode(\"前端积累文档\"),_c('OutboundLink')],2),_vm._ssrNode(\"、\"),_vm._ssrNode(\"<a href=\\\"https://github.com/OBKoro1/articleImg_src/blob/master/juejin/1631b6f52f7e7015.jpeg?raw=true\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">\",\"</a>\",[_vm._ssrNode(\"公众号\"),_c('OutboundLink')],2),_vm._ssrNode(\"、\"),_vm._ssrNode(\"<a href=\\\"https://github.com/OBKoro1\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">\",\"</a>\",[_vm._ssrNode(\"GitHub\"),_c('OutboundLink')],2)],2),_vm._ssrNode(\" <p>参考资料：</p> \"),_vm._ssrNode(\"<p>\",\"</p>\",[_vm._ssrNode(\"<a href=\\\"https://developer.mozilla.org/en-US/docs/Web/API/Beacon_API/Using_the_Beacon_API\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">\",\"</a>\",[_vm._ssrNode(\"MDN\"),_c('OutboundLink')],2)]),_vm._ssrNode(\" \"),_vm._ssrNode(\"<p>\",\"</p>\",[_vm._ssrNode(\"<a href=\\\"https://www.barretlee.com/blog/2016/02/20/navigator-beacon-api/\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">\",\"</a>\",[_vm._ssrNode(\"页面跳转时，统计数据丢失问题探讨\"),_c('OutboundLink')],2)]),_vm._ssrNode(\" \"),_vm._ssrNode(\"<p>\",\"</p>\",[_vm._ssrNode(\"<a href=\\\"https://juejin.im/post/5b694b5de51d4519700fa56a#heading-4\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">\",\"</a>\",[_vm._ssrNode(\"使用 Web Beacon API 记录活动\"),_c('OutboundLink')],2)]),_vm._ssrNode(\" \"),_vm._ssrNode(\"<h3 id=\\\"点个star支持我一下\\\">\",\"</h3>\",[_vm._ssrNode(\"<a href=\\\"#点个star支持我一下\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 点个\"),_vm._ssrNode(\"<a href=\\\"https://github.com/OBKoro1/web_accumulate\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">\",\"</a>\",[_vm._ssrNode(\"Star\"),_c('OutboundLink')],2),_vm._ssrNode(\"支持我一下~\")],2),_vm._ssrNode(\" \"),_c('comment-comment')],2)}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }"]}