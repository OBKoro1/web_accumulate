{"code":"!function(n){function s(s){for(var e,o,c=s[0],l=s[1],r=s[2],i=0,k=[];i<c.length;i++)o=c[i],p[o]&&k.push(p[o][0]),p[o]=0;for(e in l)Object.prototype.hasOwnProperty.call(l,e)&&(n[e]=l[e]);for(u&&u(s);k.length;)k.shift()();return t.push.apply(t,r||[]),a()}function a(){for(var n,s=0;s<t.length;s++){for(var a=t[s],e=!0,c=1;c<a.length;c++){var l=a[c];0!==p[l]&&(e=!1)}e&&(t.splice(s--,1),n=o(o.s=a[0]))}return n}var e={},p={1:0},t=[];function o(s){if(e[s])return e[s].exports;var a=e[s]={i:s,l:!1,exports:{}};return n[s].call(a.exports,a,a.exports,o),a.l=!0,a.exports}o.e=function(n){var s=[],a=p[n];if(0!==a)if(a)s.push(a[2]);else{var e=new Promise(function(s,e){a=p[n]=[s,e]});s.push(a[2]=e);var t,c=document.createElement(\"script\");c.charset=\"utf-8\",c.timeout=120,o.nc&&c.setAttribute(\"nonce\",o.nc),c.src=function(n){return o.p+\"assets/js/\"+({}[n]||n)+\".\"+{2:\"58d0c891\",3:\"ac2c2b1d\",4:\"2f37e018\",5:\"60f79bce\",6:\"2670a17d\",7:\"747aff56\",8:\"adafa51e\",9:\"99de4b41\",10:\"cd985d07\",11:\"abf105e3\",12:\"8d21d5c6\",13:\"b6a0a357\",14:\"c5f2d902\",15:\"def398e8\",16:\"1f2f4847\",17:\"2bfbc911\",18:\"0fc5ec78\",19:\"1f8c61a8\",20:\"3755aac3\",21:\"f2d317d0\",22:\"278bbb5d\",23:\"9be715bd\",24:\"14c7ee2c\",25:\"e34f9888\",26:\"f705d6c7\",27:\"3c53ec1c\",28:\"15659e27\",29:\"600f36e6\",30:\"8a6242ba\",31:\"1ddb2d15\",32:\"56c2c678\",33:\"68f1b15d\",34:\"679abd73\",35:\"8691591a\",36:\"f035c3f7\",37:\"218c37cb\",38:\"9296fb7b\",39:\"3cd6b644\",40:\"07528909\",41:\"8994432a\",42:\"236aa98d\",43:\"cc11de47\",44:\"92e5fc23\",45:\"9125e98d\",46:\"c5d8f669\",47:\"a5e1d2e7\",48:\"72943622\",49:\"a7379eae\",50:\"1d0bc7c4\",51:\"8a157df1\",52:\"a8c8591e\",53:\"d8ddf85d\",54:\"dbe72b83\",55:\"90073d2e\",56:\"61aa27e7\",57:\"52bc5d8a\",58:\"76bc3c84\",59:\"2845aa51\",60:\"ca302784\",61:\"ab55b492\",62:\"69f25ddc\",63:\"22a1f41d\",64:\"f461fa82\",65:\"f6666abd\",66:\"c2c07876\",67:\"13086b9d\",68:\"ee97f1c5\",69:\"e99eb895\",70:\"04d3e189\",71:\"adf0fdf8\",72:\"ecd295b1\",73:\"41c507ca\",74:\"e5b556aa\",75:\"ff226ea9\",76:\"ec316117\",77:\"55fb8981\",78:\"ea2abc45\",79:\"ccf4e48e\",80:\"0e7451b7\",81:\"c5b1e881\",82:\"06ab2132\",83:\"3c147b37\",84:\"ba7b631f\",85:\"823a803d\",86:\"d7d7a72e\",87:\"76f73878\",88:\"abdc4851\",89:\"59354961\",90:\"6405166e\",91:\"a34f1541\",92:\"59d1855e\",93:\"5f4c764f\",94:\"8a078966\",95:\"0f956969\",96:\"6848bf92\",97:\"eeb42a11\",98:\"a8608a4a\",99:\"885cd41b\",100:\"7f0d026a\",101:\"92afc659\",102:\"6540ddef\",103:\"f0b8d690\",104:\"818e2ba1\",105:\"dcec15f4\",106:\"eacc0482\",107:\"706d1368\",108:\"59e79713\",109:\"bb2855ff\",110:\"5aed508c\",111:\"741680dc\",112:\"116b95fa\",113:\"5421326e\",114:\"086f4d0d\",115:\"0d3f0130\",116:\"d05e83c5\",117:\"46478f91\",118:\"8c24edfb\",119:\"43bfe6ae\",120:\"b5bdc890\",121:\"16ebb318\",122:\"f84e5243\",123:\"675092a0\",124:\"3ba163a6\",125:\"44cf3a0e\",126:\"c28b8676\",127:\"179c0a23\",128:\"fabb41da\",129:\"eea9ec3c\",130:\"edecf318\",131:\"87b99b8a\",132:\"a3561e86\",133:\"bf080e38\",134:\"8734ee27\",135:\"1c8a26e9\",136:\"2e295cda\",137:\"c33bfa44\",138:\"57c5a598\",139:\"b05cf44a\",140:\"b99837ff\",141:\"40d9ff54\",142:\"1749a267\"}[n]+\".js\"}(n),t=function(s){c.onerror=c.onload=null,clearTimeout(l);var a=p[n];if(0!==a){if(a){var e=s&&(\"load\"===s.type?\"missing\":s.type),t=s&&s.target&&s.target.src,o=new Error(\"Loading chunk \"+n+\" failed.\\n(\"+e+\": \"+t+\")\");o.type=e,o.request=t,a[1](o)}p[n]=void 0}};var l=setTimeout(function(){t({type:\"timeout\",target:c})},12e4);c.onerror=c.onload=t,document.head.appendChild(c)}return Promise.all(s)},o.m=n,o.c=e,o.d=function(n,s,a){o.o(n,s)||Object.defineProperty(n,s,{enumerable:!0,get:a})},o.r=function(n){\"undefined\"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(n,Symbol.toStringTag,{value:\"Module\"}),Object.defineProperty(n,\"__esModule\",{value:!0})},o.t=function(n,s){if(1&s&&(n=o(n)),8&s)return n;if(4&s&&\"object\"==typeof n&&n&&n.__esModule)return n;var a=Object.create(null);if(o.r(a),Object.defineProperty(a,\"default\",{enumerable:!0,value:n}),2&s&&\"string\"!=typeof n)for(var e in n)o.d(a,e,function(s){return n[s]}.bind(null,e));return a},o.n=function(n){var s=n&&n.__esModule?function(){return n.default}:function(){return n};return o.d(s,\"a\",s),s},o.o=function(n,s){return Object.prototype.hasOwnProperty.call(n,s)},o.p=\"/web_accumulate/\",o.oe=function(n){throw console.error(n),n};var c=window.webpackJsonp=window.webpackJsonp||[],l=c.push.bind(c);c.push=s,c=c.slice();for(var r=0;r<c.length;r++)s(c[r]);var u=l;t.push([97,0]),a()}([function(n,s,a){\"use strict\";function e(n,s,a,e,p,t,o,c){var l,r=\"function\"==typeof n?n.options:n;if(s&&(r.render=s,r.staticRenderFns=a,r._compiled=!0),e&&(r.functional=!0),t&&(r._scopeId=\"data-v-\"+t),o?(l=function(n){(n=n||this.$vnode&&this.$vnode.ssrContext||this.parent&&this.parent.$vnode&&this.parent.$vnode.ssrContext)||\"undefined\"==typeof __VUE_SSR_CONTEXT__||(n=__VUE_SSR_CONTEXT__),p&&p.call(this,n),n&&n._registeredComponents&&n._registeredComponents.add(o)},r._ssrRegister=l):p&&(l=c?function(){p.call(this,this.$root.$options.shadowRoot)}:p),l)if(r.functional){r._injectStyles=l;var u=r.render;r.render=function(n,s){return l.call(s),u(n,s)}}else{var i=r.beforeCreate;r.beforeCreate=i?[].concat(i,l):[l]}return{exports:n,options:r}}a.d(s,\"a\",function(){return e})},function(n,s,a){var e=a(74)(\"wks\"),p=a(27),t=a(3).Symbol,o=\"function\"==typeof t;(n.exports=function(n){return e[n]||(e[n]=o&&t[n]||(o?t:p)(\"Symbol.\"+n))}).store=e},function(n,s,a){var e=a(3),p=a(14),t=a(10),o=a(11),c=a(9),l=function(n,s,a){var r,u,i,k,d=n&l.F,b=n&l.G,m=n&l.S,h=n&l.P,f=n&l.B,g=b?e:m?e[s]||(e[s]={}):(e[s]||{}).prototype,v=b?p:p[s]||(p[s]={}),x=v.prototype||(v.prototype={});for(r in b&&(a=s),a)i=((u=!d&&g&&void 0!==g[r])?g:a)[r],k=f&&u?c(i,e):h&&\"function\"==typeof i?c(Function.call,i):i,g&&o(g,r,i,n&l.U),v[r]!=i&&t(v,r,k),h&&x[r]!=i&&(x[r]=i)};e.core=p,l.F=1,l.G=2,l.S=4,l.P=8,l.B=16,l.W=32,l.U=64,l.R=128,n.exports=l},function(n,s){var a=n.exports=\"undefined\"!=typeof window&&window.Math==Math?window:\"undefined\"!=typeof self&&self.Math==Math?self:Function(\"return this\")();\"number\"==typeof __g&&(__g=a)},function(n,s){n.exports=function(n){return\"object\"==typeof n?null!==n:\"function\"==typeof n}},function(n,s,a){var e=a(4);n.exports=function(n){if(!e(n))throw TypeError(n+\" is not an object!\");return n}},function(n,s){n.exports=function(n){try{return!!n()}catch(n){return!0}}},function(n,s,a){n.exports=!a(6)(function(){return 7!=Object.defineProperty({},\"a\",{get:function(){return 7}}).a})},function(n,s,a){var e=a(5),p=a(75),t=a(76),o=Object.defineProperty;s.f=a(7)?Object.defineProperty:function(n,s,a){if(e(n),s=t(s,!0),e(a),p)try{return o(n,s,a)}catch(n){}if(\"get\"in a||\"set\"in a)throw TypeError(\"Accessors not supported!\");return\"value\"in a&&(n[s]=a.value),n}},function(n,s,a){var e=a(26);n.exports=function(n,s,a){if(e(n),void 0===s)return n;switch(a){case 1:return function(a){return n.call(s,a)};case 2:return function(a,e){return n.call(s,a,e)};case 3:return function(a,e,p){return n.call(s,a,e,p)}}return function(){return n.apply(s,arguments)}}},function(n,s,a){var e=a(8),p=a(56);n.exports=a(7)?function(n,s,a){return e.f(n,s,p(1,a))}:function(n,s,a){return n[s]=a,n}},function(n,s,a){var e=a(3),p=a(10),t=a(15),o=a(27)(\"src\"),c=Function.toString,l=(\"\"+c).split(\"toString\");a(14).inspectSource=function(n){return c.call(n)},(n.exports=function(n,s,a,c){var r=\"function\"==typeof a;r&&(t(a,\"name\")||p(a,\"name\",s)),n[s]!==a&&(r&&(t(a,o)||p(a,o,n[s]?\"\"+n[s]:l.join(String(s)))),n===e?n[s]=a:c?n[s]?n[s]=a:p(n,s,a):(delete n[s],p(n,s,a)))})(Function.prototype,\"toString\",function(){return\"function\"==typeof this&&this[o]||c.call(this)})},function(n,s){n.exports=function(n){if(null==n)throw TypeError(\"Can't call method on  \"+n);return n}},function(n,s){var a={}.toString;n.exports=function(n){return a.call(n).slice(8,-1)}},function(n,s){var a=n.exports={version:\"2.6.1\"};\"number\"==typeof __e&&(__e=a)},function(n,s){var a={}.hasOwnProperty;n.exports=function(n,s){return a.call(n,s)}},function(n,s,a){var e=a(28),p=Math.min;n.exports=function(n){return n>0?p(e(n),9007199254740991):0}},function(n,s,a){for(var e=a(20),p=a(31),t=a(11),o=a(3),c=a(10),l=a(18),r=a(1),u=r(\"iterator\"),i=r(\"toStringTag\"),k=l.Array,d={CSSRuleList:!0,CSSStyleDeclaration:!1,CSSValueList:!1,ClientRectList:!1,DOMRectList:!1,DOMStringList:!1,DOMTokenList:!0,DataTransferItemList:!1,FileList:!1,HTMLAllCollection:!1,HTMLCollection:!1,HTMLFormElement:!1,HTMLSelectElement:!1,MediaList:!0,MimeTypeArray:!1,NamedNodeMap:!1,NodeList:!0,PaintRequestList:!1,Plugin:!1,PluginArray:!1,SVGLengthList:!1,SVGNumberList:!1,SVGPathSegList:!1,SVGPointList:!1,SVGStringList:!1,SVGTransformList:!1,SourceBufferList:!1,StyleSheetList:!0,TextTrackCueList:!1,TextTrackList:!1,TouchList:!1},b=p(d),m=0;m<b.length;m++){var h,f=b[m],g=d[f],v=o[f],x=v&&v.prototype;if(x&&(x[u]||c(x,u,k),x[i]||c(x,i,f),l[f]=k,g))for(h in e)x[h]||t(x,h,e[h],!0)}},function(n,s){n.exports={}},function(n,s,a){var e=a(12);n.exports=function(n){return Object(e(n))}},function(n,s,a){\"use strict\";var e=a(94),p=a(85),t=a(18),o=a(32);n.exports=a(65)(Array,\"Array\",function(n,s){this._t=o(n),this._i=0,this._k=s},function(){var n=this._t,s=this._k,a=this._i++;return!n||a>=n.length?(this._t=void 0,p(1)):p(0,\"keys\"==s?a:\"values\"==s?n[a]:[a,n[a]])},\"values\"),t.Arguments=t.Array,e(\"keys\"),e(\"values\"),e(\"entries\")},function(n,s,a){\"use strict\";var e=a(6);n.exports=function(n,s){return!!n&&e(function(){s?n.call(null,function(){},1):n.call(null)})}},function(n,s,a){\"use strict\";var e=a(2),p=a(35)(3);e(e.P+e.F*!a(21)([].some,!0),\"Array\",{some:function(n){return p(this,n,arguments[1])}})},function(n,s,a){\"use strict\";var e=a(2),p=a(35)(2);e(e.P+e.F*!a(21)([].filter,!0),\"Array\",{filter:function(n){return p(this,n,arguments[1])}})},function(n,s,a){\"use strict\";var e=a(2),p=a(35)(1);e(e.P+e.F*!a(21)([].map,!0),\"Array\",{map:function(n){return p(this,n,arguments[1])}})},function(n,s,a){\"use strict\";var e=a(5),p=a(19),t=a(16),o=a(28),c=a(67),l=a(68),r=Math.max,u=Math.min,i=Math.floor,k=/\\$([$&`']|\\d\\d?|<[^>]*>)/g,d=/\\$([$&`']|\\d\\d?)/g;a(70)(\"replace\",2,function(n,s,a,b){return[function(e,p){var t=n(this),o=null==e?void 0:e[s];return void 0!==o?o.call(e,t,p):a.call(String(t),e,p)},function(n,s){var p=b(a,n,this,s);if(p.done)return p.value;var i=e(n),k=String(this),d=\"function\"==typeof s;d||(s=String(s));var h=i.global;if(h){var f=i.unicode;i.lastIndex=0}for(var g=[];;){var v=l(i,k);if(null===v)break;if(g.push(v),!h)break;\"\"===String(v[0])&&(i.lastIndex=c(k,t(i.lastIndex),f))}for(var x,y=\"\",w=0,E=0;E<g.length;E++){v=g[E];for(var B=String(v[0]),_=r(u(o(v.index),k.length),0),j=[],A=1;A<v.length;A++)j.push(void 0===(x=v[A])?x:String(x));var O=v.groups;if(d){var S=[B].concat(j,_,k);void 0!==O&&S.push(O);var C=String(s.apply(void 0,S))}else C=m(B,k,_,j,O,s);_>=w&&(y+=k.slice(w,_)+C,w=_+B.length)}return y+k.slice(w)}];function m(n,s,e,t,o,c){var l=e+n.length,r=t.length,u=d;return void 0!==o&&(o=p(o),u=k),a.call(c,u,function(a,p){var c;switch(p.charAt(0)){case\"$\":return\"$\";case\"&\":return n;case\"`\":return s.slice(0,e);case\"'\":return s.slice(l);case\"<\":c=o[p.slice(1,-1)];break;default:var u=+p;if(0===u)return p;if(u>r){var k=i(u/10);return 0===k?p:k<=r?void 0===t[k-1]?p.charAt(1):t[k-1]+p.charAt(1):p}c=t[u-1]}return void 0===c?\"\":c})}})},function(n,s){n.exports=function(n){if(\"function\"!=typeof n)throw TypeError(n+\" is not a function!\");return n}},function(n,s){var a=0,e=Math.random();n.exports=function(n){return\"Symbol(\".concat(void 0===n?\"\":n,\")_\",(++a+e).toString(36))}},function(n,s){var a=Math.ceil,e=Math.floor;n.exports=function(n){return isNaN(n=+n)?0:(n>0?e:a)(n)}},function(n,s,a){var e=a(8).f,p=a(15),t=a(1)(\"toStringTag\");n.exports=function(n,s,a){n&&!p(n=a?n:n.prototype,t)&&e(n,t,{configurable:!0,value:s})}},function(n,s,a){var e=a(2);e(e.S+e.F,\"Object\",{assign:a(106)})},function(n,s,a){var e=a(82),p=a(63);n.exports=Object.keys||function(n){return e(n,p)}},function(n,s,a){var e=a(61),p=a(12);n.exports=function(n){return e(p(n))}},function(n,s,a){var e=a(19),p=a(31);a(84)(\"keys\",function(){return function(n){return p(e(n))}})},function(n,s,a){\"use strict\";var e=a(2),p=a(35)(0),t=a(21)([].forEach,!0);e(e.P+e.F*!t,\"Array\",{forEach:function(n){return p(this,n,arguments[1])}})},function(n,s,a){var e=a(9),p=a(61),t=a(19),o=a(16),c=a(113);n.exports=function(n,s){var a=1==n,l=2==n,r=3==n,u=4==n,i=6==n,k=5==n||i,d=s||c;return function(s,c,b){for(var m,h,f=t(s),g=p(f),v=e(c,b,3),x=o(g.length),y=0,w=a?d(s,x):l?d(s,0):void 0;x>y;y++)if((k||y in g)&&(h=v(m=g[y],y,f),n))if(a)w[y]=h;else if(h)switch(n){case 3:return!0;case 5:return m;case 6:return y;case 2:w.push(m)}else if(u)return!1;return i?-1:r||u?u:w}}},function(n,s,a){},function(n,s,a){},function(n,s,a){},function(n,s,a){},function(n,s,a){},function(n,s,a){},function(n,s,a){},function(n,s,a){},function(n,s,a){},function(n,s,a){},function(n,s,a){},function(n,s,a){},function(n,s,a){},function(n,s,a){},function(n,s,a){},function(n,s,a){var e,p;\n/* NProgress, (c) 2013, 2014 Rico Sta. Cruz - http://ricostacruz.com/nprogress\n * @license MIT */void 0===(p=\"function\"==typeof(e=function(){var n,s,a={version:\"0.2.0\"},e=a.settings={minimum:.08,easing:\"ease\",positionUsing:\"\",speed:200,trickle:!0,trickleRate:.02,trickleSpeed:800,showSpinner:!0,barSelector:'[role=\"bar\"]',spinnerSelector:'[role=\"spinner\"]',parent:\"body\",template:'<div class=\"bar\" role=\"bar\"><div class=\"peg\"></div></div><div class=\"spinner\" role=\"spinner\"><div class=\"spinner-icon\"></div></div>'};function p(n,s,a){return n<s?s:n>a?a:n}function t(n){return 100*(-1+n)}a.configure=function(n){var s,a;for(s in n)void 0!==(a=n[s])&&n.hasOwnProperty(s)&&(e[s]=a);return this},a.status=null,a.set=function(n){var s=a.isStarted();n=p(n,e.minimum,1),a.status=1===n?null:n;var l=a.render(!s),r=l.querySelector(e.barSelector),u=e.speed,i=e.easing;return l.offsetWidth,o(function(s){\"\"===e.positionUsing&&(e.positionUsing=a.getPositioningCSS()),c(r,function(n,s,a){var p;return(p=\"translate3d\"===e.positionUsing?{transform:\"translate3d(\"+t(n)+\"%,0,0)\"}:\"translate\"===e.positionUsing?{transform:\"translate(\"+t(n)+\"%,0)\"}:{\"margin-left\":t(n)+\"%\"}).transition=\"all \"+s+\"ms \"+a,p}(n,u,i)),1===n?(c(l,{transition:\"none\",opacity:1}),l.offsetWidth,setTimeout(function(){c(l,{transition:\"all \"+u+\"ms linear\",opacity:0}),setTimeout(function(){a.remove(),s()},u)},u)):setTimeout(s,u)}),this},a.isStarted=function(){return\"number\"==typeof a.status},a.start=function(){a.status||a.set(0);var n=function(){setTimeout(function(){a.status&&(a.trickle(),n())},e.trickleSpeed)};return e.trickle&&n(),this},a.done=function(n){return n||a.status?a.inc(.3+.5*Math.random()).set(1):this},a.inc=function(n){var s=a.status;return s?(\"number\"!=typeof n&&(n=(1-s)*p(Math.random()*s,.1,.95)),s=p(s+n,0,.994),a.set(s)):a.start()},a.trickle=function(){return a.inc(Math.random()*e.trickleRate)},n=0,s=0,a.promise=function(e){return e&&\"resolved\"!==e.state()?(0===s&&a.start(),n++,s++,e.always(function(){0==--s?(n=0,a.done()):a.set((n-s)/n)}),this):this},a.render=function(n){if(a.isRendered())return document.getElementById(\"nprogress\");r(document.documentElement,\"nprogress-busy\");var s=document.createElement(\"div\");s.id=\"nprogress\",s.innerHTML=e.template;var p,o=s.querySelector(e.barSelector),l=n?\"-100\":t(a.status||0),u=document.querySelector(e.parent);return c(o,{transition:\"all 0 linear\",transform:\"translate3d(\"+l+\"%,0,0)\"}),e.showSpinner||(p=s.querySelector(e.spinnerSelector))&&k(p),u!=document.body&&r(u,\"nprogress-custom-parent\"),u.appendChild(s),s},a.remove=function(){u(document.documentElement,\"nprogress-busy\"),u(document.querySelector(e.parent),\"nprogress-custom-parent\");var n=document.getElementById(\"nprogress\");n&&k(n)},a.isRendered=function(){return!!document.getElementById(\"nprogress\")},a.getPositioningCSS=function(){var n=document.body.style,s=\"WebkitTransform\"in n?\"Webkit\":\"MozTransform\"in n?\"Moz\":\"msTransform\"in n?\"ms\":\"OTransform\"in n?\"O\":\"\";return s+\"Perspective\"in n?\"translate3d\":s+\"Transform\"in n?\"translate\":\"margin\"};var o=function(){var n=[];function s(){var a=n.shift();a&&a(s)}return function(a){n.push(a),1==n.length&&s()}}(),c=function(){var n=[\"Webkit\",\"O\",\"Moz\",\"ms\"],s={};function a(a){return a=a.replace(/^-ms-/,\"ms-\").replace(/-([\\da-z])/gi,function(n,s){return s.toUpperCase()}),s[a]||(s[a]=function(s){var a=document.body.style;if(s in a)return s;for(var e,p=n.length,t=s.charAt(0).toUpperCase()+s.slice(1);p--;)if((e=n[p]+t)in a)return e;return s}(a))}function e(n,s,e){s=a(s),n.style[s]=e}return function(n,s){var a,p,t=arguments;if(2==t.length)for(a in s)void 0!==(p=s[a])&&s.hasOwnProperty(a)&&e(n,a,p);else e(n,t[1],t[2])}}();function l(n,s){var a=\"string\"==typeof n?n:i(n);return a.indexOf(\" \"+s+\" \")>=0}function r(n,s){var a=i(n),e=a+s;l(a,s)||(n.className=e.substring(1))}function u(n,s){var a,e=i(n);l(n,s)&&(a=e.replace(\" \"+s+\" \",\" \"),n.className=a.substring(1,a.length-1))}function i(n){return(\" \"+(n.className||\"\")+\" \").replace(/\\s+/gi,\" \")}function k(n){n&&n.parentNode&&n.parentNode.removeChild(n)}return a})?e.call(s,a,s,n):e)||(n.exports=p)},function(n,s,a){\"use strict\";var e=a(2),p=a(71)(!1),t=[].indexOf,o=!!t&&1/[1].indexOf(1,-0)<0;e(e.P+e.F*(o||!a(21)(t)),\"Array\",{indexOf:function(n){return o?t.apply(this,arguments)||0:p(this,n,arguments[1])}})},function(n,s){n.exports=!1},function(n,s,a){var e=a(13),p=a(1)(\"toStringTag\"),t=\"Arguments\"==e(function(){return arguments}());n.exports=function(n){var s,a,o;return void 0===n?\"Undefined\":null===n?\"Null\":\"string\"==typeof(a=function(n,s){try{return n[s]}catch(n){}}(s=Object(n),p))?a:t?e(s):\"Object\"==(o=e(s))&&\"function\"==typeof s.callee?\"Arguments\":o}},function(n,s,a){var e=a(4),p=a(3).document,t=e(p)&&e(p.createElement);n.exports=function(n){return t?p.createElement(n):{}}},function(n,s){n.exports=function(n,s){return{enumerable:!(1&n),configurable:!(2&n),writable:!(4&n),value:s}}},function(n,s){n.exports=function(n,s,a,e){if(!(n instanceof s)||void 0!==e&&e in n)throw TypeError(a+\": incorrect invocation!\");return n}},function(n,s,a){var e=a(9),p=a(98),t=a(99),o=a(5),c=a(16),l=a(100),r={},u={};(s=n.exports=function(n,s,a,i,k){var d,b,m,h,f=k?function(){return n}:l(n),g=e(a,i,s?2:1),v=0;if(\"function\"!=typeof f)throw TypeError(n+\" is not iterable!\");if(t(f)){for(d=c(n.length);d>v;v++)if((h=s?g(o(b=n[v])[0],b[1]):g(n[v]))===r||h===u)return h}else for(m=f.call(n);!(b=m.next()).done;)if((h=p(m,g,b.value,s))===r||h===u)return h}).BREAK=r,s.RETURN=u},function(n,s,a){var e=a(11);n.exports=function(n,s,a){for(var p in s)e(n,p,s[p],a);return n}},function(n,s,a){\"use strict\";var e=a(3),p=a(8),t=a(7),o=a(1)(\"species\");n.exports=function(n){var s=e[n];t&&s&&!s[o]&&p.f(s,o,{configurable:!0,get:function(){return this}})}},function(n,s,a){var e=a(13);n.exports=Object(\"z\").propertyIsEnumerable(0)?Object:function(n){return\"String\"==e(n)?n.split(\"\"):Object(n)}},function(n,s,a){var e=a(74)(\"keys\"),p=a(27);n.exports=function(n){return e[n]||(e[n]=p(n))}},function(n,s){n.exports=\"constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf\".split(\",\")},function(n,s,a){var e=a(27)(\"meta\"),p=a(4),t=a(15),o=a(8).f,c=0,l=Object.isExtensible||function(){return!0},r=!a(6)(function(){return l(Object.preventExtensions({}))}),u=function(n){o(n,e,{value:{i:\"O\"+ ++c,w:{}}})},i=n.exports={KEY:e,NEED:!1,fastKey:function(n,s){if(!p(n))return\"symbol\"==typeof n?n:(\"string\"==typeof n?\"S\":\"P\")+n;if(!t(n,e)){if(!l(n))return\"F\";if(!s)return\"E\";u(n)}return n[e].i},getWeak:function(n,s){if(!t(n,e)){if(!l(n))return!0;if(!s)return!1;u(n)}return n[e].w},onFreeze:function(n){return r&&i.NEED&&l(n)&&!t(n,e)&&u(n),n}}},function(n,s,a){\"use strict\";var e=a(53),p=a(2),t=a(11),o=a(10),c=a(18),l=a(110),r=a(29),u=a(112),i=a(1)(\"iterator\"),k=!([].keys&&\"next\"in[].keys()),d=function(){return this};n.exports=function(n,s,a,b,m,h,f){l(a,s,b);var g,v,x,y=function(n){if(!k&&n in _)return _[n];switch(n){case\"keys\":case\"values\":return function(){return new a(this,n)}}return function(){return new a(this,n)}},w=s+\" Iterator\",E=\"values\"==m,B=!1,_=n.prototype,j=_[i]||_[\"@@iterator\"]||m&&_[m],A=j||y(m),O=m?E?y(\"entries\"):A:void 0,S=\"Array\"==s&&_.entries||j;if(S&&(x=u(S.call(new n)))!==Object.prototype&&x.next&&(r(x,w,!0),e||\"function\"==typeof x[i]||o(x,i,d)),E&&j&&\"values\"!==j.name&&(B=!0,A=function(){return j.call(this)}),e&&!f||!k&&!B&&_[i]||o(_,i,A),c[s]=A,c[w]=d,m)if(g={values:E?A:y(\"values\"),keys:h?A:y(\"keys\"),entries:O},f)for(v in g)v in _||t(_,v,g[v]);else p(p.P+p.F*(k||B),s,g);return g}},function(n,s,a){var e=a(8).f,p=Function.prototype,t=/^\\s*function ([^ (]*)/;\"name\"in p||a(7)&&e(p,\"name\",{configurable:!0,get:function(){try{return(\"\"+this).match(t)[1]}catch(n){return\"\"}}})},function(n,s,a){\"use strict\";var e=a(88)(!0);n.exports=function(n,s,a){return s+(a?e(n,s).length:1)}},function(n,s,a){\"use strict\";var e=a(54),p=RegExp.prototype.exec;n.exports=function(n,s){var a=n.exec;if(\"function\"==typeof a){var t=a.call(n,s);if(\"object\"!=typeof t)throw new TypeError(\"RegExp exec method returned something other than an Object or null\");return t}if(\"RegExp\"!==e(n))throw new TypeError(\"RegExp#exec called on incompatible receiver\");return p.call(n,s)}},function(n,s,a){\"use strict\";var e,p,t=a(89),o=RegExp.prototype.exec,c=String.prototype.replace,l=o,r=(e=/a/,p=/b*/g,o.call(e,\"a\"),o.call(p,\"a\"),0!==e.lastIndex||0!==p.lastIndex),u=void 0!==/()??/.exec(\"\")[1];(r||u)&&(l=function(n){var s,a,e,p,l=this;return u&&(a=new RegExp(\"^\"+l.source+\"$(?!\\\\s)\",t.call(l))),r&&(s=l.lastIndex),e=o.call(l,n),r&&e&&(l.lastIndex=l.global?e.index+e[0].length:s),u&&e&&e.length>1&&c.call(e[0],a,function(){for(p=1;p<arguments.length-2;p++)void 0===arguments[p]&&(e[p]=void 0)}),e}),n.exports=l},function(n,s,a){\"use strict\";a(118);var e=a(11),p=a(10),t=a(6),o=a(12),c=a(1),l=a(69),r=c(\"species\"),u=!t(function(){var n=/./;return n.exec=function(){var n=[];return n.groups={a:\"7\"},n},\"7\"!==\"\".replace(n,\"$<a>\")}),i=function(){var n=/(?:)/,s=n.exec;n.exec=function(){return s.apply(this,arguments)};var a=\"ab\".split(n);return 2===a.length&&\"a\"===a[0]&&\"b\"===a[1]}();n.exports=function(n,s,a){var k=c(n),d=!t(function(){var s={};return s[k]=function(){return 7},7!=\"\"[n](s)}),b=d?!t(function(){var s=!1,a=/a/;return a.exec=function(){return s=!0,null},\"split\"===n&&(a.constructor={},a.constructor[r]=function(){return a}),a[k](\"\"),!s}):void 0;if(!d||!b||\"replace\"===n&&!u||\"split\"===n&&!i){var m=/./[k],h=a(o,k,\"\"[n],function(n,s,a,e,p){return s.exec===l?d&&!p?{done:!0,value:m.call(s,a,e)}:{done:!0,value:n.call(a,s,e)}:{done:!1}}),f=h[0],g=h[1];e(String.prototype,n,f),p(RegExp.prototype,k,2==s?function(n,s){return g.call(n,this,s)}:function(n){return g.call(n,this)})}}},function(n,s,a){var e=a(32),p=a(16),t=a(107);n.exports=function(n){return function(s,a,o){var c,l=e(s),r=p(l.length),u=t(o,r);if(n&&a!=a){for(;r>u;)if((c=l[u++])!=c)return!0}else for(;r>u;u++)if((n||u in l)&&l[u]===a)return n||u||0;return!n&&-1}}},function(n,s,a){var e=a(4),p=a(13),t=a(1)(\"match\");n.exports=function(n){var s;return e(n)&&(void 0!==(s=n[t])?!!s:\"RegExp\"==p(n))}},function(n,s,a){\"use strict\";var e,p,t,o,c=a(53),l=a(3),r=a(9),u=a(54),i=a(2),k=a(4),d=a(26),b=a(57),m=a(58),h=a(77),f=a(78).set,g=a(102)(),v=a(80),x=a(103),y=a(104),w=a(105),E=l.TypeError,B=l.process,_=B&&B.versions,j=_&&_.v8||\"\",A=l.Promise,O=\"process\"==u(B),S=function(){},C=p=v.f,L=!!function(){try{var n=A.resolve(1),s=(n.constructor={})[a(1)(\"species\")]=function(n){n(S,S)};return(O||\"function\"==typeof PromiseRejectionEvent)&&n.then(S)instanceof s&&0!==j.indexOf(\"6.6\")&&-1===y.indexOf(\"Chrome/66\")}catch(n){}}(),K=function(n){var s;return!(!k(n)||\"function\"!=typeof(s=n.then))&&s},F=function(n,s){if(!n._n){n._n=!0;var a=n._c;g(function(){for(var e=n._v,p=1==n._s,t=0,o=function(s){var a,t,o,c=p?s.ok:s.fail,l=s.resolve,r=s.reject,u=s.domain;try{c?(p||(2==n._h&&P(n),n._h=1),!0===c?a=e:(u&&u.enter(),a=c(e),u&&(u.exit(),o=!0)),a===s.promise?r(E(\"Promise-chain cycle\")):(t=K(a))?t.call(a,l,r):l(a)):r(e)}catch(n){u&&!o&&u.exit(),r(n)}};a.length>t;)o(a[t++]);n._c=[],n._n=!1,s&&!n._h&&D(n)})}},D=function(n){f.call(l,function(){var s,a,e,p=n._v,t=I(n);if(t&&(s=x(function(){O?B.emit(\"unhandledRejection\",p,n):(a=l.onunhandledrejection)?a({promise:n,reason:p}):(e=l.console)&&e.error&&e.error(\"Unhandled promise rejection\",p)}),n._h=O||I(n)?2:1),n._a=void 0,t&&s.e)throw s.v})},I=function(n){return 1!==n._h&&0===(n._a||n._c).length},P=function(n){f.call(l,function(){var s;O?B.emit(\"rejectionHandled\",n):(s=l.onrejectionhandled)&&s({promise:n,reason:n._v})})},T=function(n){var s=this;s._d||(s._d=!0,(s=s._w||s)._v=n,s._s=2,s._a||(s._a=s._c.slice()),F(s,!0))},M=function(n){var s,a=this;if(!a._d){a._d=!0,a=a._w||a;try{if(a===n)throw E(\"Promise can't be resolved itself\");(s=K(n))?g(function(){var e={_w:a,_d:!1};try{s.call(n,r(M,e,1),r(T,e,1))}catch(n){T.call(e,n)}}):(a._v=n,a._s=1,F(a,!1))}catch(n){T.call({_w:a,_d:!1},n)}}};L||(A=function(n){b(this,A,\"Promise\",\"_h\"),d(n),e.call(this);try{n(r(M,this,1),r(T,this,1))}catch(n){T.call(this,n)}},(e=function(n){this._c=[],this._a=void 0,this._s=0,this._d=!1,this._v=void 0,this._h=0,this._n=!1}).prototype=a(59)(A.prototype,{then:function(n,s){var a=C(h(this,A));return a.ok=\"function\"!=typeof n||n,a.fail=\"function\"==typeof s&&s,a.domain=O?B.domain:void 0,this._c.push(a),this._a&&this._a.push(a),this._s&&F(this,!1),a.promise},catch:function(n){return this.then(void 0,n)}}),t=function(){var n=new e;this.promise=n,this.resolve=r(M,n,1),this.reject=r(T,n,1)},v.f=C=function(n){return n===A||n===o?new t(n):p(n)}),i(i.G+i.W+i.F*!L,{Promise:A}),a(29)(A,\"Promise\"),a(60)(\"Promise\"),o=a(14).Promise,i(i.S+i.F*!L,\"Promise\",{reject:function(n){var s=C(this);return(0,s.reject)(n),s.promise}}),i(i.S+i.F*(c||!L),\"Promise\",{resolve:function(n){return w(c&&this===o?A:this,n)}}),i(i.S+i.F*!(L&&a(81)(function(n){A.all(n).catch(S)})),\"Promise\",{all:function(n){var s=this,a=C(s),e=a.resolve,p=a.reject,t=x(function(){var a=[],t=0,o=1;m(n,!1,function(n){var c=t++,l=!1;a.push(void 0),o++,s.resolve(n).then(function(n){l||(l=!0,a[c]=n,--o||e(a))},p)}),--o||e(a)});return t.e&&p(t.v),a.promise},race:function(n){var s=this,a=C(s),e=a.reject,p=x(function(){m(n,!1,function(n){s.resolve(n).then(a.resolve,e)})});return p.e&&e(p.v),a.promise}})},function(n,s,a){var e=a(14),p=a(3),t=p[\"__core-js_shared__\"]||(p[\"__core-js_shared__\"]={});(n.exports=function(n,s){return t[n]||(t[n]=void 0!==s?s:{})})(\"versions\",[]).push({version:e.version,mode:a(53)?\"pure\":\"global\",copyright:\"© 2018 Denis Pushkarev (zloirock.ru)\"})},function(n,s,a){n.exports=!a(7)&&!a(6)(function(){return 7!=Object.defineProperty(a(55)(\"div\"),\"a\",{get:function(){return 7}}).a})},function(n,s,a){var e=a(4);n.exports=function(n,s){if(!e(n))return n;var a,p;if(s&&\"function\"==typeof(a=n.toString)&&!e(p=a.call(n)))return p;if(\"function\"==typeof(a=n.valueOf)&&!e(p=a.call(n)))return p;if(!s&&\"function\"==typeof(a=n.toString)&&!e(p=a.call(n)))return p;throw TypeError(\"Can't convert object to primitive value\")}},function(n,s,a){var e=a(5),p=a(26),t=a(1)(\"species\");n.exports=function(n,s){var a,o=e(n).constructor;return void 0===o||null==(a=e(o)[t])?s:p(a)}},function(n,s,a){var e,p,t,o=a(9),c=a(101),l=a(79),r=a(55),u=a(3),i=u.process,k=u.setImmediate,d=u.clearImmediate,b=u.MessageChannel,m=u.Dispatch,h=0,f={},g=function(){var n=+this;if(f.hasOwnProperty(n)){var s=f[n];delete f[n],s()}},v=function(n){g.call(n.data)};k&&d||(k=function(n){for(var s=[],a=1;arguments.length>a;)s.push(arguments[a++]);return f[++h]=function(){c(\"function\"==typeof n?n:Function(n),s)},e(h),h},d=function(n){delete f[n]},\"process\"==a(13)(i)?e=function(n){i.nextTick(o(g,n,1))}:m&&m.now?e=function(n){m.now(o(g,n,1))}:b?(t=(p=new b).port2,p.port1.onmessage=v,e=o(t.postMessage,t,1)):u.addEventListener&&\"function\"==typeof postMessage&&!u.importScripts?(e=function(n){u.postMessage(n+\"\",\"*\")},u.addEventListener(\"message\",v,!1)):e=\"onreadystatechange\"in r(\"script\")?function(n){l.appendChild(r(\"script\")).onreadystatechange=function(){l.removeChild(this),g.call(n)}}:function(n){setTimeout(o(g,n,1),0)}),n.exports={set:k,clear:d}},function(n,s,a){var e=a(3).document;n.exports=e&&e.documentElement},function(n,s,a){\"use strict\";var e=a(26);function p(n){var s,a;this.promise=new n(function(n,e){if(void 0!==s||void 0!==a)throw TypeError(\"Bad Promise constructor\");s=n,a=e}),this.resolve=e(s),this.reject=e(a)}n.exports.f=function(n){return new p(n)}},function(n,s,a){var e=a(1)(\"iterator\"),p=!1;try{var t=[7][e]();t.return=function(){p=!0},Array.from(t,function(){throw 2})}catch(n){}n.exports=function(n,s){if(!s&&!p)return!1;var a=!1;try{var t=[7],o=t[e]();o.next=function(){return{done:a=!0}},t[e]=function(){return o},n(t)}catch(n){}return a}},function(n,s,a){var e=a(15),p=a(32),t=a(71)(!1),o=a(62)(\"IE_PROTO\");n.exports=function(n,s){var a,c=p(n),l=0,r=[];for(a in c)a!=o&&e(c,a)&&r.push(a);for(;s.length>l;)e(c,a=s[l++])&&(~t(r,a)||r.push(a));return r}},function(n,s){s.f={}.propertyIsEnumerable},function(n,s,a){var e=a(2),p=a(14),t=a(6);n.exports=function(n,s){var a=(p.Object||{})[n]||Object[n],o={};o[n]=s(a),e(e.S+e.F*t(function(){a(1)}),\"Object\",o)}},function(n,s){n.exports=function(n,s){return{value:s,done:!!n}}},function(n,s,a){var e=a(5),p=a(111),t=a(63),o=a(62)(\"IE_PROTO\"),c=function(){},l=function(){var n,s=a(55)(\"iframe\"),e=t.length;for(s.style.display=\"none\",a(79).appendChild(s),s.src=\"javascript:\",(n=s.contentWindow.document).open(),n.write(\"<script>document.F=Object<\\/script>\"),n.close(),l=n.F;e--;)delete l.prototype[t[e]];return l()};n.exports=Object.create||function(n,s){var a;return null!==n?(c.prototype=e(n),a=new c,c.prototype=null,a[o]=n):a=l(),void 0===s?a:p(a,s)}},function(n,s,a){var e=a(13);n.exports=Array.isArray||function(n){return\"Array\"==e(n)}},function(n,s,a){var e=a(28),p=a(12);n.exports=function(n){return function(s,a){var t,o,c=String(p(s)),l=e(a),r=c.length;return l<0||l>=r?n?\"\":void 0:(t=c.charCodeAt(l))<55296||t>56319||l+1===r||(o=c.charCodeAt(l+1))<56320||o>57343?n?c.charAt(l):t:n?c.slice(l,l+2):o-56320+(t-55296<<10)+65536}}},function(n,s,a){\"use strict\";var e=a(5);n.exports=function(){var n=e(this),s=\"\";return n.global&&(s+=\"g\"),n.ignoreCase&&(s+=\"i\"),n.multiline&&(s+=\"m\"),n.unicode&&(s+=\"u\"),n.sticky&&(s+=\"y\"),s}},function(n,s,a){\"use strict\";var e=a(5),p=a(16),t=a(67),o=a(68);a(70)(\"match\",1,function(n,s,a,c){return[function(a){var e=n(this),p=null==a?void 0:a[s];return void 0!==p?p.call(a,e):new RegExp(a)[s](String(e))},function(n){var s=c(a,n,this);if(s.done)return s.value;var l=e(n),r=String(this);if(!l.global)return o(l,r);var u=l.unicode;l.lastIndex=0;for(var i,k=[],d=0;null!==(i=o(l,r));){var b=String(i[0]);k[d]=b,\"\"===b&&(l.lastIndex=t(r,p(l.lastIndex),u)),d++}return 0===d?null:k}]})},function(n,s,a){var e=a(4),p=a(128).set;n.exports=function(n,s,a){var t,o=s.constructor;return o!==a&&\"function\"==typeof o&&(t=o.prototype)!==a.prototype&&e(t)&&p&&p(n,t),n}},function(n,s,a){var e=a(4);n.exports=function(n,s){if(!e(n)||n._t!==s)throw TypeError(\"Incompatible receiver, \"+s+\" required!\");return n}},function(n,s){var a=\"Expected a function\",e=NaN,p=\"[object Symbol]\",t=/^\\s+|\\s+$/g,o=/^[-+]0x[0-9a-f]+$/i,c=/^0b[01]+$/i,l=/^0o[0-7]+$/i,r=parseInt,u=\"object\"==typeof global&&global&&global.Object===Object&&global,i=\"object\"==typeof self&&self&&self.Object===Object&&self,k=u||i||Function(\"return this\")(),d=Object.prototype.toString,b=Math.max,m=Math.min,h=function(){return k.Date.now()};function f(n,s,e){var p,t,o,c,l,r,u=0,i=!1,k=!1,d=!0;if(\"function\"!=typeof n)throw new TypeError(a);function f(s){var a=p,e=t;return p=t=void 0,u=s,c=n.apply(e,a)}function x(n){var a=n-r;return void 0===r||a>=s||a<0||k&&n-u>=o}function y(){var n=h();if(x(n))return w(n);l=setTimeout(y,function(n){var a=s-(n-r);return k?m(a,o-(n-u)):a}(n))}function w(n){return l=void 0,d&&p?f(n):(p=t=void 0,c)}function E(){var n=h(),a=x(n);if(p=arguments,t=this,r=n,a){if(void 0===l)return function(n){return u=n,l=setTimeout(y,s),i?f(n):c}(r);if(k)return l=setTimeout(y,s),f(r)}return void 0===l&&(l=setTimeout(y,s)),c}return s=v(s)||0,g(e)&&(i=!!e.leading,o=(k=\"maxWait\"in e)?b(v(e.maxWait)||0,s):o,d=\"trailing\"in e?!!e.trailing:d),E.cancel=function(){void 0!==l&&clearTimeout(l),u=0,p=r=t=l=void 0},E.flush=function(){return void 0===l?c:w(h())},E}function g(n){var s=typeof n;return!!n&&(\"object\"==s||\"function\"==s)}function v(n){if(\"number\"==typeof n)return n;if(function(n){return\"symbol\"==typeof n||function(n){return!!n&&\"object\"==typeof n}(n)&&d.call(n)==p}(n))return e;if(g(n)){var s=\"function\"==typeof n.valueOf?n.valueOf():n;n=g(s)?s+\"\":s}if(\"string\"!=typeof n)return 0===n?n:+n;n=n.replace(t,\"\");var a=c.test(n);return a||l.test(n)?r(n.slice(2),a?2:8):o.test(n)?e:+n}n.exports=function(n,s,e){var p=!0,t=!0;if(\"function\"!=typeof n)throw new TypeError(a);return g(e)&&(p=\"leading\"in e?!!e.leading:p,t=\"trailing\"in e?!!e.trailing:t),f(n,s,{leading:p,maxWait:s,trailing:t})}},function(n,s,a){var e=a(1)(\"unscopables\"),p=Array.prototype;null==p[e]&&a(10)(p,e,{}),n.exports=function(n){p[e][n]=!0}},function(n,s,a){\"use strict\";var e=a(72),p=a(5),t=a(77),o=a(67),c=a(16),l=a(68),r=a(69),u=Math.min,i=[].push,k=!!function(){try{return new RegExp(\"x\",\"y\")}catch(n){}}();a(70)(\"split\",2,function(n,s,a,d){var b;return b=\"c\"==\"abbc\".split(/(b)*/)[1]||4!=\"test\".split(/(?:)/,-1).length||2!=\"ab\".split(/(?:ab)*/).length||4!=\".\".split(/(.?)(.?)/).length||\".\".split(/()()/).length>1||\"\".split(/.?/).length?function(n,s){var p=String(this);if(void 0===n&&0===s)return[];if(!e(n))return a.call(p,n,s);for(var t,o,c,l=[],u=(n.ignoreCase?\"i\":\"\")+(n.multiline?\"m\":\"\")+(n.unicode?\"u\":\"\")+(n.sticky?\"y\":\"\"),k=0,d=void 0===s?4294967295:s>>>0,b=new RegExp(n.source,u+\"g\");(t=r.call(b,p))&&!((o=b.lastIndex)>k&&(l.push(p.slice(k,t.index)),t.length>1&&t.index<p.length&&i.apply(l,t.slice(1)),c=t[0].length,k=o,l.length>=d));)b.lastIndex===t.index&&b.lastIndex++;return k===p.length?!c&&b.test(\"\")||l.push(\"\"):l.push(p.slice(k)),l.length>d?l.slice(0,d):l}:\"0\".split(void 0,0).length?function(n,s){return void 0===n&&0===s?[]:a.call(this,n,s)}:a,[function(a,e){var p=n(this),t=null==a?void 0:a[s];return void 0!==t?t.call(a,p,e):b.call(String(p),a,e)},function(n,s){var e=d(b,n,this,s,b!==a);if(e.done)return e.value;var r=p(n),i=String(this),m=t(r,RegExp),h=r.unicode,f=(r.ignoreCase?\"i\":\"\")+(r.multiline?\"m\":\"\")+(r.unicode?\"u\":\"\")+(k?\"y\":\"g\"),g=new m(k?r:\"^(?:\"+r.source+\")\",f),v=void 0===s?4294967295:s>>>0;if(0===v)return[];if(0===i.length)return null===l(g,i)?[i]:[];for(var x=0,y=0,w=[];y<i.length;){g.lastIndex=k?y:0;var E,B=l(g,k?i:i.slice(y));if(null===B||(E=u(c(g.lastIndex+(k?0:y)),i.length))===x)y=o(i,y,h);else{if(w.push(i.slice(x,y)),w.length===v)return w;for(var _=1;_<=B.length-1;_++)if(w.push(B[_]),w.length===v)return w;y=x=E}}return w.push(i.slice(x)),w}]})},function(n,s,a){var e=a(3),p=a(91),t=a(8).f,o=a(130).f,c=a(72),l=a(89),r=e.RegExp,u=r,i=r.prototype,k=/a/g,d=/a/g,b=new r(k)!==k;if(a(7)&&(!b||a(6)(function(){return d[a(1)(\"match\")]=!1,r(k)!=k||r(d)==d||\"/a/i\"!=r(k,\"i\")}))){r=function(n,s){var a=this instanceof r,e=c(n),t=void 0===s;return!a&&e&&n.constructor===r&&t?n:p(b?new u(e&&!t?n.source:n,s):u((e=n instanceof r)?n.source:n,e&&t?l.call(n):s),a?this:i,r)};for(var m=function(n){n in r||t(r,n,{configurable:!0,get:function(){return u[n]},set:function(s){u[n]=s}})},h=o(u),f=0;h.length>f;)m(h[f++]);i.constructor=r,r.prototype=i,a(11)(e,\"RegExp\",r)}a(60)(\"RegExp\")},function(n,s,a){n.exports=a(160)},function(n,s,a){var e=a(5);n.exports=function(n,s,a,p){try{return p?s(e(a)[0],a[1]):s(a)}catch(s){var t=n.return;throw void 0!==t&&e(t.call(n)),s}}},function(n,s,a){var e=a(18),p=a(1)(\"iterator\"),t=Array.prototype;n.exports=function(n){return void 0!==n&&(e.Array===n||t[p]===n)}},function(n,s,a){var e=a(54),p=a(1)(\"iterator\"),t=a(18);n.exports=a(14).getIteratorMethod=function(n){if(null!=n)return n[p]||n[\"@@iterator\"]||t[e(n)]}},function(n,s){n.exports=function(n,s,a){var e=void 0===a;switch(s.length){case 0:return e?n():n.call(a);case 1:return e?n(s[0]):n.call(a,s[0]);case 2:return e?n(s[0],s[1]):n.call(a,s[0],s[1]);case 3:return e?n(s[0],s[1],s[2]):n.call(a,s[0],s[1],s[2]);case 4:return e?n(s[0],s[1],s[2],s[3]):n.call(a,s[0],s[1],s[2],s[3])}return n.apply(a,s)}},function(n,s,a){var e=a(3),p=a(78).set,t=e.MutationObserver||e.WebKitMutationObserver,o=e.process,c=e.Promise,l=\"process\"==a(13)(o);n.exports=function(){var n,s,a,r=function(){var e,p;for(l&&(e=o.domain)&&e.exit();n;){p=n.fn,n=n.next;try{p()}catch(e){throw n?a():s=void 0,e}}s=void 0,e&&e.enter()};if(l)a=function(){o.nextTick(r)};else if(!t||e.navigator&&e.navigator.standalone)if(c&&c.resolve){var u=c.resolve(void 0);a=function(){u.then(r)}}else a=function(){p.call(e,r)};else{var i=!0,k=document.createTextNode(\"\");new t(r).observe(k,{characterData:!0}),a=function(){k.data=i=!i}}return function(e){var p={fn:e,next:void 0};s&&(s.next=p),n||(n=p,a()),s=p}}},function(n,s){n.exports=function(n){try{return{e:!1,v:n()}}catch(n){return{e:!0,v:n}}}},function(n,s,a){var e=a(3).navigator;n.exports=e&&e.userAgent||\"\"},function(n,s,a){var e=a(5),p=a(4),t=a(80);n.exports=function(n,s){if(e(n),p(s)&&s.constructor===n)return s;var a=t.f(n);return(0,a.resolve)(s),a.promise}},function(n,s,a){\"use strict\";var e=a(31),p=a(108),t=a(83),o=a(19),c=a(61),l=Object.assign;n.exports=!l||a(6)(function(){var n={},s={},a=Symbol(),e=\"abcdefghijklmnopqrst\";return n[a]=7,e.split(\"\").forEach(function(n){s[n]=n}),7!=l({},n)[a]||Object.keys(l({},s)).join(\"\")!=e})?function(n,s){for(var a=o(n),l=arguments.length,r=1,u=p.f,i=t.f;l>r;)for(var k,d=c(arguments[r++]),b=u?e(d).concat(u(d)):e(d),m=b.length,h=0;m>h;)i.call(d,k=b[h++])&&(a[k]=d[k]);return a}:l},function(n,s,a){var e=a(28),p=Math.max,t=Math.min;n.exports=function(n,s){return(n=e(n))<0?p(n+s,0):t(n,s)}},function(n,s){s.f=Object.getOwnPropertySymbols},function(n,s,a){var e=a(4),p=a(64).onFreeze;a(84)(\"freeze\",function(n){return function(s){return n&&e(s)?n(p(s)):s}})},function(n,s,a){\"use strict\";var e=a(86),p=a(56),t=a(29),o={};a(10)(o,a(1)(\"iterator\"),function(){return this}),n.exports=function(n,s,a){n.prototype=e(o,{next:p(1,a)}),t(n,s+\" Iterator\")}},function(n,s,a){var e=a(8),p=a(5),t=a(31);n.exports=a(7)?Object.defineProperties:function(n,s){p(n);for(var a,o=t(s),c=o.length,l=0;c>l;)e.f(n,a=o[l++],s[a]);return n}},function(n,s,a){var e=a(15),p=a(19),t=a(62)(\"IE_PROTO\"),o=Object.prototype;n.exports=Object.getPrototypeOf||function(n){return n=p(n),e(n,t)?n[t]:\"function\"==typeof n.constructor&&n instanceof n.constructor?n.constructor.prototype:n instanceof Object?o:null}},function(n,s,a){var e=a(114);n.exports=function(n,s){return new(e(n))(s)}},function(n,s,a){var e=a(4),p=a(87),t=a(1)(\"species\");n.exports=function(n){var s;return p(n)&&(\"function\"!=typeof(s=n.constructor)||s!==Array&&!p(s.prototype)||(s=void 0),e(s)&&null===(s=s[t])&&(s=void 0)),void 0===s?Array:s}},function(n,s,a){\"use strict\";a(116)(\"link\",function(n){return function(s){return n(this,\"a\",\"href\",s)}})},function(n,s,a){var e=a(2),p=a(6),t=a(12),o=/\"/g,c=function(n,s,a,e){var p=String(t(n)),c=\"<\"+s;return\"\"!==a&&(c+=\" \"+a+'=\"'+String(e).replace(o,\"&quot;\")+'\"'),c+\">\"+p+\"</\"+s+\">\"};n.exports=function(n,s){var a={};a[n]=s(c),e(e.P+e.F*p(function(){var s=\"\"[n]('\"');return s!==s.toLowerCase()||s.split('\"').length>3}),\"String\",a)}},function(n,s,a){var e=a(2);e(e.S,\"Array\",{isArray:a(87)})},function(n,s,a){\"use strict\";var e=a(69);a(2)({target:\"RegExp\",proto:!0,forced:e!==/./.exec},{exec:e})},function(n,s,a){\"use strict\";var e=a(36);a.n(e).a},,function(n,s,a){\"use strict\";var e=a(37);a.n(e).a},,function(n,s,a){\"use strict\";a(124)(\"trim\",function(n){return function(){return n(this,3)}})},function(n,s,a){var e=a(2),p=a(12),t=a(6),o=a(125),c=\"[\"+o+\"]\",l=RegExp(\"^\"+c+c+\"*\"),r=RegExp(c+c+\"*$\"),u=function(n,s,a){var p={},c=t(function(){return!!o[n]()||\"​\"!=\"​\"[n]()}),l=p[n]=c?s(i):o[n];a&&(p[a]=l),e(e.P+e.F*c,\"String\",p)},i=u.trim=function(n,s){return n=String(p(n)),1&s&&(n=n.replace(l,\"\")),2&s&&(n=n.replace(r,\"\")),n};n.exports=u},function(n,s){n.exports=\"\\t\\n\\v\\f\\r   ᠎             　\\u2028\\u2029\\ufeff\"},function(n,s,a){\"use strict\";var e=a(38);a.n(e).a},,function(n,s,a){var e=a(4),p=a(5),t=function(n,s){if(p(n),!e(s)&&null!==s)throw TypeError(s+\": can't set as prototype!\")};n.exports={set:Object.setPrototypeOf||(\"__proto__\"in{}?function(n,s,e){try{(e=a(9)(Function.call,a(129).f(Object.prototype,\"__proto__\").set,2))(n,[]),s=!(n instanceof Array)}catch(n){s=!0}return function(n,a){return t(n,a),s?n.__proto__=a:e(n,a),n}}({},!1):void 0),check:t}},function(n,s,a){var e=a(83),p=a(56),t=a(32),o=a(76),c=a(15),l=a(75),r=Object.getOwnPropertyDescriptor;s.f=a(7)?r:function(n,s){if(n=t(n),s=o(s,!0),l)try{return r(n,s)}catch(n){}if(c(n,s))return p(!e.f.call(n,s),n[s])}},function(n,s,a){var e=a(82),p=a(63).concat(\"length\",\"prototype\");s.f=Object.getOwnPropertyNames||function(n){return e(n,p)}},function(n,s,a){\"use strict\";var e=a(39);a.n(e).a},,function(n,s,a){\"use strict\";var e=a(40);a.n(e).a},,function(n,s,a){\"use strict\";var e=a(41);a.n(e).a},,function(n,s,a){\"use strict\";var e=a(42);a.n(e).a},,function(n,s,a){\"use strict\";var e=a(43);a.n(e).a},,function(n,s,a){\"use strict\";var e=a(44);a.n(e).a},,function(n,s,a){\"use strict\";var e=a(45);a.n(e).a},,function(n,s,a){\"use strict\";var e=a(46);a.n(e).a},,function(n,s,a){\"use strict\";var e=a(47);a.n(e).a},,function(n,s,a){\"use strict\";var e=a(48);a.n(e).a},,function(n,s,a){\"use strict\";var e=a(49);a.n(e).a},,function(n,s,a){\"use strict\";var e=a(88)(!0);a(65)(String,\"String\",function(n){this._t=String(n),this._i=0},function(){var n,s=this._t,a=this._i;return a>=s.length?{value:void 0,done:!0}:(n=e(s,a),this._i+=n.length,{value:n,done:!1})})},function(n,s,a){\"use strict\";var e=a(155),p=a(92);n.exports=a(156)(\"Set\",function(n){return function(){return n(this,arguments.length>0?arguments[0]:void 0)}},{add:function(n){return e.def(p(this,\"Set\"),n=0===n?0:n,n)}},e)},function(n,s,a){\"use strict\";var e=a(8).f,p=a(86),t=a(59),o=a(9),c=a(57),l=a(58),r=a(65),u=a(85),i=a(60),k=a(7),d=a(64).fastKey,b=a(92),m=k?\"_s\":\"size\",h=function(n,s){var a,e=d(s);if(\"F\"!==e)return n._i[e];for(a=n._f;a;a=a.n)if(a.k==s)return a};n.exports={getConstructor:function(n,s,a,r){var u=n(function(n,e){c(n,u,s,\"_i\"),n._t=s,n._i=p(null),n._f=void 0,n._l=void 0,n[m]=0,null!=e&&l(e,a,n[r],n)});return t(u.prototype,{clear:function(){for(var n=b(this,s),a=n._i,e=n._f;e;e=e.n)e.r=!0,e.p&&(e.p=e.p.n=void 0),delete a[e.i];n._f=n._l=void 0,n[m]=0},delete:function(n){var a=b(this,s),e=h(a,n);if(e){var p=e.n,t=e.p;delete a._i[e.i],e.r=!0,t&&(t.n=p),p&&(p.p=t),a._f==e&&(a._f=p),a._l==e&&(a._l=t),a[m]--}return!!e},forEach:function(n){b(this,s);for(var a,e=o(n,arguments.length>1?arguments[1]:void 0,3);a=a?a.n:this._f;)for(e(a.v,a.k,this);a&&a.r;)a=a.p},has:function(n){return!!h(b(this,s),n)}}),k&&e(u.prototype,\"size\",{get:function(){return b(this,s)[m]}}),u},def:function(n,s,a){var e,p,t=h(n,s);return t?t.v=a:(n._l=t={i:p=d(s,!0),k:s,v:a,p:e=n._l,n:void 0,r:!1},n._f||(n._f=t),e&&(e.n=t),n[m]++,\"F\"!==p&&(n._i[p]=t)),n},getEntry:h,setStrong:function(n,s,a){r(n,s,function(n,a){this._t=b(n,s),this._k=a,this._l=void 0},function(){for(var n=this._k,s=this._l;s&&s.r;)s=s.p;return this._t&&(this._l=s=s?s.n:this._t._f)?u(0,\"keys\"==n?s.k:\"values\"==n?s.v:[s.k,s.v]):(this._t=void 0,u(1))},a?\"entries\":\"values\",!a,!0),i(s)}}},function(n,s,a){\"use strict\";var e=a(3),p=a(2),t=a(11),o=a(59),c=a(64),l=a(58),r=a(57),u=a(4),i=a(6),k=a(81),d=a(29),b=a(91);n.exports=function(n,s,a,m,h,f){var g=e[n],v=g,x=h?\"set\":\"add\",y=v&&v.prototype,w={},E=function(n){var s=y[n];t(y,n,\"delete\"==n?function(n){return!(f&&!u(n))&&s.call(this,0===n?0:n)}:\"has\"==n?function(n){return!(f&&!u(n))&&s.call(this,0===n?0:n)}:\"get\"==n?function(n){return f&&!u(n)?void 0:s.call(this,0===n?0:n)}:\"add\"==n?function(n){return s.call(this,0===n?0:n),this}:function(n,a){return s.call(this,0===n?0:n,a),this})};if(\"function\"==typeof v&&(f||y.forEach&&!i(function(){(new v).entries().next()}))){var B=new v,_=B[x](f?{}:-0,1)!=B,j=i(function(){B.has(1)}),A=k(function(n){new v(n)}),O=!f&&i(function(){for(var n=new v,s=5;s--;)n[x](s,s);return!n.has(-0)});A||((v=s(function(s,a){r(s,v,n);var e=b(new g,s,v);return null!=a&&l(a,h,e[x],e),e})).prototype=y,y.constructor=v),(j||O)&&(E(\"delete\"),E(\"has\"),h&&E(\"get\")),(O||_)&&E(x),f&&y.clear&&delete y.clear}else v=m.getConstructor(s,n,h,x),o(v.prototype,a),c.NEED=!0;return d(v,n),w[n]=v,p(p.G+p.W+p.F*(v!=g),w),f||m.setStrong(v,n,h),v}},function(n,s,a){\"use strict\";var e=a(50);a.n(e).a},,function(n,s,a){var e=a(2);e(e.S+e.F*!a(7),\"Object\",{defineProperty:a(8).f})},function(n,s,a){\"use strict\";a.r(s);a(73),a(30);var e=Object.freeze({});function p(n){return null==n}function t(n){return null!=n}function o(n){return!0===n}function c(n){return\"string\"==typeof n||\"number\"==typeof n||\"symbol\"==typeof n||\"boolean\"==typeof n}function l(n){return null!==n&&\"object\"==typeof n}var r=Object.prototype.toString;function u(n){return\"[object Object]\"===r.call(n)}function i(n){return\"[object RegExp]\"===r.call(n)}function k(n){var s=parseFloat(String(n));return s>=0&&Math.floor(s)===s&&isFinite(n)}function d(n){return null==n?\"\":\"object\"==typeof n?JSON.stringify(n,null,2):String(n)}function b(n){var s=parseFloat(n);return isNaN(s)?n:s}function m(n,s){for(var a=Object.create(null),e=n.split(\",\"),p=0;p<e.length;p++)a[e[p]]=!0;return s?function(n){return a[n.toLowerCase()]}:function(n){return a[n]}}m(\"slot,component\",!0);var h=m(\"key,ref,slot,slot-scope,is\");function f(n,s){if(n.length){var a=n.indexOf(s);if(a>-1)return n.splice(a,1)}}var g=Object.prototype.hasOwnProperty;function v(n,s){return g.call(n,s)}function x(n){var s=Object.create(null);return function(a){return s[a]||(s[a]=n(a))}}var y=/-(\\w)/g,w=x(function(n){return n.replace(y,function(n,s){return s?s.toUpperCase():\"\"})}),E=x(function(n){return n.charAt(0).toUpperCase()+n.slice(1)}),B=/\\B([A-Z])/g,_=x(function(n){return n.replace(B,\"-$1\").toLowerCase()});var j=Function.prototype.bind?function(n,s){return n.bind(s)}:function(n,s){function a(a){var e=arguments.length;return e?e>1?n.apply(s,arguments):n.call(s,a):n.call(s)}return a._length=n.length,a};function A(n,s){s=s||0;for(var a=n.length-s,e=new Array(a);a--;)e[a]=n[a+s];return e}function O(n,s){for(var a in s)n[a]=s[a];return n}function S(n){for(var s={},a=0;a<n.length;a++)n[a]&&O(s,n[a]);return s}function C(n,s,a){}var L=function(n,s,a){return!1},K=function(n){return n};function F(n,s){if(n===s)return!0;var a=l(n),e=l(s);if(!a||!e)return!a&&!e&&String(n)===String(s);try{var p=Array.isArray(n),t=Array.isArray(s);if(p&&t)return n.length===s.length&&n.every(function(n,a){return F(n,s[a])});if(n instanceof Date&&s instanceof Date)return n.getTime()===s.getTime();if(p||t)return!1;var o=Object.keys(n),c=Object.keys(s);return o.length===c.length&&o.every(function(a){return F(n[a],s[a])})}catch(n){return!1}}function D(n,s){for(var a=0;a<n.length;a++)if(F(n[a],s))return a;return-1}function I(n){var s=!1;return function(){s||(s=!0,n.apply(this,arguments))}}var P=\"data-server-rendered\",T=[\"component\",\"directive\",\"filter\"],M=[\"beforeCreate\",\"created\",\"beforeMount\",\"mounted\",\"beforeUpdate\",\"updated\",\"beforeDestroy\",\"destroyed\",\"activated\",\"deactivated\",\"errorCaptured\"],N={optionMergeStrategies:Object.create(null),silent:!1,productionTip:!1,devtools:!1,performance:!1,errorHandler:null,warnHandler:null,ignoredElements:[],keyCodes:Object.create(null),isReservedTag:L,isReservedAttr:L,isUnknownElement:L,getTagNamespace:C,parsePlatformTagName:K,mustUseProp:L,async:!0,_lifecycleHooks:M};function $(n,s,a,e){Object.defineProperty(n,s,{value:a,enumerable:!!e,writable:!0,configurable:!0})}var q=/[^\\w.$]/;var V,U=\"__proto__\"in{},R=\"undefined\"!=typeof window,H=\"undefined\"!=typeof WXEnvironment&&!!WXEnvironment.platform,W=H&&WXEnvironment.platform.toLowerCase(),z=R&&window.navigator.userAgent.toLowerCase(),J=z&&/msie|trident/.test(z),G=z&&z.indexOf(\"msie 9.0\")>0,X=z&&z.indexOf(\"edge/\")>0,Y=(z&&z.indexOf(\"android\"),z&&/iphone|ipad|ipod|ios/.test(z)||\"ios\"===W),Q=(z&&/chrome\\/\\d+/.test(z),{}.watch),Z=!1;if(R)try{var nn={};Object.defineProperty(nn,\"passive\",{get:function(){Z=!0}}),window.addEventListener(\"test-passive\",null,nn)}catch(n){}var sn=function(){return void 0===V&&(V=!R&&!H&&\"undefined\"!=typeof global&&(global.process&&\"server\"===global.process.env.VUE_ENV)),V},an=R&&window.__VUE_DEVTOOLS_GLOBAL_HOOK__;function en(n){return\"function\"==typeof n&&/native code/.test(n.toString())}var pn,tn=\"undefined\"!=typeof Symbol&&en(Symbol)&&\"undefined\"!=typeof Reflect&&en(Reflect.ownKeys);pn=\"undefined\"!=typeof Set&&en(Set)?Set:function(){function n(){this.set=Object.create(null)}return n.prototype.has=function(n){return!0===this.set[n]},n.prototype.add=function(n){this.set[n]=!0},n.prototype.clear=function(){this.set=Object.create(null)},n}();var on=C,cn=0,ln=function(){this.id=cn++,this.subs=[]};ln.prototype.addSub=function(n){this.subs.push(n)},ln.prototype.removeSub=function(n){f(this.subs,n)},ln.prototype.depend=function(){ln.target&&ln.target.addDep(this)},ln.prototype.notify=function(){var n=this.subs.slice();for(var s=0,a=n.length;s<a;s++)n[s].update()},ln.target=null;var rn=[];function un(n){rn.push(n),ln.target=n}function kn(){rn.pop(),ln.target=rn[rn.length-1]}var dn=function(n,s,a,e,p,t,o,c){this.tag=n,this.data=s,this.children=a,this.text=e,this.elm=p,this.ns=void 0,this.context=t,this.fnContext=void 0,this.fnOptions=void 0,this.fnScopeId=void 0,this.key=s&&s.key,this.componentOptions=o,this.componentInstance=void 0,this.parent=void 0,this.raw=!1,this.isStatic=!1,this.isRootInsert=!0,this.isComment=!1,this.isCloned=!1,this.isOnce=!1,this.asyncFactory=c,this.asyncMeta=void 0,this.isAsyncPlaceholder=!1},bn={child:{configurable:!0}};bn.child.get=function(){return this.componentInstance},Object.defineProperties(dn.prototype,bn);var mn=function(n){void 0===n&&(n=\"\");var s=new dn;return s.text=n,s.isComment=!0,s};function hn(n){return new dn(void 0,void 0,void 0,String(n))}function fn(n){var s=new dn(n.tag,n.data,n.children&&n.children.slice(),n.text,n.elm,n.context,n.componentOptions,n.asyncFactory);return s.ns=n.ns,s.isStatic=n.isStatic,s.key=n.key,s.isComment=n.isComment,s.fnContext=n.fnContext,s.fnOptions=n.fnOptions,s.fnScopeId=n.fnScopeId,s.asyncMeta=n.asyncMeta,s.isCloned=!0,s}var gn=Array.prototype,vn=Object.create(gn);[\"push\",\"pop\",\"shift\",\"unshift\",\"splice\",\"sort\",\"reverse\"].forEach(function(n){var s=gn[n];$(vn,n,function(){for(var a=[],e=arguments.length;e--;)a[e]=arguments[e];var p,t=s.apply(this,a),o=this.__ob__;switch(n){case\"push\":case\"unshift\":p=a;break;case\"splice\":p=a.slice(2)}return p&&o.observeArray(p),o.dep.notify(),t})});var xn=Object.getOwnPropertyNames(vn),yn=!0;function wn(n){yn=n}var En=function(n){var s;this.value=n,this.dep=new ln,this.vmCount=0,$(n,\"__ob__\",this),Array.isArray(n)?(U?(s=vn,n.__proto__=s):function(n,s,a){for(var e=0,p=a.length;e<p;e++){var t=a[e];$(n,t,s[t])}}(n,vn,xn),this.observeArray(n)):this.walk(n)};function Bn(n,s){var a;if(l(n)&&!(n instanceof dn))return v(n,\"__ob__\")&&n.__ob__ instanceof En?a=n.__ob__:yn&&!sn()&&(Array.isArray(n)||u(n))&&Object.isExtensible(n)&&!n._isVue&&(a=new En(n)),s&&a&&a.vmCount++,a}function _n(n,s,a,e,p){var t=new ln,o=Object.getOwnPropertyDescriptor(n,s);if(!o||!1!==o.configurable){var c=o&&o.get,l=o&&o.set;c&&!l||2!==arguments.length||(a=n[s]);var r=!p&&Bn(a);Object.defineProperty(n,s,{enumerable:!0,configurable:!0,get:function(){var s=c?c.call(n):a;return ln.target&&(t.depend(),r&&(r.dep.depend(),Array.isArray(s)&&function n(s){for(var a=void 0,e=0,p=s.length;e<p;e++)(a=s[e])&&a.__ob__&&a.__ob__.dep.depend(),Array.isArray(a)&&n(a)}(s))),s},set:function(s){var e=c?c.call(n):a;s===e||s!=s&&e!=e||c&&!l||(l?l.call(n,s):a=s,r=!p&&Bn(s),t.notify())}})}}function jn(n,s,a){if(Array.isArray(n)&&k(s))return n.length=Math.max(n.length,s),n.splice(s,1,a),a;if(s in n&&!(s in Object.prototype))return n[s]=a,a;var e=n.__ob__;return n._isVue||e&&e.vmCount?a:e?(_n(e.value,s,a),e.dep.notify(),a):(n[s]=a,a)}function An(n,s){if(Array.isArray(n)&&k(s))n.splice(s,1);else{var a=n.__ob__;n._isVue||a&&a.vmCount||v(n,s)&&(delete n[s],a&&a.dep.notify())}}En.prototype.walk=function(n){for(var s=Object.keys(n),a=0;a<s.length;a++)_n(n,s[a])},En.prototype.observeArray=function(n){for(var s=0,a=n.length;s<a;s++)Bn(n[s])};var On=N.optionMergeStrategies;function Sn(n,s){if(!s)return n;for(var a,e,p,t=Object.keys(s),o=0;o<t.length;o++)e=n[a=t[o]],p=s[a],v(n,a)?e!==p&&u(e)&&u(p)&&Sn(e,p):jn(n,a,p);return n}function Cn(n,s,a){return a?function(){var e=\"function\"==typeof s?s.call(a,a):s,p=\"function\"==typeof n?n.call(a,a):n;return e?Sn(e,p):p}:s?n?function(){return Sn(\"function\"==typeof s?s.call(this,this):s,\"function\"==typeof n?n.call(this,this):n)}:s:n}function Ln(n,s){return s?n?n.concat(s):Array.isArray(s)?s:[s]:n}function Kn(n,s,a,e){var p=Object.create(n||null);return s?O(p,s):p}On.data=function(n,s,a){return a?Cn(n,s,a):s&&\"function\"!=typeof s?n:Cn(n,s)},M.forEach(function(n){On[n]=Ln}),T.forEach(function(n){On[n+\"s\"]=Kn}),On.watch=function(n,s,a,e){if(n===Q&&(n=void 0),s===Q&&(s=void 0),!s)return Object.create(n||null);if(!n)return s;var p={};for(var t in O(p,n),s){var o=p[t],c=s[t];o&&!Array.isArray(o)&&(o=[o]),p[t]=o?o.concat(c):Array.isArray(c)?c:[c]}return p},On.props=On.methods=On.inject=On.computed=function(n,s,a,e){if(!n)return s;var p=Object.create(null);return O(p,n),s&&O(p,s),p},On.provide=Cn;var Fn=function(n,s){return void 0===s?n:s};function Dn(n,s,a){if(\"function\"==typeof s&&(s=s.options),function(n,s){var a=n.props;if(a){var e,p,t={};if(Array.isArray(a))for(e=a.length;e--;)\"string\"==typeof(p=a[e])&&(t[w(p)]={type:null});else if(u(a))for(var o in a)p=a[o],t[w(o)]=u(p)?p:{type:p};n.props=t}}(s),function(n,s){var a=n.inject;if(a){var e=n.inject={};if(Array.isArray(a))for(var p=0;p<a.length;p++)e[a[p]]={from:a[p]};else if(u(a))for(var t in a){var o=a[t];e[t]=u(o)?O({from:t},o):{from:o}}}}(s),function(n){var s=n.directives;if(s)for(var a in s){var e=s[a];\"function\"==typeof e&&(s[a]={bind:e,update:e})}}(s),!s._base&&(s.extends&&(n=Dn(n,s.extends,a)),s.mixins))for(var e=0,p=s.mixins.length;e<p;e++)n=Dn(n,s.mixins[e],a);var t,o={};for(t in n)c(t);for(t in s)v(n,t)||c(t);function c(e){var p=On[e]||Fn;o[e]=p(n[e],s[e],a,e)}return o}function In(n,s,a,e){if(\"string\"==typeof a){var p=n[s];if(v(p,a))return p[a];var t=w(a);if(v(p,t))return p[t];var o=E(t);return v(p,o)?p[o]:p[a]||p[t]||p[o]}}function Pn(n,s,a,e){var p=s[n],t=!v(a,n),o=a[n],c=Nn(Boolean,p.type);if(c>-1)if(t&&!v(p,\"default\"))o=!1;else if(\"\"===o||o===_(n)){var l=Nn(String,p.type);(l<0||c<l)&&(o=!0)}if(void 0===o){o=function(n,s,a){if(!v(s,\"default\"))return;var e=s.default;0;if(n&&n.$options.propsData&&void 0===n.$options.propsData[a]&&void 0!==n._props[a])return n._props[a];return\"function\"==typeof e&&\"Function\"!==Tn(s.type)?e.call(n):e}(e,p,n);var r=yn;wn(!0),Bn(o),wn(r)}return o}function Tn(n){var s=n&&n.toString().match(/^\\s*function (\\w+)/);return s?s[1]:\"\"}function Mn(n,s){return Tn(n)===Tn(s)}function Nn(n,s){if(!Array.isArray(s))return Mn(s,n)?0:-1;for(var a=0,e=s.length;a<e;a++)if(Mn(s[a],n))return a;return-1}function $n(n,s,a){if(s)for(var e=s;e=e.$parent;){var p=e.$options.errorCaptured;if(p)for(var t=0;t<p.length;t++)try{if(!1===p[t].call(e,n,s,a))return}catch(n){qn(n,e,\"errorCaptured hook\")}}qn(n,s,a)}function qn(n,s,a){if(N.errorHandler)try{return N.errorHandler.call(null,n,s,a)}catch(n){Vn(n,null,\"config.errorHandler\")}Vn(n,s,a)}function Vn(n,s,a){if(!R&&!H||\"undefined\"==typeof console)throw n;console.error(n)}var Un,Rn,Hn=[],Wn=!1;function zn(){Wn=!1;var n=Hn.slice(0);Hn.length=0;for(var s=0;s<n.length;s++)n[s]()}var Jn=!1;if(\"undefined\"!=typeof setImmediate&&en(setImmediate))Rn=function(){setImmediate(zn)};else if(\"undefined\"==typeof MessageChannel||!en(MessageChannel)&&\"[object MessageChannelConstructor]\"!==MessageChannel.toString())Rn=function(){setTimeout(zn,0)};else{var Gn=new MessageChannel,Xn=Gn.port2;Gn.port1.onmessage=zn,Rn=function(){Xn.postMessage(1)}}if(\"undefined\"!=typeof Promise&&en(Promise)){var Yn=Promise.resolve();Un=function(){Yn.then(zn),Y&&setTimeout(C)}}else Un=Rn;function Qn(n,s){var a;if(Hn.push(function(){if(n)try{n.call(s)}catch(n){$n(n,s,\"nextTick\")}else a&&a(s)}),Wn||(Wn=!0,Jn?Rn():Un()),!n&&\"undefined\"!=typeof Promise)return new Promise(function(n){a=n})}var Zn=new pn;function ns(n){!function n(s,a){var e,p;var t=Array.isArray(s);if(!t&&!l(s)||Object.isFrozen(s)||s instanceof dn)return;if(s.__ob__){var o=s.__ob__.dep.id;if(a.has(o))return;a.add(o)}if(t)for(e=s.length;e--;)n(s[e],a);else for(p=Object.keys(s),e=p.length;e--;)n(s[p[e]],a)}(n,Zn),Zn.clear()}var ss,as=x(function(n){var s=\"&\"===n.charAt(0),a=\"~\"===(n=s?n.slice(1):n).charAt(0),e=\"!\"===(n=a?n.slice(1):n).charAt(0);return{name:n=e?n.slice(1):n,once:a,capture:e,passive:s}});function es(n){function s(){var n=arguments,a=s.fns;if(!Array.isArray(a))return a.apply(null,arguments);for(var e=a.slice(),p=0;p<e.length;p++)e[p].apply(null,n)}return s.fns=n,s}function ps(n,s,a,e,t,c){var l,r,u,i;for(l in n)r=n[l],u=s[l],i=as(l),p(r)||(p(u)?(p(r.fns)&&(r=n[l]=es(r)),o(i.once)&&(r=n[l]=t(i.name,r,i.capture)),a(i.name,r,i.capture,i.passive,i.params)):r!==u&&(u.fns=r,n[l]=u));for(l in s)p(n[l])&&e((i=as(l)).name,s[l],i.capture)}function ts(n,s,a){var e;n instanceof dn&&(n=n.data.hook||(n.data.hook={}));var c=n[s];function l(){a.apply(this,arguments),f(e.fns,l)}p(c)?e=es([l]):t(c.fns)&&o(c.merged)?(e=c).fns.push(l):e=es([c,l]),e.merged=!0,n[s]=e}function os(n,s,a,e,p){if(t(s)){if(v(s,a))return n[a]=s[a],p||delete s[a],!0;if(v(s,e))return n[a]=s[e],p||delete s[e],!0}return!1}function cs(n){return c(n)?[hn(n)]:Array.isArray(n)?function n(s,a){var e=[];var l,r,u,i;for(l=0;l<s.length;l++)p(r=s[l])||\"boolean\"==typeof r||(u=e.length-1,i=e[u],Array.isArray(r)?r.length>0&&(ls((r=n(r,(a||\"\")+\"_\"+l))[0])&&ls(i)&&(e[u]=hn(i.text+r[0].text),r.shift()),e.push.apply(e,r)):c(r)?ls(i)?e[u]=hn(i.text+r):\"\"!==r&&e.push(hn(r)):ls(r)&&ls(i)?e[u]=hn(i.text+r.text):(o(s._isVList)&&t(r.tag)&&p(r.key)&&t(a)&&(r.key=\"__vlist\"+a+\"_\"+l+\"__\"),e.push(r)));return e}(n):void 0}function ls(n){return t(n)&&t(n.text)&&!1===n.isComment}function rs(n,s){return(n.__esModule||tn&&\"Module\"===n[Symbol.toStringTag])&&(n=n.default),l(n)?s.extend(n):n}function us(n){return n.isComment&&n.asyncFactory}function is(n){if(Array.isArray(n))for(var s=0;s<n.length;s++){var a=n[s];if(t(a)&&(t(a.componentOptions)||us(a)))return a}}function ks(n,s){ss.$on(n,s)}function ds(n,s){ss.$off(n,s)}function bs(n,s){var a=ss;return function e(){null!==s.apply(null,arguments)&&a.$off(n,e)}}function ms(n,s,a){ss=n,ps(s,a||{},ks,ds,bs),ss=void 0}function hs(n,s){var a={};if(!n)return a;for(var e=0,p=n.length;e<p;e++){var t=n[e],o=t.data;if(o&&o.attrs&&o.attrs.slot&&delete o.attrs.slot,t.context!==s&&t.fnContext!==s||!o||null==o.slot)(a.default||(a.default=[])).push(t);else{var c=o.slot,l=a[c]||(a[c]=[]);\"template\"===t.tag?l.push.apply(l,t.children||[]):l.push(t)}}for(var r in a)a[r].every(fs)&&delete a[r];return a}function fs(n){return n.isComment&&!n.asyncFactory||\" \"===n.text}function gs(n,s){s=s||{};for(var a=0;a<n.length;a++)Array.isArray(n[a])?gs(n[a],s):s[n[a].key]=n[a].fn;return s}var vs=null;function xs(n){var s=vs;return vs=n,function(){vs=s}}function ys(n){for(;n&&(n=n.$parent);)if(n._inactive)return!0;return!1}function ws(n,s){if(s){if(n._directInactive=!1,ys(n))return}else if(n._directInactive)return;if(n._inactive||null===n._inactive){n._inactive=!1;for(var a=0;a<n.$children.length;a++)ws(n.$children[a]);Es(n,\"activated\")}}function Es(n,s){un();var a=n.$options[s];if(a)for(var e=0,p=a.length;e<p;e++)try{a[e].call(n)}catch(a){$n(a,n,s+\" hook\")}n._hasHookEvent&&n.$emit(\"hook:\"+s),kn()}var Bs=[],_s=[],js={},As=!1,Os=!1,Ss=0;function Cs(){var n,s;for(Os=!0,Bs.sort(function(n,s){return n.id-s.id}),Ss=0;Ss<Bs.length;Ss++)(n=Bs[Ss]).before&&n.before(),s=n.id,js[s]=null,n.run();var a=_s.slice(),e=Bs.slice();Ss=Bs.length=_s.length=0,js={},As=Os=!1,function(n){for(var s=0;s<n.length;s++)n[s]._inactive=!0,ws(n[s],!0)}(a),function(n){var s=n.length;for(;s--;){var a=n[s],e=a.vm;e._watcher===a&&e._isMounted&&!e._isDestroyed&&Es(e,\"updated\")}}(e),an&&N.devtools&&an.emit(\"flush\")}var Ls=0,Ks=function(n,s,a,e,p){this.vm=n,p&&(n._watcher=this),n._watchers.push(this),e?(this.deep=!!e.deep,this.user=!!e.user,this.lazy=!!e.lazy,this.sync=!!e.sync,this.before=e.before):this.deep=this.user=this.lazy=this.sync=!1,this.cb=a,this.id=++Ls,this.active=!0,this.dirty=this.lazy,this.deps=[],this.newDeps=[],this.depIds=new pn,this.newDepIds=new pn,this.expression=\"\",\"function\"==typeof s?this.getter=s:(this.getter=function(n){if(!q.test(n)){var s=n.split(\".\");return function(n){for(var a=0;a<s.length;a++){if(!n)return;n=n[s[a]]}return n}}}(s),this.getter||(this.getter=C)),this.value=this.lazy?void 0:this.get()};Ks.prototype.get=function(){var n;un(this);var s=this.vm;try{n=this.getter.call(s,s)}catch(n){if(!this.user)throw n;$n(n,s,'getter for watcher \"'+this.expression+'\"')}finally{this.deep&&ns(n),kn(),this.cleanupDeps()}return n},Ks.prototype.addDep=function(n){var s=n.id;this.newDepIds.has(s)||(this.newDepIds.add(s),this.newDeps.push(n),this.depIds.has(s)||n.addSub(this))},Ks.prototype.cleanupDeps=function(){for(var n=this.deps.length;n--;){var s=this.deps[n];this.newDepIds.has(s.id)||s.removeSub(this)}var a=this.depIds;this.depIds=this.newDepIds,this.newDepIds=a,this.newDepIds.clear(),a=this.deps,this.deps=this.newDeps,this.newDeps=a,this.newDeps.length=0},Ks.prototype.update=function(){this.lazy?this.dirty=!0:this.sync?this.run():function(n){var s=n.id;if(null==js[s]){if(js[s]=!0,Os){for(var a=Bs.length-1;a>Ss&&Bs[a].id>n.id;)a--;Bs.splice(a+1,0,n)}else Bs.push(n);As||(As=!0,Qn(Cs))}}(this)},Ks.prototype.run=function(){if(this.active){var n=this.get();if(n!==this.value||l(n)||this.deep){var s=this.value;if(this.value=n,this.user)try{this.cb.call(this.vm,n,s)}catch(n){$n(n,this.vm,'callback for watcher \"'+this.expression+'\"')}else this.cb.call(this.vm,n,s)}}},Ks.prototype.evaluate=function(){this.value=this.get(),this.dirty=!1},Ks.prototype.depend=function(){for(var n=this.deps.length;n--;)this.deps[n].depend()},Ks.prototype.teardown=function(){if(this.active){this.vm._isBeingDestroyed||f(this.vm._watchers,this);for(var n=this.deps.length;n--;)this.deps[n].removeSub(this);this.active=!1}};var Fs={enumerable:!0,configurable:!0,get:C,set:C};function Ds(n,s,a){Fs.get=function(){return this[s][a]},Fs.set=function(n){this[s][a]=n},Object.defineProperty(n,a,Fs)}function Is(n){n._watchers=[];var s=n.$options;s.props&&function(n,s){var a=n.$options.propsData||{},e=n._props={},p=n.$options._propKeys=[];n.$parent&&wn(!1);var t=function(t){p.push(t);var o=Pn(t,s,a,n);_n(e,t,o),t in n||Ds(n,\"_props\",t)};for(var o in s)t(o);wn(!0)}(n,s.props),s.methods&&function(n,s){n.$options.props;for(var a in s)n[a]=\"function\"!=typeof s[a]?C:j(s[a],n)}(n,s.methods),s.data?function(n){var s=n.$options.data;u(s=n._data=\"function\"==typeof s?function(n,s){un();try{return n.call(s,s)}catch(n){return $n(n,s,\"data()\"),{}}finally{kn()}}(s,n):s||{})||(s={});var a=Object.keys(s),e=n.$options.props,p=(n.$options.methods,a.length);for(;p--;){var t=a[p];0,e&&v(e,t)||(o=void 0,36!==(o=(t+\"\").charCodeAt(0))&&95!==o&&Ds(n,\"_data\",t))}var o;Bn(s,!0)}(n):Bn(n._data={},!0),s.computed&&function(n,s){var a=n._computedWatchers=Object.create(null),e=sn();for(var p in s){var t=s[p],o=\"function\"==typeof t?t:t.get;0,e||(a[p]=new Ks(n,o||C,C,Ps)),p in n||Ts(n,p,t)}}(n,s.computed),s.watch&&s.watch!==Q&&function(n,s){for(var a in s){var e=s[a];if(Array.isArray(e))for(var p=0;p<e.length;p++)$s(n,a,e[p]);else $s(n,a,e)}}(n,s.watch)}var Ps={lazy:!0};function Ts(n,s,a){var e=!sn();\"function\"==typeof a?(Fs.get=e?Ms(s):Ns(a),Fs.set=C):(Fs.get=a.get?e&&!1!==a.cache?Ms(s):Ns(a.get):C,Fs.set=a.set||C),Object.defineProperty(n,s,Fs)}function Ms(n){return function(){var s=this._computedWatchers&&this._computedWatchers[n];if(s)return s.dirty&&s.evaluate(),ln.target&&s.depend(),s.value}}function Ns(n){return function(){return n.call(this,this)}}function $s(n,s,a,e){return u(a)&&(e=a,a=a.handler),\"string\"==typeof a&&(a=n[a]),n.$watch(s,a,e)}function qs(n,s){if(n){for(var a=Object.create(null),e=tn?Reflect.ownKeys(n).filter(function(s){return Object.getOwnPropertyDescriptor(n,s).enumerable}):Object.keys(n),p=0;p<e.length;p++){for(var t=e[p],o=n[t].from,c=s;c;){if(c._provided&&v(c._provided,o)){a[t]=c._provided[o];break}c=c.$parent}if(!c)if(\"default\"in n[t]){var l=n[t].default;a[t]=\"function\"==typeof l?l.call(s):l}else 0}return a}}function Vs(n,s){var a,e,p,o,c;if(Array.isArray(n)||\"string\"==typeof n)for(a=new Array(n.length),e=0,p=n.length;e<p;e++)a[e]=s(n[e],e);else if(\"number\"==typeof n)for(a=new Array(n),e=0;e<n;e++)a[e]=s(e+1,e);else if(l(n))for(o=Object.keys(n),a=new Array(o.length),e=0,p=o.length;e<p;e++)c=o[e],a[e]=s(n[c],c,e);return t(a)||(a=[]),a._isVList=!0,a}function Us(n,s,a,e){var p,t=this.$scopedSlots[n];t?(a=a||{},e&&(a=O(O({},e),a)),p=t(a)||s):p=this.$slots[n]||s;var o=a&&a.slot;return o?this.$createElement(\"template\",{slot:o},p):p}function Rs(n){return In(this.$options,\"filters\",n)||K}function Hs(n,s){return Array.isArray(n)?-1===n.indexOf(s):n!==s}function Ws(n,s,a,e,p){var t=N.keyCodes[s]||a;return p&&e&&!N.keyCodes[s]?Hs(p,e):t?Hs(t,n):e?_(e)!==s:void 0}function zs(n,s,a,e,p){if(a)if(l(a)){var t;Array.isArray(a)&&(a=S(a));var o=function(o){if(\"class\"===o||\"style\"===o||h(o))t=n;else{var c=n.attrs&&n.attrs.type;t=e||N.mustUseProp(s,c,o)?n.domProps||(n.domProps={}):n.attrs||(n.attrs={})}var l=w(o);o in t||l in t||(t[o]=a[o],p&&((n.on||(n.on={}))[\"update:\"+l]=function(n){a[o]=n}))};for(var c in a)o(c)}else;return n}function Js(n,s){var a=this._staticTrees||(this._staticTrees=[]),e=a[n];return e&&!s?e:(Xs(e=a[n]=this.$options.staticRenderFns[n].call(this._renderProxy,null,this),\"__static__\"+n,!1),e)}function Gs(n,s,a){return Xs(n,\"__once__\"+s+(a?\"_\"+a:\"\"),!0),n}function Xs(n,s,a){if(Array.isArray(n))for(var e=0;e<n.length;e++)n[e]&&\"string\"!=typeof n[e]&&Ys(n[e],s+\"_\"+e,a);else Ys(n,s,a)}function Ys(n,s,a){n.isStatic=!0,n.key=s,n.isOnce=a}function Qs(n,s){if(s)if(u(s)){var a=n.on=n.on?O({},n.on):{};for(var e in s){var p=a[e],t=s[e];a[e]=p?[].concat(p,t):t}}else;return n}function Zs(n){n._o=Gs,n._n=b,n._s=d,n._l=Vs,n._t=Us,n._q=F,n._i=D,n._m=Js,n._f=Rs,n._k=Ws,n._b=zs,n._v=hn,n._e=mn,n._u=gs,n._g=Qs}function na(n,s,a,p,t){var c,l=t.options;v(p,\"_uid\")?(c=Object.create(p))._original=p:(c=p,p=p._original);var r=o(l._compiled),u=!r;this.data=n,this.props=s,this.children=a,this.parent=p,this.listeners=n.on||e,this.injections=qs(l.inject,p),this.slots=function(){return hs(a,p)},r&&(this.$options=l,this.$slots=this.slots(),this.$scopedSlots=n.scopedSlots||e),l._scopeId?this._c=function(n,s,a,e){var t=ra(c,n,s,a,e,u);return t&&!Array.isArray(t)&&(t.fnScopeId=l._scopeId,t.fnContext=p),t}:this._c=function(n,s,a,e){return ra(c,n,s,a,e,u)}}function sa(n,s,a,e,p){var t=fn(n);return t.fnContext=a,t.fnOptions=e,s.slot&&((t.data||(t.data={})).slot=s.slot),t}function aa(n,s){for(var a in s)n[w(a)]=s[a]}Zs(na.prototype);var ea={init:function(n,s){if(n.componentInstance&&!n.componentInstance._isDestroyed&&n.data.keepAlive){var a=n;ea.prepatch(a,a)}else{(n.componentInstance=function(n,s){var a={_isComponent:!0,_parentVnode:n,parent:s},e=n.data.inlineTemplate;t(e)&&(a.render=e.render,a.staticRenderFns=e.staticRenderFns);return new n.componentOptions.Ctor(a)}(n,vs)).$mount(s?n.elm:void 0,s)}},prepatch:function(n,s){var a=s.componentOptions;!function(n,s,a,p,t){var o=!!(t||n.$options._renderChildren||p.data.scopedSlots||n.$scopedSlots!==e);if(n.$options._parentVnode=p,n.$vnode=p,n._vnode&&(n._vnode.parent=p),n.$options._renderChildren=t,n.$attrs=p.data.attrs||e,n.$listeners=a||e,s&&n.$options.props){wn(!1);for(var c=n._props,l=n.$options._propKeys||[],r=0;r<l.length;r++){var u=l[r],i=n.$options.props;c[u]=Pn(u,i,s,n)}wn(!0),n.$options.propsData=s}a=a||e;var k=n.$options._parentListeners;n.$options._parentListeners=a,ms(n,a,k),o&&(n.$slots=hs(t,p.context),n.$forceUpdate())}(s.componentInstance=n.componentInstance,a.propsData,a.listeners,s,a.children)},insert:function(n){var s,a=n.context,e=n.componentInstance;e._isMounted||(e._isMounted=!0,Es(e,\"mounted\")),n.data.keepAlive&&(a._isMounted?((s=e)._inactive=!1,_s.push(s)):ws(e,!0))},destroy:function(n){var s=n.componentInstance;s._isDestroyed||(n.data.keepAlive?function n(s,a){if(!(a&&(s._directInactive=!0,ys(s))||s._inactive)){s._inactive=!0;for(var e=0;e<s.$children.length;e++)n(s.$children[e]);Es(s,\"deactivated\")}}(s,!0):s.$destroy())}},pa=Object.keys(ea);function ta(n,s,a,c,r){if(!p(n)){var u=a.$options._base;if(l(n)&&(n=u.extend(n)),\"function\"==typeof n){var i;if(p(n.cid)&&void 0===(n=function(n,s,a){if(o(n.error)&&t(n.errorComp))return n.errorComp;if(t(n.resolved))return n.resolved;if(o(n.loading)&&t(n.loadingComp))return n.loadingComp;if(!t(n.contexts)){var e=n.contexts=[a],c=!0,r=function(n){for(var s=0,a=e.length;s<a;s++)e[s].$forceUpdate();n&&(e.length=0)},u=I(function(a){n.resolved=rs(a,s),c||r(!0)}),i=I(function(s){t(n.errorComp)&&(n.error=!0,r(!0))}),k=n(u,i);return l(k)&&(\"function\"==typeof k.then?p(n.resolved)&&k.then(u,i):t(k.component)&&\"function\"==typeof k.component.then&&(k.component.then(u,i),t(k.error)&&(n.errorComp=rs(k.error,s)),t(k.loading)&&(n.loadingComp=rs(k.loading,s),0===k.delay?n.loading=!0:setTimeout(function(){p(n.resolved)&&p(n.error)&&(n.loading=!0,r(!1))},k.delay||200)),t(k.timeout)&&setTimeout(function(){p(n.resolved)&&i(null)},k.timeout))),c=!1,n.loading?n.loadingComp:n.resolved}n.contexts.push(a)}(i=n,u,a)))return function(n,s,a,e,p){var t=mn();return t.asyncFactory=n,t.asyncMeta={data:s,context:a,children:e,tag:p},t}(i,s,a,c,r);s=s||{},ia(n),t(s.model)&&function(n,s){var a=n.model&&n.model.prop||\"value\",e=n.model&&n.model.event||\"input\";(s.props||(s.props={}))[a]=s.model.value;var p=s.on||(s.on={}),o=p[e],c=s.model.callback;t(o)?(Array.isArray(o)?-1===o.indexOf(c):o!==c)&&(p[e]=[c].concat(o)):p[e]=c}(n.options,s);var k=function(n,s,a){var e=s.options.props;if(!p(e)){var o={},c=n.attrs,l=n.props;if(t(c)||t(l))for(var r in e){var u=_(r);os(o,l,r,u,!0)||os(o,c,r,u,!1)}return o}}(s,n);if(o(n.options.functional))return function(n,s,a,p,o){var c=n.options,l={},r=c.props;if(t(r))for(var u in r)l[u]=Pn(u,r,s||e);else t(a.attrs)&&aa(l,a.attrs),t(a.props)&&aa(l,a.props);var i=new na(a,l,o,p,n),k=c.render.call(null,i._c,i);if(k instanceof dn)return sa(k,a,i.parent,c);if(Array.isArray(k)){for(var d=cs(k)||[],b=new Array(d.length),m=0;m<d.length;m++)b[m]=sa(d[m],a,i.parent,c);return b}}(n,k,s,a,c);var d=s.on;if(s.on=s.nativeOn,o(n.options.abstract)){var b=s.slot;s={},b&&(s.slot=b)}!function(n){for(var s=n.hook||(n.hook={}),a=0;a<pa.length;a++){var e=pa[a],p=s[e],t=ea[e];p===t||p&&p._merged||(s[e]=p?oa(t,p):t)}}(s);var m=n.options.name||r;return new dn(\"vue-component-\"+n.cid+(m?\"-\"+m:\"\"),s,void 0,void 0,void 0,a,{Ctor:n,propsData:k,listeners:d,tag:r,children:c},i)}}}function oa(n,s){var a=function(a,e){n(a,e),s(a,e)};return a._merged=!0,a}var ca=1,la=2;function ra(n,s,a,e,r,u){return(Array.isArray(a)||c(a))&&(r=e,e=a,a=void 0),o(u)&&(r=la),function(n,s,a,e,c){if(t(a)&&t(a.__ob__))return mn();t(a)&&t(a.is)&&(s=a.is);if(!s)return mn();0;Array.isArray(e)&&\"function\"==typeof e[0]&&((a=a||{}).scopedSlots={default:e[0]},e.length=0);c===la?e=cs(e):c===ca&&(e=function(n){for(var s=0;s<n.length;s++)if(Array.isArray(n[s]))return Array.prototype.concat.apply([],n);return n}(e));var r,u;if(\"string\"==typeof s){var i;u=n.$vnode&&n.$vnode.ns||N.getTagNamespace(s),r=N.isReservedTag(s)?new dn(N.parsePlatformTagName(s),a,e,void 0,void 0,n):a&&a.pre||!t(i=In(n.$options,\"components\",s))?new dn(s,a,e,void 0,void 0,n):ta(i,a,n,e,s)}else r=ta(s,a,n,e);return Array.isArray(r)?r:t(r)?(t(u)&&function n(s,a,e){s.ns=a;\"foreignObject\"===s.tag&&(a=void 0,e=!0);if(t(s.children))for(var c=0,l=s.children.length;c<l;c++){var r=s.children[c];t(r.tag)&&(p(r.ns)||o(e)&&\"svg\"!==r.tag)&&n(r,a,e)}}(r,u),t(a)&&function(n){l(n.style)&&ns(n.style);l(n.class)&&ns(n.class)}(a),r):mn()}(n,s,a,e,r)}var ua=0;function ia(n){var s=n.options;if(n.super){var a=ia(n.super);if(a!==n.superOptions){n.superOptions=a;var e=function(n){var s,a=n.options,e=n.extendOptions,p=n.sealedOptions;for(var t in a)a[t]!==p[t]&&(s||(s={}),s[t]=ka(a[t],e[t],p[t]));return s}(n);e&&O(n.extendOptions,e),(s=n.options=Dn(a,n.extendOptions)).name&&(s.components[s.name]=n)}}return s}function ka(n,s,a){if(Array.isArray(n)){var e=[];a=Array.isArray(a)?a:[a],s=Array.isArray(s)?s:[s];for(var p=0;p<n.length;p++)(s.indexOf(n[p])>=0||a.indexOf(n[p])<0)&&e.push(n[p]);return e}return n}function da(n){this._init(n)}function ba(n){n.cid=0;var s=1;n.extend=function(n){n=n||{};var a=this,e=a.cid,p=n._Ctor||(n._Ctor={});if(p[e])return p[e];var t=n.name||a.options.name;var o=function(n){this._init(n)};return(o.prototype=Object.create(a.prototype)).constructor=o,o.cid=s++,o.options=Dn(a.options,n),o.super=a,o.options.props&&function(n){var s=n.options.props;for(var a in s)Ds(n.prototype,\"_props\",a)}(o),o.options.computed&&function(n){var s=n.options.computed;for(var a in s)Ts(n.prototype,a,s[a])}(o),o.extend=a.extend,o.mixin=a.mixin,o.use=a.use,T.forEach(function(n){o[n]=a[n]}),t&&(o.options.components[t]=o),o.superOptions=a.options,o.extendOptions=n,o.sealedOptions=O({},o.options),p[e]=o,o}}function ma(n){return n&&(n.Ctor.options.name||n.tag)}function ha(n,s){return Array.isArray(n)?n.indexOf(s)>-1:\"string\"==typeof n?n.split(\",\").indexOf(s)>-1:!!i(n)&&n.test(s)}function fa(n,s){var a=n.cache,e=n.keys,p=n._vnode;for(var t in a){var o=a[t];if(o){var c=ma(o.componentOptions);c&&!s(c)&&ga(a,t,e,p)}}}function ga(n,s,a,e){var p=n[s];!p||e&&p.tag===e.tag||p.componentInstance.$destroy(),n[s]=null,f(a,s)}!function(n){n.prototype._init=function(n){var s=this;s._uid=ua++,s._isVue=!0,n&&n._isComponent?function(n,s){var a=n.$options=Object.create(n.constructor.options),e=s._parentVnode;a.parent=s.parent,a._parentVnode=e;var p=e.componentOptions;a.propsData=p.propsData,a._parentListeners=p.listeners,a._renderChildren=p.children,a._componentTag=p.tag,s.render&&(a.render=s.render,a.staticRenderFns=s.staticRenderFns)}(s,n):s.$options=Dn(ia(s.constructor),n||{},s),s._renderProxy=s,s._self=s,function(n){var s=n.$options,a=s.parent;if(a&&!s.abstract){for(;a.$options.abstract&&a.$parent;)a=a.$parent;a.$children.push(n)}n.$parent=a,n.$root=a?a.$root:n,n.$children=[],n.$refs={},n._watcher=null,n._inactive=null,n._directInactive=!1,n._isMounted=!1,n._isDestroyed=!1,n._isBeingDestroyed=!1}(s),function(n){n._events=Object.create(null),n._hasHookEvent=!1;var s=n.$options._parentListeners;s&&ms(n,s)}(s),function(n){n._vnode=null,n._staticTrees=null;var s=n.$options,a=n.$vnode=s._parentVnode,p=a&&a.context;n.$slots=hs(s._renderChildren,p),n.$scopedSlots=e,n._c=function(s,a,e,p){return ra(n,s,a,e,p,!1)},n.$createElement=function(s,a,e,p){return ra(n,s,a,e,p,!0)};var t=a&&a.data;_n(n,\"$attrs\",t&&t.attrs||e,null,!0),_n(n,\"$listeners\",s._parentListeners||e,null,!0)}(s),Es(s,\"beforeCreate\"),function(n){var s=qs(n.$options.inject,n);s&&(wn(!1),Object.keys(s).forEach(function(a){_n(n,a,s[a])}),wn(!0))}(s),Is(s),function(n){var s=n.$options.provide;s&&(n._provided=\"function\"==typeof s?s.call(n):s)}(s),Es(s,\"created\"),s.$options.el&&s.$mount(s.$options.el)}}(da),function(n){var s={get:function(){return this._data}},a={get:function(){return this._props}};Object.defineProperty(n.prototype,\"$data\",s),Object.defineProperty(n.prototype,\"$props\",a),n.prototype.$set=jn,n.prototype.$delete=An,n.prototype.$watch=function(n,s,a){if(u(s))return $s(this,n,s,a);(a=a||{}).user=!0;var e=new Ks(this,n,s,a);if(a.immediate)try{s.call(this,e.value)}catch(n){$n(n,this,'callback for immediate watcher \"'+e.expression+'\"')}return function(){e.teardown()}}}(da),function(n){var s=/^hook:/;n.prototype.$on=function(n,a){var e=this;if(Array.isArray(n))for(var p=0,t=n.length;p<t;p++)e.$on(n[p],a);else(e._events[n]||(e._events[n]=[])).push(a),s.test(n)&&(e._hasHookEvent=!0);return e},n.prototype.$once=function(n,s){var a=this;function e(){a.$off(n,e),s.apply(a,arguments)}return e.fn=s,a.$on(n,e),a},n.prototype.$off=function(n,s){var a=this;if(!arguments.length)return a._events=Object.create(null),a;if(Array.isArray(n)){for(var e=0,p=n.length;e<p;e++)a.$off(n[e],s);return a}var t=a._events[n];if(!t)return a;if(!s)return a._events[n]=null,a;if(s)for(var o,c=t.length;c--;)if((o=t[c])===s||o.fn===s){t.splice(c,1);break}return a},n.prototype.$emit=function(n){var s=this._events[n];if(s){s=s.length>1?A(s):s;for(var a=A(arguments,1),e=0,p=s.length;e<p;e++)try{s[e].apply(this,a)}catch(s){$n(s,this,'event handler for \"'+n+'\"')}}return this}}(da),function(n){n.prototype._update=function(n,s){var a=this,e=a.$el,p=a._vnode,t=xs(a);a._vnode=n,a.$el=p?a.__patch__(p,n):a.__patch__(a.$el,n,s,!1),t(),e&&(e.__vue__=null),a.$el&&(a.$el.__vue__=a),a.$vnode&&a.$parent&&a.$vnode===a.$parent._vnode&&(a.$parent.$el=a.$el)},n.prototype.$forceUpdate=function(){this._watcher&&this._watcher.update()},n.prototype.$destroy=function(){var n=this;if(!n._isBeingDestroyed){Es(n,\"beforeDestroy\"),n._isBeingDestroyed=!0;var s=n.$parent;!s||s._isBeingDestroyed||n.$options.abstract||f(s.$children,n),n._watcher&&n._watcher.teardown();for(var a=n._watchers.length;a--;)n._watchers[a].teardown();n._data.__ob__&&n._data.__ob__.vmCount--,n._isDestroyed=!0,n.__patch__(n._vnode,null),Es(n,\"destroyed\"),n.$off(),n.$el&&(n.$el.__vue__=null),n.$vnode&&(n.$vnode.parent=null)}}}(da),function(n){Zs(n.prototype),n.prototype.$nextTick=function(n){return Qn(n,this)},n.prototype._render=function(){var n,s=this,a=s.$options,p=a.render,t=a._parentVnode;t&&(s.$scopedSlots=t.data.scopedSlots||e),s.$vnode=t;try{n=p.call(s._renderProxy,s.$createElement)}catch(a){$n(a,s,\"render\"),n=s._vnode}return n instanceof dn||(n=mn()),n.parent=t,n}}(da);var va=[String,RegExp,Array],xa={KeepAlive:{name:\"keep-alive\",abstract:!0,props:{include:va,exclude:va,max:[String,Number]},created:function(){this.cache=Object.create(null),this.keys=[]},destroyed:function(){for(var n in this.cache)ga(this.cache,n,this.keys)},mounted:function(){var n=this;this.$watch(\"include\",function(s){fa(n,function(n){return ha(s,n)})}),this.$watch(\"exclude\",function(s){fa(n,function(n){return!ha(s,n)})})},render:function(){var n=this.$slots.default,s=is(n),a=s&&s.componentOptions;if(a){var e=ma(a),p=this.include,t=this.exclude;if(p&&(!e||!ha(p,e))||t&&e&&ha(t,e))return s;var o=this.cache,c=this.keys,l=null==s.key?a.Ctor.cid+(a.tag?\"::\"+a.tag:\"\"):s.key;o[l]?(s.componentInstance=o[l].componentInstance,f(c,l),c.push(l)):(o[l]=s,c.push(l),this.max&&c.length>parseInt(this.max)&&ga(o,c[0],c,this._vnode)),s.data.keepAlive=!0}return s||n&&n[0]}}};!function(n){var s={get:function(){return N}};Object.defineProperty(n,\"config\",s),n.util={warn:on,extend:O,mergeOptions:Dn,defineReactive:_n},n.set=jn,n.delete=An,n.nextTick=Qn,n.options=Object.create(null),T.forEach(function(s){n.options[s+\"s\"]=Object.create(null)}),n.options._base=n,O(n.options.components,xa),function(n){n.use=function(n){var s=this._installedPlugins||(this._installedPlugins=[]);if(s.indexOf(n)>-1)return this;var a=A(arguments,1);return a.unshift(this),\"function\"==typeof n.install?n.install.apply(n,a):\"function\"==typeof n&&n.apply(null,a),s.push(n),this}}(n),function(n){n.mixin=function(n){return this.options=Dn(this.options,n),this}}(n),ba(n),function(n){T.forEach(function(s){n[s]=function(n,a){return a?(\"component\"===s&&u(a)&&(a.name=a.name||n,a=this.options._base.extend(a)),\"directive\"===s&&\"function\"==typeof a&&(a={bind:a,update:a}),this.options[s+\"s\"][n]=a,a):this.options[s+\"s\"][n]}})}(n)}(da),Object.defineProperty(da.prototype,\"$isServer\",{get:sn}),Object.defineProperty(da.prototype,\"$ssrContext\",{get:function(){return this.$vnode&&this.$vnode.ssrContext}}),Object.defineProperty(da,\"FunctionalRenderContext\",{value:na}),da.version=\"2.5.21\";var ya=m(\"style,class\"),wa=m(\"input,textarea,option,select,progress\"),Ea=m(\"contenteditable,draggable,spellcheck\"),Ba=m(\"allowfullscreen,async,autofocus,autoplay,checked,compact,controls,declare,default,defaultchecked,defaultmuted,defaultselected,defer,disabled,enabled,formnovalidate,hidden,indeterminate,inert,ismap,itemscope,loop,multiple,muted,nohref,noresize,noshade,novalidate,nowrap,open,pauseonexit,readonly,required,reversed,scoped,seamless,selected,sortable,translate,truespeed,typemustmatch,visible\"),_a=\"http://www.w3.org/1999/xlink\",ja=function(n){return\":\"===n.charAt(5)&&\"xlink\"===n.slice(0,5)},Aa=function(n){return ja(n)?n.slice(6,n.length):\"\"},Oa=function(n){return null==n||!1===n};function Sa(n){for(var s=n.data,a=n,e=n;t(e.componentInstance);)(e=e.componentInstance._vnode)&&e.data&&(s=Ca(e.data,s));for(;t(a=a.parent);)a&&a.data&&(s=Ca(s,a.data));return function(n,s){if(t(n)||t(s))return La(n,Ka(s));return\"\"}(s.staticClass,s.class)}function Ca(n,s){return{staticClass:La(n.staticClass,s.staticClass),class:t(n.class)?[n.class,s.class]:s.class}}function La(n,s){return n?s?n+\" \"+s:n:s||\"\"}function Ka(n){return Array.isArray(n)?function(n){for(var s,a=\"\",e=0,p=n.length;e<p;e++)t(s=Ka(n[e]))&&\"\"!==s&&(a&&(a+=\" \"),a+=s);return a}(n):l(n)?function(n){var s=\"\";for(var a in n)n[a]&&(s&&(s+=\" \"),s+=a);return s}(n):\"string\"==typeof n?n:\"\"}var Fa={svg:\"http://www.w3.org/2000/svg\",math:\"http://www.w3.org/1998/Math/MathML\"},Da=m(\"html,body,base,head,link,meta,style,title,address,article,aside,footer,header,h1,h2,h3,h4,h5,h6,hgroup,nav,section,div,dd,dl,dt,figcaption,figure,picture,hr,img,li,main,ol,p,pre,ul,a,b,abbr,bdi,bdo,br,cite,code,data,dfn,em,i,kbd,mark,q,rp,rt,rtc,ruby,s,samp,small,span,strong,sub,sup,time,u,var,wbr,area,audio,map,track,video,embed,object,param,source,canvas,script,noscript,del,ins,caption,col,colgroup,table,thead,tbody,td,th,tr,button,datalist,fieldset,form,input,label,legend,meter,optgroup,option,output,progress,select,textarea,details,dialog,menu,menuitem,summary,content,element,shadow,template,blockquote,iframe,tfoot\"),Ia=m(\"svg,animate,circle,clippath,cursor,defs,desc,ellipse,filter,font-face,foreignObject,g,glyph,image,line,marker,mask,missing-glyph,path,pattern,polygon,polyline,rect,switch,symbol,text,textpath,tspan,use,view\",!0),Pa=function(n){return Da(n)||Ia(n)};var Ta=Object.create(null);var Ma=m(\"text,number,password,search,email,tel,url\");var Na=Object.freeze({createElement:function(n,s){var a=document.createElement(n);return\"select\"!==n?a:(s.data&&s.data.attrs&&void 0!==s.data.attrs.multiple&&a.setAttribute(\"multiple\",\"multiple\"),a)},createElementNS:function(n,s){return document.createElementNS(Fa[n],s)},createTextNode:function(n){return document.createTextNode(n)},createComment:function(n){return document.createComment(n)},insertBefore:function(n,s,a){n.insertBefore(s,a)},removeChild:function(n,s){n.removeChild(s)},appendChild:function(n,s){n.appendChild(s)},parentNode:function(n){return n.parentNode},nextSibling:function(n){return n.nextSibling},tagName:function(n){return n.tagName},setTextContent:function(n,s){n.textContent=s},setStyleScope:function(n,s){n.setAttribute(s,\"\")}}),$a={create:function(n,s){qa(s)},update:function(n,s){n.data.ref!==s.data.ref&&(qa(n,!0),qa(s))},destroy:function(n){qa(n,!0)}};function qa(n,s){var a=n.data.ref;if(t(a)){var e=n.context,p=n.componentInstance||n.elm,o=e.$refs;s?Array.isArray(o[a])?f(o[a],p):o[a]===p&&(o[a]=void 0):n.data.refInFor?Array.isArray(o[a])?o[a].indexOf(p)<0&&o[a].push(p):o[a]=[p]:o[a]=p}}var Va=new dn(\"\",{},[]),Ua=[\"create\",\"activate\",\"update\",\"remove\",\"destroy\"];function Ra(n,s){return n.key===s.key&&(n.tag===s.tag&&n.isComment===s.isComment&&t(n.data)===t(s.data)&&function(n,s){if(\"input\"!==n.tag)return!0;var a,e=t(a=n.data)&&t(a=a.attrs)&&a.type,p=t(a=s.data)&&t(a=a.attrs)&&a.type;return e===p||Ma(e)&&Ma(p)}(n,s)||o(n.isAsyncPlaceholder)&&n.asyncFactory===s.asyncFactory&&p(s.asyncFactory.error))}function Ha(n,s,a){var e,p,o={};for(e=s;e<=a;++e)t(p=n[e].key)&&(o[p]=e);return o}var Wa={create:za,update:za,destroy:function(n){za(n,Va)}};function za(n,s){(n.data.directives||s.data.directives)&&function(n,s){var a,e,p,t=n===Va,o=s===Va,c=Ga(n.data.directives,n.context),l=Ga(s.data.directives,s.context),r=[],u=[];for(a in l)e=c[a],p=l[a],e?(p.oldValue=e.value,Ya(p,\"update\",s,n),p.def&&p.def.componentUpdated&&u.push(p)):(Ya(p,\"bind\",s,n),p.def&&p.def.inserted&&r.push(p));if(r.length){var i=function(){for(var a=0;a<r.length;a++)Ya(r[a],\"inserted\",s,n)};t?ts(s,\"insert\",i):i()}u.length&&ts(s,\"postpatch\",function(){for(var a=0;a<u.length;a++)Ya(u[a],\"componentUpdated\",s,n)});if(!t)for(a in c)l[a]||Ya(c[a],\"unbind\",n,n,o)}(n,s)}var Ja=Object.create(null);function Ga(n,s){var a,e,p=Object.create(null);if(!n)return p;for(a=0;a<n.length;a++)(e=n[a]).modifiers||(e.modifiers=Ja),p[Xa(e)]=e,e.def=In(s.$options,\"directives\",e.name);return p}function Xa(n){return n.rawName||n.name+\".\"+Object.keys(n.modifiers||{}).join(\".\")}function Ya(n,s,a,e,p){var t=n.def&&n.def[s];if(t)try{t(a.elm,n,a,e,p)}catch(e){$n(e,a.context,\"directive \"+n.name+\" \"+s+\" hook\")}}var Qa=[$a,Wa];function Za(n,s){var a=s.componentOptions;if(!(t(a)&&!1===a.Ctor.options.inheritAttrs||p(n.data.attrs)&&p(s.data.attrs))){var e,o,c=s.elm,l=n.data.attrs||{},r=s.data.attrs||{};for(e in t(r.__ob__)&&(r=s.data.attrs=O({},r)),r)o=r[e],l[e]!==o&&ne(c,e,o);for(e in(J||X)&&r.value!==l.value&&ne(c,\"value\",r.value),l)p(r[e])&&(ja(e)?c.removeAttributeNS(_a,Aa(e)):Ea(e)||c.removeAttribute(e))}}function ne(n,s,a){n.tagName.indexOf(\"-\")>-1?se(n,s,a):Ba(s)?Oa(a)?n.removeAttribute(s):(a=\"allowfullscreen\"===s&&\"EMBED\"===n.tagName?\"true\":s,n.setAttribute(s,a)):Ea(s)?n.setAttribute(s,Oa(a)||\"false\"===a?\"false\":\"true\"):ja(s)?Oa(a)?n.removeAttributeNS(_a,Aa(s)):n.setAttributeNS(_a,s,a):se(n,s,a)}function se(n,s,a){if(Oa(a))n.removeAttribute(s);else{if(J&&!G&&(\"TEXTAREA\"===n.tagName||\"INPUT\"===n.tagName)&&\"placeholder\"===s&&!n.__ieph){var e=function(s){s.stopImmediatePropagation(),n.removeEventListener(\"input\",e)};n.addEventListener(\"input\",e),n.__ieph=!0}n.setAttribute(s,a)}}var ae={create:Za,update:Za};function ee(n,s){var a=s.elm,e=s.data,o=n.data;if(!(p(e.staticClass)&&p(e.class)&&(p(o)||p(o.staticClass)&&p(o.class)))){var c=Sa(s),l=a._transitionClasses;t(l)&&(c=La(c,Ka(l))),c!==a._prevClass&&(a.setAttribute(\"class\",c),a._prevClass=c)}}var pe,te={create:ee,update:ee},oe=\"__r\",ce=\"__c\";function le(n,s,a){var e=pe;return function p(){null!==s.apply(null,arguments)&&ue(n,p,a,e)}}function re(n,s,a,e){var p;s=(p=s)._withTask||(p._withTask=function(){Jn=!0;try{return p.apply(null,arguments)}finally{Jn=!1}}),pe.addEventListener(n,s,Z?{capture:a,passive:e}:a)}function ue(n,s,a,e){(e||pe).removeEventListener(n,s._withTask||s,a)}function ie(n,s){if(!p(n.data.on)||!p(s.data.on)){var a=s.data.on||{},e=n.data.on||{};pe=s.elm,function(n){if(t(n[oe])){var s=J?\"change\":\"input\";n[s]=[].concat(n[oe],n[s]||[]),delete n[oe]}t(n[ce])&&(n.change=[].concat(n[ce],n.change||[]),delete n[ce])}(a),ps(a,e,re,ue,le,s.context),pe=void 0}}var ke={create:ie,update:ie};function de(n,s){if(!p(n.data.domProps)||!p(s.data.domProps)){var a,e,o=s.elm,c=n.data.domProps||{},l=s.data.domProps||{};for(a in t(l.__ob__)&&(l=s.data.domProps=O({},l)),c)p(l[a])&&(o[a]=\"\");for(a in l){if(e=l[a],\"textContent\"===a||\"innerHTML\"===a){if(s.children&&(s.children.length=0),e===c[a])continue;1===o.childNodes.length&&o.removeChild(o.childNodes[0])}if(\"value\"===a){o._value=e;var r=p(e)?\"\":String(e);be(o,r)&&(o.value=r)}else o[a]=e}}}function be(n,s){return!n.composing&&(\"OPTION\"===n.tagName||function(n,s){var a=!0;try{a=document.activeElement!==n}catch(n){}return a&&n.value!==s}(n,s)||function(n,s){var a=n.value,e=n._vModifiers;if(t(e)){if(e.lazy)return!1;if(e.number)return b(a)!==b(s);if(e.trim)return a.trim()!==s.trim()}return a!==s}(n,s))}var me={create:de,update:de},he=x(function(n){var s={},a=/:(.+)/;return n.split(/;(?![^(]*\\))/g).forEach(function(n){if(n){var e=n.split(a);e.length>1&&(s[e[0].trim()]=e[1].trim())}}),s});function fe(n){var s=ge(n.style);return n.staticStyle?O(n.staticStyle,s):s}function ge(n){return Array.isArray(n)?S(n):\"string\"==typeof n?he(n):n}var ve,xe=/^--/,ye=/\\s*!important$/,we=function(n,s,a){if(xe.test(s))n.style.setProperty(s,a);else if(ye.test(a))n.style.setProperty(s,a.replace(ye,\"\"),\"important\");else{var e=Be(s);if(Array.isArray(a))for(var p=0,t=a.length;p<t;p++)n.style[e]=a[p];else n.style[e]=a}},Ee=[\"Webkit\",\"Moz\",\"ms\"],Be=x(function(n){if(ve=ve||document.createElement(\"div\").style,\"filter\"!==(n=w(n))&&n in ve)return n;for(var s=n.charAt(0).toUpperCase()+n.slice(1),a=0;a<Ee.length;a++){var e=Ee[a]+s;if(e in ve)return e}});function _e(n,s){var a=s.data,e=n.data;if(!(p(a.staticStyle)&&p(a.style)&&p(e.staticStyle)&&p(e.style))){var o,c,l=s.elm,r=e.staticStyle,u=e.normalizedStyle||e.style||{},i=r||u,k=ge(s.data.style)||{};s.data.normalizedStyle=t(k.__ob__)?O({},k):k;var d=function(n,s){var a,e={};if(s)for(var p=n;p.componentInstance;)(p=p.componentInstance._vnode)&&p.data&&(a=fe(p.data))&&O(e,a);(a=fe(n.data))&&O(e,a);for(var t=n;t=t.parent;)t.data&&(a=fe(t.data))&&O(e,a);return e}(s,!0);for(c in i)p(d[c])&&we(l,c,\"\");for(c in d)(o=d[c])!==i[c]&&we(l,c,null==o?\"\":o)}}var je={create:_e,update:_e},Ae=/\\s+/;function Oe(n,s){if(s&&(s=s.trim()))if(n.classList)s.indexOf(\" \")>-1?s.split(Ae).forEach(function(s){return n.classList.add(s)}):n.classList.add(s);else{var a=\" \"+(n.getAttribute(\"class\")||\"\")+\" \";a.indexOf(\" \"+s+\" \")<0&&n.setAttribute(\"class\",(a+s).trim())}}function Se(n,s){if(s&&(s=s.trim()))if(n.classList)s.indexOf(\" \")>-1?s.split(Ae).forEach(function(s){return n.classList.remove(s)}):n.classList.remove(s),n.classList.length||n.removeAttribute(\"class\");else{for(var a=\" \"+(n.getAttribute(\"class\")||\"\")+\" \",e=\" \"+s+\" \";a.indexOf(e)>=0;)a=a.replace(e,\" \");(a=a.trim())?n.setAttribute(\"class\",a):n.removeAttribute(\"class\")}}function Ce(n){if(n){if(\"object\"==typeof n){var s={};return!1!==n.css&&O(s,Le(n.name||\"v\")),O(s,n),s}return\"string\"==typeof n?Le(n):void 0}}var Le=x(function(n){return{enterClass:n+\"-enter\",enterToClass:n+\"-enter-to\",enterActiveClass:n+\"-enter-active\",leaveClass:n+\"-leave\",leaveToClass:n+\"-leave-to\",leaveActiveClass:n+\"-leave-active\"}}),Ke=R&&!G,Fe=\"transition\",De=\"animation\",Ie=\"transition\",Pe=\"transitionend\",Te=\"animation\",Me=\"animationend\";Ke&&(void 0===window.ontransitionend&&void 0!==window.onwebkittransitionend&&(Ie=\"WebkitTransition\",Pe=\"webkitTransitionEnd\"),void 0===window.onanimationend&&void 0!==window.onwebkitanimationend&&(Te=\"WebkitAnimation\",Me=\"webkitAnimationEnd\"));var Ne=R?window.requestAnimationFrame?window.requestAnimationFrame.bind(window):setTimeout:function(n){return n()};function $e(n){Ne(function(){Ne(n)})}function qe(n,s){var a=n._transitionClasses||(n._transitionClasses=[]);a.indexOf(s)<0&&(a.push(s),Oe(n,s))}function Ve(n,s){n._transitionClasses&&f(n._transitionClasses,s),Se(n,s)}function Ue(n,s,a){var e=He(n,s),p=e.type,t=e.timeout,o=e.propCount;if(!p)return a();var c=p===Fe?Pe:Me,l=0,r=function(){n.removeEventListener(c,u),a()},u=function(s){s.target===n&&++l>=o&&r()};setTimeout(function(){l<o&&r()},t+1),n.addEventListener(c,u)}var Re=/\\b(transform|all)(,|$)/;function He(n,s){var a,e=window.getComputedStyle(n),p=(e[Ie+\"Delay\"]||\"\").split(\", \"),t=(e[Ie+\"Duration\"]||\"\").split(\", \"),o=We(p,t),c=(e[Te+\"Delay\"]||\"\").split(\", \"),l=(e[Te+\"Duration\"]||\"\").split(\", \"),r=We(c,l),u=0,i=0;return s===Fe?o>0&&(a=Fe,u=o,i=t.length):s===De?r>0&&(a=De,u=r,i=l.length):i=(a=(u=Math.max(o,r))>0?o>r?Fe:De:null)?a===Fe?t.length:l.length:0,{type:a,timeout:u,propCount:i,hasTransform:a===Fe&&Re.test(e[Ie+\"Property\"])}}function We(n,s){for(;n.length<s.length;)n=n.concat(n);return Math.max.apply(null,s.map(function(s,a){return ze(s)+ze(n[a])}))}function ze(n){return 1e3*Number(n.slice(0,-1).replace(\",\",\".\"))}function Je(n,s){var a=n.elm;t(a._leaveCb)&&(a._leaveCb.cancelled=!0,a._leaveCb());var e=Ce(n.data.transition);if(!p(e)&&!t(a._enterCb)&&1===a.nodeType){for(var o=e.css,c=e.type,r=e.enterClass,u=e.enterToClass,i=e.enterActiveClass,k=e.appearClass,d=e.appearToClass,m=e.appearActiveClass,h=e.beforeEnter,f=e.enter,g=e.afterEnter,v=e.enterCancelled,x=e.beforeAppear,y=e.appear,w=e.afterAppear,E=e.appearCancelled,B=e.duration,_=vs,j=vs.$vnode;j&&j.parent;)_=(j=j.parent).context;var A=!_._isMounted||!n.isRootInsert;if(!A||y||\"\"===y){var O=A&&k?k:r,S=A&&m?m:i,C=A&&d?d:u,L=A&&x||h,K=A&&\"function\"==typeof y?y:f,F=A&&w||g,D=A&&E||v,P=b(l(B)?B.enter:B);0;var T=!1!==o&&!G,M=Ye(K),N=a._enterCb=I(function(){T&&(Ve(a,C),Ve(a,S)),N.cancelled?(T&&Ve(a,O),D&&D(a)):F&&F(a),a._enterCb=null});n.data.show||ts(n,\"insert\",function(){var s=a.parentNode,e=s&&s._pending&&s._pending[n.key];e&&e.tag===n.tag&&e.elm._leaveCb&&e.elm._leaveCb(),K&&K(a,N)}),L&&L(a),T&&(qe(a,O),qe(a,S),$e(function(){Ve(a,O),N.cancelled||(qe(a,C),M||(Xe(P)?setTimeout(N,P):Ue(a,c,N)))})),n.data.show&&(s&&s(),K&&K(a,N)),T||M||N()}}}function Ge(n,s){var a=n.elm;t(a._enterCb)&&(a._enterCb.cancelled=!0,a._enterCb());var e=Ce(n.data.transition);if(p(e)||1!==a.nodeType)return s();if(!t(a._leaveCb)){var o=e.css,c=e.type,r=e.leaveClass,u=e.leaveToClass,i=e.leaveActiveClass,k=e.beforeLeave,d=e.leave,m=e.afterLeave,h=e.leaveCancelled,f=e.delayLeave,g=e.duration,v=!1!==o&&!G,x=Ye(d),y=b(l(g)?g.leave:g);0;var w=a._leaveCb=I(function(){a.parentNode&&a.parentNode._pending&&(a.parentNode._pending[n.key]=null),v&&(Ve(a,u),Ve(a,i)),w.cancelled?(v&&Ve(a,r),h&&h(a)):(s(),m&&m(a)),a._leaveCb=null});f?f(E):E()}function E(){w.cancelled||(!n.data.show&&a.parentNode&&((a.parentNode._pending||(a.parentNode._pending={}))[n.key]=n),k&&k(a),v&&(qe(a,r),qe(a,i),$e(function(){Ve(a,r),w.cancelled||(qe(a,u),x||(Xe(y)?setTimeout(w,y):Ue(a,c,w)))})),d&&d(a,w),v||x||w())}}function Xe(n){return\"number\"==typeof n&&!isNaN(n)}function Ye(n){if(p(n))return!1;var s=n.fns;return t(s)?Ye(Array.isArray(s)?s[0]:s):(n._length||n.length)>1}function Qe(n,s){!0!==s.data.show&&Je(s)}var Ze=function(n){var s,a,e={},l=n.modules,r=n.nodeOps;for(s=0;s<Ua.length;++s)for(e[Ua[s]]=[],a=0;a<l.length;++a)t(l[a][Ua[s]])&&e[Ua[s]].push(l[a][Ua[s]]);function u(n){var s=r.parentNode(n);t(s)&&r.removeChild(s,n)}function i(n,s,a,p,c,l,u){if(t(n.elm)&&t(l)&&(n=l[u]=fn(n)),n.isRootInsert=!c,!function(n,s,a,p){var c=n.data;if(t(c)){var l=t(n.componentInstance)&&c.keepAlive;if(t(c=c.hook)&&t(c=c.init)&&c(n,!1),t(n.componentInstance))return k(n,s),d(a,n.elm,p),o(l)&&function(n,s,a,p){for(var o,c=n;c.componentInstance;)if(c=c.componentInstance._vnode,t(o=c.data)&&t(o=o.transition)){for(o=0;o<e.activate.length;++o)e.activate[o](Va,c);s.push(c);break}d(a,n.elm,p)}(n,s,a,p),!0}}(n,s,a,p)){var i=n.data,m=n.children,h=n.tag;t(h)?(n.elm=n.ns?r.createElementNS(n.ns,h):r.createElement(h,n),g(n),b(n,m,s),t(i)&&f(n,s),d(a,n.elm,p)):o(n.isComment)?(n.elm=r.createComment(n.text),d(a,n.elm,p)):(n.elm=r.createTextNode(n.text),d(a,n.elm,p))}}function k(n,s){t(n.data.pendingInsert)&&(s.push.apply(s,n.data.pendingInsert),n.data.pendingInsert=null),n.elm=n.componentInstance.$el,h(n)?(f(n,s),g(n)):(qa(n),s.push(n))}function d(n,s,a){t(n)&&(t(a)?r.parentNode(a)===n&&r.insertBefore(n,s,a):r.appendChild(n,s))}function b(n,s,a){if(Array.isArray(s))for(var e=0;e<s.length;++e)i(s[e],a,n.elm,null,!0,s,e);else c(n.text)&&r.appendChild(n.elm,r.createTextNode(String(n.text)))}function h(n){for(;n.componentInstance;)n=n.componentInstance._vnode;return t(n.tag)}function f(n,a){for(var p=0;p<e.create.length;++p)e.create[p](Va,n);t(s=n.data.hook)&&(t(s.create)&&s.create(Va,n),t(s.insert)&&a.push(n))}function g(n){var s;if(t(s=n.fnScopeId))r.setStyleScope(n.elm,s);else for(var a=n;a;)t(s=a.context)&&t(s=s.$options._scopeId)&&r.setStyleScope(n.elm,s),a=a.parent;t(s=vs)&&s!==n.context&&s!==n.fnContext&&t(s=s.$options._scopeId)&&r.setStyleScope(n.elm,s)}function v(n,s,a,e,p,t){for(;e<=p;++e)i(a[e],t,n,s,!1,a,e)}function x(n){var s,a,p=n.data;if(t(p))for(t(s=p.hook)&&t(s=s.destroy)&&s(n),s=0;s<e.destroy.length;++s)e.destroy[s](n);if(t(s=n.children))for(a=0;a<n.children.length;++a)x(n.children[a])}function y(n,s,a,e){for(;a<=e;++a){var p=s[a];t(p)&&(t(p.tag)?(w(p),x(p)):u(p.elm))}}function w(n,s){if(t(s)||t(n.data)){var a,p=e.remove.length+1;for(t(s)?s.listeners+=p:s=function(n,s){function a(){0==--a.listeners&&u(n)}return a.listeners=s,a}(n.elm,p),t(a=n.componentInstance)&&t(a=a._vnode)&&t(a.data)&&w(a,s),a=0;a<e.remove.length;++a)e.remove[a](n,s);t(a=n.data.hook)&&t(a=a.remove)?a(n,s):s()}else u(n.elm)}function E(n,s,a,e){for(var p=a;p<e;p++){var o=s[p];if(t(o)&&Ra(n,o))return p}}function B(n,s,a,c,l,u){if(n!==s){t(s.elm)&&t(c)&&(s=c[l]=fn(s));var k=s.elm=n.elm;if(o(n.isAsyncPlaceholder))t(s.asyncFactory.resolved)?A(n.elm,s,a):s.isAsyncPlaceholder=!0;else if(o(s.isStatic)&&o(n.isStatic)&&s.key===n.key&&(o(s.isCloned)||o(s.isOnce)))s.componentInstance=n.componentInstance;else{var d,b=s.data;t(b)&&t(d=b.hook)&&t(d=d.prepatch)&&d(n,s);var m=n.children,f=s.children;if(t(b)&&h(s)){for(d=0;d<e.update.length;++d)e.update[d](n,s);t(d=b.hook)&&t(d=d.update)&&d(n,s)}p(s.text)?t(m)&&t(f)?m!==f&&function(n,s,a,e,o){for(var c,l,u,k=0,d=0,b=s.length-1,m=s[0],h=s[b],f=a.length-1,g=a[0],x=a[f],w=!o;k<=b&&d<=f;)p(m)?m=s[++k]:p(h)?h=s[--b]:Ra(m,g)?(B(m,g,e,a,d),m=s[++k],g=a[++d]):Ra(h,x)?(B(h,x,e,a,f),h=s[--b],x=a[--f]):Ra(m,x)?(B(m,x,e,a,f),w&&r.insertBefore(n,m.elm,r.nextSibling(h.elm)),m=s[++k],x=a[--f]):Ra(h,g)?(B(h,g,e,a,d),w&&r.insertBefore(n,h.elm,m.elm),h=s[--b],g=a[++d]):(p(c)&&(c=Ha(s,k,b)),p(l=t(g.key)?c[g.key]:E(g,s,k,b))?i(g,e,n,m.elm,!1,a,d):Ra(u=s[l],g)?(B(u,g,e,a,d),s[l]=void 0,w&&r.insertBefore(n,u.elm,m.elm)):i(g,e,n,m.elm,!1,a,d),g=a[++d]);k>b?v(n,p(a[f+1])?null:a[f+1].elm,a,d,f,e):d>f&&y(0,s,k,b)}(k,m,f,a,u):t(f)?(t(n.text)&&r.setTextContent(k,\"\"),v(k,null,f,0,f.length-1,a)):t(m)?y(0,m,0,m.length-1):t(n.text)&&r.setTextContent(k,\"\"):n.text!==s.text&&r.setTextContent(k,s.text),t(b)&&t(d=b.hook)&&t(d=d.postpatch)&&d(n,s)}}}function _(n,s,a){if(o(a)&&t(n.parent))n.parent.data.pendingInsert=s;else for(var e=0;e<s.length;++e)s[e].data.hook.insert(s[e])}var j=m(\"attrs,class,staticClass,staticStyle,key\");function A(n,s,a,e){var p,c=s.tag,l=s.data,r=s.children;if(e=e||l&&l.pre,s.elm=n,o(s.isComment)&&t(s.asyncFactory))return s.isAsyncPlaceholder=!0,!0;if(t(l)&&(t(p=l.hook)&&t(p=p.init)&&p(s,!0),t(p=s.componentInstance)))return k(s,a),!0;if(t(c)){if(t(r))if(n.hasChildNodes())if(t(p=l)&&t(p=p.domProps)&&t(p=p.innerHTML)){if(p!==n.innerHTML)return!1}else{for(var u=!0,i=n.firstChild,d=0;d<r.length;d++){if(!i||!A(i,r[d],a,e)){u=!1;break}i=i.nextSibling}if(!u||i)return!1}else b(s,r,a);if(t(l)){var m=!1;for(var h in l)if(!j(h)){m=!0,f(s,a);break}!m&&l.class&&ns(l.class)}}else n.data!==s.text&&(n.data=s.text);return!0}return function(n,s,a,c){if(!p(s)){var l,u=!1,k=[];if(p(n))u=!0,i(s,k);else{var d=t(n.nodeType);if(!d&&Ra(n,s))B(n,s,k,null,null,c);else{if(d){if(1===n.nodeType&&n.hasAttribute(P)&&(n.removeAttribute(P),a=!0),o(a)&&A(n,s,k))return _(s,k,!0),n;l=n,n=new dn(r.tagName(l).toLowerCase(),{},[],void 0,l)}var b=n.elm,m=r.parentNode(b);if(i(s,k,b._leaveCb?null:m,r.nextSibling(b)),t(s.parent))for(var f=s.parent,g=h(s);f;){for(var v=0;v<e.destroy.length;++v)e.destroy[v](f);if(f.elm=s.elm,g){for(var w=0;w<e.create.length;++w)e.create[w](Va,f);var E=f.data.hook.insert;if(E.merged)for(var j=1;j<E.fns.length;j++)E.fns[j]()}else qa(f);f=f.parent}t(m)?y(0,[n],0,0):t(n.tag)&&x(n)}}return _(s,k,u),s.elm}t(n)&&x(n)}}({nodeOps:Na,modules:[ae,te,ke,me,je,R?{create:Qe,activate:Qe,remove:function(n,s){!0!==n.data.show?Ge(n,s):s()}}:{}].concat(Qa)});G&&document.addEventListener(\"selectionchange\",function(){var n=document.activeElement;n&&n.vmodel&&cp(n,\"input\")});var np={inserted:function(n,s,a,e){\"select\"===a.tag?(e.elm&&!e.elm._vOptions?ts(a,\"postpatch\",function(){np.componentUpdated(n,s,a)}):sp(n,s,a.context),n._vOptions=[].map.call(n.options,pp)):(\"textarea\"===a.tag||Ma(n.type))&&(n._vModifiers=s.modifiers,s.modifiers.lazy||(n.addEventListener(\"compositionstart\",tp),n.addEventListener(\"compositionend\",op),n.addEventListener(\"change\",op),G&&(n.vmodel=!0)))},componentUpdated:function(n,s,a){if(\"select\"===a.tag){sp(n,s,a.context);var e=n._vOptions,p=n._vOptions=[].map.call(n.options,pp);if(p.some(function(n,s){return!F(n,e[s])}))(n.multiple?s.value.some(function(n){return ep(n,p)}):s.value!==s.oldValue&&ep(s.value,p))&&cp(n,\"change\")}}};function sp(n,s,a){ap(n,s,a),(J||X)&&setTimeout(function(){ap(n,s,a)},0)}function ap(n,s,a){var e=s.value,p=n.multiple;if(!p||Array.isArray(e)){for(var t,o,c=0,l=n.options.length;c<l;c++)if(o=n.options[c],p)t=D(e,pp(o))>-1,o.selected!==t&&(o.selected=t);else if(F(pp(o),e))return void(n.selectedIndex!==c&&(n.selectedIndex=c));p||(n.selectedIndex=-1)}}function ep(n,s){return s.every(function(s){return!F(s,n)})}function pp(n){return\"_value\"in n?n._value:n.value}function tp(n){n.target.composing=!0}function op(n){n.target.composing&&(n.target.composing=!1,cp(n.target,\"input\"))}function cp(n,s){var a=document.createEvent(\"HTMLEvents\");a.initEvent(s,!0,!0),n.dispatchEvent(a)}function lp(n){return!n.componentInstance||n.data&&n.data.transition?n:lp(n.componentInstance._vnode)}var rp={model:np,show:{bind:function(n,s,a){var e=s.value,p=(a=lp(a)).data&&a.data.transition,t=n.__vOriginalDisplay=\"none\"===n.style.display?\"\":n.style.display;e&&p?(a.data.show=!0,Je(a,function(){n.style.display=t})):n.style.display=e?t:\"none\"},update:function(n,s,a){var e=s.value;!e!=!s.oldValue&&((a=lp(a)).data&&a.data.transition?(a.data.show=!0,e?Je(a,function(){n.style.display=n.__vOriginalDisplay}):Ge(a,function(){n.style.display=\"none\"})):n.style.display=e?n.__vOriginalDisplay:\"none\")},unbind:function(n,s,a,e,p){p||(n.style.display=n.__vOriginalDisplay)}}},up={name:String,appear:Boolean,css:Boolean,mode:String,type:String,enterClass:String,leaveClass:String,enterToClass:String,leaveToClass:String,enterActiveClass:String,leaveActiveClass:String,appearClass:String,appearActiveClass:String,appearToClass:String,duration:[Number,String,Object]};function ip(n){var s=n&&n.componentOptions;return s&&s.Ctor.options.abstract?ip(is(s.children)):n}function kp(n){var s={},a=n.$options;for(var e in a.propsData)s[e]=n[e];var p=a._parentListeners;for(var t in p)s[w(t)]=p[t];return s}function dp(n,s){if(/\\d-keep-alive$/.test(s.tag))return n(\"keep-alive\",{props:s.componentOptions.propsData})}var bp=function(n){return n.tag||us(n)},mp=function(n){return\"show\"===n.name},hp={name:\"transition\",props:up,abstract:!0,render:function(n){var s=this,a=this.$slots.default;if(a&&(a=a.filter(bp)).length){0;var e=this.mode;0;var p=a[0];if(function(n){for(;n=n.parent;)if(n.data.transition)return!0}(this.$vnode))return p;var t=ip(p);if(!t)return p;if(this._leaving)return dp(n,p);var o=\"__transition-\"+this._uid+\"-\";t.key=null==t.key?t.isComment?o+\"comment\":o+t.tag:c(t.key)?0===String(t.key).indexOf(o)?t.key:o+t.key:t.key;var l=(t.data||(t.data={})).transition=kp(this),r=this._vnode,u=ip(r);if(t.data.directives&&t.data.directives.some(mp)&&(t.data.show=!0),u&&u.data&&!function(n,s){return s.key===n.key&&s.tag===n.tag}(t,u)&&!us(u)&&(!u.componentInstance||!u.componentInstance._vnode.isComment)){var i=u.data.transition=O({},l);if(\"out-in\"===e)return this._leaving=!0,ts(i,\"afterLeave\",function(){s._leaving=!1,s.$forceUpdate()}),dp(n,p);if(\"in-out\"===e){if(us(t))return r;var k,d=function(){k()};ts(l,\"afterEnter\",d),ts(l,\"enterCancelled\",d),ts(i,\"delayLeave\",function(n){k=n})}}return p}}},fp=O({tag:String,moveClass:String},up);function gp(n){n.elm._moveCb&&n.elm._moveCb(),n.elm._enterCb&&n.elm._enterCb()}function vp(n){n.data.newPos=n.elm.getBoundingClientRect()}function xp(n){var s=n.data.pos,a=n.data.newPos,e=s.left-a.left,p=s.top-a.top;if(e||p){n.data.moved=!0;var t=n.elm.style;t.transform=t.WebkitTransform=\"translate(\"+e+\"px,\"+p+\"px)\",t.transitionDuration=\"0s\"}}delete fp.mode;var yp={Transition:hp,TransitionGroup:{props:fp,beforeMount:function(){var n=this,s=this._update;this._update=function(a,e){var p=xs(n);n.__patch__(n._vnode,n.kept,!1,!0),n._vnode=n.kept,p(),s.call(n,a,e)}},render:function(n){for(var s=this.tag||this.$vnode.data.tag||\"span\",a=Object.create(null),e=this.prevChildren=this.children,p=this.$slots.default||[],t=this.children=[],o=kp(this),c=0;c<p.length;c++){var l=p[c];if(l.tag)if(null!=l.key&&0!==String(l.key).indexOf(\"__vlist\"))t.push(l),a[l.key]=l,(l.data||(l.data={})).transition=o;else;}if(e){for(var r=[],u=[],i=0;i<e.length;i++){var k=e[i];k.data.transition=o,k.data.pos=k.elm.getBoundingClientRect(),a[k.key]?r.push(k):u.push(k)}this.kept=n(s,null,r),this.removed=u}return n(s,null,t)},updated:function(){var n=this.prevChildren,s=this.moveClass||(this.name||\"v\")+\"-move\";n.length&&this.hasMove(n[0].elm,s)&&(n.forEach(gp),n.forEach(vp),n.forEach(xp),this._reflow=document.body.offsetHeight,n.forEach(function(n){if(n.data.moved){var a=n.elm,e=a.style;qe(a,s),e.transform=e.WebkitTransform=e.transitionDuration=\"\",a.addEventListener(Pe,a._moveCb=function n(e){e&&e.target!==a||e&&!/transform$/.test(e.propertyName)||(a.removeEventListener(Pe,n),a._moveCb=null,Ve(a,s))})}}))},methods:{hasMove:function(n,s){if(!Ke)return!1;if(this._hasMove)return this._hasMove;var a=n.cloneNode();n._transitionClasses&&n._transitionClasses.forEach(function(n){Se(a,n)}),Oe(a,s),a.style.display=\"none\",this.$el.appendChild(a);var e=He(a);return this.$el.removeChild(a),this._hasMove=e.hasTransform}}}};da.config.mustUseProp=function(n,s,a){return\"value\"===a&&wa(n)&&\"button\"!==s||\"selected\"===a&&\"option\"===n||\"checked\"===a&&\"input\"===n||\"muted\"===a&&\"video\"===n},da.config.isReservedTag=Pa,da.config.isReservedAttr=ya,da.config.getTagNamespace=function(n){return Ia(n)?\"svg\":\"math\"===n?\"math\":void 0},da.config.isUnknownElement=function(n){if(!R)return!0;if(Pa(n))return!1;if(n=n.toLowerCase(),null!=Ta[n])return Ta[n];var s=document.createElement(n);return n.indexOf(\"-\")>-1?Ta[n]=s.constructor===window.HTMLUnknownElement||s.constructor===window.HTMLElement:Ta[n]=/HTMLUnknownElement/.test(s.toString())},O(da.options.directives,rp),O(da.options.components,yp),da.prototype.__patch__=R?Ze:C,da.prototype.$mount=function(n,s){return function(n,s,a){var e;return n.$el=s,n.$options.render||(n.$options.render=mn),Es(n,\"beforeMount\"),e=function(){n._update(n._render(),a)},new Ks(n,e,C,{before:function(){n._isMounted&&!n._isDestroyed&&Es(n,\"beforeUpdate\")}},!0),a=!1,null==n.$vnode&&(n._isMounted=!0,Es(n,\"mounted\")),n}(this,n=n&&R?function(n){if(\"string\"==typeof n){var s=document.querySelector(n);return s||document.createElement(\"div\")}return n}(n):void 0,s)},R&&setTimeout(function(){N.devtools&&an&&an.emit(\"init\",da)},0);var wp=da;\n/*!\n  * vue-router v3.0.2\n  * (c) 2018 Evan You\n  * @license MIT\n  */function Ep(n){return Object.prototype.toString.call(n).indexOf(\"Error\")>-1}function Bp(n,s){for(var a in s)n[a]=s[a];return n}var _p={name:\"RouterView\",functional:!0,props:{name:{type:String,default:\"default\"}},render:function(n,s){var a=s.props,e=s.children,p=s.parent,t=s.data;t.routerView=!0;for(var o=p.$createElement,c=a.name,l=p.$route,r=p._routerViewCache||(p._routerViewCache={}),u=0,i=!1;p&&p._routerRoot!==p;)p.$vnode&&p.$vnode.data.routerView&&u++,p._inactive&&(i=!0),p=p.$parent;if(t.routerViewDepth=u,i)return o(r[c],t,e);var k=l.matched[u];if(!k)return r[c]=null,o();var d=r[c]=k.components[c];t.registerRouteInstance=function(n,s){var a=k.instances[c];(s&&a!==n||!s&&a===n)&&(k.instances[c]=s)},(t.hook||(t.hook={})).prepatch=function(n,s){k.instances[c]=s.componentInstance};var b=t.props=function(n,s){switch(typeof s){case\"undefined\":return;case\"object\":return s;case\"function\":return s(n);case\"boolean\":return s?n.params:void 0;default:0}}(l,k.props&&k.props[c]);if(b){b=t.props=Bp({},b);var m=t.attrs=t.attrs||{};for(var h in b)d.props&&h in d.props||(m[h]=b[h],delete b[h])}return o(d,t,e)}};var jp=/[!'()*]/g,Ap=function(n){return\"%\"+n.charCodeAt(0).toString(16)},Op=/%2C/g,Sp=function(n){return encodeURIComponent(n).replace(jp,Ap).replace(Op,\",\")},Cp=decodeURIComponent;function Lp(n){var s={};return(n=n.trim().replace(/^(\\?|#|&)/,\"\"))?(n.split(\"&\").forEach(function(n){var a=n.replace(/\\+/g,\" \").split(\"=\"),e=Cp(a.shift()),p=a.length>0?Cp(a.join(\"=\")):null;void 0===s[e]?s[e]=p:Array.isArray(s[e])?s[e].push(p):s[e]=[s[e],p]}),s):s}function Kp(n){var s=n?Object.keys(n).map(function(s){var a=n[s];if(void 0===a)return\"\";if(null===a)return Sp(s);if(Array.isArray(a)){var e=[];return a.forEach(function(n){void 0!==n&&(null===n?e.push(Sp(s)):e.push(Sp(s)+\"=\"+Sp(n)))}),e.join(\"&\")}return Sp(s)+\"=\"+Sp(a)}).filter(function(n){return n.length>0}).join(\"&\"):null;return s?\"?\"+s:\"\"}var Fp=/\\/?$/;function Dp(n,s,a,e){var p=e&&e.options.stringifyQuery,t=s.query||{};try{t=Ip(t)}catch(n){}var o={name:s.name||n&&n.name,meta:n&&n.meta||{},path:s.path||\"/\",hash:s.hash||\"\",query:t,params:s.params||{},fullPath:Mp(s,p),matched:n?Tp(n):[]};return a&&(o.redirectedFrom=Mp(a,p)),Object.freeze(o)}function Ip(n){if(Array.isArray(n))return n.map(Ip);if(n&&\"object\"==typeof n){var s={};for(var a in n)s[a]=Ip(n[a]);return s}return n}var Pp=Dp(null,{path:\"/\"});function Tp(n){for(var s=[];n;)s.unshift(n),n=n.parent;return s}function Mp(n,s){var a=n.path,e=n.query;void 0===e&&(e={});var p=n.hash;return void 0===p&&(p=\"\"),(a||\"/\")+(s||Kp)(e)+p}function Np(n,s){return s===Pp?n===s:!!s&&(n.path&&s.path?n.path.replace(Fp,\"\")===s.path.replace(Fp,\"\")&&n.hash===s.hash&&$p(n.query,s.query):!(!n.name||!s.name)&&(n.name===s.name&&n.hash===s.hash&&$p(n.query,s.query)&&$p(n.params,s.params)))}function $p(n,s){if(void 0===n&&(n={}),void 0===s&&(s={}),!n||!s)return n===s;var a=Object.keys(n),e=Object.keys(s);return a.length===e.length&&a.every(function(a){var e=n[a],p=s[a];return\"object\"==typeof e&&\"object\"==typeof p?$p(e,p):String(e)===String(p)})}var qp,Vp=[String,Object],Up=[String,Array],Rp={name:\"RouterLink\",props:{to:{type:Vp,required:!0},tag:{type:String,default:\"a\"},exact:Boolean,append:Boolean,replace:Boolean,activeClass:String,exactActiveClass:String,event:{type:Up,default:\"click\"}},render:function(n){var s=this,a=this.$router,e=this.$route,p=a.resolve(this.to,e,this.append),t=p.location,o=p.route,c=p.href,l={},r=a.options.linkActiveClass,u=a.options.linkExactActiveClass,i=null==r?\"router-link-active\":r,k=null==u?\"router-link-exact-active\":u,d=null==this.activeClass?i:this.activeClass,b=null==this.exactActiveClass?k:this.exactActiveClass,m=t.path?Dp(null,t,null,a):o;l[b]=Np(e,m),l[d]=this.exact?l[b]:function(n,s){return 0===n.path.replace(Fp,\"/\").indexOf(s.path.replace(Fp,\"/\"))&&(!s.hash||n.hash===s.hash)&&function(n,s){for(var a in s)if(!(a in n))return!1;return!0}(n.query,s.query)}(e,m);var h=function(n){Hp(n)&&(s.replace?a.replace(t):a.push(t))},f={click:Hp};Array.isArray(this.event)?this.event.forEach(function(n){f[n]=h}):f[this.event]=h;var g={class:l};if(\"a\"===this.tag)g.on=f,g.attrs={href:c};else{var v=function n(s){if(s)for(var a,e=0;e<s.length;e++){if(\"a\"===(a=s[e]).tag)return a;if(a.children&&(a=n(a.children)))return a}}(this.$slots.default);if(v)v.isStatic=!1,(v.data=Bp({},v.data)).on=f,(v.data.attrs=Bp({},v.data.attrs)).href=c;else g.on=f}return n(this.tag,g,this.$slots.default)}};function Hp(n){if(!(n.metaKey||n.altKey||n.ctrlKey||n.shiftKey||n.defaultPrevented||void 0!==n.button&&0!==n.button)){if(n.currentTarget&&n.currentTarget.getAttribute){var s=n.currentTarget.getAttribute(\"target\");if(/\\b_blank\\b/i.test(s))return}return n.preventDefault&&n.preventDefault(),!0}}var Wp=\"undefined\"!=typeof window;function zp(n,s,a){var e=n.charAt(0);if(\"/\"===e)return n;if(\"?\"===e||\"#\"===e)return s+n;var p=s.split(\"/\");a&&p[p.length-1]||p.pop();for(var t=n.replace(/^\\//,\"\").split(\"/\"),o=0;o<t.length;o++){var c=t[o];\"..\"===c?p.pop():\".\"!==c&&p.push(c)}return\"\"!==p[0]&&p.unshift(\"\"),p.join(\"/\")}function Jp(n){return n.replace(/\\/\\//g,\"/\")}var Gp=Array.isArray||function(n){return\"[object Array]\"==Object.prototype.toString.call(n)},Xp=ut,Yp=at,Qp=function(n,s){return pt(at(n,s))},Zp=pt,nt=rt,st=new RegExp([\"(\\\\\\\\.)\",\"([\\\\/.])?(?:(?:\\\\:(\\\\w+)(?:\\\\(((?:\\\\\\\\.|[^\\\\\\\\()])+)\\\\))?|\\\\(((?:\\\\\\\\.|[^\\\\\\\\()])+)\\\\))([+*?])?|(\\\\*))\"].join(\"|\"),\"g\");function at(n,s){for(var a,e=[],p=0,t=0,o=\"\",c=s&&s.delimiter||\"/\";null!=(a=st.exec(n));){var l=a[0],r=a[1],u=a.index;if(o+=n.slice(t,u),t=u+l.length,r)o+=r[1];else{var i=n[t],k=a[2],d=a[3],b=a[4],m=a[5],h=a[6],f=a[7];o&&(e.push(o),o=\"\");var g=null!=k&&null!=i&&i!==k,v=\"+\"===h||\"*\"===h,x=\"?\"===h||\"*\"===h,y=a[2]||c,w=b||m;e.push({name:d||p++,prefix:k||\"\",delimiter:y,optional:x,repeat:v,partial:g,asterisk:!!f,pattern:w?ot(w):f?\".*\":\"[^\"+tt(y)+\"]+?\"})}}return t<n.length&&(o+=n.substr(t)),o&&e.push(o),e}function et(n){return encodeURI(n).replace(/[\\/?#]/g,function(n){return\"%\"+n.charCodeAt(0).toString(16).toUpperCase()})}function pt(n){for(var s=new Array(n.length),a=0;a<n.length;a++)\"object\"==typeof n[a]&&(s[a]=new RegExp(\"^(?:\"+n[a].pattern+\")$\"));return function(a,e){for(var p=\"\",t=a||{},o=(e||{}).pretty?et:encodeURIComponent,c=0;c<n.length;c++){var l=n[c];if(\"string\"!=typeof l){var r,u=t[l.name];if(null==u){if(l.optional){l.partial&&(p+=l.prefix);continue}throw new TypeError('Expected \"'+l.name+'\" to be defined')}if(Gp(u)){if(!l.repeat)throw new TypeError('Expected \"'+l.name+'\" to not repeat, but received `'+JSON.stringify(u)+\"`\");if(0===u.length){if(l.optional)continue;throw new TypeError('Expected \"'+l.name+'\" to not be empty')}for(var i=0;i<u.length;i++){if(r=o(u[i]),!s[c].test(r))throw new TypeError('Expected all \"'+l.name+'\" to match \"'+l.pattern+'\", but received `'+JSON.stringify(r)+\"`\");p+=(0===i?l.prefix:l.delimiter)+r}}else{if(r=l.asterisk?encodeURI(u).replace(/[?#]/g,function(n){return\"%\"+n.charCodeAt(0).toString(16).toUpperCase()}):o(u),!s[c].test(r))throw new TypeError('Expected \"'+l.name+'\" to match \"'+l.pattern+'\", but received \"'+r+'\"');p+=l.prefix+r}}else p+=l}return p}}function tt(n){return n.replace(/([.+*?=^!:${}()[\\]|\\/\\\\])/g,\"\\\\$1\")}function ot(n){return n.replace(/([=!:$\\/()])/g,\"\\\\$1\")}function ct(n,s){return n.keys=s,n}function lt(n){return n.sensitive?\"\":\"i\"}function rt(n,s,a){Gp(s)||(a=s||a,s=[]);for(var e=(a=a||{}).strict,p=!1!==a.end,t=\"\",o=0;o<n.length;o++){var c=n[o];if(\"string\"==typeof c)t+=tt(c);else{var l=tt(c.prefix),r=\"(?:\"+c.pattern+\")\";s.push(c),c.repeat&&(r+=\"(?:\"+l+r+\")*\"),t+=r=c.optional?c.partial?l+\"(\"+r+\")?\":\"(?:\"+l+\"(\"+r+\"))?\":l+\"(\"+r+\")\"}}var u=tt(a.delimiter||\"/\"),i=t.slice(-u.length)===u;return e||(t=(i?t.slice(0,-u.length):t)+\"(?:\"+u+\"(?=$))?\"),t+=p?\"$\":e&&i?\"\":\"(?=\"+u+\"|$)\",ct(new RegExp(\"^\"+t,lt(a)),s)}function ut(n,s,a){return Gp(s)||(a=s||a,s=[]),a=a||{},n instanceof RegExp?function(n,s){var a=n.source.match(/\\((?!\\?)/g);if(a)for(var e=0;e<a.length;e++)s.push({name:e,prefix:null,delimiter:null,optional:!1,repeat:!1,partial:!1,asterisk:!1,pattern:null});return ct(n,s)}(n,s):Gp(n)?function(n,s,a){for(var e=[],p=0;p<n.length;p++)e.push(ut(n[p],s,a).source);return ct(new RegExp(\"(?:\"+e.join(\"|\")+\")\",lt(a)),s)}(n,s,a):function(n,s,a){return rt(at(n,a),s,a)}(n,s,a)}Xp.parse=Yp,Xp.compile=Qp,Xp.tokensToFunction=Zp,Xp.tokensToRegExp=nt;var it=Object.create(null);function kt(n,s,a){try{return(it[n]||(it[n]=Xp.compile(n)))(s||{},{pretty:!0})}catch(n){return\"\"}}function dt(n,s,a,e){var p=s||[],t=a||Object.create(null),o=e||Object.create(null);n.forEach(function(n){!function n(s,a,e,p,t,o){var c=p.path;var l=p.name;0;var r=p.pathToRegexpOptions||{};var u=function(n,s,a){a||(n=n.replace(/\\/$/,\"\"));if(\"/\"===n[0])return n;if(null==s)return n;return Jp(s.path+\"/\"+n)}(c,t,r.strict);\"boolean\"==typeof p.caseSensitive&&(r.sensitive=p.caseSensitive);var i={path:u,regex:bt(u,r),components:p.components||{default:p.component},instances:{},name:l,parent:t,matchAs:o,redirect:p.redirect,beforeEnter:p.beforeEnter,meta:p.meta||{},props:null==p.props?{}:p.components?p.props:{default:p.props}};p.children&&p.children.forEach(function(p){var t=o?Jp(o+\"/\"+p.path):void 0;n(s,a,e,p,i,t)});if(void 0!==p.alias){var k=Array.isArray(p.alias)?p.alias:[p.alias];k.forEach(function(o){var c={path:o,children:p.children};n(s,a,e,c,t,i.path||\"/\")})}a[i.path]||(s.push(i.path),a[i.path]=i);l&&(e[l]||(e[l]=i))}(p,t,o,n)});for(var c=0,l=p.length;c<l;c++)\"*\"===p[c]&&(p.push(p.splice(c,1)[0]),l--,c--);return{pathList:p,pathMap:t,nameMap:o}}function bt(n,s){return Xp(n,[],s)}function mt(n,s,a,e){var p=\"string\"==typeof n?{path:n}:n;if(p.name||p._normalized)return p;if(!p.path&&p.params&&s){(p=Bp({},p))._normalized=!0;var t=Bp(Bp({},s.params),p.params);if(s.name)p.name=s.name,p.params=t;else if(s.matched.length){var o=s.matched[s.matched.length-1].path;p.path=kt(o,t,s.path)}else 0;return p}var c=function(n){var s=\"\",a=\"\",e=n.indexOf(\"#\");e>=0&&(s=n.slice(e),n=n.slice(0,e));var p=n.indexOf(\"?\");return p>=0&&(a=n.slice(p+1),n=n.slice(0,p)),{path:n,query:a,hash:s}}(p.path||\"\"),l=s&&s.path||\"/\",r=c.path?zp(c.path,l,a||p.append):l,u=function(n,s,a){void 0===s&&(s={});var e,p=a||Lp;try{e=p(n||\"\")}catch(n){e={}}for(var t in s)e[t]=s[t];return e}(c.query,p.query,e&&e.options.parseQuery),i=p.hash||c.hash;return i&&\"#\"!==i.charAt(0)&&(i=\"#\"+i),{_normalized:!0,path:r,query:u,hash:i}}function ht(n,s){var a=dt(n),e=a.pathList,p=a.pathMap,t=a.nameMap;function o(n,a,o){var c=mt(n,a,!1,s),r=c.name;if(r){var u=t[r];if(!u)return l(null,c);var i=u.regex.keys.filter(function(n){return!n.optional}).map(function(n){return n.name});if(\"object\"!=typeof c.params&&(c.params={}),a&&\"object\"==typeof a.params)for(var k in a.params)!(k in c.params)&&i.indexOf(k)>-1&&(c.params[k]=a.params[k]);if(u)return c.path=kt(u.path,c.params),l(u,c,o)}else if(c.path){c.params={};for(var d=0;d<e.length;d++){var b=e[d],m=p[b];if(ft(m.regex,c.path,c.params))return l(m,c,o)}}return l(null,c)}function c(n,a){var e=n.redirect,p=\"function\"==typeof e?e(Dp(n,a,null,s)):e;if(\"string\"==typeof p&&(p={path:p}),!p||\"object\"!=typeof p)return l(null,a);var c=p,r=c.name,u=c.path,i=a.query,k=a.hash,d=a.params;if(i=c.hasOwnProperty(\"query\")?c.query:i,k=c.hasOwnProperty(\"hash\")?c.hash:k,d=c.hasOwnProperty(\"params\")?c.params:d,r){t[r];return o({_normalized:!0,name:r,query:i,hash:k,params:d},void 0,a)}if(u){var b=function(n,s){return zp(n,s.parent?s.parent.path:\"/\",!0)}(u,n);return o({_normalized:!0,path:kt(b,d),query:i,hash:k},void 0,a)}return l(null,a)}function l(n,a,e){return n&&n.redirect?c(n,e||a):n&&n.matchAs?function(n,s,a){var e=o({_normalized:!0,path:kt(a,s.params)});if(e){var p=e.matched,t=p[p.length-1];return s.params=e.params,l(t,s)}return l(null,s)}(0,a,n.matchAs):Dp(n,a,e,s)}return{match:o,addRoutes:function(n){dt(n,e,p,t)}}}function ft(n,s,a){var e=s.match(n);if(!e)return!1;if(!a)return!0;for(var p=1,t=e.length;p<t;++p){var o=n.keys[p-1],c=\"string\"==typeof e[p]?decodeURIComponent(e[p]):e[p];o&&(a[o.name||\"pathMatch\"]=c)}return!0}var gt=Object.create(null);function vt(){window.history.replaceState({key:Lt()},\"\",window.location.href.replace(window.location.origin,\"\")),window.addEventListener(\"popstate\",function(n){var s;yt(),n.state&&n.state.key&&(s=n.state.key,St=s)})}function xt(n,s,a,e){if(n.app){var p=n.options.scrollBehavior;p&&n.app.$nextTick(function(){var t=function(){var n=Lt();if(n)return gt[n]}(),o=p.call(n,s,a,e?t:null);o&&(\"function\"==typeof o.then?o.then(function(n){_t(n,t)}).catch(function(n){0}):_t(o,t))})}}function yt(){var n=Lt();n&&(gt[n]={x:window.pageXOffset,y:window.pageYOffset})}function wt(n){return Bt(n.x)||Bt(n.y)}function Et(n){return{x:Bt(n.x)?n.x:window.pageXOffset,y:Bt(n.y)?n.y:window.pageYOffset}}function Bt(n){return\"number\"==typeof n}function _t(n,s){var a,e=\"object\"==typeof n;if(e&&\"string\"==typeof n.selector){var p=document.querySelector(n.selector);if(p){var t=n.offset&&\"object\"==typeof n.offset?n.offset:{};s=function(n,s){var a=document.documentElement.getBoundingClientRect(),e=n.getBoundingClientRect();return{x:e.left-a.left-s.x,y:e.top-a.top-s.y}}(p,t={x:Bt((a=t).x)?a.x:0,y:Bt(a.y)?a.y:0})}else wt(n)&&(s=Et(n))}else e&&wt(n)&&(s=Et(n));s&&window.scrollTo(s.x,s.y)}var jt,At=Wp&&((-1===(jt=window.navigator.userAgent).indexOf(\"Android 2.\")&&-1===jt.indexOf(\"Android 4.0\")||-1===jt.indexOf(\"Mobile Safari\")||-1!==jt.indexOf(\"Chrome\")||-1!==jt.indexOf(\"Windows Phone\"))&&window.history&&\"pushState\"in window.history),Ot=Wp&&window.performance&&window.performance.now?window.performance:Date,St=Ct();function Ct(){return Ot.now().toFixed(3)}function Lt(){return St}function Kt(n,s){yt();var a=window.history;try{s?a.replaceState({key:St},\"\",n):(St=Ct(),a.pushState({key:St},\"\",n))}catch(a){window.location[s?\"replace\":\"assign\"](n)}}function Ft(n){Kt(n,!0)}function Dt(n,s,a){var e=function(p){p>=n.length?a():n[p]?s(n[p],function(){e(p+1)}):e(p+1)};e(0)}function It(n){return function(s,a,e){var p=!1,t=0,o=null;Pt(n,function(n,s,a,c){if(\"function\"==typeof n&&void 0===n.cid){p=!0,t++;var l,r=Nt(function(s){var p;((p=s).__esModule||Mt&&\"Module\"===p[Symbol.toStringTag])&&(s=s.default),n.resolved=\"function\"==typeof s?s:qp.extend(s),a.components[c]=s,--t<=0&&e()}),u=Nt(function(n){var s=\"Failed to resolve async component \"+c+\": \"+n;o||(o=Ep(n)?n:new Error(s),e(o))});try{l=n(r,u)}catch(n){u(n)}if(l)if(\"function\"==typeof l.then)l.then(r,u);else{var i=l.component;i&&\"function\"==typeof i.then&&i.then(r,u)}}}),p||e()}}function Pt(n,s){return Tt(n.map(function(n){return Object.keys(n.components).map(function(a){return s(n.components[a],n.instances[a],n,a)})}))}function Tt(n){return Array.prototype.concat.apply([],n)}var Mt=\"function\"==typeof Symbol&&\"symbol\"==typeof Symbol.toStringTag;function Nt(n){var s=!1;return function(){for(var a=[],e=arguments.length;e--;)a[e]=arguments[e];if(!s)return s=!0,n.apply(this,a)}}var $t=function(n,s){this.router=n,this.base=function(n){if(!n)if(Wp){var s=document.querySelector(\"base\");n=(n=s&&s.getAttribute(\"href\")||\"/\").replace(/^https?:\\/\\/[^\\/]+/,\"\")}else n=\"/\";\"/\"!==n.charAt(0)&&(n=\"/\"+n);return n.replace(/\\/$/,\"\")}(s),this.current=Pp,this.pending=null,this.ready=!1,this.readyCbs=[],this.readyErrorCbs=[],this.errorCbs=[]};function qt(n,s,a,e){var p=Pt(n,function(n,e,p,t){var o=function(n,s){\"function\"!=typeof n&&(n=qp.extend(n));return n.options[s]}(n,s);if(o)return Array.isArray(o)?o.map(function(n){return a(n,e,p,t)}):a(o,e,p,t)});return Tt(e?p.reverse():p)}function Vt(n,s){if(s)return function(){return n.apply(s,arguments)}}$t.prototype.listen=function(n){this.cb=n},$t.prototype.onReady=function(n,s){this.ready?n():(this.readyCbs.push(n),s&&this.readyErrorCbs.push(s))},$t.prototype.onError=function(n){this.errorCbs.push(n)},$t.prototype.transitionTo=function(n,s,a){var e=this,p=this.router.match(n,this.current);this.confirmTransition(p,function(){e.updateRoute(p),s&&s(p),e.ensureURL(),e.ready||(e.ready=!0,e.readyCbs.forEach(function(n){n(p)}))},function(n){a&&a(n),n&&!e.ready&&(e.ready=!0,e.readyErrorCbs.forEach(function(s){s(n)}))})},$t.prototype.confirmTransition=function(n,s,a){var e=this,p=this.current,t=function(n){Ep(n)&&(e.errorCbs.length?e.errorCbs.forEach(function(s){s(n)}):console.error(n)),a&&a(n)};if(Np(n,p)&&n.matched.length===p.matched.length)return this.ensureURL(),t();var o=function(n,s){var a,e=Math.max(n.length,s.length);for(a=0;a<e&&n[a]===s[a];a++);return{updated:s.slice(0,a),activated:s.slice(a),deactivated:n.slice(a)}}(this.current.matched,n.matched),c=o.updated,l=o.deactivated,r=o.activated,u=[].concat(function(n){return qt(n,\"beforeRouteLeave\",Vt,!0)}(l),this.router.beforeHooks,function(n){return qt(n,\"beforeRouteUpdate\",Vt)}(c),r.map(function(n){return n.beforeEnter}),It(r));this.pending=n;var i=function(s,a){if(e.pending!==n)return t();try{s(n,p,function(n){!1===n||Ep(n)?(e.ensureURL(!0),t(n)):\"string\"==typeof n||\"object\"==typeof n&&(\"string\"==typeof n.path||\"string\"==typeof n.name)?(t(),\"object\"==typeof n&&n.replace?e.replace(n):e.push(n)):a(n)})}catch(n){t(n)}};Dt(u,i,function(){var a=[];Dt(function(n,s,a){return qt(n,\"beforeRouteEnter\",function(n,e,p,t){return function(n,s,a,e,p){return function(t,o,c){return n(t,o,function(n){c(n),\"function\"==typeof n&&e.push(function(){!function n(s,a,e,p){a[e]&&!a[e]._isBeingDestroyed?s(a[e]):p()&&setTimeout(function(){n(s,a,e,p)},16)}(n,s.instances,a,p)})})}}(n,p,t,s,a)})}(r,a,function(){return e.current===n}).concat(e.router.resolveHooks),i,function(){if(e.pending!==n)return t();e.pending=null,s(n),e.router.app&&e.router.app.$nextTick(function(){a.forEach(function(n){n()})})})})},$t.prototype.updateRoute=function(n){var s=this.current;this.current=n,this.cb&&this.cb(n),this.router.afterHooks.forEach(function(a){a&&a(n,s)})};var Ut=function(n){function s(s,a){var e=this;n.call(this,s,a);var p=s.options.scrollBehavior,t=At&&p;t&&vt();var o=Rt(this.base);window.addEventListener(\"popstate\",function(n){var a=e.current,p=Rt(e.base);e.current===Pp&&p===o||e.transitionTo(p,function(n){t&&xt(s,n,a,!0)})})}return n&&(s.__proto__=n),s.prototype=Object.create(n&&n.prototype),s.prototype.constructor=s,s.prototype.go=function(n){window.history.go(n)},s.prototype.push=function(n,s,a){var e=this,p=this.current;this.transitionTo(n,function(n){Kt(Jp(e.base+n.fullPath)),xt(e.router,n,p,!1),s&&s(n)},a)},s.prototype.replace=function(n,s,a){var e=this,p=this.current;this.transitionTo(n,function(n){Ft(Jp(e.base+n.fullPath)),xt(e.router,n,p,!1),s&&s(n)},a)},s.prototype.ensureURL=function(n){if(Rt(this.base)!==this.current.fullPath){var s=Jp(this.base+this.current.fullPath);n?Kt(s):Ft(s)}},s.prototype.getCurrentLocation=function(){return Rt(this.base)},s}($t);function Rt(n){var s=decodeURI(window.location.pathname);return n&&0===s.indexOf(n)&&(s=s.slice(n.length)),(s||\"/\")+window.location.search+window.location.hash}var Ht=function(n){function s(s,a,e){n.call(this,s,a),e&&function(n){var s=Rt(n);if(!/^\\/#/.test(s))return window.location.replace(Jp(n+\"/#\"+s)),!0}(this.base)||Wt()}return n&&(s.__proto__=n),s.prototype=Object.create(n&&n.prototype),s.prototype.constructor=s,s.prototype.setupListeners=function(){var n=this,s=this.router.options.scrollBehavior,a=At&&s;a&&vt(),window.addEventListener(At?\"popstate\":\"hashchange\",function(){var s=n.current;Wt()&&n.transitionTo(zt(),function(e){a&&xt(n.router,e,s,!0),At||Xt(e.fullPath)})})},s.prototype.push=function(n,s,a){var e=this,p=this.current;this.transitionTo(n,function(n){Gt(n.fullPath),xt(e.router,n,p,!1),s&&s(n)},a)},s.prototype.replace=function(n,s,a){var e=this,p=this.current;this.transitionTo(n,function(n){Xt(n.fullPath),xt(e.router,n,p,!1),s&&s(n)},a)},s.prototype.go=function(n){window.history.go(n)},s.prototype.ensureURL=function(n){var s=this.current.fullPath;zt()!==s&&(n?Gt(s):Xt(s))},s.prototype.getCurrentLocation=function(){return zt()},s}($t);function Wt(){var n=zt();return\"/\"===n.charAt(0)||(Xt(\"/\"+n),!1)}function zt(){var n=window.location.href,s=n.indexOf(\"#\");return-1===s?\"\":decodeURI(n.slice(s+1))}function Jt(n){var s=window.location.href,a=s.indexOf(\"#\");return(a>=0?s.slice(0,a):s)+\"#\"+n}function Gt(n){At?Kt(Jt(n)):window.location.hash=n}function Xt(n){At?Ft(Jt(n)):window.location.replace(Jt(n))}var Yt=function(n){function s(s,a){n.call(this,s,a),this.stack=[],this.index=-1}return n&&(s.__proto__=n),s.prototype=Object.create(n&&n.prototype),s.prototype.constructor=s,s.prototype.push=function(n,s,a){var e=this;this.transitionTo(n,function(n){e.stack=e.stack.slice(0,e.index+1).concat(n),e.index++,s&&s(n)},a)},s.prototype.replace=function(n,s,a){var e=this;this.transitionTo(n,function(n){e.stack=e.stack.slice(0,e.index).concat(n),s&&s(n)},a)},s.prototype.go=function(n){var s=this,a=this.index+n;if(!(a<0||a>=this.stack.length)){var e=this.stack[a];this.confirmTransition(e,function(){s.index=a,s.updateRoute(e)})}},s.prototype.getCurrentLocation=function(){var n=this.stack[this.stack.length-1];return n?n.fullPath:\"/\"},s.prototype.ensureURL=function(){},s}($t),Qt=function(n){void 0===n&&(n={}),this.app=null,this.apps=[],this.options=n,this.beforeHooks=[],this.resolveHooks=[],this.afterHooks=[],this.matcher=ht(n.routes||[],this);var s=n.mode||\"hash\";switch(this.fallback=\"history\"===s&&!At&&!1!==n.fallback,this.fallback&&(s=\"hash\"),Wp||(s=\"abstract\"),this.mode=s,s){case\"history\":this.history=new Ut(this,n.base);break;case\"hash\":this.history=new Ht(this,n.base,this.fallback);break;case\"abstract\":this.history=new Yt(this,n.base);break;default:0}},Zt={currentRoute:{configurable:!0}};function no(n,s){return n.push(s),function(){var a=n.indexOf(s);a>-1&&n.splice(a,1)}}Qt.prototype.match=function(n,s,a){return this.matcher.match(n,s,a)},Zt.currentRoute.get=function(){return this.history&&this.history.current},Qt.prototype.init=function(n){var s=this;if(this.apps.push(n),!this.app){this.app=n;var a=this.history;if(a instanceof Ut)a.transitionTo(a.getCurrentLocation());else if(a instanceof Ht){var e=function(){a.setupListeners()};a.transitionTo(a.getCurrentLocation(),e,e)}a.listen(function(n){s.apps.forEach(function(s){s._route=n})})}},Qt.prototype.beforeEach=function(n){return no(this.beforeHooks,n)},Qt.prototype.beforeResolve=function(n){return no(this.resolveHooks,n)},Qt.prototype.afterEach=function(n){return no(this.afterHooks,n)},Qt.prototype.onReady=function(n,s){this.history.onReady(n,s)},Qt.prototype.onError=function(n){this.history.onError(n)},Qt.prototype.push=function(n,s,a){this.history.push(n,s,a)},Qt.prototype.replace=function(n,s,a){this.history.replace(n,s,a)},Qt.prototype.go=function(n){this.history.go(n)},Qt.prototype.back=function(){this.go(-1)},Qt.prototype.forward=function(){this.go(1)},Qt.prototype.getMatchedComponents=function(n){var s=n?n.matched?n:this.resolve(n).route:this.currentRoute;return s?[].concat.apply([],s.matched.map(function(n){return Object.keys(n.components).map(function(s){return n.components[s]})})):[]},Qt.prototype.resolve=function(n,s,a){var e=mt(n,s||this.history.current,a,this),p=this.match(e,s),t=p.redirectedFrom||p.fullPath;return{location:e,route:p,href:function(n,s,a){var e=\"hash\"===a?\"#\"+s:s;return n?Jp(n+\"/\"+e):e}(this.history.base,t,this.mode),normalizedTo:e,resolved:p}},Qt.prototype.addRoutes=function(n){this.matcher.addRoutes(n),this.history.current!==Pp&&this.history.transitionTo(this.history.getCurrentLocation())},Object.defineProperties(Qt.prototype,Zt),Qt.install=function n(s){if(!n.installed||qp!==s){n.installed=!0,qp=s;var a=function(n){return void 0!==n},e=function(n,s){var e=n.$options._parentVnode;a(e)&&a(e=e.data)&&a(e=e.registerRouteInstance)&&e(n,s)};s.mixin({beforeCreate:function(){a(this.$options.router)?(this._routerRoot=this,this._router=this.$options.router,this._router.init(this),s.util.defineReactive(this,\"_route\",this._router.history.current)):this._routerRoot=this.$parent&&this.$parent._routerRoot||this,e(this,this)},destroyed:function(){e(this)}}),Object.defineProperty(s.prototype,\"$router\",{get:function(){return this._routerRoot._router}}),Object.defineProperty(s.prototype,\"$route\",{get:function(){return this._routerRoot._route}}),s.component(\"RouterView\",_p),s.component(\"RouterLink\",Rp);var p=s.config.optionMergeStrategies;p.beforeRouteEnter=p.beforeRouteLeave=p.beforeRouteUpdate=p.created}},Qt.version=\"3.0.2\",Wp&&window.Vue&&window.Vue.use(Qt);var so=Qt;a(109),a(20),a(33),a(17),a(34),a(66),a(23),a(52);function ao(n){return function(n){if(Array.isArray(n)){for(var s=0,a=new Array(n.length);s<n.length;s++)a[s]=n[s];return a}}(n)||function(n){if(Symbol.iterator in Object(n)||\"[object Arguments]\"===Object.prototype.toString.call(n))return Array.from(n)}(n)||function(){throw new TypeError(\"Invalid attempt to spread non-iterable instance\")}()}function eo(n,s){var a;n.mixins||(n.mixins=[]),(a=n.mixins).push.apply(a,ao(s))}var po={disableScrollBehavior:!1},to=a(51),oo=a.n(to),co=(a(22),a(115),a(117),a(24),a(95),a(90),a(25),/#.*$/),lo=/\\.(md|html)$/,ro=/\\/$/,uo=/^(https?:|mailto:|tel:)/;function io(n){return decodeURI(n).replace(co,\"\").replace(lo,\"\")}function ko(n){return uo.test(n)}function bo(n){if(ko(n))return n;var s=n.match(co),a=s?s[0]:\"\",e=io(n);return ro.test(e)?n:e+\".html\"+a}function mo(n,s){var a=n.hash,e=function(n){var s=n.match(co);if(s)return s[0]}(s);return(!e||a===e)&&io(n.path)===io(s)}function ho(n,s,a){a&&(s=function(n,s,a){var e=n.charAt(0);if(\"/\"===e)return n;if(\"?\"===e||\"#\"===e)return s+n;var p=s.split(\"/\");a&&p[p.length-1]||p.pop();for(var t=n.replace(/^\\//,\"\").split(\"/\"),o=0;o<t.length;o++){var c=t[o];\"..\"===c?p.pop():\".\"!==c&&p.push(c)}\"\"!==p[0]&&p.unshift(\"\");return p.join(\"/\")}(s,a));for(var e=io(s),p=0;p<n.length;p++)if(io(n[p].path)===e)return Object.assign({},n[p],{type:\"page\",path:bo(s)});return console.error('[vuepress] No matching page found for sidebar item \"'.concat(s,'\"')),{}}function fo(n,s,a,e){var p=a.pages,t=a.themeConfig,o=e&&t.locales&&t.locales[e]||t;if(\"auto\"===(n.frontmatter.sidebar||o.sidebar||t.sidebar))return function(n){var s=go(n.headers||[]);return[{type:\"group\",collapsable:!1,title:n.title,children:s.map(function(s){return{type:\"auto\",title:s.title,basePath:n.path,path:n.path+\"#\"+s.slug,children:s.children||[]}})}]}(n);var c=o.sidebar||t.sidebar;if(c){var l=function(n,s){if(Array.isArray(s))return{base:\"/\",config:s};for(var a in s)if(0===(e=n.path,/(\\.html|\\/)$/.test(e)?e:e+\"/\").indexOf(a))return{base:a,config:s[a]};var e;return{}}(s,c),r=l.base,u=l.config;return u?u.map(function(n){return function n(s,a,e,p){if(\"string\"==typeof s)return ho(a,s,e);if(Array.isArray(s))return Object.assign(ho(a,s[0],e),{title:s[1]});p&&console.error(\"[vuepress] Nested sidebar groups are not supported. Consider using navbar + categories instead.\");var t=s.children||[];return{type:\"group\",title:s.title,children:t.map(function(s){return n(s,a,e,!0)}),collapsable:!1!==s.collapsable}}(n,p,r)}):[]}return[]}function go(n){var s;return(n=n.map(function(n){return Object.assign({},n)})).forEach(function(n){2===n.level?s=n:s&&(s.children||(s.children=[])).push(n)}),n.filter(function(n){return 2===n.level})}function vo(n){return Object.assign(n,{type:n.items&&n.items.length?\"links\":\"link\"})}var xo={props:{item:{required:!0}},computed:{link:function(){return bo(this.item.link)},exact:function(){var n=this;return this.$site.locales?Object.keys(this.$site.locales).some(function(s){return s===n.link}):\"/\"===this.link}},methods:{isExternal:ko,isMailto:function(n){return/^mailto:/.test(n)},isTel:function(n){return/^tel:/.test(n)}}},yo=a(0),wo=Object(yo.a)(xo,function(){var n=this,s=n.$createElement,a=n._self._c||s;return n.isExternal(n.link)?a(\"a\",{staticClass:\"nav-link external\",attrs:{href:n.link,target:n.isMailto(n.link)||n.isTel(n.link)?null:\"_blank\",rel:n.isMailto(n.link)||n.isTel(n.link)?null:\"noopener noreferrer\"}},[n._v(\"\\n  \"+n._s(n.item.text)+\"\\n  \"),a(\"OutboundLink\")],1):a(\"router-link\",{staticClass:\"nav-link\",attrs:{to:n.link,exact:n.exact}},[n._v(n._s(n.item.text))])},[],!1,null,null,null);wo.options.__file=\"NavLink.vue\";var Eo=wo.exports,Bo={components:{NavLink:Eo},computed:{data:function(){return this.$page.frontmatter},actionLink:function(){return{link:this.data.actionLink,text:this.data.actionText}}}},_o=(a(119),Object(yo.a)(Bo,function(){var n=this,s=n.$createElement,a=n._self._c||s;return a(\"div\",{staticClass:\"home\"},[a(\"div\",{staticClass:\"hero\"},[n.data.heroImage?a(\"img\",{attrs:{src:n.$withBase(n.data.heroImage),alt:\"hero\"}}):n._e(),n._v(\" \"),a(\"h1\",[n._v(n._s(n.data.heroText||n.$title||\"Hello\"))]),n._v(\" \"),a(\"p\",{staticClass:\"description\"},[n._v(\"\\n      \"+n._s(n.data.tagline||n.$description||\"Welcome to your VuePress site\")+\"\\n    \")]),n._v(\" \"),n.data.actionText&&n.data.actionLink?a(\"p\",{staticClass:\"action\"},[a(\"NavLink\",{staticClass:\"action-button\",attrs:{item:n.actionLink}})],1):n._e()]),n._v(\" \"),n.data.features&&n.data.features.length?a(\"div\",{staticClass:\"features\"},n._l(n.data.features,function(s,e){return a(\"div\",{key:e,staticClass:\"feature\"},[a(\"h2\",[n._v(n._s(s.title))]),n._v(\" \"),a(\"p\",[n._v(n._s(s.details))])])}),0):n._e(),n._v(\" \"),a(\"Content\",{attrs:{custom:\"\"}}),n._v(\" \"),n.data.footer?a(\"div\",{staticClass:\"footer\"},[n._v(\"\\n    \"+n._s(n.data.footer)+\"\\n  \")]):n._e()],1)},[],!1,null,null,null));_o.options.__file=\"Home.vue\";var jo=_o.exports,Ao=(a(121),Object(yo.a)({},function(){var n=this,s=n.$createElement,a=n._self._c||s;return a(\"div\",{staticClass:\"sidebar-button\",on:{click:function(s){n.$emit(\"toggle-sidebar\")}}},[a(\"svg\",{staticClass:\"icon\",attrs:{xmlns:\"http://www.w3.org/2000/svg\",\"aria-hidden\":\"true\",role:\"img\",viewBox:\"0 0 448 512\"}},[a(\"path\",{attrs:{fill:\"currentColor\",d:\"M436 124H12c-6.627 0-12-5.373-12-12V80c0-6.627 5.373-12 12-12h424c6.627 0 12 5.373 12 12v32c0 6.627-5.373 12-12 12zm0 160H12c-6.627 0-12-5.373-12-12v-32c0-6.627 5.373-12 12-12h424c6.627 0 12 5.373 12 12v32c0 6.627-5.373 12-12 12zm0 160H12c-6.627 0-12-5.373-12-12v-32c0-6.627 5.373-12 12-12h424c6.627 0 12 5.373 12 12v32c0 6.627-5.373 12-12 12z\"}})])])},[],!1,null,null,null));Ao.options.__file=\"SidebarButton.vue\";var Oo=Ao.exports,So=(a(123),{data:function(){return{query:\"\",focused:!1,focusIndex:0}},computed:{showSuggestions:function(){return this.focused&&this.suggestions&&this.suggestions.length},suggestions:function(){var n=this.query.trim().toLowerCase();if(n){for(var s=this.$site,a=s.pages,e=s.themeConfig.searchMaxSuggestions||5,p=this.$localePath,t=function(s){return s.title&&s.title.toLowerCase().indexOf(n)>-1},o=[],c=0;c<a.length&&!(o.length>=e);c++){var l=a[c];if(this.getPageLocalePath(l)===p)if(t(l))o.push(l);else if(l.headers)for(var r=0;r<l.headers.length&&!(o.length>=e);r++){var u=l.headers[r];t(u)&&o.push(Object.assign({},l,{path:l.path+\"#\"+u.slug,header:u}))}}return o}},alignRight:function(){return(this.$site.themeConfig.nav||[]).length+(this.$site.repo?1:0)<=2}},methods:{getPageLocalePath:function(n){for(var s in this.$site.locales||{})if(\"/\"!==s&&0===n.path.indexOf(s))return s;return\"/\"},onUp:function(){this.showSuggestions&&(this.focusIndex>0?this.focusIndex--:this.focusIndex=this.suggestions.length-1)},onDown:function(){this.showSuggestions&&(this.focusIndex<this.suggestions.length-1?this.focusIndex++:this.focusIndex=0)},go:function(n){this.showSuggestions&&(this.$router.push(this.suggestions[n].path),this.query=\"\",this.focusIndex=0)},focus:function(n){this.focusIndex=n},unfocus:function(){this.focusIndex=-1}}}),Co=(a(126),Object(yo.a)(So,function(){var n=this,s=n.$createElement,a=n._self._c||s;return a(\"div\",{staticClass:\"search-box\"},[a(\"input\",{class:{focused:n.focused},attrs:{\"aria-label\":\"Search\",autocomplete:\"off\",spellcheck:\"false\"},domProps:{value:n.query},on:{input:function(s){n.query=s.target.value},focus:function(s){n.focused=!0},blur:function(s){n.focused=!1},keyup:[function(s){if(!(\"button\"in s)&&n._k(s.keyCode,\"enter\",13,s.key,\"Enter\"))return null;n.go(n.focusIndex)},function(s){return\"button\"in s||!n._k(s.keyCode,\"up\",38,s.key,[\"Up\",\"ArrowUp\"])?n.onUp(s):null},function(s){return\"button\"in s||!n._k(s.keyCode,\"down\",40,s.key,[\"Down\",\"ArrowDown\"])?n.onDown(s):null}]}}),n._v(\" \"),n.showSuggestions?a(\"ul\",{staticClass:\"suggestions\",class:{\"align-right\":n.alignRight},on:{mouseleave:n.unfocus}},n._l(n.suggestions,function(s,e){return a(\"li\",{staticClass:\"suggestion\",class:{focused:e===n.focusIndex},on:{mousedown:function(s){n.go(e)},mouseenter:function(s){n.focus(e)}}},[a(\"a\",{attrs:{href:s.path},on:{click:function(n){n.preventDefault()}}},[a(\"span\",{staticClass:\"page-title\"},[n._v(n._s(s.title||s.path))]),n._v(\" \"),s.header?a(\"span\",{staticClass:\"header\"},[n._v(\"> \"+n._s(s.header.title))]):n._e()])])}),0):n._e()])},[],!1,null,null,null));Co.options.__file=\"SearchBox.vue\";var Lo=Co.exports,Ko=(a(96),{name:\"DropdownTransition\",methods:{setHeight:function(n){n.style.height=n.scrollHeight+\"px\"},unsetHeight:function(n){n.style.height=\"\"}}}),Fo=(a(131),Object(yo.a)(Ko,function(){var n=this.$createElement;return(this._self._c||n)(\"transition\",{attrs:{name:\"dropdown\"},on:{enter:this.setHeight,\"after-enter\":this.unsetHeight,\"before-leave\":this.setHeight}},[this._t(\"default\")],2)},[],!1,null,null,null));Fo.options.__file=\"DropdownTransition.vue\";var Do=Fo.exports,Io={components:{NavLink:Eo,DropdownTransition:Do},data:function(){return{open:!1}},props:{item:{required:!0}},methods:{toggle:function(){this.open=!this.open}}},Po=(a(133),Object(yo.a)(Io,function(){var n=this,s=n.$createElement,a=n._self._c||s;return a(\"div\",{staticClass:\"dropdown-wrapper\",class:{open:n.open}},[a(\"a\",{staticClass:\"dropdown-title\",on:{click:n.toggle}},[a(\"span\",{staticClass:\"title\"},[n._v(n._s(n.item.text))]),n._v(\" \"),a(\"span\",{staticClass:\"arrow\",class:n.open?\"down\":\"right\"})]),n._v(\" \"),a(\"DropdownTransition\",[a(\"ul\",{directives:[{name:\"show\",rawName:\"v-show\",value:n.open,expression:\"open\"}],staticClass:\"nav-dropdown\"},n._l(n.item.items,function(s,e){return a(\"li\",{key:s.link||e,staticClass:\"dropdown-item\"},[\"links\"===s.type?a(\"h4\",[n._v(n._s(s.text))]):n._e(),n._v(\" \"),\"links\"===s.type?a(\"ul\",{staticClass:\"dropdown-subitem-wrapper\"},n._l(s.items,function(n){return a(\"li\",{key:n.link,staticClass:\"dropdown-subitem\"},[a(\"NavLink\",{attrs:{item:n}})],1)}),0):a(\"NavLink\",{attrs:{item:s}})],1)}),0)])],1)},[],!1,null,null,null));Po.options.__file=\"DropdownLink.vue\";var To={components:{NavLink:Eo,DropdownLink:Po.exports},computed:{userNav:function(){return this.$themeLocaleConfig.nav||this.$site.themeConfig.nav||[]},nav:function(){var n=this,s=this.$site.locales;if(s&&Object.keys(s).length>1){var a=this.$page.path,e=this.$router.options.routes,p=this.$site.themeConfig.locales||{},t={text:this.$themeLocaleConfig.selectText||\"Languages\",items:Object.keys(s).map(function(t){var o,c=s[t],l=p[t]&&p[t].label||c.lang;return c.lang===n.$lang?o=a:(o=a.replace(n.$localeConfig.path,t),e.some(function(n){return n.path===o})||(o=t)),{text:l,link:o}})};return ao(this.userNav).concat([t])}return this.userNav},userLinks:function(){return(this.nav||[]).map(function(n){return Object.assign(vo(n),{items:(n.items||[]).map(vo)})})},repoLink:function(){var n=this.$site.themeConfig.repo;if(n)return/^https?:/.test(n)?n:\"https://github.com/\".concat(n)},repoLabel:function(){if(this.repoLink){if(this.$site.themeConfig.repoLabel)return this.$site.themeConfig.repoLabel;for(var n=this.repoLink.match(/^https?:\\/\\/[^/]+/)[0],s=[\"GitHub\",\"GitLab\",\"Bitbucket\"],a=0;a<s.length;a++){var e=s[a];if(new RegExp(e,\"i\").test(n))return e}return\"Source\"}}}},Mo=(a(135),Object(yo.a)(To,function(){var n=this,s=n.$createElement,a=n._self._c||s;return n.userLinks.length||n.repoLink?a(\"nav\",{staticClass:\"nav-links\"},[n._l(n.userLinks,function(n){return a(\"div\",{key:n.link,staticClass:\"nav-item\"},[\"links\"===n.type?a(\"DropdownLink\",{attrs:{item:n}}):a(\"NavLink\",{attrs:{item:n}})],1)}),n._v(\" \"),n.repoLink?a(\"a\",{staticClass:\"repo-link\",attrs:{href:n.repoLink,target:\"_blank\",rel:\"noopener noreferrer\"}},[n._v(\"\\n    \"+n._s(n.repoLabel)+\"\\n    \"),a(\"OutboundLink\")],1):n._e()],2):n._e()},[],!1,null,null,null));Mo.options.__file=\"NavLinks.vue\";var No=Mo.exports;function $o(n,s){return n.ownerDocument.defaultView.getComputedStyle(n,null)[s]}var qo={components:{SidebarButton:Oo,NavLinks:No,SearchBox:Lo,AlgoliaSearchBox:{}},data:function(){return{linksWrapMaxWidth:null}},mounted:function(){var n=this,s=parseInt($o(this.$el,\"paddingLeft\"))+parseInt($o(this.$el,\"paddingRight\")),a=function(){document.documentElement.clientWidth<719?n.linksWrapMaxWidth=null:n.linksWrapMaxWidth=n.$el.offsetWidth-s-(n.$refs.siteName&&n.$refs.siteName.offsetWidth||0)};a(),window.addEventListener(\"resize\",a,!1)},computed:{algolia:function(){return this.$themeLocaleConfig.algolia||this.$site.themeConfig.algolia||{}},isAlgoliaSearch:function(){return this.algolia&&this.algolia.apiKey&&this.algolia.indexName}}},Vo=(a(137),Object(yo.a)(qo,function(){var n=this,s=n.$createElement,a=n._self._c||s;return a(\"header\",{staticClass:\"navbar\"},[a(\"SidebarButton\",{on:{\"toggle-sidebar\":function(s){n.$emit(\"toggle-sidebar\")}}}),n._v(\" \"),a(\"router-link\",{staticClass:\"home-link\",attrs:{to:n.$localePath}},[n.$site.themeConfig.logo?a(\"img\",{staticClass:\"logo\",attrs:{src:n.$withBase(n.$site.themeConfig.logo),alt:n.$siteTitle}}):n._e(),n._v(\" \"),n.$siteTitle?a(\"span\",{ref:\"siteName\",staticClass:\"site-name\",class:{\"can-hide\":n.$site.themeConfig.logo}},[n._v(n._s(n.$siteTitle))]):n._e()]),n._v(\" \"),a(\"div\",{staticClass:\"links\",style:{\"max-width\":n.linksWrapMaxWidth+\"px\"}},[n.isAlgoliaSearch?a(\"AlgoliaSearchBox\",{attrs:{options:n.algolia}}):!1!==n.$site.themeConfig.search?a(\"SearchBox\"):n._e(),n._v(\" \"),a(\"NavLinks\",{staticClass:\"can-hide\"})],1)],1)},[],!1,null,null,null));Vo.options.__file=\"Navbar.vue\";var Uo=Vo.exports;function Ro(n,s,a){var e=[];s.forEach(function(n){\"group\"===n.type?e.push.apply(e,ao(n.children||[])):e.push(n)});for(var p=0;p<e.length;p++){var t=e[p];if(\"page\"===t.type&&t.path===n.path)return e[p+a]}}var Ho={props:[\"sidebarItems\"],computed:{lastUpdated:function(){if(this.$page.lastUpdated)return new Date(this.$page.lastUpdated).toLocaleString(this.$lang)},lastUpdatedText:function(){return\"string\"==typeof this.$themeLocaleConfig.lastUpdated?this.$themeLocaleConfig.lastUpdated:\"string\"==typeof this.$site.themeConfig.lastUpdated?this.$site.themeConfig.lastUpdated:\"Last Updated\"},prev:function(){var n,s,a=this.$page.frontmatter.prev;return!1===a?void 0:a?ho(this.$site.pages,a,this.$route.path):(n=this.$page,s=this.sidebarItems,Ro(n,s,-1))},next:function(){var n,s,a=this.$page.frontmatter.next;return!1===a?void 0:a?ho(this.$site.pages,a,this.$route.path):(n=this.$page,s=this.sidebarItems,Ro(n,s,1))},editLink:function(){if(!1!==this.$page.frontmatter.editLink){var n=this.$site.themeConfig,s=n.repo,a=n.editLinks,e=n.docsDir,p=void 0===e?\"\":e,t=n.docsBranch,o=void 0===t?\"master\":t,c=n.docsRepo,l=void 0===c?s:c,r=io(this.$page.path);return ro.test(r)?r+=\"README.md\":r+=\".md\",l&&a?this.createEditLink(s,l,p,o,r):void 0}},editLinkText:function(){return this.$themeLocaleConfig.editLinkText||this.$site.themeConfig.editLinkText||\"Edit this page\"}},methods:{createEditLink:function(n,s,a,e,p){return/bitbucket.org/.test(n)?(uo.test(s)?s:n).replace(ro,\"\")+\"/\".concat(e)+(a?\"/\"+a.replace(ro,\"\"):\"\")+p+\"?mode=edit&spa=0&at=\".concat(e,\"&fileviewer=file-view-default\"):(uo.test(s)?s:\"https://github.com/\".concat(s)).replace(ro,\"\")+\"/edit/\".concat(e)+(a?\"/\"+a.replace(ro,\"\"):\"\")+p}}},Wo=(a(139),Object(yo.a)(Ho,function(){var n=this,s=n.$createElement,a=n._self._c||s;return a(\"div\",{staticClass:\"page\"},[n._t(\"top\"),n._v(\" \"),a(\"Content\",{attrs:{custom:!1}}),n._v(\" \"),a(\"div\",{staticClass:\"page-edit\"},[n.editLink?a(\"div\",{staticClass:\"edit-link\"},[a(\"a\",{attrs:{href:n.editLink,target:\"_blank\",rel:\"noopener noreferrer\"}},[n._v(n._s(n.editLinkText))]),n._v(\" \"),a(\"OutboundLink\")],1):n._e(),n._v(\" \"),n.lastUpdated?a(\"div\",{staticClass:\"last-updated\"},[a(\"span\",{staticClass:\"prefix\"},[n._v(n._s(n.lastUpdatedText)+\": \")]),n._v(\" \"),a(\"span\",{staticClass:\"time\"},[n._v(n._s(n.lastUpdated))])]):n._e()]),n._v(\" \"),n.prev||n.next?a(\"div\",{staticClass:\"page-nav\"},[a(\"p\",{staticClass:\"inner\"},[n.prev?a(\"span\",{staticClass:\"prev\"},[n._v(\"\\n        ←\\n        \"),n.prev?a(\"router-link\",{staticClass:\"prev\",attrs:{to:n.prev.path}},[n._v(\"\\n          \"+n._s(n.prev.title||n.prev.path)+\"\\n        \")]):n._e()],1):n._e(),n._v(\" \"),n.next?a(\"span\",{staticClass:\"next\"},[n.next?a(\"router-link\",{attrs:{to:n.next.path}},[n._v(\"\\n          \"+n._s(n.next.title||n.next.path)+\"\\n        \")]):n._e(),n._v(\"\\n        →\\n      \")],1):n._e()])]):n._e(),n._v(\" \"),n._t(\"bottom\")],2)},[],!1,null,null,null));Wo.options.__file=\"Page.vue\";var zo=Wo.exports;function Jo(n,s,a,e){return n(\"router-link\",{props:{to:s,activeClass:\"\",exactActiveClass:\"\"},class:{active:e,\"sidebar-link\":!0}},a)}function Go(n,s,a,e,p){var t=arguments.length>5&&void 0!==arguments[5]?arguments[5]:1;return!s||t>p?null:n(\"ul\",{class:\"sidebar-sub-headers\"},s.map(function(s){var o=mo(e,a+\"#\"+s.slug);return n(\"li\",{class:\"sidebar-sub-header\"},[Jo(n,a+\"#\"+s.slug,s.title,o),Go(n,s.children,a,e,p,t+1)])}))}var Xo={functional:!0,props:[\"item\"],render:function(n,s){var a=s.parent,e=a.$page,p=a.$site,t=a.$route,o=s.props.item,c=mo(t,o.path),l=\"auto\"===o.type?c||o.children.some(function(n){return mo(t,o.basePath+\"#\"+n.slug)}):c,r=Jo(n,o.path,o.title||o.path,l),u=null!=e.frontmatter.sidebarDepth?e.frontmatter.sidebarDepth:p.themeConfig.sidebarDepth,i=null==u?1:u,k=!!p.themeConfig.displayAllHeaders;return\"auto\"===o.type?[r,Go(n,o.children,o.basePath,t,i)]:(l||k)&&o.headers&&!co.test(o.path)?[r,Go(n,go(o.headers),o.path,t,i)]:r}},Yo=(a(141),Object(yo.a)(Xo,void 0,void 0,!1,null,null,null));Yo.options.__file=\"SidebarLink.vue\";var Qo=Yo.exports,Zo={name:\"SidebarGroup\",props:[\"item\",\"first\",\"open\",\"collapsable\"],components:{SidebarLink:Qo,DropdownTransition:Do}},nc=(a(143),Object(yo.a)(Zo,function(){var n=this,s=n.$createElement,a=n._self._c||s;return a(\"div\",{staticClass:\"sidebar-group\",class:{first:n.first,collapsable:n.collapsable}},[a(\"p\",{staticClass:\"sidebar-heading\",class:{open:n.open},on:{click:function(s){n.$emit(\"toggle\")}}},[a(\"span\",[n._v(n._s(n.item.title))]),n._v(\" \"),n.collapsable?a(\"span\",{staticClass:\"arrow\",class:n.open?\"down\":\"right\"}):n._e()]),n._v(\" \"),a(\"DropdownTransition\",[n.open||!n.collapsable?a(\"ul\",{ref:\"items\",staticClass:\"sidebar-group-items\"},n._l(n.item.children,function(n){return a(\"li\",[a(\"SidebarLink\",{attrs:{item:n}})],1)}),0):n._e()])],1)},[],!1,null,null,null));nc.options.__file=\"SidebarGroup.vue\";var sc={components:{SidebarGroup:nc.exports,SidebarLink:Qo,NavLinks:No},props:[\"items\"],data:function(){return{openGroupIndex:0}},created:function(){this.refreshIndex()},watch:{$route:function(){this.refreshIndex()}},methods:{refreshIndex:function(){var n=function(n,s){for(var a=0;a<s.length;a++){var e=s[a];if(\"group\"===e.type&&e.children.some(function(s){return mo(n,s.path)}))return a}return-1}(this.$route,this.items);n>-1&&(this.openGroupIndex=n)},toggleGroup:function(n){this.openGroupIndex=n===this.openGroupIndex?-1:n},isActive:function(n){return mo(this.$route,n.path)}}},ac=(a(145),Object(yo.a)(sc,function(){var n=this,s=n.$createElement,a=n._self._c||s;return a(\"div\",{staticClass:\"sidebar\"},[a(\"NavLinks\"),n._v(\" \"),n._t(\"top\"),n._v(\" \"),n.items.length?a(\"ul\",{staticClass:\"sidebar-links\"},n._l(n.items,function(s,e){return a(\"li\",{key:e},[\"group\"===s.type?a(\"SidebarGroup\",{attrs:{item:s,first:0===e,open:e===n.openGroupIndex,collapsable:s.collapsable||s.collapsible},on:{toggle:function(s){n.toggleGroup(e)}}}):a(\"SidebarLink\",{attrs:{item:s}})],1)}),0):n._e(),n._v(\" \"),n._t(\"bottom\")],2)},[],!1,null,null,null));ac.options.__file=\"Sidebar.vue\";var ec=ac.exports;function pc(n){return(pc=\"function\"==typeof Symbol&&\"symbol\"==typeof Symbol.iterator?function(n){return typeof n}:function(n){return n&&\"function\"==typeof Symbol&&n.constructor===Symbol&&n!==Symbol.prototype?\"symbol\":typeof n})(n)}function tc(n){return(tc=\"function\"==typeof Symbol&&\"symbol\"===pc(Symbol.iterator)?function(n){return pc(n)}:function(n){return n&&\"function\"==typeof Symbol&&n.constructor===Symbol&&n!==Symbol.prototype?\"symbol\":pc(n)})(n)}var oc={props:{updateEvent:{type:Object,default:null}},computed:{popupConfig:function(){for(var n=[this.$themeLocaleConfig,this.$site.themeConfig],s=0;s<n.length;s++){var a=n[s].serviceWorker;if(a&&a.updatePopup)return\"object\"===tc(a.updatePopup)?a.updatePopup:{}}return null},enabled:function(){return Boolean(this.popupConfig&&this.updateEvent)},message:function(){var n=this.popupConfig;return n&&n.message||\"New content is available.\"},buttonText:function(){var n=this.popupConfig;return n&&n.buttonText||\"Refresh\"}},methods:{reload:function(){this.updateEvent&&(this.updateEvent.skipWaiting().then(function(){location.reload(!0)}),this.updateEvent=null)}}},cc=(a(147),Object(yo.a)(oc,function(){var n=this,s=n.$createElement,a=n._self._c||s;return a(\"transition\",{attrs:{name:\"sw-update-popup\"}},[n.enabled?a(\"div\",{staticClass:\"sw-update-popup\"},[n._v(\"\\n    \"+n._s(n.message)),a(\"br\"),n._v(\" \"),a(\"button\",{on:{click:n.reload}},[n._v(n._s(n.buttonText))])]):n._e()])},[],!1,null,null,null));cc.options.__file=\"SWUpdatePopup.vue\";var lc={components:{Home:jo,Page:zo,Sidebar:ec,Navbar:Uo,SWUpdatePopup:cc.exports},data:function(){return{isSidebarOpen:!1,swUpdateEvent:null}},computed:{shouldShowNavbar:function(){var n=this.$site.themeConfig;return!1!==this.$page.frontmatter.navbar&&!1!==n.navbar&&(this.$title||n.logo||n.repo||n.nav||this.$themeLocaleConfig.nav)},shouldShowSidebar:function(){var n=this.$page.frontmatter;return!n.layout&&!n.home&&!1!==n.sidebar&&this.sidebarItems.length},sidebarItems:function(){return fo(this.$page,this.$route,this.$site,this.$localePath)},pageClasses:function(){var n=this.$page.frontmatter.pageClass;return[{\"no-navbar\":!this.shouldShowNavbar,\"sidebar-open\":this.isSidebarOpen,\"no-sidebar\":!this.shouldShowSidebar},n]}},mounted:function(){var n=this;window.addEventListener(\"scroll\",this.onScroll),oo.a.configure({showSpinner:!1}),this.$router.beforeEach(function(n,s,a){n.path===s.path||wp.component(n.name)||oo.a.start(),a()}),this.$router.afterEach(function(){oo.a.done(),n.isSidebarOpen=!1}),this.$on(\"sw-updated\",this.onSWUpdated)},methods:{toggleSidebar:function(n){this.isSidebarOpen=\"boolean\"==typeof n?n:!this.isSidebarOpen},onTouchStart:function(n){this.touchStart={x:n.changedTouches[0].clientX,y:n.changedTouches[0].clientY}},onTouchEnd:function(n){var s=n.changedTouches[0].clientX-this.touchStart.x,a=n.changedTouches[0].clientY-this.touchStart.y;Math.abs(s)>Math.abs(a)&&Math.abs(s)>40&&(s>0&&this.touchStart.x<=80?this.toggleSidebar(!0):this.toggleSidebar(!1))},onSWUpdated:function(n){this.swUpdateEvent=n}}},rc=(a(149),a(151),Object(yo.a)(lc,function(){var n=this,s=n.$createElement,a=n._self._c||s;return a(\"div\",{staticClass:\"theme-container\",class:n.pageClasses,on:{touchstart:n.onTouchStart,touchend:n.onTouchEnd}},[n.shouldShowNavbar?a(\"Navbar\",{on:{\"toggle-sidebar\":n.toggleSidebar}}):n._e(),n._v(\" \"),a(\"div\",{staticClass:\"sidebar-mask\",on:{click:function(s){n.toggleSidebar(!1)}}}),n._v(\" \"),a(\"Sidebar\",{attrs:{items:n.sidebarItems},on:{\"toggle-sidebar\":n.toggleSidebar}},[n._t(\"sidebar-top\",null,{slot:\"top\"}),n._v(\" \"),n._t(\"sidebar-bottom\",null,{slot:\"bottom\"})],2),n._v(\" \"),n.$page.frontmatter.layout?a(\"div\",{staticClass:\"custom-layout\"},[a(n.$page.frontmatter.layout,{tag:\"component\"})],1):n.$page.frontmatter.home?a(\"Home\"):a(\"Page\",{attrs:{\"sidebar-items\":n.sidebarItems}},[n._t(\"page-top\",null,{slot:\"top\"}),n._v(\" \"),n._t(\"page-bottom\",null,{slot:\"bottom\"})],2),n._v(\" \"),a(\"SWUpdatePopup\",{attrs:{updateEvent:n.swUpdateEvent}})],1)},[],!1,null,null,null));rc.options.__file=\"Layout.vue\";var uc=rc.exports,ic=[\"There's nothing here.\",\"How did we get here?\",\"That's a Four-Oh-Four.\",\"Looks like we've got some broken links.\"],kc={methods:{getMsg:function(){return ic[Math.floor(Math.random()*ic.length)]}}},dc=Object(yo.a)(kc,function(){var n=this.$createElement,s=this._self._c||n;return s(\"div\",{staticClass:\"theme-container\"},[s(\"div\",{staticClass:\"content\"},[s(\"h1\",[this._v(\"404\")]),this._v(\" \"),s(\"blockquote\",[this._v(this._s(this.getMsg()))]),this._v(\" \"),s(\"router-link\",{attrs:{to:\"/\"}},[this._v(\"Take me home.\")])],1)])},[],!1,null,null,null);dc.options.__file=\"NotFound.vue\";var bc=dc.exports,mc=(a(153),a(154),{created:function(){this.$ssrContext&&(this.$ssrContext.title=this.$title,this.$ssrContext.lang=this.$lang,this.$ssrContext.description=this.$page.description||this.$description)},mounted:function(){var n=this;this.currentMetaTags=new Set;var s=function(){document.title=n.$title,document.documentElement.lang=n.$lang;var s=n.$page.frontmatter.meta||[],a=s.slice(0);0===s.filter(function(n){return\"description\"===n.name}).length&&a.push({name:\"description\",content:n.$description});var e=document.querySelectorAll('meta[name=\"description\"]');e.length&&e.forEach(function(s){return n.currentMetaTags.add(s)}),n.currentMetaTags=new Set(hc(a,n.currentMetaTags))};this.$watch(\"$page\",s),s()},beforeDestroy:function(){hc(null,this.currentMetaTags)}});function hc(n,s){if(s&&ao(s).forEach(function(n){document.head.removeChild(n)}),n)return n.map(function(n){var s=document.createElement(\"meta\");return Object.keys(n).forEach(function(a){s.setAttribute(a,n[a])}),document.head.appendChild(s),s})}var fc=a(93),gc=[mc,{mounted:function(){window.addEventListener(\"scroll\",this.onScroll)},methods:{onScroll:a.n(fc)()(function(){this.setActiveHash()},300),setActiveHash:function(){for(var n=this,s=[].slice.call(document.querySelectorAll(\".sidebar-link\")),a=[].slice.call(document.querySelectorAll(\".header-anchor\")).filter(function(n){return s.some(function(s){return s.hash===n.hash})}),e=Math.max(window.pageYOffset,document.documentElement.scrollTop,document.body.scrollTop),p=0;p<a.length;p++){var t=a[p],o=a[p+1];if((0===p&&0===e||e>=t.parentElement.offsetTop+10&&(!o||e<o.parentElement.offsetTop-10))&&decodeURIComponent(this.$route.hash)!==decodeURIComponent(t.hash))return po.disableScrollBehavior=!0,void this.$router.replace(decodeURIComponent(t.hash),function(){n.$nextTick(function(){po.disableScrollBehavior=!1})})}}},beforeDestroy:function(){window.removeEventListener(\"scroll\",this.onScroll)}}];wp.component(\"HelloWorld\",function(){return a.e(4).then(a.bind(null,175))}),wp.component(\"comment-comment\",function(){return Promise.all([a.e(0),a.e(2)]).then(a.bind(null,174))}),eo(uc,gc),eo(bc,gc);var vc=[{name:\"v-fb43c946a608\",path:\"/\",component:uc,beforeEnter:function(n,s,e){a.e(5).then(a.bind(null,177)).then(function(n){wp.component(\"v-fb43c946a608\",n.default),e()})}},{path:\"/index.html\",redirect:\"/\"},{name:\"v-ed3458838da34\",path:\"/about.html\",component:uc,beforeEnter:function(n,s,e){a.e(6).then(a.bind(null,178)).then(function(n){wp.component(\"v-ed3458838da34\",n.default),e()})}},{name:\"v-9a47b518605fb\",path:\"/accumulate/CSS/CSS%E6%9D%83%E9%87%8D%E8%A7%84%E5%88%99.html\",component:uc,beforeEnter:function(n,s,e){a.e(7).then(a.bind(null,179)).then(function(n){wp.component(\"v-9a47b518605fb\",n.default),e()})}},{path:\"/accumulate/CSS/CSS权重规则.html\",redirect:\"/accumulate/CSS/CSS%E6%9D%83%E9%87%8D%E8%A7%84%E5%88%99.html\"},{name:\"v-8a891ffbf593f\",path:\"/accumulate/CSS/CSS%E6%A6%82%E5%BF%B5-BFC%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BA.html\",component:uc,beforeEnter:function(n,s,e){a.e(8).then(a.bind(null,180)).then(function(n){wp.component(\"v-8a891ffbf593f\",n.default),e()})}},{path:\"/accumulate/CSS/CSS概念-BFC深入浅出.html\",redirect:\"/accumulate/CSS/CSS%E6%A6%82%E5%BF%B5-BFC%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BA.html\"},{name:\"v-61cd0ee207588\",path:\"/accumulate/ES6/js%E8%B0%83%E7%94%A8%E6%A0%88%E6%9C%BA%E5%88%B6%E4%B8%8EES6%E5%B0%BE%E8%B0%83%E7%94%A8%E4%BC%98%E5%8C%96%E4%BB%8B%E7%BB%8D.html\",component:uc,beforeEnter:function(n,s,e){a.e(9).then(a.bind(null,181)).then(function(n){wp.component(\"v-61cd0ee207588\",n.default),e()})}},{path:\"/accumulate/ES6/js调用栈机制与ES6尾调用优化介绍.html\",redirect:\"/accumulate/ES6/js%E8%B0%83%E7%94%A8%E6%A0%88%E6%9C%BA%E5%88%B6%E4%B8%8EES6%E5%B0%BE%E8%B0%83%E7%94%A8%E4%BC%98%E5%8C%96%E4%BB%8B%E7%BB%8D.html\"},{name:\"v-ff47482806591\",path:\"/accumulate/ES6/let%E5%92%8Cconst%E5%91%BD%E4%BB%A4.html\",component:uc,beforeEnter:function(n,s,e){a.e(10).then(a.bind(null,182)).then(function(n){wp.component(\"v-ff47482806591\",n.default),e()})}},{path:\"/accumulate/ES6/let和const命令.html\",redirect:\"/accumulate/ES6/let%E5%92%8Cconst%E5%91%BD%E4%BB%A4.html\"},{name:\"v-b90b0c4f020bf\",path:\"/accumulate/ES6/%E8%AE%BA%E6%99%AE%E9%80%9A%E5%87%BD%E6%95%B0%E5%92%8C%E7%AE%AD%E5%A4%B4%E5%87%BD%E6%95%B0%E7%9A%84%E5%8C%BA%E5%88%AB%E4%BB%A5%E5%8F%8A%E7%AE%AD%E5%A4%B4%E5%87%BD%E6%95%B0%E7%9A%84%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9%E5%92%8C%E4%B8%8D%E9%80%82%E7%94%A8%E5%9C%BA%E6%99%AF.html\",component:uc,beforeEnter:function(n,s,e){a.e(11).then(a.bind(null,183)).then(function(n){wp.component(\"v-b90b0c4f020bf\",n.default),e()})}},{path:\"/accumulate/ES6/论普通函数和箭头函数的区别以及箭头函数的注意事项和不适用场景.html\",redirect:\"/accumulate/ES6/%E8%AE%BA%E6%99%AE%E9%80%9A%E5%87%BD%E6%95%B0%E5%92%8C%E7%AE%AD%E5%A4%B4%E5%87%BD%E6%95%B0%E7%9A%84%E5%8C%BA%E5%88%AB%E4%BB%A5%E5%8F%8A%E7%AE%AD%E5%A4%B4%E5%87%BD%E6%95%B0%E7%9A%84%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9%E5%92%8C%E4%B8%8D%E9%80%82%E7%94%A8%E5%9C%BA%E6%99%AF.html\"},{name:\"v-6193f44fbf264\",path:\"/accumulate/JS/JS%E5%9F%BA%E7%A1%80-call%E5%92%8Capply%E8%BF%98%E6%9C%89bind.html\",component:uc,beforeEnter:function(n,s,e){a.e(12).then(a.bind(null,184)).then(function(n){wp.component(\"v-6193f44fbf264\",n.default),e()})}},{path:\"/accumulate/JS/JS基础-call和apply还有bind.html\",redirect:\"/accumulate/JS/JS%E5%9F%BA%E7%A1%80-call%E5%92%8Capply%E8%BF%98%E6%9C%89bind.html\"},{name:\"v-4bdbe92686fae\",path:\"/accumulate/JS/JS%E5%9F%BA%E7%A1%80-%E7%BB%A7%E6%89%BF.html\",component:uc,beforeEnter:function(n,s,e){a.e(13).then(a.bind(null,185)).then(function(n){wp.component(\"v-4bdbe92686fae\",n.default),e()})}},{path:\"/accumulate/JS/JS基础-继承.html\",redirect:\"/accumulate/JS/JS%E5%9F%BA%E7%A1%80-%E7%BB%A7%E6%89%BF.html\"},{name:\"v-47cb4cdb0689\",path:\"/accumulate/JS/Object.defineProperty.html\",component:uc,beforeEnter:function(n,s,e){a.e(14).then(a.bind(null,186)).then(function(n){wp.component(\"v-47cb4cdb0689\",n.default),e()})}},{name:\"v-4cb74a814fd2c\",path:\"/accumulate/JS/cookie%E5%92%8Cstorage%E7%9A%84%E4%BD%BF%E7%94%A8%E4%BB%A5%E5%8F%8A%E5%8C%BA%E5%88%AB.html\",component:uc,beforeEnter:function(n,s,e){a.e(15).then(a.bind(null,187)).then(function(n){wp.component(\"v-4cb74a814fd2c\",n.default),e()})}},{path:\"/accumulate/JS/cookie和storage的使用以及区别.html\",redirect:\"/accumulate/JS/cookie%E5%92%8Cstorage%E7%9A%84%E4%BD%BF%E7%94%A8%E4%BB%A5%E5%8F%8A%E5%8C%BA%E5%88%AB.html\"},{name:\"v-44a4ba9fb172d\",path:\"/accumulate/JS/prototype.html\",component:uc,beforeEnter:function(n,s,e){a.e(16).then(a.bind(null,188)).then(function(n){wp.component(\"v-44a4ba9fb172d\",n.default),e()})}},{name:\"v-6193f2d3000da\",path:\"/accumulate/JS/webWorker%E4%B8%8A%E6%89%8B.html\",component:uc,beforeEnter:function(n,s,e){a.e(17).then(a.bind(null,189)).then(function(n){wp.component(\"v-6193f2d3000da\",n.default),e()})}},{path:\"/accumulate/JS/webWorker上手.html\",redirect:\"/accumulate/JS/webWorker%E4%B8%8A%E6%89%8B.html\"},{name:\"v-5e5b68f6d8647\",path:\"/accumulate/JS/%E5%87%BD%E6%95%B0%E9%98%B2%E6%8A%96%E5%92%8C%E5%87%BD%E6%95%B0%E8%8A%82%E6%B5%81.html\",component:uc,beforeEnter:function(n,s,e){a.e(18).then(a.bind(null,190)).then(function(n){wp.component(\"v-5e5b68f6d8647\",n.default),e()})}},{path:\"/accumulate/JS/函数防抖和函数节流.html\",redirect:\"/accumulate/JS/%E5%87%BD%E6%95%B0%E9%98%B2%E6%8A%96%E5%92%8C%E5%87%BD%E6%95%B0%E8%8A%82%E6%B5%81.html\"},{name:\"v-ec6ea9a74c58e\",path:\"/accumulate/JS/%E6%89%8B%E6%91%B8%E6%89%8B%E6%95%99%E4%BD%A0%E4%BD%BF%E7%94%A8WebSocket.html\",component:uc,beforeEnter:function(n,s,e){a.e(19).then(a.bind(null,191)).then(function(n){wp.component(\"v-ec6ea9a74c58e\",n.default),e()})}},{path:\"/accumulate/JS/手摸手教你使用WebSocket.html\",redirect:\"/accumulate/JS/%E6%89%8B%E6%91%B8%E6%89%8B%E6%95%99%E4%BD%A0%E4%BD%BF%E7%94%A8WebSocket.html\"},{name:\"v-3c650f1ca12ed\",path:\"/accumulate/JS/%E6%95%B0%E7%BB%84API%E8%A7%A3%E6%9E%90%E5%90%88%E9%9B%86.html\",component:uc,beforeEnter:function(n,s,e){a.e(20).then(a.bind(null,192)).then(function(n){wp.component(\"v-3c650f1ca12ed\",n.default),e()})}},{path:\"/accumulate/JS/数组API解析合集.html\",redirect:\"/accumulate/JS/%E6%95%B0%E7%BB%84API%E8%A7%A3%E6%9E%90%E5%90%88%E9%9B%86.html\"},{name:\"v-d5f4b80bfeed7\",path:\"/accumulate/\",component:uc,beforeEnter:function(n,s,e){a.e(21).then(a.bind(null,193)).then(function(n){wp.component(\"v-d5f4b80bfeed7\",n.default),e()})}},{path:\"/accumulate/index.html\",redirect:\"/accumulate/\"},{name:\"v-2f2b0f8d7598c\",path:\"/accumulate/Vue/vue%E5%AE%9A%E4%B9%89%E5%85%A8%E5%B1%80%E5%87%BD%E6%95%B0.html\",component:uc,beforeEnter:function(n,s,e){a.e(22).then(a.bind(null,194)).then(function(n){wp.component(\"v-2f2b0f8d7598c\",n.default),e()})}},{path:\"/accumulate/Vue/vue定义全局函数.html\",redirect:\"/accumulate/Vue/vue%E5%AE%9A%E4%B9%89%E5%85%A8%E5%B1%80%E5%87%BD%E6%95%B0.html\"},{name:\"v-496fa96760c7\",path:\"/accumulate/Vue/vue%E9%92%A9%E5%AD%90%E5%87%BD%E6%95%B0.html\",component:uc,beforeEnter:function(n,s,e){a.e(23).then(a.bind(null,195)).then(function(n){wp.component(\"v-496fa96760c7\",n.default),e()})}},{path:\"/accumulate/Vue/vue钩子函数.html\",redirect:\"/accumulate/Vue/vue%E9%92%A9%E5%AD%90%E5%87%BD%E6%95%B0.html\"},{name:\"v-ac82f9958cd89\",path:\"/accumulate/Vue/%E5%BC%B9%E7%AA%97.html\",component:uc,beforeEnter:function(n,s,e){a.e(24).then(a.bind(null,196)).then(function(n){wp.component(\"v-ac82f9958cd89\",n.default),e()})}},{path:\"/accumulate/Vue/弹窗.html\",redirect:\"/accumulate/Vue/%E5%BC%B9%E7%AA%97.html\"},{name:\"v-658bb900cd365\",path:\"/accumulate/Vue/%E6%9E%81%E7%AE%80%E5%8F%8C%E5%90%91%E7%BB%91%E5%AE%9A.html\",component:uc,beforeEnter:function(n,s,e){a.e(25).then(a.bind(null,197)).then(function(n){wp.component(\"v-658bb900cd365\",n.default),e()})}},{path:\"/accumulate/Vue/极简双向绑定.html\",redirect:\"/accumulate/Vue/%E6%9E%81%E7%AE%80%E5%8F%8C%E5%90%91%E7%BB%91%E5%AE%9A.html\"},{name:\"v-fb71e664f184d\",path:\"/accumulate/amateur/VuePress%E6%96%87%E6%A1%A3.html\",component:uc,beforeEnter:function(n,s,e){a.e(26).then(a.bind(null,198)).then(function(n){wp.component(\"v-fb71e664f184d\",n.default),e()})}},{path:\"/accumulate/amateur/VuePress文档.html\",redirect:\"/accumulate/amateur/VuePress%E6%96%87%E6%A1%A3.html\"},{name:\"v-b7b27c5290d8e\",path:\"/accumulate/amateur/%E6%8E%A8%E7%AE%B1%E5%AD%90.html\",component:uc,beforeEnter:function(n,s,e){a.e(27).then(a.bind(null,199)).then(function(n){wp.component(\"v-b7b27c5290d8e\",n.default),e()})}},{path:\"/accumulate/amateur/推箱子.html\",redirect:\"/accumulate/amateur/%E6%8E%A8%E7%AE%B1%E5%AD%90.html\"},{name:\"v-f220c37dc6fe\",path:\"/accumulate/amateur/%E9%AB%98%E6%80%A7%E8%83%BDjs.html\",component:uc,beforeEnter:function(n,s,e){a.e(28).then(a.bind(null,200)).then(function(n){wp.component(\"v-f220c37dc6fe\",n.default),e()})}},{path:\"/accumulate/amateur/高性能js.html\",redirect:\"/accumulate/amateur/%E9%AB%98%E6%80%A7%E8%83%BDjs.html\"},{name:\"v-746f6063fbfb7\",path:\"/accumulate/effect/input%E7%9A%84%E4%B8%80%E4%BA%9B%E5%9D%91%E7%82%B9%E5%88%86%E4%BA%AB.html\",component:uc,beforeEnter:function(n,s,e){a.e(29).then(a.bind(null,201)).then(function(n){wp.component(\"v-746f6063fbfb7\",n.default),e()})}},{path:\"/accumulate/effect/input的一些坑点分享.html\",redirect:\"/accumulate/effect/input%E7%9A%84%E4%B8%80%E4%BA%9B%E5%9D%91%E7%82%B9%E5%88%86%E4%BA%AB.html\"},{name:\"v-57bdc7a3e44f\",path:\"/accumulate/effect/%E5%89%8D%E7%AB%AF%E5%BC%B9%E5%B9%95%E6%95%88%E6%9E%9C%E5%AE%9E%E7%8E%B0%E6%80%9D%E8%B7%AF.html\",component:uc,beforeEnter:function(n,s,e){a.e(30).then(a.bind(null,202)).then(function(n){wp.component(\"v-57bdc7a3e44f\",n.default),e()})}},{path:\"/accumulate/effect/前端弹幕效果实现思路.html\",redirect:\"/accumulate/effect/%E5%89%8D%E7%AB%AF%E5%BC%B9%E5%B9%95%E6%95%88%E6%9E%9C%E5%AE%9E%E7%8E%B0%E6%80%9D%E8%B7%AF.html\"},{name:\"v-cdee9bdc785bc\",path:\"/accumulate/effect/%E5%A4%8D%E5%88%B6%E7%B2%98%E8%B4%B4%E7%B3%BB%E5%88%97.html\",component:uc,beforeEnter:function(n,s,e){a.e(31).then(a.bind(null,203)).then(function(n){wp.component(\"v-cdee9bdc785bc\",n.default),e()})}},{path:\"/accumulate/effect/复制粘贴系列.html\",redirect:\"/accumulate/effect/%E5%A4%8D%E5%88%B6%E7%B2%98%E8%B4%B4%E7%B3%BB%E5%88%97.html\"},{name:\"v-0b339122c1008\",path:\"/accumulate/effect/%E6%97%B6%E9%97%B4%E5%B7%AE%E4%B8%8E%E6%97%B6%E5%8C%BA%E8%BD%AC%E6%8D%A2.html\",component:uc,beforeEnter:function(n,s,e){a.e(32).then(a.bind(null,204)).then(function(n){wp.component(\"v-0b339122c1008\",n.default),e()})}},{path:\"/accumulate/effect/时间差与时区转换.html\",redirect:\"/accumulate/effect/%E6%97%B6%E9%97%B4%E5%B7%AE%E4%B8%8E%E6%97%B6%E5%8C%BA%E8%BD%AC%E6%8D%A2.html\"},{name:\"v-9601d2a1b9766\",path:\"/accumulate/effect/%E6%B5%8F%E8%A7%88%E5%99%A8%E6%A1%8C%E9%9D%A2%E9%80%9A%E7%9F%A5.html\",component:uc,beforeEnter:function(n,s,e){a.e(33).then(a.bind(null,205)).then(function(n){wp.component(\"v-9601d2a1b9766\",n.default),e()})}},{path:\"/accumulate/effect/浏览器桌面通知.html\",redirect:\"/accumulate/effect/%E6%B5%8F%E8%A7%88%E5%99%A8%E6%A1%8C%E9%9D%A2%E9%80%9A%E7%9F%A5.html\"},{name:\"v-6d6e43e0b89db\",path:\"/accumulate/effect/%E7%BD%91%E9%A1%B5%E5%85%A8%E5%B1%8F.html\",component:uc,beforeEnter:function(n,s,e){a.e(34).then(a.bind(null,206)).then(function(n){wp.component(\"v-6d6e43e0b89db\",n.default),e()})}},{path:\"/accumulate/effect/网页全屏.html\",redirect:\"/accumulate/effect/%E7%BD%91%E9%A1%B5%E5%85%A8%E5%B1%8F.html\"},{name:\"v-f02cea16860df\",path:\"/accumulate/effect/%E9%80%80%E5%87%BA%E9%A1%B5%E9%9D%A2%E5%8F%91%E9%80%81%E8%AF%B7%E6%B1%82.html\",component:uc,beforeEnter:function(n,s,e){a.e(35).then(a.bind(null,207)).then(function(n){wp.component(\"v-f02cea16860df\",n.default),e()})}},{path:\"/accumulate/effect/退出页面发送请求.html\",redirect:\"/accumulate/effect/%E9%80%80%E5%87%BA%E9%A1%B5%E9%9D%A2%E5%8F%91%E9%80%81%E8%AF%B7%E6%B1%82.html\"},{name:\"v-f37c68dc7d1f6\",path:\"/accumulate/electron/electron-terminal-demo.html\",component:uc,beforeEnter:function(n,s,e){a.e(36).then(a.bind(null,208)).then(function(n){wp.component(\"v-f37c68dc7d1f6\",n.default),e()})}},{name:\"v-4b19d09092a79\",path:\"/accumulate/template.html\",component:uc,beforeEnter:function(n,s,e){a.e(37).then(a.bind(null,209)).then(function(n){wp.component(\"v-4b19d09092a79\",n.default),e()})}},{name:\"v-20985931fb7ab\",path:\"/accumulate/tool/ESLint%E6%8F%92%E4%BB%B6.html\",component:uc,beforeEnter:function(n,s,e){a.e(38).then(a.bind(null,210)).then(function(n){wp.component(\"v-20985931fb7ab\",n.default),e()})}},{path:\"/accumulate/tool/ESLint插件.html\",redirect:\"/accumulate/tool/ESLint%E6%8F%92%E4%BB%B6.html\"},{name:\"v-b782c3b806ffa\",path:\"/accumulate/tool/Eslint%E8%87%AA%E5%8A%A8%E4%BF%AE%E5%A4%8D%E6%A0%BC%E5%BC%8F%E9%94%99%E8%AF%AF.html\",component:uc,beforeEnter:function(n,s,e){a.e(39).then(a.bind(null,211)).then(function(n){wp.component(\"v-b782c3b806ffa\",n.default),e()})}},{path:\"/accumulate/tool/Eslint自动修复格式错误.html\",redirect:\"/accumulate/tool/Eslint%E8%87%AA%E5%8A%A8%E4%BF%AE%E5%A4%8D%E6%A0%BC%E5%BC%8F%E9%94%99%E8%AF%AF.html\"},{name:\"v-50cf818faaa14\",path:\"/accumulate/tool/autoCommit.html\",component:uc,beforeEnter:function(n,s,e){a.e(40).then(a.bind(null,212)).then(function(n){wp.component(\"v-50cf818faaa14\",n.default),e()})}},{name:\"v-267f8f82657c\",path:\"/accumulate/tool/electron-playground.html\",component:uc,beforeEnter:function(n,s,e){a.e(41).then(a.bind(null,213)).then(function(n){wp.component(\"v-267f8f82657c\",n.default),e()})}},{name:\"v-f93fbd1f1f108\",path:\"/accumulate/tool/http%E7%BC%93%E5%AD%98.html\",component:uc,beforeEnter:function(n,s,e){a.e(42).then(a.bind(null,214)).then(function(n){wp.component(\"v-f93fbd1f1f108\",n.default),e()})}},{path:\"/accumulate/tool/http缓存.html\",redirect:\"/accumulate/tool/http%E7%BC%93%E5%AD%98.html\"},{name:\"v-ce479c220f824\",path:\"/accumulate/tool/js%E4%BA%8B%E4%BB%B6%E5%BE%AA%E7%8E%AF%E6%9C%BA%E5%88%B6.html\",component:uc,beforeEnter:function(n,s,e){a.e(43).then(a.bind(null,215)).then(function(n){wp.component(\"v-ce479c220f824\",n.default),e()})}},{path:\"/accumulate/tool/js事件循环机制.html\",redirect:\"/accumulate/tool/js%E4%BA%8B%E4%BB%B6%E5%BE%AA%E7%8E%AF%E6%9C%BA%E5%88%B6.html\"},{name:\"v-4eb3ecf397ac8\",path:\"/accumulate/tool/js%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E6%9C%BA%E5%88%B6.html\",component:uc,beforeEnter:function(n,s,e){a.e(44).then(a.bind(null,216)).then(function(n){wp.component(\"v-4eb3ecf397ac8\",n.default),e()})}},{path:\"/accumulate/tool/js垃圾回收机制.html\",redirect:\"/accumulate/tool/js%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E6%9C%BA%E5%88%B6.html\"},{name:\"v-a645b44d6309e\",path:\"/accumulate/tool/koroFileHeader.html\",component:uc,beforeEnter:function(n,s,e){a.e(45).then(a.bind(null,217)).then(function(n){wp.component(\"v-a645b44d6309e\",n.default),e()})}},{name:\"v-0e4c33cd743e4\",path:\"/accumulate/tool/stop-mess-around.html\",component:uc,beforeEnter:function(n,s,e){a.e(46).then(a.bind(null,218)).then(function(n){wp.component(\"v-0e4c33cd743e4\",n.default),e()})}},{name:\"v-50f36ff1f578e\",path:\"/accumulate/tool/%E4%B8%80%E4%BB%BD%E8%B6%85%E7%BA%A7%E8%AF%A6%E7%BB%86%E7%9A%84Vue-cli3.0%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B.html\",component:uc,beforeEnter:function(n,s,e){a.e(47).then(a.bind(null,219)).then(function(n){wp.component(\"v-50f36ff1f578e\",n.default),e()})}},{path:\"/accumulate/tool/一份超级详细的Vue-cli3.0使用教程.html\",redirect:\"/accumulate/tool/%E4%B8%80%E4%BB%BD%E8%B6%85%E7%BA%A7%E8%AF%A6%E7%BB%86%E7%9A%84Vue-cli3.0%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B.html\"},{name:\"v-5169601fac26d\",path:\"/accumulate/tool/%E5%8D%9A%E5%AE%A2%E5%A4%96%E9%93%BE%E5%A4%B1%E6%95%88%E4%B8%80%E9%94%AE%E6%9B%BF%E6%8D%A2.html\",component:uc,beforeEnter:function(n,s,e){a.e(48).then(a.bind(null,220)).then(function(n){wp.component(\"v-5169601fac26d\",n.default),e()})}},{path:\"/accumulate/tool/博客外链失效一键替换.html\",redirect:\"/accumulate/tool/%E5%8D%9A%E5%AE%A2%E5%A4%96%E9%93%BE%E5%A4%B1%E6%95%88%E4%B8%80%E9%94%AE%E6%9B%BF%E6%8D%A2.html\"},{name:\"v-f46941ebe69db\",path:\"/accumulate/tool/%E5%BF%8D%E8%80%85%E7%A7%98%E7%B1%8D%E5%AE%9A%E6%97%B6%E5%99%A8%E6%9C%BA%E5%88%B6.html\",component:uc,beforeEnter:function(n,s,e){a.e(49).then(a.bind(null,221)).then(function(n){wp.component(\"v-f46941ebe69db\",n.default),e()})}},{path:\"/accumulate/tool/忍者秘籍定时器机制.html\",redirect:\"/accumulate/tool/%E5%BF%8D%E8%80%85%E7%A7%98%E7%B1%8D%E5%AE%9A%E6%97%B6%E5%99%A8%E6%9C%BA%E5%88%B6.html\"},{name:\"v-e806549a0c4fa\",path:\"/accumulate/tool/%E6%B5%8F%E8%A7%88%E5%99%A8%E9%87%8D%E7%BB%98%E9%87%8D%E6%8E%92.html\",component:uc,beforeEnter:function(n,s,e){a.e(50).then(a.bind(null,222)).then(function(n){wp.component(\"v-e806549a0c4fa\",n.default),e()})}},{path:\"/accumulate/tool/浏览器重绘重排.html\",redirect:\"/accumulate/tool/%E6%B5%8F%E8%A7%88%E5%99%A8%E9%87%8D%E7%BB%98%E9%87%8D%E6%8E%92.html\"},{name:\"v-e0e027f91e79\",path:\"/accumulate/tool/%E9%AA%9A%E6%B3%A8%E9%87%8A%E5%B7%A5%E5%85%B7.html\",component:uc,beforeEnter:function(n,s,e){a.e(51).then(a.bind(null,223)).then(function(n){wp.component(\"v-e0e027f91e79\",n.default),e()})}},{path:\"/accumulate/tool/骚注释工具.html\",redirect:\"/accumulate/tool/%E9%AA%9A%E6%B3%A8%E9%87%8A%E5%B7%A5%E5%85%B7.html\"},{name:\"v-4a44e285452b5\",path:\"/accumulate/year/2020.html\",component:uc,beforeEnter:function(n,s,e){a.e(52).then(a.bind(null,224)).then(function(n){wp.component(\"v-4a44e285452b5\",n.default),e()})}},{name:\"v-98e96a649bf4b\",path:\"/algorithm/\",component:uc,beforeEnter:function(n,s,e){a.e(53).then(a.bind(null,225)).then(function(n){wp.component(\"v-98e96a649bf4b\",n.default),e()})}},{path:\"/algorithm/index.html\",redirect:\"/algorithm/\"},{name:\"v-6441476dd94df\",path:\"/algorithm/induction/%E5%8F%8D%E8%BD%AC3%E4%BD%8D%E6%95%B4%E6%95%B0.html\",component:uc,beforeEnter:function(n,s,e){a.e(54).then(a.bind(null,226)).then(function(n){wp.component(\"v-6441476dd94df\",n.default),e()})}},{path:\"/algorithm/induction/反转3位整数.html\",redirect:\"/algorithm/induction/%E5%8F%8D%E8%BD%AC3%E4%BD%8D%E6%95%B4%E6%95%B0.html\"},{name:\"v-f54b7613c64aa\",path:\"/algorithm/induction/%E6%95%B0%E7%BB%84%E9%87%8D%E5%A4%8D%E6%AC%A1%E6%95%B0.html\",component:uc,beforeEnter:function(n,s,e){a.e(55).then(a.bind(null,227)).then(function(n){wp.component(\"v-f54b7613c64aa\",n.default),e()})}},{path:\"/algorithm/induction/数组重复次数.html\",redirect:\"/algorithm/induction/%E6%95%B0%E7%BB%84%E9%87%8D%E5%A4%8D%E6%AC%A1%E6%95%B0.html\"},{name:\"v-0891a53337b9e\",path:\"/algorithm/induction/%E6%9F%A5%E6%89%BE%E6%96%90%E6%B3%A2%E7%BA%B3%E5%A5%91%E6%95%B0%E5%88%97%E4%B8%AD%E7%AC%ACN%E4%B8%AA%E6%95%B0.html\",component:uc,beforeEnter:function(n,s,e){a.e(56).then(a.bind(null,228)).then(function(n){wp.component(\"v-0891a53337b9e\",n.default),e()})}},{path:\"/algorithm/induction/查找斐波纳契数列中第N个数.html\",redirect:\"/algorithm/induction/%E6%9F%A5%E6%89%BE%E6%96%90%E6%B3%A2%E7%BA%B3%E5%A5%91%E6%95%B0%E5%88%97%E4%B8%AD%E7%AC%ACN%E4%B8%AA%E6%95%B0.html\"},{name:\"v-683a132bc17dc\",path:\"/algorithm/induction/%E6%B0%B4%E4%BB%99%E8%8A%B1%E6%95%B0.html\",component:uc,beforeEnter:function(n,s,e){a.e(57).then(a.bind(null,229)).then(function(n){wp.component(\"v-683a132bc17dc\",n.default),e()})}},{path:\"/algorithm/induction/水仙花数.html\",redirect:\"/algorithm/induction/%E6%B0%B4%E4%BB%99%E8%8A%B1%E6%95%B0.html\"},{name:\"v-966533ed9d6b7\",path:\"/algorithm/medium/102%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E5%B1%82%E5%BA%8F%E9%81%8D%E5%8E%86.html\",component:uc,beforeEnter:function(n,s,e){a.e(58).then(a.bind(null,230)).then(function(n){wp.component(\"v-966533ed9d6b7\",n.default),e()})}},{path:\"/algorithm/medium/102二叉树的层序遍历.html\",redirect:\"/algorithm/medium/102%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E5%B1%82%E5%BA%8F%E9%81%8D%E5%8E%86.html\"},{name:\"v-049641f5923c7\",path:\"/algorithm/medium/103%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E9%94%AF%E9%BD%BF%E5%BD%A2%E5%B1%82%E6%AC%A1%E9%81%8D%E5%8E%86.html\",component:uc,beforeEnter:function(n,s,e){a.e(59).then(a.bind(null,231)).then(function(n){wp.component(\"v-049641f5923c7\",n.default),e()})}},{path:\"/algorithm/medium/103二叉树的锯齿形层次遍历.html\",redirect:\"/algorithm/medium/103%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E9%94%AF%E9%BD%BF%E5%BD%A2%E5%B1%82%E6%AC%A1%E9%81%8D%E5%8E%86.html\"},{name:\"v-eab000f086772\",path:\"/algorithm/medium/11%E9%A2%98%E7%9B%9B%E6%9C%80%E5%A4%9A%E6%B0%B4%E7%9A%84%E5%AE%B9%E5%99%A8.html\",component:uc,beforeEnter:function(n,s,e){a.e(60).then(a.bind(null,232)).then(function(n){wp.component(\"v-eab000f086772\",n.default),e()})}},{path:\"/algorithm/medium/11题盛最多水的容器.html\",redirect:\"/algorithm/medium/11%E9%A2%98%E7%9B%9B%E6%9C%80%E5%A4%9A%E6%B0%B4%E7%9A%84%E5%AE%B9%E5%99%A8.html\"},{name:\"v-b7f098b3ad5d3\",path:\"/algorithm/medium/1229%E5%AE%89%E6%8E%92%E4%BC%9A%E8%AE%AE%E6%97%A5%E7%A8%8B.html\",component:uc,beforeEnter:function(n,s,e){a.e(61).then(a.bind(null,233)).then(function(n){wp.component(\"v-b7f098b3ad5d3\",n.default),e()})}},{path:\"/algorithm/medium/1229安排会议日程.html\",redirect:\"/algorithm/medium/1229%E5%AE%89%E6%8E%92%E4%BC%9A%E8%AE%AE%E6%97%A5%E7%A8%8B.html\"},{name:\"v-e72e8374dc6b7\",path:\"/algorithm/medium/146LRU%E7%BC%93%E5%AD%98%E6%9C%BA%E5%88%B6.html\",component:uc,beforeEnter:function(n,s,e){a.e(62).then(a.bind(null,234)).then(function(n){wp.component(\"v-e72e8374dc6b7\",n.default),e()})}},{path:\"/algorithm/medium/146LRU缓存机制.html\",redirect:\"/algorithm/medium/146LRU%E7%BC%93%E5%AD%98%E6%9C%BA%E5%88%B6.html\"},{name:\"v-dc396649ec201\",path:\"/algorithm/medium/15%E4%B8%89%E6%95%B0%E4%B9%8B%E5%92%8C.html\",component:uc,beforeEnter:function(n,s,e){a.e(63).then(a.bind(null,235)).then(function(n){wp.component(\"v-dc396649ec201\",n.default),e()})}},{path:\"/algorithm/medium/15三数之和.html\",redirect:\"/algorithm/medium/15%E4%B8%89%E6%95%B0%E4%B9%8B%E5%92%8C.html\"},{name:\"v-37cf2f54309e2\",path:\"/algorithm/medium/199%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E5%8F%B3%E8%A7%86%E5%9B%BE.html\",component:uc,beforeEnter:function(n,s,e){a.e(64).then(a.bind(null,236)).then(function(n){wp.component(\"v-37cf2f54309e2\",n.default),e()})}},{path:\"/algorithm/medium/199二叉树的右视图.html\",redirect:\"/algorithm/medium/199%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E5%8F%B3%E8%A7%86%E5%9B%BE.html\"},{name:\"v-8367fcd123807\",path:\"/algorithm/medium/19%E5%88%A0%E9%99%A4%E9%93%BE%E8%A1%A8%E7%9A%84%E5%80%92%E6%95%B0%E7%AC%ACN%E4%B8%AA%E8%8A%82%E7%82%B9.html\",component:uc,beforeEnter:function(n,s,e){a.e(65).then(a.bind(null,237)).then(function(n){wp.component(\"v-8367fcd123807\",n.default),e()})}},{path:\"/algorithm/medium/19删除链表的倒数第N个节点.html\",redirect:\"/algorithm/medium/19%E5%88%A0%E9%99%A4%E9%93%BE%E8%A1%A8%E7%9A%84%E5%80%92%E6%95%B0%E7%AC%ACN%E4%B8%AA%E8%8A%82%E7%82%B9.html\"},{name:\"v-2781c5265299a\",path:\"/algorithm/medium/200%E9%A2%98%E5%B2%9B%E5%B1%BF%E6%95%B0%E9%87%8F.html\",component:uc,beforeEnter:function(n,s,e){a.e(66).then(a.bind(null,238)).then(function(n){wp.component(\"v-2781c5265299a\",n.default),e()})}},{path:\"/algorithm/medium/200题岛屿数量.html\",redirect:\"/algorithm/medium/200%E9%A2%98%E5%B2%9B%E5%B1%BF%E6%95%B0%E9%87%8F.html\"},{name:\"v-f223fcad8b2e4\",path:\"/algorithm/medium/22%E6%8B%AC%E5%8F%B7%E7%94%9F%E6%88%90.html\",component:uc,beforeEnter:function(n,s,e){a.e(67).then(a.bind(null,239)).then(function(n){wp.component(\"v-f223fcad8b2e4\",n.default),e()})}},{path:\"/algorithm/medium/22括号生成.html\",redirect:\"/algorithm/medium/22%E6%8B%AC%E5%8F%B7%E7%94%9F%E6%88%90.html\"},{name:\"v-98a06e9a047bf\",path:\"/algorithm/medium/322%E9%9B%B6%E9%92%B1%E5%85%91%E6%8D%A2.html\",component:uc,beforeEnter:function(n,s,e){a.e(68).then(a.bind(null,240)).then(function(n){wp.component(\"v-98a06e9a047bf\",n.default),e()})}},{path:\"/algorithm/medium/322零钱兑换.html\",redirect:\"/algorithm/medium/322%E9%9B%B6%E9%92%B1%E5%85%91%E6%8D%A2.html\"},{name:\"v-4bacd4425ee62\",path:\"/algorithm/medium/33%E6%90%9C%E7%B4%A2%E6%97%8B%E8%BD%AC%E6%8E%92%E5%BA%8F%E6%95%B0%E7%BB%84.html\",component:uc,beforeEnter:function(n,s,e){a.e(69).then(a.bind(null,241)).then(function(n){wp.component(\"v-4bacd4425ee62\",n.default),e()})}},{path:\"/algorithm/medium/33搜索旋转排序数组.html\",redirect:\"/algorithm/medium/33%E6%90%9C%E7%B4%A2%E6%97%8B%E8%BD%AC%E6%8E%92%E5%BA%8F%E6%95%B0%E7%BB%84.html\"},{name:\"v-dd6f941cc68ea\",path:\"/algorithm/medium/351%E5%AE%89%E5%8D%93%E7%B3%BB%E7%BB%9F%E6%89%8B%E5%8A%BF%E8%A7%A3%E9%94%81.html\",component:uc,beforeEnter:function(n,s,e){a.e(70).then(a.bind(null,242)).then(function(n){wp.component(\"v-dd6f941cc68ea\",n.default),e()})}},{path:\"/algorithm/medium/351安卓系统手势解锁.html\",redirect:\"/algorithm/medium/351%E5%AE%89%E5%8D%93%E7%B3%BB%E7%BB%9F%E6%89%8B%E5%8A%BF%E8%A7%A3%E9%94%81.html\"},{name:\"v-7af70fd86809a\",path:\"/algorithm/medium/456%E9%A2%98132%E6%A8%A1%E5%BC%8F.html\",component:uc,beforeEnter:function(n,s,e){a.e(71).then(a.bind(null,243)).then(function(n){wp.component(\"v-7af70fd86809a\",n.default),e()})}},{path:\"/algorithm/medium/456题132模式.html\",redirect:\"/algorithm/medium/456%E9%A2%98132%E6%A8%A1%E5%BC%8F.html\"},{name:\"v-5fd46ff0994fc\",path:\"/algorithm/medium/45%E9%A2%98%E8%B7%B3%E8%B7%83%E6%B8%B8%E6%88%8F2.html\",component:uc,beforeEnter:function(n,s,e){a.e(72).then(a.bind(null,244)).then(function(n){wp.component(\"v-5fd46ff0994fc\",n.default),e()})}},{path:\"/algorithm/medium/45题跳跃游戏2.html\",redirect:\"/algorithm/medium/45%E9%A2%98%E8%B7%B3%E8%B7%83%E6%B8%B8%E6%88%8F2.html\"},{name:\"v-c1b537c92c8ac\",path:\"/algorithm/medium/466%E7%BB%9F%E8%AE%A1%E9%87%8D%E5%A4%8D%E4%B8%AA%E6%95%B0.html\",component:uc,beforeEnter:function(n,s,e){a.e(73).then(a.bind(null,245)).then(function(n){wp.component(\"v-c1b537c92c8ac\",n.default),e()})}},{path:\"/algorithm/medium/466统计重复个数.html\",redirect:\"/algorithm/medium/466%E7%BB%9F%E8%AE%A1%E9%87%8D%E5%A4%8D%E4%B8%AA%E6%95%B0.html\"},{name:\"v-14871d15cc145\",path:\"/algorithm/medium/46%E5%85%A8%E6%8E%92%E5%88%97.html\",component:uc,beforeEnter:function(n,s,e){a.e(74).then(a.bind(null,246)).then(function(n){wp.component(\"v-14871d15cc145\",n.default),e()})}},{path:\"/algorithm/medium/46全排列.html\",redirect:\"/algorithm/medium/46%E5%85%A8%E6%8E%92%E5%88%97.html\"},{name:\"v-9db67c910879a\",path:\"/algorithm/medium/54%E8%9E%BA%E6%97%8B%E7%9F%A9%E9%98%B5.html\",component:uc,beforeEnter:function(n,s,e){a.e(75).then(a.bind(null,247)).then(function(n){wp.component(\"v-9db67c910879a\",n.default),e()})}},{path:\"/algorithm/medium/54螺旋矩阵.html\",redirect:\"/algorithm/medium/54%E8%9E%BA%E6%97%8B%E7%9F%A9%E9%98%B5.html\"},{name:\"v-c46ad29ab7ef4\",path:\"/algorithm/medium/55%E9%A2%98%E8%B7%B3%E8%BF%9C%E6%B8%B8%E6%88%8F.html\",component:uc,beforeEnter:function(n,s,e){a.e(76).then(a.bind(null,248)).then(function(n){wp.component(\"v-c46ad29ab7ef4\",n.default),e()})}},{path:\"/algorithm/medium/55题跳远游戏.html\",redirect:\"/algorithm/medium/55%E9%A2%98%E8%B7%B3%E8%BF%9C%E6%B8%B8%E6%88%8F.html\"},{name:\"v-3ebe26cec5483\",path:\"/algorithm/medium/56%E5%90%88%E5%B9%B6%E5%8C%BA%E9%97%B4.html\",component:uc,beforeEnter:function(n,s,e){a.e(77).then(a.bind(null,249)).then(function(n){wp.component(\"v-3ebe26cec5483\",n.default),e()})}},{path:\"/algorithm/medium/56合并区间.html\",redirect:\"/algorithm/medium/56%E5%90%88%E5%B9%B6%E5%8C%BA%E9%97%B4.html\"},{name:\"v-e01412358136\",path:\"/algorithm/medium/5%E6%9C%80%E9%95%BF%E5%9B%9E%E6%96%87%E5%AD%90%E4%B8%B2.html\",component:uc,beforeEnter:function(n,s,e){a.e(78).then(a.bind(null,250)).then(function(n){wp.component(\"v-e01412358136\",n.default),e()})}},{path:\"/algorithm/medium/5最长回文子串.html\",redirect:\"/algorithm/medium/5%E6%9C%80%E9%95%BF%E5%9B%9E%E6%96%87%E5%AD%90%E4%B8%B2.html\"},{name:\"v-744ec355c9318\",path:\"/algorithm/medium/64%E9%A2%98%E6%9C%80%E5%B0%8F%E8%B7%AF%E5%BE%84%E5%92%8C.html\",component:uc,beforeEnter:function(n,s,e){a.e(79).then(a.bind(null,251)).then(function(n){wp.component(\"v-744ec355c9318\",n.default),e()})}},{path:\"/algorithm/medium/64题最小路径和.html\",redirect:\"/algorithm/medium/64%E9%A2%98%E6%9C%80%E5%B0%8F%E8%B7%AF%E5%BE%84%E5%92%8C.html\"},{name:\"v-e81054f8959f5\",path:\"/algorithm/medium/735%E9%A2%98%E8%A1%8C%E6%98%9F%E7%A2%B0%E6%92%9E.html\",component:uc,beforeEnter:function(n,s,e){a.e(80).then(a.bind(null,252)).then(function(n){wp.component(\"v-e81054f8959f5\",n.default),e()})}},{path:\"/algorithm/medium/735题行星碰撞.html\",redirect:\"/algorithm/medium/735%E9%A2%98%E8%A1%8C%E6%98%9F%E7%A2%B0%E6%92%9E.html\"},{name:\"v-bcd26a411967f\",path:\"/algorithm/medium/867%E9%A2%98%E8%BD%AC%E7%BD%AE%E7%9F%A9%E9%98%B5.html\",component:uc,beforeEnter:function(n,s,e){a.e(81).then(a.bind(null,253)).then(function(n){wp.component(\"v-bcd26a411967f\",n.default),e()})}},{path:\"/algorithm/medium/867题转置矩阵.html\",redirect:\"/algorithm/medium/867%E9%A2%98%E8%BD%AC%E7%BD%AE%E7%9F%A9%E9%98%B5.html\"},{name:\"v-559ed802b999e\",path:\"/algorithm/medium/93%E5%A4%8D%E5%8E%9FIP%E5%9C%B0%E5%9D%80.html\",component:uc,beforeEnter:function(n,s,e){a.e(82).then(a.bind(null,254)).then(function(n){wp.component(\"v-559ed802b999e\",n.default),e()})}},{path:\"/algorithm/medium/93复原IP地址.html\",redirect:\"/algorithm/medium/93%E5%A4%8D%E5%8E%9FIP%E5%9C%B0%E5%9D%80.html\"},{name:\"v-83a01ed5d9b04\",path:\"/algorithm/medium/%E4%B8%91%E6%95%B0.html\",component:uc,beforeEnter:function(n,s,e){a.e(83).then(a.bind(null,255)).then(function(n){wp.component(\"v-83a01ed5d9b04\",n.default),e()})}},{path:\"/algorithm/medium/丑数.html\",redirect:\"/algorithm/medium/%E4%B8%91%E6%95%B0.html\"},{name:\"v-bcec00d5a55a7\",path:\"/algorithm/medium/%E5%A5%87%E6%95%B0%E6%9C%AA%E5%B0%8F%E4%BA%8E%E7%9B%B8%E9%82%BB%E5%81%B6%E6%95%B0%E4%B8%BA%E7%9A%84%E5%80%BC.html\",component:uc,beforeEnter:function(n,s,e){a.e(84).then(a.bind(null,256)).then(function(n){wp.component(\"v-bcec00d5a55a7\",n.default),e()})}},{path:\"/algorithm/medium/奇数未小于相邻偶数为的值.html\",redirect:\"/algorithm/medium/%E5%A5%87%E6%95%B0%E6%9C%AA%E5%B0%8F%E4%BA%8E%E7%9B%B8%E9%82%BB%E5%81%B6%E6%95%B0%E4%B8%BA%E7%9A%84%E5%80%BC.html\"},{name:\"v-525316da3e2ea\",path:\"/algorithm/medium/%E6%91%86%E5%8A%A8%E5%BA%8F%E5%88%97.html\",component:uc,beforeEnter:function(n,s,e){a.e(85).then(a.bind(null,257)).then(function(n){wp.component(\"v-525316da3e2ea\",n.default),e()})}},{path:\"/algorithm/medium/摆动序列.html\",redirect:\"/algorithm/medium/%E6%91%86%E5%8A%A8%E5%BA%8F%E5%88%97.html\"},{name:\"v-81a028de3e933\",path:\"/algorithm/medium/%E6%97%A0%E9%87%8D%E5%A4%8D%E5%AD%97%E7%AC%A6%E7%9A%84%E6%9C%80%E9%95%BF%E5%AD%90%E4%B8%B2.html\",component:uc,beforeEnter:function(n,s,e){a.e(86).then(a.bind(null,258)).then(function(n){wp.component(\"v-81a028de3e933\",n.default),e()})}},{path:\"/algorithm/medium/无重复字符的最长子串.html\",redirect:\"/algorithm/medium/%E6%97%A0%E9%87%8D%E5%A4%8D%E5%AD%97%E7%AC%A6%E7%9A%84%E6%9C%80%E9%95%BF%E5%AD%90%E4%B8%B2.html\"},{name:\"v-6c667b7f2a594\",path:\"/algorithm/medium/%E7%AC%ACk%E5%A4%A7%E5%85%83%E7%B4%A0.html\",component:uc,beforeEnter:function(n,s,e){a.e(87).then(a.bind(null,259)).then(function(n){wp.component(\"v-6c667b7f2a594\",n.default),e()})}},{path:\"/algorithm/medium/第k大元素.html\",redirect:\"/algorithm/medium/%E7%AC%ACk%E5%A4%A7%E5%85%83%E7%B4%A0.html\"},{name:\"v-497019496c782\",path:\"/algorithm/medium/%E7%BB%9F%E8%AE%A1%E6%95%B0%E5%AD%97.html\",component:uc,beforeEnter:function(n,s,e){a.e(88).then(a.bind(null,260)).then(function(n){wp.component(\"v-497019496c782\",n.default),e()})}},{path:\"/algorithm/medium/统计数字.html\",redirect:\"/algorithm/medium/%E7%BB%9F%E8%AE%A1%E6%95%B0%E5%AD%97.html\"},{name:\"v-5b12c8fc0970a\",path:\"/algorithm/simple/%E4%B8%A2%E5%A4%B1%E7%9A%84%E6%95%B0.html\",component:uc,beforeEnter:function(n,s,e){a.e(89).then(a.bind(null,261)).then(function(n){wp.component(\"v-5b12c8fc0970a\",n.default),e()})}},{path:\"/algorithm/simple/丢失的数.html\",redirect:\"/algorithm/simple/%E4%B8%A2%E5%A4%B1%E7%9A%84%E6%95%B0.html\"},{name:\"v-acd6a17d68f3d\",path:\"/algorithm/simple/%E4%B8%A4%E4%B8%AA%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%98%AF%E5%8F%98%E4%BD%8D%E8%AF%8D.html\",component:uc,beforeEnter:function(n,s,e){a.e(90).then(a.bind(null,262)).then(function(n){wp.component(\"v-acd6a17d68f3d\",n.default),e()})}},{path:\"/algorithm/simple/两个字符串是变位词.html\",redirect:\"/algorithm/simple/%E4%B8%A4%E4%B8%AA%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%98%AF%E5%8F%98%E4%BD%8D%E8%AF%8D.html\"},{name:\"v-11dad5cc3d8f\",path:\"/algorithm/simple/%E4%B8%A4%E6%95%B0%E4%B9%8B%E5%92%8C.html\",component:uc,beforeEnter:function(n,s,e){a.e(91).then(a.bind(null,263)).then(function(n){wp.component(\"v-11dad5cc3d8f\",n.default),e()})}},{path:\"/algorithm/simple/两数之和.html\",redirect:\"/algorithm/simple/%E4%B8%A4%E6%95%B0%E4%B9%8B%E5%92%8C.html\"},{name:\"v-ab6c422cc0d03\",path:\"/algorithm/simple/%E4%B8%AD%E4%BD%8D%E6%95%B0.html\",component:uc,beforeEnter:function(n,s,e){a.e(92).then(a.bind(null,264)).then(function(n){wp.component(\"v-ab6c422cc0d03\",n.default),e()})}},{path:\"/algorithm/simple/中位数.html\",redirect:\"/algorithm/simple/%E4%B8%AD%E4%BD%8D%E6%95%B0.html\"},{name:\"v-3570c91f8c071\",path:\"/algorithm/simple/%E5%88%86%E8%A7%A3%E8%B4%A8%E5%9B%A0%E6%95%B0.html\",component:uc,beforeEnter:function(n,s,e){a.e(93).then(a.bind(null,265)).then(function(n){wp.component(\"v-3570c91f8c071\",n.default),e()})}},{path:\"/algorithm/simple/分解质因数.html\",redirect:\"/algorithm/simple/%E5%88%86%E8%A7%A3%E8%B4%A8%E5%9B%A0%E6%95%B0.html\"},{name:\"v-d11e7a9e057d5\",path:\"/algorithm/simple/%E5%88%A0%E9%99%A4%E5%85%83%E7%B4%A0.html\",component:uc,beforeEnter:function(n,s,e){a.e(94).then(a.bind(null,266)).then(function(n){wp.component(\"v-d11e7a9e057d5\",n.default),e()})}},{path:\"/algorithm/simple/删除元素.html\",redirect:\"/algorithm/simple/%E5%88%A0%E9%99%A4%E5%85%83%E7%B4%A0.html\"},{name:\"v-4941535a5f25b\",path:\"/algorithm/simple/%E5%88%A4%E6%96%AD%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84%E5%BE%AA%E7%8E%AF%E7%A7%BB%E5%8A%A8.html\",component:uc,beforeEnter:function(n,s,e){a.e(95).then(a.bind(null,267)).then(function(n){wp.component(\"v-4941535a5f25b\",n.default),e()})}},{path:\"/algorithm/simple/判断字符串的循环移动.html\",redirect:\"/algorithm/simple/%E5%88%A4%E6%96%AD%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84%E5%BE%AA%E7%8E%AF%E7%A7%BB%E5%8A%A8.html\"},{name:\"v-5d7b9d8a49f0e\",path:\"/algorithm/simple/%E5%8F%8D%E8%BD%AC%E6%95%B4%E6%95%B0.html\",component:uc,beforeEnter:function(n,s,e){a.e(96).then(a.bind(null,268)).then(function(n){wp.component(\"v-5d7b9d8a49f0e\",n.default),e()})}},{path:\"/algorithm/simple/反转整数.html\",redirect:\"/algorithm/simple/%E5%8F%8D%E8%BD%AC%E6%95%B4%E6%95%B0.html\"},{name:\"v-b140ab4af4df2\",path:\"/algorithm/simple/%E5%90%88%E5%B9%B6%E6%8E%92%E5%BA%8F%E6%95%B0%E7%BB%84.html\",component:uc,beforeEnter:function(n,s,e){a.e(97).then(a.bind(null,269)).then(function(n){wp.component(\"v-b140ab4af4df2\",n.default),e()})}},{path:\"/algorithm/simple/合并排序数组.html\",redirect:\"/algorithm/simple/%E5%90%88%E5%B9%B6%E6%8E%92%E5%BA%8F%E6%95%B0%E7%BB%84.html\"},{name:\"v-f80afe28637db\",path:\"/algorithm/simple/%E5%9B%9E%E6%96%87.html\",component:uc,beforeEnter:function(n,s,e){a.e(98).then(a.bind(null,270)).then(function(n){wp.component(\"v-f80afe28637db\",n.default),e()})}},{path:\"/algorithm/simple/回文.html\",redirect:\"/algorithm/simple/%E5%9B%9E%E6%96%87.html\"},{name:\"v-c65ec11e2961c\",path:\"/algorithm/simple/%E5%A5%87%E5%81%B6%E5%88%86%E5%89%B2%E6%95%B0%E7%BB%84.html\",component:uc,beforeEnter:function(n,s,e){a.e(99).then(a.bind(null,271)).then(function(n){wp.component(\"v-c65ec11e2961c\",n.default),e()})}},{path:\"/algorithm/simple/奇偶分割数组.html\",redirect:\"/algorithm/simple/%E5%A5%87%E5%81%B6%E5%88%86%E5%89%B2%E6%95%B0%E7%BB%84.html\"},{name:\"v-9fb27d43ccbad\",path:\"/algorithm/simple/%E5%A7%93%E5%90%8D%E5%8E%BB%E9%87%8D.html\",component:uc,beforeEnter:function(n,s,e){a.e(100).then(a.bind(null,272)).then(function(n){wp.component(\"v-9fb27d43ccbad\",n.default),e()})}},{path:\"/algorithm/simple/姓名去重.html\",redirect:\"/algorithm/simple/%E5%A7%93%E5%90%8D%E5%8E%BB%E9%87%8D.html\"},{name:\"v-871251bdfd826\",path:\"/algorithm/simple/%E5%AD%90%E6%95%B0%E7%BB%84%E4%B9%8B%E5%92%8C.html\",component:uc,beforeEnter:function(n,s,e){a.e(101).then(a.bind(null,273)).then(function(n){wp.component(\"v-871251bdfd826\",n.default),e()})}},{path:\"/algorithm/simple/子数组之和.html\",redirect:\"/algorithm/simple/%E5%AD%90%E6%95%B0%E7%BB%84%E4%B9%8B%E5%92%8C.html\"},{name:\"v-97ee951e9d6b2\",path:\"/algorithm/simple/%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%8E%8B%E7%BC%A9.html\",component:uc,beforeEnter:function(n,s,e){a.e(102).then(a.bind(null,274)).then(function(n){wp.component(\"v-97ee951e9d6b2\",n.default),e()})}},{path:\"/algorithm/simple/字符串压缩.html\",redirect:\"/algorithm/simple/%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%8E%8B%E7%BC%A9.html\"},{name:\"v-72af94c4a6b07\",path:\"/algorithm/simple/%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%AF%86%E9%92%A5%E6%A0%BC%E5%BC%8F.html\",component:uc,beforeEnter:function(n,s,e){a.e(103).then(a.bind(null,275)).then(function(n){wp.component(\"v-72af94c4a6b07\",n.default),e()})}},{path:\"/algorithm/simple/字符串密钥格式.html\",redirect:\"/algorithm/simple/%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%AF%86%E9%92%A5%E6%A0%BC%E5%BC%8F.html\"},{name:\"v-09bff5d9fd0d7\",path:\"/algorithm/simple/%E6%90%9C%E7%B4%A2%E4%BA%8C%E7%BB%B4%E7%9F%A9%E9%98%B5.html\",component:uc,beforeEnter:function(n,s,e){a.e(104).then(a.bind(null,276)).then(function(n){wp.component(\"v-09bff5d9fd0d7\",n.default),e()})}},{path:\"/algorithm/simple/搜索二维矩阵.html\",redirect:\"/algorithm/simple/%E6%90%9C%E7%B4%A2%E4%BA%8C%E7%BB%B4%E7%9F%A9%E9%98%B5.html\"},{name:\"v-cf845969280bf\",path:\"/algorithm/simple/%E6%9C%80%E5%A4%A7%E5%AD%90%E6%95%B0%E7%BB%84.html\",component:uc,beforeEnter:function(n,s,e){a.e(105).then(a.bind(null,277)).then(function(n){wp.component(\"v-cf845969280bf\",n.default),e()})}},{path:\"/algorithm/simple/最大子数组.html\",redirect:\"/algorithm/simple/%E6%9C%80%E5%A4%A7%E5%AD%90%E6%95%B0%E7%BB%84.html\"},{name:\"v-e5482046e7dfb\",path:\"/algorithm/simple/%E6%9C%80%E9%95%BF%E5%8D%95%E8%AF%8D.html\",component:uc,beforeEnter:function(n,s,e){a.e(106).then(a.bind(null,278)).then(function(n){wp.component(\"v-e5482046e7dfb\",n.default),e()})}},{path:\"/algorithm/simple/最长单词.html\",redirect:\"/algorithm/simple/%E6%9C%80%E9%95%BF%E5%8D%95%E8%AF%8D.html\"},{name:\"v-10885e748864\",path:\"/algorithm/simple/%E6%A3%80%E6%B5%8B2%E7%9A%84%E5%B9%82%E6%AC%A1.html\",component:uc,beforeEnter:function(n,s,e){a.e(107).then(a.bind(null,279)).then(function(n){wp.component(\"v-10885e748864\",n.default),e()})}},{path:\"/algorithm/simple/检测2的幂次.html\",redirect:\"/algorithm/simple/%E6%A3%80%E6%B5%8B2%E7%9A%84%E5%B9%82%E6%AC%A1.html\"},{name:\"v-5e5c675738c7\",path:\"/algorithm/simple/%E6%AF%94%E8%BE%83%E5%AD%97%E7%AC%A6%E4%B8%B2.html\",component:uc,beforeEnter:function(n,s,e){a.e(108).then(a.bind(null,280)).then(function(n){wp.component(\"v-5e5c675738c7\",n.default),e()})}},{path:\"/algorithm/simple/比较字符串.html\",redirect:\"/algorithm/simple/%E6%AF%94%E8%BE%83%E5%AD%97%E7%AC%A6%E4%B8%B2.html\"},{name:\"v-130b14bbbe15c\",path:\"/algorithm/simple/%E7%88%AC%E6%A5%BC%E6%A2%AF.html\",component:uc,beforeEnter:function(n,s,e){a.e(109).then(a.bind(null,281)).then(function(n){wp.component(\"v-130b14bbbe15c\",n.default),e()})}},{path:\"/algorithm/simple/爬楼梯.html\",redirect:\"/algorithm/simple/%E7%88%AC%E6%A5%BC%E6%A2%AF.html\"},{name:\"v-68bdce4bd5361\",path:\"/algorithm/simple/%E7%88%AC%E6%A5%BC%E6%A2%AF2.html\",component:uc,beforeEnter:function(n,s,e){a.e(110).then(a.bind(null,282)).then(function(n){wp.component(\"v-68bdce4bd5361\",n.default),e()})}},{path:\"/algorithm/simple/爬楼梯2.html\",redirect:\"/algorithm/simple/%E7%88%AC%E6%A5%BC%E6%A2%AF2.html\"},{name:\"v-d7bfc3581248d\",path:\"/algorithm/simple/%E7%9B%B8%E4%BA%B2%E6%95%B0.html\",component:uc,beforeEnter:function(n,s,e){a.e(111).then(a.bind(null,283)).then(function(n){wp.component(\"v-d7bfc3581248d\",n.default),e()})}},{path:\"/algorithm/simple/相亲数.html\",redirect:\"/algorithm/simple/%E7%9B%B8%E4%BA%B2%E6%95%B0.html\"},{name:\"v-89b73c6d6add9\",path:\"/algorithm/simple/%E7%AC%AC%E4%B8%80%E4%B8%AA%E5%8F%AA%E5%87%BA%E7%8E%B0%E4%B8%80%E6%AC%A1%E7%9A%84%E5%AD%97%E7%AC%A6.html\",component:uc,beforeEnter:function(n,s,e){a.e(112).then(a.bind(null,284)).then(function(n){wp.component(\"v-89b73c6d6add9\",n.default),e()})}},{path:\"/algorithm/simple/第一个只出现一次的字符.html\",redirect:\"/algorithm/simple/%E7%AC%AC%E4%B8%80%E4%B8%AA%E5%8F%AA%E5%87%BA%E7%8E%B0%E4%B8%80%E6%AC%A1%E7%9A%84%E5%AD%97%E7%AC%A6.html\"},{name:\"v-af6df9e2ca53e\",path:\"/algorithm/simple/%E8%90%BD%E5%8D%95%E7%9A%84%E6%95%B0.html\",component:uc,beforeEnter:function(n,s,e){a.e(113).then(a.bind(null,285)).then(function(n){wp.component(\"v-af6df9e2ca53e\",n.default),e()})}},{path:\"/algorithm/simple/落单的数.html\",redirect:\"/algorithm/simple/%E8%90%BD%E5%8D%95%E7%9A%84%E6%95%B0.html\"},{name:\"v-63829c8ab0948\",path:\"/algorithm/template.html\",component:uc,beforeEnter:function(n,s,e){a.e(114).then(a.bind(null,286)).then(function(n){wp.component(\"v-63829c8ab0948\",n.default),e()})}},{name:\"v-bdbe32e2a263c\",path:\"/codeBlack/Object.create%E5%AE%9E%E7%8E%B0.html\",component:uc,beforeEnter:function(n,s,e){a.e(115).then(a.bind(null,287)).then(function(n){wp.component(\"v-bdbe32e2a263c\",n.default),e()})}},{path:\"/codeBlack/Object.create实现.html\",redirect:\"/codeBlack/Object.create%E5%AE%9E%E7%8E%B0.html\"},{name:\"v-ac2e2ae425d77\",path:\"/codeBlack/\",component:uc,beforeEnter:function(n,s,e){a.e(116).then(a.bind(null,288)).then(function(n){wp.component(\"v-ac2e2ae425d77\",n.default),e()})}},{path:\"/codeBlack/index.html\",redirect:\"/codeBlack/\"},{name:\"v-51d93680924cc\",path:\"/codeBlack/fixed%E7%9A%84%E4%BB%8E%E7%88%B6%E5%8E%9F%E5%88%99.html\",component:uc,beforeEnter:function(n,s,e){a.e(117).then(a.bind(null,289)).then(function(n){wp.component(\"v-51d93680924cc\",n.default),e()})}},{path:\"/codeBlack/fixed的从父原则.html\",redirect:\"/codeBlack/fixed%E7%9A%84%E4%BB%8E%E7%88%B6%E5%8E%9F%E5%88%99.html\"},{name:\"v-52436b5f6813a\",path:\"/codeBlack/instanceof%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86.html\",component:uc,beforeEnter:function(n,s,e){a.e(118).then(a.bind(null,290)).then(function(n){wp.component(\"v-52436b5f6813a\",n.default),e()})}},{path:\"/codeBlack/instanceof实现原理.html\",redirect:\"/codeBlack/instanceof%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86.html\"},{name:\"v-a5591f4d86869\",path:\"/codeBlack/temlate.html\",component:uc,beforeEnter:function(n,s,e){a.e(119).then(a.bind(null,291)).then(function(n){wp.component(\"v-a5591f4d86869\",n.default),e()})}},{name:\"v-40918b6f1709b\",path:\"/codeBlack/vuex%E4%B8%89%E6%AD%A5.html\",component:uc,beforeEnter:function(n,s,e){a.e(120).then(a.bind(null,292)).then(function(n){wp.component(\"v-40918b6f1709b\",n.default),e()})}},{path:\"/codeBlack/vuex三步.html\",redirect:\"/codeBlack/vuex%E4%B8%89%E6%AD%A5.html\"},{name:\"v-29bf2598ef869\",path:\"/codeBlack/vue%E5%B0%8F%E6%8A%80%E5%B7%A7.html\",component:uc,beforeEnter:function(n,s,e){a.e(121).then(a.bind(null,293)).then(function(n){wp.component(\"v-29bf2598ef869\",n.default),e()})}},{path:\"/codeBlack/vue小技巧.html\",redirect:\"/codeBlack/vue%E5%B0%8F%E6%8A%80%E5%B7%A7.html\"},{name:\"v-9543a3f8da732\",path:\"/codeBlack/%E4%BD%A0%E6%88%96%E8%AE%B8%E4%B8%8D%E7%9F%A5%E9%81%93Vue%E7%9A%84%E8%BF%99%E4%BA%9B%E5%B0%8F%E6%8A%80%E5%B7%A7.html\",component:uc,beforeEnter:function(n,s,e){a.e(122).then(a.bind(null,294)).then(function(n){wp.component(\"v-9543a3f8da732\",n.default),e()})}},{path:\"/codeBlack/你或许不知道Vue的这些小技巧.html\",redirect:\"/codeBlack/%E4%BD%A0%E6%88%96%E8%AE%B8%E4%B8%8D%E7%9F%A5%E9%81%93Vue%E7%9A%84%E8%BF%99%E4%BA%9B%E5%B0%8F%E6%8A%80%E5%B7%A7.html\"},{name:\"v-91c1585a7b00c\",path:\"/codeBlack/%E5%88%A4%E6%96%AD%E7%94%A8%E6%88%B7%E6%B5%8F%E8%A7%88%E5%99%A8.html\",component:uc,beforeEnter:function(n,s,e){a.e(123).then(a.bind(null,295)).then(function(n){wp.component(\"v-91c1585a7b00c\",n.default),e()})}},{path:\"/codeBlack/判断用户浏览器.html\",redirect:\"/codeBlack/%E5%88%A4%E6%96%AD%E7%94%A8%E6%88%B7%E6%B5%8F%E8%A7%88%E5%99%A8.html\"},{name:\"v-6ef25ad4e1462\",path:\"/codeBlack/%E5%88%B7%E6%96%B0%E4%BF%9D%E5%AD%98%E8%AF%B7%E6%B1%82.html\",component:uc,beforeEnter:function(n,s,e){a.e(124).then(a.bind(null,296)).then(function(n){wp.component(\"v-6ef25ad4e1462\",n.default),e()})}},{path:\"/codeBlack/刷新保存请求.html\",redirect:\"/codeBlack/%E5%88%B7%E6%96%B0%E4%BF%9D%E5%AD%98%E8%AF%B7%E6%B1%82.html\"},{name:\"v-fe24d6022f561\",path:\"/codeBlack/%E5%8D%95%E8%A1%8C%E5%A4%9A%E8%A1%8C%E6%96%87%E6%9C%AC%E6%BA%A2%E5%87%BA.html\",component:uc,beforeEnter:function(n,s,e){a.e(125).then(a.bind(null,297)).then(function(n){wp.component(\"v-fe24d6022f561\",n.default),e()})}},{path:\"/codeBlack/单行多行文本溢出.html\",redirect:\"/codeBlack/%E5%8D%95%E8%A1%8C%E5%A4%9A%E8%A1%8C%E6%96%87%E6%9C%AC%E6%BA%A2%E5%87%BA.html\"},{name:\"v-fbb7f6d6c264a\",path:\"/codeBlack/%E5%A4%9A%E7%BB%B4%E6%95%B0%E7%BB%84%E5%B1%95%E5%BC%80.html\",component:uc,beforeEnter:function(n,s,e){a.e(126).then(a.bind(null,298)).then(function(n){wp.component(\"v-fbb7f6d6c264a\",n.default),e()})}},{path:\"/codeBlack/多维数组展开.html\",redirect:\"/codeBlack/%E5%A4%9A%E7%BB%B4%E6%95%B0%E7%BB%84%E5%B1%95%E5%BC%80.html\"},{name:\"v-2ea6fe7dfd4d\",path:\"/codeBlack/%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%BB%91%E5%AE%9A%E7%82%B9%E5%87%BB%E4%BA%8B%E4%BB%B6.html\",component:uc,beforeEnter:function(n,s,e){a.e(127).then(a.bind(null,299)).then(function(n){wp.component(\"v-2ea6fe7dfd4d\",n.default),e()})}},{path:\"/codeBlack/字符串绑定点击事件.html\",redirect:\"/codeBlack/%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%BB%91%E5%AE%9A%E7%82%B9%E5%87%BB%E4%BA%8B%E4%BB%B6.html\"},{name:\"v-24acd10a67072\",path:\"/codeBlack/%E6%89%A7%E8%A1%8Cshell%E5%91%BD%E4%BB%A4%E8%A1%8C.html\",component:uc,beforeEnter:function(n,s,e){a.e(128).then(a.bind(null,300)).then(function(n){wp.component(\"v-24acd10a67072\",n.default),e()})}},{path:\"/codeBlack/执行shell命令行.html\",redirect:\"/codeBlack/%E6%89%A7%E8%A1%8Cshell%E5%91%BD%E4%BB%A4%E8%A1%8C.html\"},{name:\"v-d923cba653c3b\",path:\"/codeBlack/%E6%95%B0%E7%BB%84%E4%BA%A4%E9%9B%86%E5%B7%AE%E9%9B%86.html\",component:uc,beforeEnter:function(n,s,e){a.e(129).then(a.bind(null,301)).then(function(n){wp.component(\"v-d923cba653c3b\",n.default),e()})}},{path:\"/codeBlack/数组交集差集.html\",redirect:\"/codeBlack/%E6%95%B0%E7%BB%84%E4%BA%A4%E9%9B%86%E5%B7%AE%E9%9B%86.html\"},{name:\"v-f5da2810aa989\",path:\"/codeBlack/%E6%95%B0%E7%BB%84%E5%AE%8C%E5%85%A8%E4%B9%B1%E5%BA%8F.html\",component:uc,beforeEnter:function(n,s,e){a.e(130).then(a.bind(null,302)).then(function(n){wp.component(\"v-f5da2810aa989\",n.default),e()})}},{path:\"/codeBlack/数组完全乱序.html\",redirect:\"/codeBlack/%E6%95%B0%E7%BB%84%E5%AE%8C%E5%85%A8%E4%B9%B1%E5%BA%8F.html\"},{name:\"v-70a520b8b9aa9\",path:\"/codeBlack/%E6%98%BE%E7%A4%BA%E9%9A%90%E8%97%8F%E5%AF%86%E7%A0%81.html\",component:uc,beforeEnter:function(n,s,e){a.e(131).then(a.bind(null,303)).then(function(n){wp.component(\"v-70a520b8b9aa9\",n.default),e()})}},{path:\"/codeBlack/显示隐藏密码.html\",redirect:\"/codeBlack/%E6%98%BE%E7%A4%BA%E9%9A%90%E8%97%8F%E5%AF%86%E7%A0%81.html\"},{name:\"v-7980b5f9ffffe\",path:\"/codeBlack/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84%E7%BB%93%E6%9E%84%E8%BD%AC%E5%8C%96.html\",component:uc,beforeEnter:function(n,s,e){a.e(132).then(a.bind(null,304)).then(function(n){wp.component(\"v-7980b5f9ffffe\",n.default),e()})}},{path:\"/codeBlack/树状数组结构转化.html\",redirect:\"/codeBlack/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84%E7%BB%93%E6%9E%84%E8%BD%AC%E5%8C%96.html\"},{name:\"v-5348deb4da9ef\",path:\"/codeBlack/%E6%A8%A1%E6%9D%BF%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%8F%8D%E6%96%9C%E6%9D%86.html\",component:uc,beforeEnter:function(n,s,e){a.e(133).then(a.bind(null,305)).then(function(n){wp.component(\"v-5348deb4da9ef\",n.default),e()})}},{path:\"/codeBlack/模板字符串反斜杆.html\",redirect:\"/codeBlack/%E6%A8%A1%E6%9D%BF%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%8F%8D%E6%96%9C%E6%9D%86.html\"},{name:\"v-23c29a1215c85\",path:\"/codeBlack/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%94%B6%E9%9B%86.html\",component:uc,beforeEnter:function(n,s,e){a.e(134).then(a.bind(null,306)).then(function(n){wp.component(\"v-23c29a1215c85\",n.default),e()})}},{path:\"/codeBlack/正则表达式收集.html\",redirect:\"/codeBlack/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%94%B6%E9%9B%86.html\"},{name:\"v-6f6fbe3fcb85a\",path:\"/codeBlack/%E6%B5%8F%E8%A7%88%E5%99%A8%E8%87%AA%E5%8A%A8%E8%AF%86%E5%88%AB%E6%95%B0%E5%AD%97%E6%88%90%E7%94%B5%E8%AF%9D%E5%8F%B7%E7%A0%81.html\",component:uc,beforeEnter:function(n,s,e){a.e(135).then(a.bind(null,307)).then(function(n){wp.component(\"v-6f6fbe3fcb85a\",n.default),e()})}},{path:\"/codeBlack/浏览器自动识别数字成电话号码.html\",redirect:\"/codeBlack/%E6%B5%8F%E8%A7%88%E5%99%A8%E8%87%AA%E5%8A%A8%E8%AF%86%E5%88%AB%E6%95%B0%E5%AD%97%E6%88%90%E7%94%B5%E8%AF%9D%E5%8F%B7%E7%A0%81.html\"},{name:\"v-f20a4b7d4e923\",path:\"/codeBlack/%E6%BB%9A%E5%8A%A8%E5%BA%95%E9%83%A8.html\",component:uc,beforeEnter:function(n,s,e){a.e(136).then(a.bind(null,308)).then(function(n){wp.component(\"v-f20a4b7d4e923\",n.default),e()})}},{path:\"/codeBlack/滚动底部.html\",redirect:\"/codeBlack/%E6%BB%9A%E5%8A%A8%E5%BA%95%E9%83%A8.html\"},{name:\"v-b3100a5ceb632\",path:\"/codeBlack/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E5%B0%8F%E7%90%83%E4%B8%8A%E4%B8%8B%E6%B5%AE%E5%8A%A8.html\",component:uc,beforeEnter:function(n,s,e){a.e(137).then(a.bind(null,309)).then(function(n){wp.component(\"v-b3100a5ceb632\",n.default),e()})}},{path:\"/codeBlack/移动端小球上下浮动.html\",redirect:\"/codeBlack/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E5%B0%8F%E7%90%83%E4%B8%8A%E4%B8%8B%E6%B5%AE%E5%8A%A8.html\"},{name:\"v-6827b8527bb3a\",path:\"/codeBlack/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E6%89%8B%E5%86%99%E4%B8%8B%E6%8B%89%E5%88%B7%E6%96%B0.html\",component:uc,beforeEnter:function(n,s,e){a.e(138).then(a.bind(null,310)).then(function(n){wp.component(\"v-6827b8527bb3a\",n.default),e()})}},{path:\"/codeBlack/移动端手写下拉刷新.html\",redirect:\"/codeBlack/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E6%89%8B%E5%86%99%E4%B8%8B%E6%8B%89%E5%88%B7%E6%96%B0.html\"},{name:\"v-5679e31a9c792\",path:\"/codeBlack/%E7%BD%91%E9%A1%B5%E6%A0%87%E9%A2%98%E9%97%AA%E7%83%81.html\",component:uc,beforeEnter:function(n,s,e){a.e(139).then(a.bind(null,311)).then(function(n){wp.component(\"v-5679e31a9c792\",n.default),e()})}},{path:\"/codeBlack/网页标题闪烁.html\",redirect:\"/codeBlack/%E7%BD%91%E9%A1%B5%E6%A0%87%E9%A2%98%E9%97%AA%E7%83%81.html\"},{name:\"v-de4b01c02a8b6\",path:\"/codeBlack/%E8%BF%9B%E5%BA%A6%E6%9D%A1.html\",component:uc,beforeEnter:function(n,s,e){a.e(140).then(a.bind(null,312)).then(function(n){wp.component(\"v-de4b01c02a8b6\",n.default),e()})}},{path:\"/codeBlack/进度条.html\",redirect:\"/codeBlack/%E8%BF%9B%E5%BA%A6%E6%9D%A1.html\"},{name:\"v-f32f42f63bc8\",path:\"/codeBlack/%E9%9A%8F%E6%9C%BA%E6%95%B0%E7%BB%84%E6%88%90%E7%9A%84%E6%95%B0%E7%BB%84.html\",component:uc,beforeEnter:function(n,s,e){a.e(141).then(a.bind(null,313)).then(function(n){wp.component(\"v-f32f42f63bc8\",n.default),e()})}},{path:\"/codeBlack/随机数组成的数组.html\",redirect:\"/codeBlack/%E9%9A%8F%E6%9C%BA%E6%95%B0%E7%BB%84%E6%88%90%E7%9A%84%E6%95%B0%E7%BB%84.html\"},{path:\"*\",component:bc}],xc={title:\"前端进阶积累\",description:\"种一棵树最好的时间是十年前，其次就是现在。\",base:\"/web_accumulate/\",pages:[{key:\"v-fb43c946a608\",path:\"/\",lastUpdated:1589426561e3,title:\"Home\",headers:[{level:3,title:\"其他：\",slug:\"其他：\"}],frontmatter:{home:!0,heroImage:\"/logo.jpg\",actionText:\"开始阅读 →\",actionLink:\"/accumulate/\",features:[{title:\"前端进阶积累\",details:\"在纷乱的前端娱乐圈，专注js基础，打磨核心竞争力，一通百通，无惧工具/框架变迁。\"},{title:\"算法\",details:\"算法文档按照难度分级，代码中都有详细注释，且会提供多种解法，用以提升编程能力和逻辑能力比较有效的一种方式。\"},{title:\"代码块\",details:\"比较小的代码块/知识点，一段话，一段代码就能说清楚, 开箱即用！\"}],footer:\"MIT Licensed | Copyright © 2018-present OBKoro1\"}},{key:\"v-ed3458838da34\",path:\"/about.html\",lastUpdated:1625396387e3,title:\"about OBKoro1\",headers:[{level:2,title:\"about OBKoro1\",slug:\"about-obkoro1\"},{level:2,title:\"热烈欢迎\",slug:\"热烈欢迎\"},{level:3,title:\"联系方式:\",slug:\"联系方式\"},{level:3,title:\"了解一下我的得意开源作品吧\",slug:\"了解一下我的得意开源作品吧\"},{level:3,title:\"web-basics\",slug:\"web-basics\"},{level:3,title:\"欢迎赞助\",slug:\"欢迎赞助\"},{level:3,title:\"关于扣肉\",slug:\"关于扣肉\"},{level:3,title:\"最后\",slug:\"最后\"}]},{key:\"v-9a47b518605fb\",path:\"/accumulate/CSS/CSS%E6%9D%83%E9%87%8D%E8%A7%84%E5%88%99.html\",lastUpdated:1564720698e3,title:\"CSS 权重规则\",headers:[{level:2,title:\"CSS 权重规则\",slug:\"css-权重规则\"},{level:2,title:\"权重规则总结:\",slug:\"权重规则总结\"},{level:3,title:\"css 权重优先级用来干嘛？\",slug:\"css-权重优先级用来干嘛？\"},{level:3,title:\"权重的五个等级及其权重\",slug:\"权重的五个等级及其权重\"},{level:3,title:\"等级关系:\",slug:\"等级关系\"},{level:2,title:\"权重规则：\",slug:\"权重规则：\"},{level:3,title:\"1.不推荐使用!important\",slug:\"_1-不推荐使用-important\"},{level:3,title:\"2.行内样式总会覆盖外部样式表的任何样式,会被!important覆盖\",slug:\"_2-行内样式总会覆盖外部样式表的任何样式-会被-important覆盖\"},{level:3,title:\"3.单独使用一个选择器的时候，不能跨等级使 css 规则生效\",slug:\"_3-单独使用一个选择器的时候，不能跨等级使-css-规则生效\"},{level:3,title:\"4.如果两个权重不同的选择器作用在同一元素上，权重值高的 css 规则生效\",slug:\"_4-如果两个权重不同的选择器作用在同一元素上，权重值高的-css-规则生效\"},{level:3,title:\"5.如果两个相同权重的选择器作用在同一元素上：以后面出现的选择器为最后规则.\",slug:\"_5-如果两个相同权重的选择器作用在同一元素上：以后面出现的选择器为最后规则\"},{level:3,title:\"6.权重相同时，与元素距离近的选择器生效\",slug:\"_6-权重相同时，与元素距离近的选择器生效\"},{level:2,title:\"建议：\",slug:\"建议：\"},{level:3,title:\"点个Star支持我一下~\",slug:\"点个star支持我一下\"}],excerpt:'<h2 id=\"css-权重规则\"><a class=\"header-anchor\" href=\"#css-权重规则\" aria-hidden=\"true\">#</a> CSS 权重规则</h2>\\n<p>日常开发中，或多或少都会遇到css规则不生效的问题，为了让我们能够减少调试css规则的时间，深刻理解css权重，就十分关键了.</p>\\n<h2 id=\"权重规则总结\"><a class=\"header-anchor\" href=\"#权重规则总结\" aria-hidden=\"true\">#</a> 权重规则总结:</h2>\\n<ol>\\n<li>!important 优先级最高，但也会被权重高的 important 所覆盖</li>\\n<li>行内样式总会覆盖外部样式表的任何样式(除了!important)</li>\\n<li>单独使用一个选择器的时候，不能跨等级使 css 规则生效</li>\\n<li>如果两个权重不同的选择器作用在同一元素上，权重值高的 css 规则生效</li>\\n<li>如果两个相同权重的选择器作用在同一元素上：以后面出现的选择器为最后规则.</li>\\n<li>权重相同时，与元素距离近的选择器生效</li>\\n</ol>\\n<hr>\\n<h3 id=\"css-权重优先级用来干嘛？\"><a class=\"header-anchor\" href=\"#css-权重优先级用来干嘛？\" aria-hidden=\"true\">#</a> css 权重优先级用来干嘛？</h3>\\n<p>在同一个元素使用不同的方式，声明了相同的一条或多条 css 规则，<strong>浏览器会通过权重来判断哪一种方式的声明，与这个元素最为相关，从而在该元素上应用这个声明方式声明的所有 css 规则</strong>。</p>\\n<h3 id=\"权重的五个等级及其权重\"><a class=\"header-anchor\" href=\"#权重的五个等级及其权重\" aria-hidden=\"true\">#</a> 权重的五个等级及其权重</h3>\\n<ul>\\n<li>\\n<p>!important;</p>\\n</li>\\n<li>\\n<p>行内样式;</p>\\n</li>\\n<li>\\n<p>ID 选择器, 权重:100;</p>\\n</li>\\n<li>\\n<p>class,属性选择器和伪类选择器，权重:10;</p>\\n<p>属性选择器指的是:根据元素的属性及属性值来选择元素，比如button的type属性等。\\n伪类选择器: :active :focus等选项.</p>\\n</li>\\n<li>\\n<p>标签选择器和伪元素选择器，权重:1;</p>\\n<p>伪元素选择器： :before :after</p>\\n</li>\\n</ul>\\n<h3 id=\"等级关系\"><a class=\"header-anchor\" href=\"#等级关系\" aria-hidden=\"true\">#</a> 等级关系:</h3>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code><span class=\"token operator\">!</span>important<span class=\"token operator\">></span>行内样式<span class=\"token operator\">></span><span class=\"token constant\">ID</span>选择器 <span class=\"token operator\">></span> 类选择器 <span class=\"token operator\">|</span> 属性选择器 <span class=\"token operator\">|</span> 伪类选择器 <span class=\"token operator\">></span> 元素选择器\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<hr>\\n<h2 id=\"权重规则：\"><a class=\"header-anchor\" href=\"#权重规则：\" aria-hidden=\"true\">#</a> 权重规则：</h2>\\n<h3 id=\"_1-不推荐使用-important\"><a class=\"header-anchor\" href=\"#_1-不推荐使用-important\" aria-hidden=\"true\">#</a> 1.不推荐使用!important</h3>\\n<p>不推荐使用<code>!important</code>，因为<code>!important</code>根本没有结构与上下文可言，并且很多时候权重的问题，就是因为不知道在哪里定义了一个<code>!important</code>而导致的。</p>\\n<h4 id=\"覆盖-important\"><a class=\"header-anchor\" href=\"#覆盖-important\" aria-hidden=\"true\">#</a> 覆盖 important:</h4>\\n<p>虽然我们应该尽量避免使用!important，但你应该知道如何覆盖 important，加点权重就可以实现，codepen 的<a href=\"https://codepen.io/OBKoro1/pen/ZoVxgQ\" target=\"_blank\" rel=\"noopener noreferrer\">demo<OutboundLink/></a></p>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-css line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-css\"><code><span class=\"token selector\">//!important 优先级最高，但也会被权重高的important所覆盖\\n&lt;button id=\"a\" class=\"a\">aaa&lt;/button>\\n#a</span><span class=\"token punctuation\">{</span>\\n    <span class=\"token property\">background</span><span class=\"token punctuation\">:</span> blue  <span class=\"token important\">!important</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">/* id的important覆盖class的important*/</span>\\n<span class=\"token punctuation\">}</span>\\n<span class=\"token selector\">.a</span><span class=\"token punctuation\">{</span>\\n    <span class=\"token property\">background</span><span class=\"token punctuation\">:</span> red  <span class=\"token important\">!important</span><span class=\"token punctuation\">;</span>\\n<span class=\"token punctuation\">}</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<h3 id=\"_2-行内样式总会覆盖外部样式表的任何样式-会被-important覆盖\"><a class=\"header-anchor\" href=\"#_2-行内样式总会覆盖外部样式表的任何样式-会被-important覆盖\" aria-hidden=\"true\">#</a> 2.行内样式总会覆盖外部样式表的任何样式,会被<code>!important</code>覆盖</h3>\\n<h3 id=\"_3-单独使用一个选择器的时候，不能跨等级使-css-规则生效\"><a class=\"header-anchor\" href=\"#_3-单独使用一个选择器的时候，不能跨等级使-css-规则生效\" aria-hidden=\"true\">#</a> 3.单独使用一个选择器的时候，不能跨等级使 css 规则生效</h3>\\n<p><strong>无论多少个 class 组成的选择器，都没有一个 ID 选择器权重高</strong>。类似的，无论多少个元素组成的选择器，都没有一个 class 选择器权重高、无论多少个 ID 组成的选择器，都没有行内样式权重高。</p>\\n<p>codepen 的<a href=\"https://codepen.io/OBKoro1/pen/ZoVxgQ\" target=\"_blank\" rel=\"noopener noreferrer\">demo<OutboundLink/></a>;</p>\\n<pre><code>    在demo中使用了11个class组成一个选择器，最后还是一个ID选择器，设置的样式生效。\\n</code></pre>\\n<h4 id=\"可以想象在玄幻小说的那种等级制度，没有突破那个等级，就没有可比性。\"><a class=\"header-anchor\" href=\"#可以想象在玄幻小说的那种等级制度，没有突破那个等级，就没有可比性。\" aria-hidden=\"true\">#</a> 可以想象在玄幻小说的那种等级制度，没有突破那个等级，就没有可比性。</h4>\\n<p>所以权重是在双方处于同一等级的情况下，才开始对比。</p>\\n<h3 id=\"_4-如果两个权重不同的选择器作用在同一元素上，权重值高的-css-规则生效\"><a class=\"header-anchor\" href=\"#_4-如果两个权重不同的选择器作用在同一元素上，权重值高的-css-规则生效\" aria-hidden=\"true\">#</a> 4.如果两个权重不同的选择器作用在同一元素上，权重值高的 css 规则生效</h3>\\n<p>选择器可能会包含一个或者多个与权重相关的计算点，若经过权重值计算得到的权重值越大，则认为这个选择器的权重高。举一个简单的栗子:</p>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-css line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-css\"><code><span class=\"token selector\">.test #test</span><span class=\"token punctuation\">{</span> <span class=\"token punctuation\">}</span> // id 100+class 10=110<span class=\"token selector\">;\\n.test #test span</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span> // id 100+class 10+span 1=111<span class=\"token selector\">;\\n.test #test .sonClass</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span> // id 100+class 10+class 10=120<span class=\"token punctuation\">;</span> //生效\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<h3 id=\"_5-如果两个相同权重的选择器作用在同一元素上：以后面出现的选择器为最后规则\"><a class=\"header-anchor\" href=\"#_5-如果两个相同权重的选择器作用在同一元素上：以后面出现的选择器为最后规则\" aria-hidden=\"true\">#</a> 5.如果两个相同权重的选择器作用在同一元素上：以后面出现的选择器为最后规则.</h3>\\n<p><a href=\"https://codepen.io/OBKoro1/pen/jxXKez\" target=\"_blank\" rel=\"noopener noreferrer\">demo<OutboundLink/></a></p>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-css line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-css\"><code><span class=\"token selector\">&lt;div id=\"app\">\\n    &lt;div class=\"test\" id=\"test\">\\n    &lt;span >啦啦啦&lt;/span>\\n    &lt;/div>\\n&lt;/div>\\n#test span</span><span class=\"token punctuation\">{</span>\\n    <span class=\"token property\">color</span><span class=\"token punctuation\">:</span>blue<span class=\"token punctuation\">;</span>\\n<span class=\"token punctuation\">}</span>\\n<span class=\"token selector\">#app span</span><span class=\"token punctuation\">{</span> // 生效 因为后面出现\\n    <span class=\"token property\">color</span><span class=\"token punctuation\">:</span> red<span class=\"token punctuation\">;</span>\\n<span class=\"token punctuation\">}</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br><span class=\"line-number\">11</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<h3 id=\"_6-权重相同时，与元素距离近的选择器生效\"><a class=\"header-anchor\" href=\"#_6-权重相同时，与元素距离近的选择器生效\" aria-hidden=\"true\">#</a> 6.权重相同时，与元素距离近的选择器生效</h3>\\n<p>比如不同的 style 表，head 头部等,来看下面的栗子：</p>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-css line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-css\"><code><span class=\"token selector\">#content h1</span> <span class=\"token punctuation\">{</span> // css样式表中\\n    <span class=\"token property\">padding</span><span class=\"token punctuation\">:</span> 5px<span class=\"token punctuation\">;</span>\\n<span class=\"token punctuation\">}</span>\\n<span class=\"token selector\">&lt;style type=\"text/css\">\\n    #content h1</span> <span class=\"token punctuation\">{</span> // html头部 因为html头部离元素更近一点，所以生效\\n    <span class=\"token property\">padding</span><span class=\"token punctuation\">:</span> 10px<span class=\"token punctuation\">;</span>\\n    <span class=\"token punctuation\">}</span>\\n&lt;/style>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<h2 id=\"建议：\"><a class=\"header-anchor\" href=\"#建议：\" aria-hidden=\"true\">#</a> 建议：</h2>\\n<ol>\\n<li>避免使用<code>!important</code>;</li>\\n<li>利用 id 增加选择器权重;</li>\\n<li>减少选择器的个数（避免层层嵌套）;\\n\\x3c!-- 特殊字符串：用于修改/删除markdown的结尾提示语-OBKoro1 --\\x3e</li>\\n</ol>\\n<h3 id=\"点个star支持我一下\"><a class=\"header-anchor\" href=\"#点个star支持我一下\" aria-hidden=\"true\">#</a> 点个<a href=\"https://github.com/OBKoro1/web_accumulate\" target=\"_blank\" rel=\"noopener noreferrer\">Star<OutboundLink/></a>支持我一下~</h3>\\n\\x3c!-- \\'特殊字符串：用于删除编译后的issue组件-OBKoro1 --\\x3e\\n'},{key:\"v-8a891ffbf593f\",path:\"/accumulate/CSS/CSS%E6%A6%82%E5%BF%B5-BFC%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BA.html\",lastUpdated:1564720698e3,title:\"CSS 概念-BFC 深入浅出\",headers:[{level:3,title:\"CSS 概念-BFC 深入浅出\",slug:\"css-概念-bfc-深入浅出\"},{level:2,title:\"BFC 是什么鬼？\",slug:\"bfc-是什么鬼？\"},{level:3,title:\"关于 BFC 的定义：\",slug:\"关于-bfc-的定义：\"},{level:3,title:\"通俗的说:\",slug:\"通俗的说\"},{level:3,title:\"触发条件\",slug:\"触发条件\"},{level:3,title:\"BFC 布局规则：\",slug:\"bfc-布局规则：\"},{level:3,title:\"BFC 有哪些作用：\",slug:\"bfc-有哪些作用：\"},{level:2,title:\"BFC 的规则和作用介绍:\",slug:\"bfc-的规则和作用介绍\"},{level:3,title:\"BFC 与 Layout\",slug:\"bfc-与-layout\"},{level:3,title:\"有趣的文本:\",slug:\"有趣的文本\"},{level:3,title:\"点个Star支持我一下~\",slug:\"点个star支持我一下\"}],excerpt:'<h3 id=\"css-概念-bfc-深入浅出\"><a class=\"header-anchor\" href=\"#css-概念-bfc-深入浅出\" aria-hidden=\"true\">#</a> CSS 概念-BFC 深入浅出</h3>\\n<p>好记性不如烂笔头，研究了一下 BFC，发现里面比较细的东西也是很多的！关于 BFC，很多人可能都听说过 BFC 这个东西，大概知道这是个啥东西，相信很多人对此并没有一个非常细致的了解，本文预计篇幅较长，认真，耐着性子看，应该都能够比较深入的理解 BFC 这个概念的规则、作用以及用法。希望喜欢的朋友可以点个赞，或者关注一波本人，谢谢。</p>\\n<h2 id=\"bfc-是什么鬼？\"><a class=\"header-anchor\" href=\"#bfc-是什么鬼？\" aria-hidden=\"true\">#</a> BFC 是什么鬼？</h2>\\n<p><strong>所谓的 BFC 就是 css 布局的一个概念，是一块区域，一个环境。</strong></p>\\n<p>先稳住别懵逼，接着往下走。</p>\\n<h3 id=\"关于-bfc-的定义：\"><a class=\"header-anchor\" href=\"#关于-bfc-的定义：\" aria-hidden=\"true\">#</a> 关于 BFC 的定义：</h3>\\n<p>BFC(Block formatting context)直译为&quot;块级格式化上下文&quot;。它<strong>是一个独立的渲染区域</strong>，只有<strong>Block-level box</strong>参与（在下面有解释）， 它规定了内部的 Block-level Box 如何布局，并且与这个区域外部毫不相干。</p>\\n<h3 id=\"通俗的说\"><a class=\"header-anchor\" href=\"#通俗的说\" aria-hidden=\"true\">#</a> 通俗的说:</h3>\\n<p>BFC 可以简单的理解为<strong>某个元素的一个 CSS 属性</strong>，拥有这个属性的元素<strong>对内部元素和外部元素会表现出一些特性，这就是 BFC</strong>。</p>\\n<h3 id=\"触发条件\"><a class=\"header-anchor\" href=\"#触发条件\" aria-hidden=\"true\">#</a> 触发条件</h3>\\n<p><strong>满足下列条件之一就可触发 BFC</strong></p>\\n<ol>\\n<li>\\n<p>根元素，即 HTML 元素</p>\\n</li>\\n<li>\\n<p><code>float</code>的值不为<code>none</code></p>\\n</li>\\n<li>\\n<p><code>overflow</code>的值不为<code>visible</code></p>\\n</li>\\n<li>\\n<p><code>display</code>的值为<code>inline-block</code>、<code>table-cell</code>、<code>table-caption</code></p>\\n</li>\\n<li>\\n<p><code>position</code>的值为<code>absolute</code>或<code>fixed</code></p>\\n</li>\\n</ol>\\n<h3 id=\"bfc-布局规则：\"><a class=\"header-anchor\" href=\"#bfc-布局规则：\" aria-hidden=\"true\">#</a> BFC 布局规则：</h3>\\n<ol>\\n<li>\\n<p>内部的 Box 会在垂直方向，一个接一个地放置。</p>\\n</li>\\n<li>\\n<p>Box 垂直方向的距离由 margin 决定。属于同一个 BFC 的两个相邻 Box 的 margin 会发生重叠</p>\\n</li>\\n<li>\\n<p>每个元素的 margin box 的左边， 与包含块 border box 的左边相接触(对于从左往右的格式化，否则相反)。即使存在浮动也是如此。</p>\\n</li>\\n<li>\\n<p>BFC 的区域不会与 float box 重叠。</p>\\n</li>\\n<li>\\n<p>BFC 就是页面上的一个隔离的独立容器，容器里面的子元素不会影响到外面的元素。反之也如此。</p>\\n</li>\\n<li>\\n<p>计算 BFC 的高度时，浮动元素也参与计算</p>\\n</li>\\n</ol>\\n<h3 id=\"bfc-有哪些作用：\"><a class=\"header-anchor\" href=\"#bfc-有哪些作用：\" aria-hidden=\"true\">#</a> BFC 有哪些作用：</h3>\\n<ol>\\n<li>自适应两栏布局</li>\\n<li>可以阻止元素被浮动元素覆盖</li>\\n<li>可以包含浮动元素——清除内部浮动</li>\\n<li>分属于不同的 BFC 时可以阻止 margin 重叠</li>\\n</ol>\\n<hr>\\n<h2 id=\"bfc-的规则和作用介绍\"><a class=\"header-anchor\" href=\"#bfc-的规则和作用介绍\" aria-hidden=\"true\">#</a> BFC 的规则和作用介绍:</h2>\\n<h4 id=\"bfc-布局规则-1：内部的-box-会在垂直方向，一个接一个地放置。\"><a class=\"header-anchor\" href=\"#bfc-布局规则-1：内部的-box-会在垂直方向，一个接一个地放置。\" aria-hidden=\"true\">#</a> BFC 布局规则 1：内部的 Box 会在垂直方向，一个接一个地放置。</h4>\\n<p>上文定义中提到过的块级盒：block-level box，在这里解析一波：</p>\\n<p><img src=\"https://lc-gold-cdn.xitu.io/b80801d8707be24ecbc0\" alt=\"这个就是我们平常操作盒子的组成\"></p>\\n<p>我们平常说的盒子是由 margin、border、padding、content 组成的，实际上每种类型的四条边定义了一个盒子，分别是分别是<strong>content box、padding box、border box、margin box</strong>，这四种类型的盒子一直存在，即使他们的值为 0.决定块盒在包含块中与相邻块盒的垂直间距的便是 margin-box。</p>\\n<p><strong>提示</strong>：Box 之间的距离虽然也可以使用 padding 来控制，但是此时实际上还是属于 box 内部里面，而且使用 padding 来控制的话就不能再使用 border 属性了。</p>\\n<p>布局规则 1 就是我们<strong>平常 div 一行一行块级放置的样式</strong>，大家想一下就知道了，这里就不展开了。</p>\\n<h4 id=\"bfc-布局规则-2：box-垂直方向的距离由-margin-决定。属于同一个-bfc-的两个相邻-box-的-margin-会发生重叠。\"><a class=\"header-anchor\" href=\"#bfc-布局规则-2：box-垂直方向的距离由-margin-决定。属于同一个-bfc-的两个相邻-box-的-margin-会发生重叠。\" aria-hidden=\"true\">#</a> BFC 布局规则 2：Box 垂直方向的距离由 margin 决定。属于同一个 BFC 的两个相邻 Box 的 margin 会发生重叠。</h4>\\n<p><img src=\"https://lc-gold-cdn.xitu.io/6b0fc0e3d34f94875d35.gif\" alt=\"\"></p>\\n<p>上文提到过，决定块盒在包含块中与相邻块盒的垂直间距的便是 margin-box。，上面的栗子就是这种情况。</p>\\n<p><strong>演示中 css 属性设置</strong>：上面的 box：margin-bottom: 100px;下面的 box：margin-top: 100px;（他们是同一侧的 margin，所以会发生 margin 重叠的情况，两个 div 的距离实际上只有 100px。）</p>\\n<h4 id=\"bfc-的作用-4：阻止-margin-重叠\"><a class=\"header-anchor\" href=\"#bfc-的作用-4：阻止-margin-重叠\" aria-hidden=\"true\">#</a> BFC 的作用 4：阻止 margin 重叠:</h4>\\n<p>当两个相邻块级子元素<strong>分属于不同的 BFC</strong>时可以<strong>阻止 margin 重叠</strong></p>\\n<p><strong>操作方法</strong>:给其中一个 div 外面包一个 div，然后通过触发外面这个 div 的 BFC，就可以阻止这两个 div 的 margin 重叠</p>\\n<p>下面是代码：</p>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-html line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-html\"><code><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>aside<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>text<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>main<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\\n<span class=\"token comment\">&lt;!-- css代码 --\\x3e</span>\\n.aside {\\n  margin-bottom: 100px; //margin属性\\n  width: 100px;\\n  height: 150px;\\n  background: #f66;\\n}\\n.main {\\n  margin-top: 100px; //margin属性\\n  height: 200px;\\n  background: #fcc;\\n}\\n.text {\\n  /*盒子main的外面包一个div，通过改变此div的属性使两个盒子分属于两个不同的BFC，以此来阻止margin重叠*/\\n  overflow: hidden; //此时已经触发了BFC属性。\\n}\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br><span class=\"line-number\">11</span><br><span class=\"line-number\">12</span><br><span class=\"line-number\">13</span><br><span class=\"line-number\">14</span><br><span class=\"line-number\">15</span><br><span class=\"line-number\">16</span><br><span class=\"line-number\">17</span><br><span class=\"line-number\">18</span><br><span class=\"line-number\">19</span><br><span class=\"line-number\">20</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<p><strong>ps</strong>:触发方式可以参考上文给出的触发条件。</p>\\n<h4 id=\"这里有一个网址可以在线演示，通过演示，可以更直观一点：\"><a class=\"header-anchor\" href=\"#这里有一个网址可以在线演示，通过演示，可以更直观一点：\" aria-hidden=\"true\">#</a> 这里有一个网址可以在<a href=\"http://www.cnblogs.com/xiaohuochai/p/5248536.html\" target=\"_blank\" rel=\"noopener noreferrer\">线演示<OutboundLink/></a>，通过演示，可以更直观一点：</h4>\\n<p><img src=\"https://lc-gold-cdn.xitu.io/6daeb3cbf5f82d1f6db8.gif\" alt=\"这里面也是一篇好文章，关于BFC的\"></p>\\n<h4 id=\"bfc-布局规则-3：每个元素的-margin-box-的左边，-与包含块-border-box-的左边相接触-对于从左往右的格式化，否则相反-。即使存在浮动也是如此。\"><a class=\"header-anchor\" href=\"#bfc-布局规则-3：每个元素的-margin-box-的左边，-与包含块-border-box-的左边相接触-对于从左往右的格式化，否则相反-。即使存在浮动也是如此。\" aria-hidden=\"true\">#</a> BFC 布局规则 3：每个元素的 margin box 的左边， 与包含块 border box 的左边相接触(对于从左往右的格式化，否则相反)。即使存在浮动也是如此。</h4>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-html line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-html\"><code><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>par<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>child<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\\n    //给这两个子div加浮动，浮动的结果，如果没有清除浮动的话，父div不会将下面两个div包裹，但还是在父div的范围之内。\\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>child<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<p><strong>解析</strong>：给这两个子 div 加浮动，浮动的结果，如果没有清除浮动的话，父 div 不会将下面两个 div 包裹，但还是在父 div 的范围之内，<strong>左浮是子 div 的左边接触父 div 的 borderbox 的左边，右浮是子 div 接触父 div 的 borderbox 右边</strong>，除非设置 margin 来撑开距离，否则一直是这个规则。</p>\\n<h4 id=\"bfc-作用-3：可以包含浮动元素——清除内部浮动\"><a class=\"header-anchor\" href=\"#bfc-作用-3：可以包含浮动元素——清除内部浮动\" aria-hidden=\"true\">#</a> BFC 作用 3：可以包含浮动元素——清除内部浮动</h4>\\n<p>给父 divpar 加上 <code>overflow: hidden;</code></p>\\n<p><strong>清除浮动原理</strong>:触发父 div 的 BFC 属性，使下面的子 div 都<strong>处在父 div 的同一个 BFC 区域之内</strong>，此时已成功清除浮动。</p>\\n<p><img src=\"https://lc-gold-cdn.xitu.io/dfe63a3d19cae8adf5fa.gif\" alt=\"\"></p>\\n<p>还可以向同一个方向浮动来达到清除浮动的目的，清除浮动的原理是两个 div 都位于同一个浮动的 BFC 区域之中。</p>\\n<h4 id=\"bfc-布局规则-4：bfc-的区域不会与-float-box-重叠：\"><a class=\"header-anchor\" href=\"#bfc-布局规则-4：bfc-的区域不会与-float-box-重叠：\" aria-hidden=\"true\">#</a> BFC 布局规则 4：BFC 的区域不会与 float box 重叠：</h4>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-html line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-html\"><code><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>aside<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>text<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>main<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\\n.aside {\\n  width: 100px;\\n  height: 150px;\\n  float: left;\\n  background: #f66;\\n}\\n.main {\\n  height: 200px;\\n  overflow: hidden; //触发main盒子的BFC\\n  background: #fcc;\\n}\\n.text {\\n  width: 500px;\\n}\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br><span class=\"line-number\">11</span><br><span class=\"line-number\">12</span><br><span class=\"line-number\">13</span><br><span class=\"line-number\">14</span><br><span class=\"line-number\">15</span><br><span class=\"line-number\">16</span><br><span class=\"line-number\">17</span><br><span class=\"line-number\">18</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<p>上面 aside 盒子有一个浮动属性，覆盖了 main 盒子的内容，main 盒子没有清除 aside 盒子的浮动。只做了一个动作，就是<strong>触发自身的 BFC</strong>，然后就<strong>不再被 aside 盒子覆盖</strong>了。所以：<strong>BFC 的区域不会与 float box 重叠</strong>。</p>\\n<p><img src=\"https://lc-gold-cdn.xitu.io/0e2c7b710c4a13111120.gif\" alt=\"\"></p>\\n<h4 id=\"bfc-作用：自适应两栏布局。\"><a class=\"header-anchor\" href=\"#bfc-作用：自适应两栏布局。\" aria-hidden=\"true\">#</a> BFC 作用：自适应两栏布局。</h4>\\n<p><img src=\"https://lc-gold-cdn.xitu.io/304255779293ba4c2082.gif\" alt=\"\"></p>\\n<p>还是上面的代码，此时 BFC 的区域不会与 float box 重叠，因此<strong>会根据包含块（父 div）的宽度，和 aside 的宽度，自适应宽度。</strong></p>\\n<hr>\\n<h3 id=\"bfc-与-layout\"><a class=\"header-anchor\" href=\"#bfc-与-layout\" aria-hidden=\"true\">#</a> BFC 与 Layout</h3>\\n<p>IE 作为浏览器中的奇葩，当然不可能按部就班的支持 BFC 标准，于是乎 IE 中有了 Layout 这个东西。<strong>Layout 和 BFC 基本是等价的</strong>，为了处理 IE 的兼容性，在需要触发 BFC 时，我们除了需要用触发条件中的 CSS 属性来触发 BFC，还需要针对 IE 浏览器使用 zoom: 1 来触发 IE 浏览器的 Layout。</p>\\n<h3 id=\"有趣的文本\"><a class=\"header-anchor\" href=\"#有趣的文本\" aria-hidden=\"true\">#</a> 有趣的文本:</h3>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-css line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-css\"><code><span class=\"token selector\">.par</span> <span class=\"token punctuation\">{</span>\\n  <span class=\"token property\">margin-top</span><span class=\"token punctuation\">:</span> 3rem<span class=\"token punctuation\">;</span>\\n  <span class=\"token property\">border</span><span class=\"token punctuation\">:</span> 5px solid #fcc<span class=\"token punctuation\">;</span>\\n  <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 300px<span class=\"token punctuation\">;</span>\\n<span class=\"token punctuation\">}</span>\\n<span class=\"token selector\">.child</span> <span class=\"token punctuation\">{</span>\\n  <span class=\"token property\">border</span><span class=\"token punctuation\">:</span> 5px solid #f66<span class=\"token punctuation\">;</span>\\n  <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 100px<span class=\"token punctuation\">;</span>\\n  <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 100px<span class=\"token punctuation\">;</span>\\n  <span class=\"token property\">float</span><span class=\"token punctuation\">:</span> left<span class=\"token punctuation\">;</span>\\n<span class=\"token punctuation\">}</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br><span class=\"line-number\">11</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<p><img src=\"https://lc-gold-cdn.xitu.io/216207666aa8bef15115\" alt=\"\"></p>\\n<p><strong>原因：</strong></p>\\n<p>这里两个 div 被撑开，是因为父 div 被 p 标签撑开了，并不是因为清除浮动的原因，从下面这张图片可以清楚的知道。</p>\\n<p><img src=\"https://lc-gold-cdn.xitu.io/5f7dc07585ae6c512bb8\" alt=\"\"></p>\\n<p>其实以上的几个例子都体现了 BFC 布局规则第五条————</p>\\n<h4 id=\"bfc-布局规则-5：bfc-就是页面上的一个隔离的独立容器，容器里面的子元素不会影响到外面的元素。反之也如此。\"><a class=\"header-anchor\" href=\"#bfc-布局规则-5：bfc-就是页面上的一个隔离的独立容器，容器里面的子元素不会影响到外面的元素。反之也如此。\" aria-hidden=\"true\">#</a> BFC 布局规则 5：BFC 就是页面上的一个隔离的独立容器，容器里面的子元素不会影响到外面的元素。反之也如此。</h4>\\n<p><strong>文本环绕 float</strong>：</p>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-html line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-html\"><code><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token style-attr language-css\"><span class=\"token attr-name\"> <span class=\"token attr-name\">style</span></span><span class=\"token punctuation\">=\"</span><span class=\"token attr-value\"><span class=\"token property\">float</span><span class=\"token punctuation\">:</span> left<span class=\"token punctuation\">;</span> <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 100px<span class=\"token punctuation\">;</span> <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 100px<span class=\"token punctuation\">;</span> <span class=\"token property\">background</span><span class=\"token punctuation\">:</span> #000<span class=\"token punctuation\">;</span></span><span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token style-attr language-css\"><span class=\"token attr-name\"> <span class=\"token attr-name\">style</span></span><span class=\"token punctuation\">=\"</span><span class=\"token attr-value\"><span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 200px<span class=\"token punctuation\">;</span> <span class=\"token property\">background</span><span class=\"token punctuation\">:</span> #AAA<span class=\"token punctuation\">;</span></span><span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token style-attr language-css\"><span class=\"token attr-name\"> <span class=\"token attr-name\">style</span></span><span class=\"token punctuation\">=\"</span><span class=\"token attr-value\"> <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 30px<span class=\"token punctuation\">;</span> <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 30px<span class=\"token punctuation\">;</span> <span class=\"token property\">background</span><span class=\"token punctuation\">:</span> red<span class=\"token punctuation\">;</span></span><span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span>content<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span>content<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span>content<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span>content<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span>content<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span>\\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<p><img src=\"https://lc-gold-cdn.xitu.io/c02b2396d987f4d7439a\" alt=\"\"></p>\\n<p>问题：为什么 div 的左上角被覆盖了，而文本却没有被覆盖，float 不是应该跟普通流不在一个层级吗？是因为 float 属性不生效吗？</p>\\n<p><strong>解决</strong>：</p>\\n<p>float 属性定义元素在哪个方向浮动。以往这个属性总应用于图像，<strong>使文本围绕在图像周围</strong>，不过在 CSS 中，<strong>任何元素都可以浮动</strong>。浮动元素会生成一个块级框，而不论它本身是何种元素。</p>\\n<p><img src=\"https://lc-gold-cdn.xitu.io/5994ed11ebc3e4b971db.gif\" alt=\"\"></p>\\n<p>从上图可以看到，float 属性确实生效，将 float 隐藏后，下面还有一个红色的 div，这个 div 是被黑色 div 所覆盖掉的。<strong>div 会被 float 覆盖，而文本却没有被 float 覆盖</strong>，是因为<strong>float 当初设计的时候</strong>就是为了<strong>使文本围绕在浮动对象的周围</strong>。</p>\\n<p>以上。2017.5.4.\\n\\x3c!-- 特殊字符串：用于修改/删除markdown的结尾提示语-OBKoro1 --\\x3e</p>\\n<h3 id=\"点个star支持我一下\"><a class=\"header-anchor\" href=\"#点个star支持我一下\" aria-hidden=\"true\">#</a> 点个<a href=\"https://github.com/OBKoro1/web_accumulate\" target=\"_blank\" rel=\"noopener noreferrer\">Star<OutboundLink/></a>支持我一下~</h3>\\n\\x3c!-- \\'特殊字符串：用于删除编译后的issue组件-OBKoro1 --\\x3e\\n'},{key:\"v-61cd0ee207588\",path:\"/accumulate/ES6/js%E8%B0%83%E7%94%A8%E6%A0%88%E6%9C%BA%E5%88%B6%E4%B8%8EES6%E5%B0%BE%E8%B0%83%E7%94%A8%E4%BC%98%E5%8C%96%E4%BB%8B%E7%BB%8D.html\",lastUpdated:1564720698e3,title:\"js 调用栈机制与ES6尾调用优化介绍\",headers:[{level:2,title:\"js 调用栈机制与ES6尾调用优化介绍\",slug:\"js-调用栈机制与es6尾调用优化介绍\"},{level:3,title:\"目录\",slug:\"目录\"},{level:3,title:\"数据结构：栈\",slug:\"数据结构：栈\"},{level:3,title:\"调用栈是什么？用来做什么？\",slug:\"调用栈是什么？用来做什么？\"},{level:3,title:\"调用栈优化内存\",slug:\"调用栈优化内存\"},{level:3,title:\"调用栈debug大法\",slug:\"调用栈debug大法\"},{level:2,title:\"结语\",slug:\"结语\"},{level:3,title:\"点个Star支持我一下~\",slug:\"点个star支持我一下\"}],excerpt:'<h2 id=\"js-调用栈机制与es6尾调用优化介绍\"><a class=\"header-anchor\" href=\"#js-调用栈机制与es6尾调用优化介绍\" aria-hidden=\"true\">#</a> js 调用栈机制与ES6尾调用优化介绍</h2>\\n<p>调用栈的英文名叫做Call Stack，大家或多或少是有听过的，但是对于js调用栈的工作方式以及如何在工作中利用这一特性，大部分人可能没有进行过更深入的研究，这块内容可以说对我们前端来说就是所谓的基础知识，咋一看好像用处并没有很大，但掌握好这个知识点，就可以让我们在以后可以走的更远，走的更快！</p>\\n<blockquote>\\n<p><a href=\"http://obkoro1.com/\" target=\"_blank\" rel=\"noopener noreferrer\">博客<OutboundLink/></a>、<a href=\"http://obkoro1.com/web_accumulate/accumulate/\" target=\"_blank\" rel=\"noopener noreferrer\">前端积累文档<OutboundLink/></a>、<a href=\"https://github.com/OBKoro1/articleImg_src/blob/master/juejin/1631b6f52f7e7015.jpeg?raw=true\" target=\"_blank\" rel=\"noopener noreferrer\">公众号<OutboundLink/></a>、<a href=\"https://github.com/OBKoro1\" target=\"_blank\" rel=\"noopener noreferrer\">GitHub<OutboundLink/></a></p>\\n</blockquote>\\n<hr>\\n<h3 id=\"目录\"><a class=\"header-anchor\" href=\"#目录\" aria-hidden=\"true\">#</a> 目录</h3>\\n<ol>\\n<li>数据结构：栈</li>\\n<li>调用栈是什么？用来做什么？</li>\\n<li>调用栈的运行机制</li>\\n<li>调用栈优化内存</li>\\n<li>调用栈debug大法</li>\\n</ol>\\n<h3 id=\"数据结构：栈\"><a class=\"header-anchor\" href=\"#数据结构：栈\" aria-hidden=\"true\">#</a> 数据结构：栈</h3>\\n<p>栈是一种遵从<strong>后进先出(<code>LIFO</code>)原则的有序集合</strong>，新元素都靠近栈顶，旧元素都接近栈底。</p>\\n<p>生活中的栗子，帮助一下理解：</p>\\n<p>餐厅里面堆放的盘子(栈)，一开始放的都在下面(先进)，后面放的都在上面(后进)，洗盘子的时候先从上面开始洗(先出)。</p>\\n<h3 id=\"调用栈是什么？用来做什么？\"><a class=\"header-anchor\" href=\"#调用栈是什么？用来做什么？\" aria-hidden=\"true\">#</a> 调用栈是什么？用来做什么？</h3>\\n<ol>\\n<li><strong>调用栈是一种栈结构的数据，它是由调用侦组成的</strong>。</li>\\n<li><strong>调用栈记录了函数的执行顺序和函数内部变量等信息</strong>。</li>\\n</ol>\\n<h4 id=\"调用栈的运行机制\"><a class=\"header-anchor\" href=\"#调用栈的运行机制\" aria-hidden=\"true\">#</a> 调用栈的运行机制</h4>\\n<p><strong>机制</strong>：</p>\\n<p>程序运行到一个函数，它就会将其添加到调用栈中，当从这个函数返回的时候，就会将这个函数从调用栈中删掉。</p>\\n<p>看一下例子帮助理解：</p>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code><span class=\"token comment\">// 调用栈中的执行步骤用数字表示</span>\\n<span class=\"token function\">printSquare</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 1 添加</span>\\n<span class=\"token keyword\">function</span> <span class=\"token function\">printSquare</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n    <span class=\"token keyword\">var</span> s <span class=\"token operator\">=</span> <span class=\"token function\">multiply</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 2 添加 => 3 运行完成，内部没有再调用其他函数，删掉</span>\\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 4 添加 => 5 删掉</span>\\n    <span class=\"token comment\">// 运行完成 删掉printSquare</span>\\n<span class=\"token punctuation\">}</span>\\n<span class=\"token keyword\">function</span> <span class=\"token function\">multiply</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n    <span class=\"token keyword\">return</span> x <span class=\"token operator\">*</span> y<span class=\"token punctuation\">;</span>\\n<span class=\"token punctuation\">}</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<p>调用栈中的执行步骤如下(删除multiply的步骤被省略了)：</p>\\n<p><img src=\"https://github.com/OBKoro1/articleImg_src/blob/master/juejin/16acb4a439190d49?raw=true\" alt=\"\"></p>\\n<p><strong>调用侦</strong>：</p>\\n<p>每个进入到调用栈中的函数，都会分配到一个单独的栈空间，称为“调用侦”。</p>\\n<p>在调用栈中每个“调用侦”都对应一个函数，最上方的调用帧称为“当前帧”，调用栈是由所有的调用侦形成的。</p>\\n<p>找到一张图片，调用侦：</p>\\n<p><img src=\"https://github.com/OBKoro1/articleImg_src/blob/master/juejin/16ace8030a36c8dd?raw=true\" alt=\"\"></p>\\n<h3 id=\"调用栈优化内存\"><a class=\"header-anchor\" href=\"#调用栈优化内存\" aria-hidden=\"true\">#</a> 调用栈优化内存</h3>\\n<p><strong>调用栈的内存消耗</strong>：</p>\\n<p>如上图，函数的变量等信息会被调用侦保存起来，所以<strong>调用侦中的变量不会被垃圾收集器回收</strong>。</p>\\n<p>当函数嵌套的层级比较深了，调用栈中的调用侦比较多的时候，这些信息对内存消耗是非常大的。</p>\\n<p>针对这种情况除了我们要尽量避免函数层级嵌套的比较深之外，ES6提供了“尾调用优化”来解决调用侦过多，引起的内存消耗过大的问题。</p>\\n<p><strong>何谓尾调用</strong>：</p>\\n<p>尾调用指的是：<strong>函数的最后一步是调用另一个函数</strong>。</p>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\\n  <span class=\"token keyword\">return</span> <span class=\"token function\">g</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 最后一步调用另一个函数并且使用return</span>\\n<span class=\"token punctuation\">}</span>\\n<span class=\"token keyword\">function</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\\n  <span class=\"token function\">g</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 没有return 不算尾调用 因为不知道后面还有没有操作</span>\\n  <span class=\"token comment\">// return undefined; // 隐式的return</span>\\n<span class=\"token punctuation\">}</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<p><strong>尾调用优化优化了什么？</strong></p>\\n<p>尾调用用来<strong>删除外层无用的调用侦</strong>，只保留内层函数的调用侦，来节省浏览器的内存。</p>\\n<p>下面这个例子调用栈中的调用侦一直只有一项，如果不使用尾调用的话会出现三个调用侦：</p>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code><span class=\"token function\">a</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 1 添加a到调用栈</span>\\n<span class=\"token keyword\">function</span> <span class=\"token function\">a</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\\n    <span class=\"token keyword\">return</span> <span class=\"token function\">b</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 在调用栈中删除a 添加b</span>\\n<span class=\"token punctuation\">}</span>\\n<span class=\"token keyword\">function</span> <span class=\"token function\">b</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\\n    <span class=\"token keyword\">return</span> <span class=\"token function\">c</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 删除b 添加c</span>\\n<span class=\"token punctuation\">}</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<p><strong>防止爆栈</strong>：</p>\\n<p>浏览器对<a href=\"https://codeday.me/bug/20170824/62171.html\" target=\"_blank\" rel=\"noopener noreferrer\">调用栈都有大小限制<OutboundLink/></a>，在ES6之前递归比较深的话，很容易出现“爆栈”问题(stack overflow)。</p>\\n<p>现在可以使用“尾调用优化”来写一个“尾递归”，只保存一个调用侦，来防止爆栈问题。</p>\\n<p><strong>注意</strong>：</p>\\n<ol>\\n<li>只有不再用到外层函数的内部变量，内层函数的调用帧才会取代外层函数的调用帧。</li>\\n</ol>\\n<blockquote>\\n<p>如果要使用外层函数的变量，可以通过参数的形式传到内层函数中</p>\\n</blockquote>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">a</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\\n    <span class=\"token keyword\">var</span> aa <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\\n    <span class=\"token keyword\">let</span> <span class=\"token function-variable function\">b</span> <span class=\"token operator\">=</span> val <span class=\"token operator\">=></span> aa <span class=\"token operator\">+</span> val <span class=\"token comment\">// 使用了外层函数的参数aa</span>\\n    <span class=\"token keyword\">return</span> <span class=\"token function\">b</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 无法进行尾调用优化</span>\\n<span class=\"token punctuation\">}</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<ol start=\"2\">\\n<li>尾调用优化只在严格模式下开启，非严格模式是无效的。</li>\\n<li>如果环境不支持“尾调用优化”，代码还可以正常运行，是无害的！</li>\\n</ol>\\n<p><strong>更多</strong>：</p>\\n<p>关于尾递归以及更多尾调用优化的内容，推荐查阅<a href=\"http://es6.ruanyifeng.com/#docs/function#%E5%B0%BE%E8%B0%83%E7%94%A8%E4%BC%98%E5%8C%96\" target=\"_blank\" rel=\"noopener noreferrer\">ES6入门-阮一峰<OutboundLink/></a></p>\\n<h3 id=\"调用栈debug大法\"><a class=\"header-anchor\" href=\"#调用栈debug大法\" aria-hidden=\"true\">#</a> 调用栈debug大法</h3>\\n<p><strong>查看调用栈有什么用</strong></p>\\n<ol>\\n<li>\\n<p>查看函数的调用顺序是否跟预期一致，比如不同判断调用不同函数。</p>\\n</li>\\n<li>\\n<p>快速定位问题/修改三方库的代码。</p>\\n<p>当接手一个历史项目，或者引用第三方库出现问题的时候，可以先查看对应API的调用栈，找到其中涉及的关键函数，针对性的修复它。</p>\\n<p>通过查看调用栈的形式，帮助我快速定位问题，修改三方库的源码。</p>\\n</li>\\n</ol>\\n<p><strong>如何查看调用栈</strong></p>\\n<ol>\\n<li>只查看调用栈：<code>console.trace</code></li>\\n</ol>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code><span class=\"token function\">a</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\\n<span class=\"token keyword\">function</span> <span class=\"token function\">a</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n    <span class=\"token function\">b</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\n<span class=\"token punctuation\">}</span>\\n<span class=\"token keyword\">function</span> <span class=\"token function\">b</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n    <span class=\"token function\">c</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\\n<span class=\"token punctuation\">}</span>\\n<span class=\"token keyword\">function</span> <span class=\"token function\">c</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n    <span class=\"token keyword\">let</span> aa <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">trace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\\n<span class=\"token punctuation\">}</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br><span class=\"line-number\">11</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<p>如图所示,点击右侧还能查看代码位置：</p>\\n<p><img src=\"https://github.com/OBKoro1/articleImg_src/blob/master/juejin/16ad3f508ab127a9?raw=true\" alt=\"\"></p>\\n<ol start=\"2\">\\n<li><code>bugger</code>打断点形式，这也是我最喜欢的调试方式：</li>\\n</ol>\\n<p><img src=\"https://github.com/OBKoro1/articleImg_src/blob/master/juejin/16ad3ff354f2dac3?raw=true\" alt=\"\"></p>\\n<h2 id=\"结语\"><a class=\"header-anchor\" href=\"#结语\" aria-hidden=\"true\">#</a> 结语</h2>\\n<p>本文主要讲了这几个方面的内容：</p>\\n<ol>\\n<li>理解调用栈的运行机制，对代码背后的一些执行机制也可以更加了解，帮助我们在百尺竿头更进一步。</li>\\n<li>我们应该在日常的code中，有意识的使用ES6的“尾调用优化”，来减少调用栈的长度，节省客户端内存。</li>\\n<li>利用调用栈，对第三方库或者不熟悉的项目，可以更快速的定位问题，提高我们debug速度。</li>\\n</ol>\\n<p>最后：之前写过一篇关于<a href=\"https://juejin.im/post/5b40581e5188251ac446c716\" target=\"_blank\" rel=\"noopener noreferrer\">垃圾回收机制与内存泄露<OutboundLink/></a>的文章，感兴趣的同学可以扩展一下。</p>\\n<p>以上2019/5/19</p>\\n<p>参考资料：</p>\\n<p><a href=\"https://juejin.im/post/5b40581e5188251ac446c716\" target=\"_blank\" rel=\"noopener noreferrer\">JS垃圾回收机制与常见内存泄露的解决方法<OutboundLink/></a></p>\\n<p><a href=\"http://es6.ruanyifeng.com/#docs/function#%E5%B0%BE%E8%B0%83%E7%94%A8%E4%BC%98%E5%8C%96\" target=\"_blank\" rel=\"noopener noreferrer\">ES6入门-阮一峰<OutboundLink/></a></p>\\n<p><a href=\"https://juejin.im/post/5a05b4576fb9a04519690d42\" target=\"_blank\" rel=\"noopener noreferrer\">JavaScript 如何工作：对引擎、运行时、调用堆栈的概述<OutboundLink/></a></p>\\n<p><a href=\"https://segmentfault.com/a/1190000010360316\" target=\"_blank\" rel=\"noopener noreferrer\">浅析javascript调用栈<OutboundLink/></a>\\n\\x3c!-- 特殊字符串：用于修改/删除markdown的结尾提示语-OBKoro1 --\\x3e</p>\\n<h3 id=\"点个star支持我一下\"><a class=\"header-anchor\" href=\"#点个star支持我一下\" aria-hidden=\"true\">#</a> 点个<a href=\"https://github.com/OBKoro1/web_accumulate\" target=\"_blank\" rel=\"noopener noreferrer\">Star<OutboundLink/></a>支持我一下~</h3>\\n\\x3c!-- \\'特殊字符串：用于删除编译后的issue组件-OBKoro1 --\\x3e\\n'},{key:\"v-ff47482806591\",path:\"/accumulate/ES6/let%E5%92%8Cconst%E5%91%BD%E4%BB%A4.html\",lastUpdated:1564720698e3,title:\"var和let/const的区别\",headers:[{level:2,title:\"内容：\",slug:\"内容：\"},{level:3,title:\"为什么需要块级作用域?\",slug:\"为什么需要块级作用域\"},{level:3,title:\"块级作用域\",slug:\"块级作用域\"},{level:3,title:\"块级作用域声明函数：\",slug:\"块级作用域声明函数：\"},{level:3,title:\"不存在变量提升\",slug:\"不存在变量提升\"},{level:3,title:\"暂时性死区：\",slug:\"暂时性死区：\"},{level:3,title:\"不允许重复声明变量\",slug:\"不允许重复声明变量\"},{level:3,title:\"let、const声明的\\b全局变量不会挂在顶层对象下面\",slug:\"let、const声明的全局变量不会挂在顶层对象下面\"},{level:2,title:\"const命令\",slug:\"const命令\"},{level:2,title:\"总结:\",slug:\"总结\"},{level:3,title:\"var和let/const的区别:\",slug:\"var和let-const的区别-2\"},{level:3,title:\"const命令两个注意点:\",slug:\"const命令两个注意点\"},{level:3,title:\"let、const使用场景:\",slug:\"let、const使用场景\"},{level:3,title:\"点个Star支持我一下~\",slug:\"点个star支持我一下\"}],excerpt:'<h1 id=\"var和let-const的区别\"><a class=\"header-anchor\" href=\"#var和let-const的区别\" aria-hidden=\"true\">#</a> var和let/const的区别</h1>\\n<p><code>let</code>和<code>const</code>是 ES6 新增的命令，用于声明变量，这两个命令跟 ES5 的<code>var</code>有许多不同，并且<code>let</code>和<code>const</code>也有一些细微的不同，再认真阅读了\\b阮一峰老师的<a href=\"http://es6.ruanyifeng.com/#docs/let\" target=\"_blank\" rel=\"noopener noreferrer\">文档<OutboundLink/></a>后，发现还是有一些不知道的细节...</p>\\n<blockquote>\\n<p><a href=\"http://obkoro1.com/\" target=\"_blank\" rel=\"noopener noreferrer\">博客<OutboundLink/></a>、<a href=\"http://obkoro1.com/web_accumulate/accumulate/\" target=\"_blank\" rel=\"noopener noreferrer\">前端积累文档<OutboundLink/></a>、<a href=\"https://github.com/OBKoro1/articleImg_src/blob/master/juejin/1631b6f52f7e7015.jpeg?raw=true\" target=\"_blank\" rel=\"noopener noreferrer\">公众号<OutboundLink/></a>、<a href=\"https://github.com/OBKoro1\" target=\"_blank\" rel=\"noopener noreferrer\">GitHub<OutboundLink/></a></p>\\n</blockquote>\\n<h2 id=\"内容：\"><a class=\"header-anchor\" href=\"#内容：\" aria-hidden=\"true\">#</a> 内容：</h2>\\n<p><strong><code>var</code>和<code>let</code>/<code>const</code>的区别</strong></p>\\n<ol>\\n<li>\\n<p>块级作用域</p>\\n</li>\\n<li>\\n<p>不存在变量提升</p>\\n</li>\\n<li>\\n<p>暂时性死区</p>\\n</li>\\n<li>\\n<p>不可重复声明</p>\\n</li>\\n<li>\\n<p>let、const声明的\\b全局变量不会挂在顶层对象下面</p>\\n</li>\\n</ol>\\n<p><strong><code>const</code>命令两个注意点:</strong></p>\\n<ol>\\n<li>\\n<p>const 声明之后必须马上赋值，否则会报错</p>\\n</li>\\n<li>\\n<p>const 简单类型一旦声明就不能再更改，\\b复杂类型(数组、对象等)指针指向的地址不能更改，内部数据可以更改。</p>\\n</li>\\n</ol>\\n<h3 id=\"为什么需要块级作用域\"><a class=\"header-anchor\" href=\"#为什么需要块级作用域\" aria-hidden=\"true\">#</a> 为什么需要块级作用域?</h3>\\n<p>ES5只有全局作用域和函数作用域，没有块级作用域。</p>\\n<p>这带来很多不合理的场景:</p>\\n<ol>\\n<li>内层变量可能覆盖外层变量</li>\\n<li>用来计数的循环变量泄露为全局变量</li>\\n</ol>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code><span class=\"token keyword\">var</span> tmp <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\n<span class=\"token keyword\">function</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>tmp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 想打印外层的时间作用域</span>\\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n    <span class=\"token keyword\">var</span> tmp <span class=\"token operator\">=</span> <span class=\"token string\">\\'hello world\\'</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 这里声明的作用域为整个函数</span>\\n  <span class=\"token punctuation\">}</span>\\n<span class=\"token punctuation\">}</span>\\n<span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// undefined</span>\\n\\n<span class=\"token keyword\">var</span> s <span class=\"token operator\">=</span> <span class=\"token string\">\\'hello\\'</span><span class=\"token punctuation\">;</span>\\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> s<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// i应该为此次for循环使用的变量</span>\\n<span class=\"token punctuation\">}</span>\\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 5 全局范围都可以读到</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br><span class=\"line-number\">11</span><br><span class=\"line-number\">12</span><br><span class=\"line-number\">13</span><br><span class=\"line-number\">14</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<h3 id=\"块级作用域\"><a class=\"header-anchor\" href=\"#块级作用域\" aria-hidden=\"true\">#</a> 块级作用域</h3>\\n<ol>\\n<li>作用域</li>\\n</ol>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">f1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n  <span class=\"token keyword\">let</span> n <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span>\\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n    <span class=\"token keyword\">let</span> n <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 10 内层的n</span>\\n  <span class=\"token punctuation\">}</span>\\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 5 当前层的n</span>\\n<span class=\"token punctuation\">}</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<ol start=\"2\">\\n<li>块级作用域任意嵌套</li>\\n</ol>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span>\\n  <span class=\"token punctuation\">{</span><span class=\"token keyword\">let</span> insane <span class=\"token operator\">=</span> <span class=\"token string\">\\'Hello World\\'</span><span class=\"token punctuation\">}</span>\\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>insane<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 报错 读不到子作用域的变量</span>\\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<ol start=\"3\">\\n<li>块级作用域真正使代码分割成块了</li>\\n</ol>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code><span class=\"token punctuation\">{</span>\\n<span class=\"token keyword\">let</span> a <span class=\"token operator\">=</span> <span class=\"token operator\">...</span><span class=\"token punctuation\">;</span>\\n<span class=\"token operator\">...</span>\\n<span class=\"token punctuation\">}</span>\\n<span class=\"token punctuation\">{</span>\\n<span class=\"token keyword\">let</span> a <span class=\"token operator\">=</span> <span class=\"token operator\">...</span><span class=\"token punctuation\">;</span>\\n<span class=\"token operator\">...</span>\\n<span class=\"token punctuation\">}</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<p>以上形式，<strong>可以用于测试一些想法，不用担心变量重名，也不用担心外界干扰</strong></p>\\n<h3 id=\"块级作用域声明函数：\"><a class=\"header-anchor\" href=\"#块级作用域声明函数：\" aria-hidden=\"true\">#</a> 块级作用域声明函数：</h3>\\n<blockquote>\\n<p>在块级作用域声明函数，因为浏览器的要\\b兼容老代码，会产生一些<a href=\"http://es6.ruanyifeng.com/#docs/let#%E5%9D%97%E7%BA%A7%E4%BD%9C%E7%94%A8%E5%9F%9F%E4%B8%8E%E5%87%BD%E6%95%B0%E5%A3%B0%E6%98%8E\" target=\"_blank\" rel=\"noopener noreferrer\">问题<OutboundLink/></a>！</p>\\n</blockquote>\\n<p><strong>在块级作用域声明函数，最好使用匿名函数的形式</strong>。</p>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code><span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\\n  <span class=\"token keyword\">let</span> <span class=\"token function-variable function\">a</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 作用域为块级 令声明的函数作用域范围更清晰</span>\\n<span class=\"token punctuation\">}</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<p><strong>ES6 的块级作用域允许声明函数的规则，只在使用大括号的情况下成立，如果没有使用大括号，就会报错</strong>。</p>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code><span class=\"token comment\">// 报错</span>\\n<span class=\"token string\">\\'use strict\\'</span><span class=\"token punctuation\">;</span>\\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span>\\n  <span class=\"token keyword\">function</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span> <span class=\"token comment\">// 我们需要给if加个{}</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<h3 id=\"不存在变量提升\"><a class=\"header-anchor\" href=\"#不存在变量提升\" aria-hidden=\"true\">#</a> 不存在变量提升</h3>\\n<p><strong>变量提升的现象</strong>：在同一作用域下，变量可以在声明之前使用，值为 undefined</p>\\n<p>ES5 时使用<code>var</code>声明变量，经常会出现变量提升的现象。</p>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code><span class=\"token comment\">// var 的情况</span>\\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>foo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 输出undefined</span>\\n<span class=\"token keyword\">var</span> foo <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\\n\\n<span class=\"token comment\">// let 的情况</span>\\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>bar<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 报错ReferenceError</span>\\n<span class=\"token keyword\">let</span> bar <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<h3 id=\"暂时性死区：\"><a class=\"header-anchor\" href=\"#暂时性死区：\" aria-hidden=\"true\">#</a> 暂时性死区：</h3>\\n<p>只要一进入当前作用域，所要使用的变量就已经存在了，但是不可获取，<strong>只有等到声明变量的那一行代码出现，才可以获取和使用该变量</strong></p>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code><span class=\"token keyword\">var</span> tmp <span class=\"token operator\">=</span> <span class=\"token number\">123</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 声明</span>\\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n  tmp <span class=\"token operator\">=</span> <span class=\"token string\">\\'abc\\'</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 报错 因为本区域有tmp声明变量</span>\\n  <span class=\"token keyword\">let</span> tmp<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 绑定if这个块级的作用域 不能出现tmp变量</span>\\n<span class=\"token punctuation\">}</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<p><strong>暂时性死区和不能变量提升的意义在于:</strong></p>\\n<p>为了减少运行时错误，防止在变量声明前就使用这个变量，从而导致意料之外的行为。</p>\\n<h3 id=\"不允许重复声明变量\"><a class=\"header-anchor\" href=\"#不允许重复声明变量\" aria-hidden=\"true\">#</a> 不允许重复声明变量</h3>\\n<blockquote>\\n<p>在测试时出现这种情况:<code>var a= \\'声明\\';const a = \\'不报错\\'</code>，这种情况是因为babel在转化的时候，做了一些处理，在浏览器的控制台中测试，就成功报错</p>\\n</blockquote>\\n<p><code>let</code>、<code>const</code>不允许在相同作用域内，重复声明同一个变量</p>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">func</span><span class=\"token punctuation\">(</span>arg<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n  <span class=\"token keyword\">let</span> arg<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 报错</span>\\n<span class=\"token punctuation\">}</span>\\n\\n<span class=\"token keyword\">function</span> <span class=\"token function\">func</span><span class=\"token punctuation\">(</span>arg<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n  <span class=\"token punctuation\">{</span>\\n    <span class=\"token keyword\">let</span> arg<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 不报错</span>\\n  <span class=\"token punctuation\">}</span>\\n<span class=\"token punctuation\">}</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<h3 id=\"let、const声明的全局变量不会挂在顶层对象下面\"><a class=\"header-anchor\" href=\"#let、const声明的全局变量不会挂在顶层对象下面\" aria-hidden=\"true\">#</a> let、const声明的\\b全局变量不会挂在顶层对象下面</h3>\\n<ol>\\n<li>浏览器环境顶层对象是: <code>window</code></li>\\n<li>node环境顶层对象是: <code>global</code></li>\\n<li>var声明的全局变量会挂在顶层对象下面，而let、const不会挂在顶层对象下面。如下面这个栗子</li>\\n</ol>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code><span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\\n<span class=\"token comment\">// 如果在 Node环境，可以写成 global.a</span>\\n<span class=\"token comment\">// 或者采用通用方法，写成 this.a</span>\\nwindow<span class=\"token punctuation\">.</span>a <span class=\"token comment\">// 1</span>\\n\\n<span class=\"token keyword\">let</span> b <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\\nwindow<span class=\"token punctuation\">.</span>b <span class=\"token comment\">// undefined</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<h2 id=\"const命令\"><a class=\"header-anchor\" href=\"#const命令\" aria-hidden=\"true\">#</a> const命令</h2>\\n<ol>\\n<li>\\n<p><strong>一旦声明，必须马上赋值</strong></p>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code><span class=\"token keyword\">let</span> p<span class=\"token punctuation\">;</span> <span class=\"token keyword\">var</span> p1<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 不报错</span>\\n<span class=\"token keyword\">const</span> p3 <span class=\"token operator\">=</span> <span class=\"token string\">\\'马上赋值\\'</span>\\n<span class=\"token keyword\">const</span> p3<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 报错 没有赋值</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e</li>\\n<li>\\n<p><strong>const一旦声明值就不能改变</strong></p>\\n<h4 id=\"简单类型-不能改动\"><a class=\"header-anchor\" href=\"#简单类型-不能改动\" aria-hidden=\"true\">#</a> 简单类型:不能改动</h4>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code><span class=\"token keyword\">const</span> p <span class=\"token operator\">=</span> <span class=\"token string\">\\'不能改变\\'</span><span class=\"token punctuation\">;</span>\\np <span class=\"token operator\">=</span> <span class=\"token string\">\\'报错\\'</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<h4 id=\"复杂类型-变量指针不能变\"><a class=\"header-anchor\" href=\"#复杂类型-变量指针不能变\" aria-hidden=\"true\">#</a> \\b复杂类型:变量指针不能变</h4>\\n<p>考虑如下情况：</p>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code><span class=\"token keyword\">const</span> p <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\\'不能改动\\'</span><span class=\"token punctuation\">]</span>\\n<span class=\"token keyword\">const</span> p2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\\n  name<span class=\"token punctuation\">:</span> <span class=\"token string\">\\'OBKoro1\\'</span>\\n<span class=\"token punctuation\">}</span>\\np<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\\'不报错\\'</span>\\np2<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\\'\\b不报错\\'</span>\\np <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\\'报错\\'</span><span class=\"token punctuation\">]</span>\\np2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\\n  name<span class=\"token punctuation\">:</span> <span class=\"token string\">\\'报错\\'</span>\\n<span class=\"token punctuation\">}</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<p>const所说的一旦声明值就不能改变，实际上指的是：<strong>变量指向的那个内存地址所保存的数据不得改动</strong></p>\\n<ul>\\n<li>\\n<p>简单类型(number、string、boolean)：<strong>内存地址就是值,即常量(一变就报错)</strong>.</p>\\n</li>\\n<li>\\n<p>复杂类型(对象、数组等)：<strong>地址保存的是一个指针，<code>const</code>只能保证指针是固定的(总是指向同一个地址),它内部的值是可以改变的(不要以为const就安全了！)</strong></p>\\n<p>所以只要不重新赋值整个数组/对象， 因为保存的是一个指针，所以对数组使用的<code>push</code>、<code>shift</code>、<code>splice</code>等方法也是允许的\\b，你就是把值一个一个全都删光了都不会报错。</p>\\n</li>\\n</ul>\\n<blockquote>\\n<p>复杂类型还有函数，正则等，这点也要注意一下。</p>\\n</blockquote>\\n</li>\\n</ol>\\n<h2 id=\"总结\"><a class=\"header-anchor\" href=\"#总结\" aria-hidden=\"true\">#</a> 总结:</h2>\\n<p>再总结一下，看到这些名词，脑子里应该会有对应的理解，如果没有的话，那可以再看看对应的内容。</p>\\n<h3 id=\"var和let-const的区别-2\"><a class=\"header-anchor\" href=\"#var和let-const的区别-2\" aria-hidden=\"true\">#</a> <code>var</code>和<code>let</code>/<code>const</code>的区别:</h3>\\n<ol>\\n<li>块级作用域</li>\\n<li>不存在变量提升</li>\\n<li>暂时性死区</li>\\n<li>不可重复声明</li>\\n<li>let、const声明的\\b全局变量不会挂在顶层对象下面</li>\\n</ol>\\n<h3 id=\"const命令两个注意点\"><a class=\"header-anchor\" href=\"#const命令两个注意点\" aria-hidden=\"true\">#</a> <code>const</code>命令两个注意点:</h3>\\n<ol>\\n<li>\\n<p>\\b<code>let</code>可以先声明稍后再赋值,而<code>const</code>在 声明之后必须马上赋值，否则会报错</p>\\n</li>\\n<li>\\n<p>const 简单类型一旦声明就不能再更改，\\b复杂类型(数组、对象等)指针指向的地址不能更改，内部数据可以更改。</p>\\n</li>\\n</ol>\\n<h3 id=\"let、const使用场景\"><a class=\"header-anchor\" href=\"#let、const使用场景\" aria-hidden=\"true\">#</a> let、const使用场景:</h3>\\n<ol>\\n<li><code>let</code>使用场景：变量，用以替代<code>var</code>。</li>\\n<li><code>const</code>使用场景：常量、声明匿名函数、箭头函数的时候。</li>\\n</ol>\\n<p>参考资料：</p>\\n<p><a href=\"http://es6.ruanyifeng.com/#docs/let\" target=\"_blank\" rel=\"noopener noreferrer\">let 和 const 命令<OutboundLink/></a>\\n\\x3c!-- 特殊字符串：用于修改/删除markdown的结尾提示语-OBKoro1 --\\x3e</p>\\n<h3 id=\"点个star支持我一下\"><a class=\"header-anchor\" href=\"#点个star支持我一下\" aria-hidden=\"true\">#</a> 点个<a href=\"https://github.com/OBKoro1/web_accumulate\" target=\"_blank\" rel=\"noopener noreferrer\">Star<OutboundLink/></a>支持我一下~</h3>\\n\\x3c!-- \\'特殊字符串：用于删除编译后的issue组件-OBKoro1 --\\x3e\\n'},{key:\"v-b90b0c4f020bf\",path:\"/accumulate/ES6/%E8%AE%BA%E6%99%AE%E9%80%9A%E5%87%BD%E6%95%B0%E5%92%8C%E7%AE%AD%E5%A4%B4%E5%87%BD%E6%95%B0%E7%9A%84%E5%8C%BA%E5%88%AB%E4%BB%A5%E5%8F%8A%E7%AE%AD%E5%A4%B4%E5%87%BD%E6%95%B0%E7%9A%84%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9%E5%92%8C%E4%B8%8D%E9%80%82%E7%94%A8%E5%9C%BA%E6%99%AF.html\",lastUpdated:1564720698e3,title:\"论普通函数和箭头函数的区别以及箭头函数的注意事项和不适用场景\",headers:[{level:2,title:\"论普通函数和箭头函数的区别以及箭头函数的注意事项和不适用场景\",slug:\"论普通函数和箭头函数的区别以及箭头函数的注意事项和不适用场景\"},{level:2,title:\"普通函数和箭头函数的区别：\",slug:\"普通函数和箭头函数的区别：\"},{level:3,title:\"箭头函数的this指向规则：\",slug:\"箭头函数的this指向规则：\"},{level:3,title:\"箭头函数的\",slug:\"箭头函数的\"},{level:3,title:\"箭头函数的arguments\",slug:\"箭头函数的arguments\"},{level:3,title:\"箭头函数不支持重命名函数参数,普通函数的函数参数支持重命名\",slug:\"箭头函数不支持重命名函数参数-普通函数的函数参数支持重命名\"},{level:3,title:\"箭头函数相对于普通函数语法更简洁优雅：\",slug:\"箭头函数相对于普通函数语法更简洁优雅：\"},{level:2,title:\"箭头函数的注意事项及不适用场景\",slug:\"箭头函数的注意事项及不适用场景\"},{level:3,title:\"箭头函数的注意事项\",slug:\"箭头函数的注意事项\"},{level:3,title:\"箭头函数不适用场景：\",slug:\"箭头函数不适用场景：\"},{level:2,title:\"文章内容小结：\",slug:\"文章内容小结：\"},{level:3,title:\"普通函数和箭头函数的区别：\",slug:\"普通函数和箭头函数的区别：-2\"},{level:3,title:\"箭头函数的注意事项及不适用场景\",slug:\"箭头函数的注意事项及不适用场景-2\"},{level:2,title:\"结语\",slug:\"结语\"},{level:3,title:\"点个Star支持我一下~\",slug:\"点个star支持我一下\"}],excerpt:'<h2 id=\"论普通函数和箭头函数的区别以及箭头函数的注意事项和不适用场景\"><a class=\"header-anchor\" href=\"#论普通函数和箭头函数的区别以及箭头函数的注意事项和不适用场景\" aria-hidden=\"true\">#</a> 论普通函数和箭头函数的区别以及箭头函数的注意事项和不适用场景</h2>\\n<p>箭头函数是ES6的API，相信很多人都知道，因为其语法上相对于普通函数更简洁，深受大家的喜爱。就是这种我们日常开发中一直在使用的API，大部分同学却对它的了解程度还是不够深...</p>\\n<h2 id=\"普通函数和箭头函数的区别：\"><a class=\"header-anchor\" href=\"#普通函数和箭头函数的区别：\" aria-hidden=\"true\">#</a> 普通函数和箭头函数的区别：</h2>\\n<h3 id=\"箭头函数的this指向规则：\"><a class=\"header-anchor\" href=\"#箭头函数的this指向规则：\" aria-hidden=\"true\">#</a> 箭头函数的this指向规则：</h3>\\n<h4 id=\"_1-箭头函数没有prototype-原型-，所以箭头函数本身没有this\"><a class=\"header-anchor\" href=\"#_1-箭头函数没有prototype-原型-，所以箭头函数本身没有this\" aria-hidden=\"true\">#</a> 1. 箭头函数没有<code>prototype</code>(原型)，所以箭头函数本身没有this</h4>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code><span class=\"token keyword\">let</span> <span class=\"token function-variable function\">a</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// undefined</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<h4 id=\"_2-箭头函数的this指向在定义的时候继承自外层第一个普通函数的this。\"><a class=\"header-anchor\" href=\"#_2-箭头函数的this指向在定义的时候继承自外层第一个普通函数的this。\" aria-hidden=\"true\">#</a> 2. 箭头函数的this指向在定义的时候继承自外层第一个普通函数的this。</h4>\\n<p>下面栗子中在一个函数中定义箭头函数，然后在另一个函数中执行箭头函数。</p>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code><span class=\"token keyword\">let</span> a<span class=\"token punctuation\">,</span>\\n  barObj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> msg<span class=\"token punctuation\">:</span> <span class=\"token string\">\\'bar的this指向\\'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\\nfooObj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> msg<span class=\"token punctuation\">:</span> <span class=\"token string\">\\'foo的this指向\\'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\\nbar<span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>barObj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 将bar的this指向barObj</span>\\nfoo<span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>fooObj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 将foo的this指向fooObj</span>\\n<span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n  <span class=\"token function\">a</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 结果：{ msg: \\'bar的this指向\\' }</span>\\n<span class=\"token punctuation\">}</span>\\n<span class=\"token keyword\">function</span> <span class=\"token function\">bar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n  <span class=\"token function-variable function\">a</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\\'this指向定义的时候外层第一个普通函数\\'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// </span>\\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 在bar中定义 this继承于bar函数的this指向</span>\\n<span class=\"token punctuation\">}</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br><span class=\"line-number\">11</span><br><span class=\"line-number\">12</span><br><span class=\"line-number\">13</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<p>从上面栗子中可以得出两点</p>\\n<ol>\\n<li><strong>箭头函数的this指向定义时所在的外层第一个普通函数，跟使用位置没有关系</strong>。</li>\\n<li><strong>被继承的普通函数的this指向改变，箭头函数的this指向会跟着改变</strong></li>\\n</ol>\\n<h4 id=\"_3-不能直接修改箭头函数的this指向\"><a class=\"header-anchor\" href=\"#_3-不能直接修改箭头函数的this指向\" aria-hidden=\"true\">#</a> 3. 不能直接修改箭头函数的this指向</h4>\\n<p>上个栗子中的foo函数修改一下，尝试直接修改箭头函数的this指向。</p>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code><span class=\"token keyword\">let</span> fnObj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> msg<span class=\"token punctuation\">:</span> <span class=\"token string\">\\'尝试直接修改箭头函数的this指向\\'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\\n<span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n  a<span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>fnObj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 结果：{ msg: \\'bar的this指向\\' }</span>\\n<span class=\"token punctuation\">}</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<p>很明显，call显示绑定this指向失败了，包括aaply、bind都一样。</p>\\n<blockquote>\\n<p>它们(call、aaply、bind)会默认忽略第一个参数，但是可以正常传参。</p>\\n</blockquote>\\n<p>然后我又通过隐式绑定来尝试同样也失败了，new 调用会报错，这个稍后再说。</p>\\n<p>SO，<strong>箭头函数不能直接修改它的this指向</strong>。</p>\\n<p>幸运的是，我们可以通过间接的形式来修改箭头函数的指向：</p>\\n<p><strong>去修改被继承的普通函数的this指向，然后箭头函数的this指向也会跟着改变</strong>，这在上一个栗子中有演示。</p>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code>bar<span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>barObj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 将bar普通函数的this指向barObj 然后内部的箭头函数也会指向barObj</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<h4 id=\"_4-箭头函数外层没有普通函数，严格模式和非严格模式下它的this都会指向window-全局对象\"><a class=\"header-anchor\" href=\"#_4-箭头函数外层没有普通函数，严格模式和非严格模式下它的this都会指向window-全局对象\" aria-hidden=\"true\">#</a> 4. 箭头函数外层没有普通函数，严格模式和非严格模式下它的this都会指向<code>window</code>(全局对象)</h4>\\n<blockquote>\\n<p>唔，这个问题实际上是面试官提出来的，当时我认为的箭头函数规则就是：箭头函数的this指向继承自外层第一个普通函数的this，现在看来真是不严谨(少说一个定义的时候)，要是面试官问我：定义和执行不在同一个普通函数中，它又指向哪里，肯定歇菜...</p>\\n</blockquote>\\n<p>既然箭头函数的this指向在定义的时候继承自外层第一个普通函数的this，那么：</p>\\n<p><strong>当箭头函数外层没有普通函数，它的this会指向哪里</strong>？</p>\\n<p>这里跟我之前写的<a href=\"https://juejin.im/post/5b3715def265da59af40a630#heading-3\" target=\"_blank\" rel=\"noopener noreferrer\">this绑定规则<OutboundLink/></a>不太一样(不懂的可以点进去看一下),普通函数的默认绑定规则是：</p>\\n<p>在非严格模式下，默认绑定的this指向全局对象，严格模式下this指向undefined</p>\\n<p><strong>如果箭头函数外层没有普通函数继承，它this指向的规则</strong>：</p>\\n<p>经过测试，箭头函数在全局作用域下，<strong>严格模式和非严格模式下它的this都会指向<code>window</code>(全局对象)</strong>。</p>\\n<p>Tip：测试的时候发现<strong>严格模式在中途声明无效，必须在全局/函数的开头声明才会生效</strong>：</p>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code>a <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\\n<span class=\"token string\">\\'use strict\\'</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 严格模式无效 必须在一开始就声明严格模式</span>\\nb <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 不报错</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<h3 id=\"箭头函数的\"><a class=\"header-anchor\" href=\"#箭头函数的\" aria-hidden=\"true\">#</a> 箭头函数的</h3>\\n<h3 id=\"箭头函数的arguments\"><a class=\"header-anchor\" href=\"#箭头函数的arguments\" aria-hidden=\"true\">#</a> 箭头函数的arguments</h3>\\n<h4 id=\"箭头函数的this指向全局，使用arguments会报未声明的错误\"><a class=\"header-anchor\" href=\"#箭头函数的this指向全局，使用arguments会报未声明的错误\" aria-hidden=\"true\">#</a> 箭头函数的this指向全局，使用arguments会报未声明的错误</h4>\\n<p>如果箭头函数的this指向<code>window</code>(全局对象)使用<code>arguments</code>会报错，未声明<code>arguments</code>。</p>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code><span class=\"token keyword\">let</span> <span class=\"token function-variable function\">b</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arguments<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\\n<span class=\"token function\">b</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Uncaught ReferenceError: arguments is not defined</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<p>PS：如果你声明了一个全局变量为<code>arguments</code>，那就不会报错了，但是你为什么要这么做呢？</p>\\n<h4 id=\"箭头函数的this指向普通函数时-它的argumens继承于该普通函数\"><a class=\"header-anchor\" href=\"#箭头函数的this指向普通函数时-它的argumens继承于该普通函数\" aria-hidden=\"true\">#</a> 箭头函数的this指向普通函数时,它的<code>argumens</code>继承于该普通函数</h4>\\n<p>上面是第一种情况：箭头函数的this指向全局对象，会报arguments未声明的错误。</p>\\n<p>第二种情况是：箭头函数的this如果指向普通函数,它的<code>argumens</code>继承于该普通函数。</p>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">bar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arguments<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [\\'外层第二个普通函数的参数\\']</span>\\n  <span class=\"token function\">bb</span><span class=\"token punctuation\">(</span><span class=\"token string\">\\'外层第一个普通函数的参数\\'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\n  <span class=\"token keyword\">function</span> <span class=\"token function\">bb</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arguments<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [\"外层第一个普通函数的参数\"]</span>\\n    <span class=\"token keyword\">let</span> <span class=\"token function-variable function\">a</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arguments<span class=\"token punctuation\">,</span> <span class=\"token string\">\\'arguments继承this指向的那个普通函数\\'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [\"外层第一个普通函数的参数\"]</span>\\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\\n    <span class=\"token function\">a</span><span class=\"token punctuation\">(</span><span class=\"token string\">\\'箭头函数的参数\\'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// this指向bb</span>\\n  <span class=\"token punctuation\">}</span>\\n<span class=\"token punctuation\">}</span>\\n<span class=\"token function\">bar</span><span class=\"token punctuation\">(</span><span class=\"token string\">\\'外层第二个普通函数的参数\\'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br><span class=\"line-number\">11</span><br><span class=\"line-number\">12</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<p>那么应该如何来获取箭头函数不定数量的参数呢？答案是：ES6的rest参数（<code>...</code>扩展符）</p>\\n<h4 id=\"rest参数获取函数的多余参数\"><a class=\"header-anchor\" href=\"#rest参数获取函数的多余参数\" aria-hidden=\"true\">#</a> rest参数获取函数的多余参数</h4>\\n<p>这是ES6的API，用于获取函数不定数量的参数数组，这个API是用来替代<code>arguments</code>的，API用法如下：</p>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code><span class=\"token keyword\">let</span> <span class=\"token function-variable function\">a</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>first<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>abc<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>first<span class=\"token punctuation\">,</span> abc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 1 [2, 3, 4]</span>\\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\\n<span class=\"token function\">a</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<p>上面的栗子展示了，获取函数除第一个确定的参数，以及用一个变量接收其他剩余参数的示例。</p>\\n<p>也可以直接接收函数的所有参数，rest参数的用法相对于<code>arguments</code>的优点：</p>\\n<ol>\\n<li>\\n<p>箭头函数和普通函数都可以使用。</p>\\n</li>\\n<li>\\n<p>更加灵活，接收参数的数量完全自定义。</p>\\n</li>\\n<li>\\n<p>可读性更好</p>\\n<p>参数都是在函数括号中定义的，不会突然出现一个<code>arguments</code>，以前刚见到的时候，真的好奇怪了！</p>\\n</li>\\n<li>\\n<p>rest是一个真正的数组，可以使用数组的API。</p>\\n<p>因为<code>arguments</code>是一个类数组的对象，有些人以为它是真正的数组，所以会出现以下场景：</p>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code>arguments<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// arguments.push is not a function</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<p>如上，如果我们需要使用数组的API，需要使用扩展符/Array.from来将它转换成真正的数组:</p>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code>arguments <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span>arguments<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> 或者 ：arguments <span class=\"token operator\">=</span> Array<span class=\"token punctuation\">.</span><span class=\"token keyword\">from</span><span class=\"token punctuation\">(</span>arguments<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e</li>\\n</ol>\\n<p><strong>rest参数有两点需要注意</strong>：</p>\\n<ol>\\n<li>\\n<p>rest必须是函数的最后一位参数：</p>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code><span class=\"token keyword\">let</span> <span class=\"token function-variable function\">a</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>first<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>rest<span class=\"token punctuation\">,</span> three<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>first<span class=\"token punctuation\">,</span> rest<span class=\"token punctuation\">,</span>three<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 报错：Rest parameter must be last formal parameter</span>\\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\\n<span class=\"token function\">a</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e</li>\\n<li>\\n<p>函数的length属性，不包括 rest 参数</p>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>a<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>length  <span class=\"token comment\">// 0</span>\\n<span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>b<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>length  <span class=\"token comment\">// 1</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e</li>\\n</ol>\\n<p>扩展运算符还可以用于数组，这里是阮一峰老师的<a href=\"http://es6.ruanyifeng.com/#docs/array#%E6%89%A9%E5%B1%95%E8%BF%90%E7%AE%97%E7%AC%A6\" target=\"_blank\" rel=\"noopener noreferrer\">文档<OutboundLink/></a></p>\\n<p>PS：感觉这里写多了，但比较喜欢把一个知识点讲清楚...</p>\\n<h4 id=\"使用new调用箭头函数会报错\"><a class=\"header-anchor\" href=\"#使用new调用箭头函数会报错\" aria-hidden=\"true\">#</a> 使用<code>new</code>调用箭头函数会报错</h4>\\n<p>无论箭头函数的thsi指向哪里，使用<code>new</code>调用箭头函数都会报错，因为箭头函数没有<code>constructor</code></p>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code><span class=\"token keyword\">let</span> <span class=\"token function-variable function\">a</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\\n<span class=\"token keyword\">let</span> b <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span>  <span class=\"token class-name\">a</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// a is not a constructor</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<h4 id=\"箭头函数不支持new-target：\"><a class=\"header-anchor\" href=\"#箭头函数不支持new-target：\" aria-hidden=\"true\">#</a> 箭头函数不支持<code>new.target</code>：</h4>\\n<p><code>new.target</code>是ES6新引入的属性，普通函数如果通过<code>new</code>调用，<code>new.target</code>会返回该函数的引用。</p>\\n<p>此属性主要：用于确定构造函数是否为new调用的。</p>\\n<ol>\\n<li>\\n<p>箭头函数的this指向全局对象，在箭头函数中使用箭头函数会报错</p>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code><span class=\"token keyword\">let</span> <span class=\"token function-variable function\">a</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span><span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 报错：new.target 不允许在这里使用</span>\\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\\n<span class=\"token function\">a</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e</li>\\n<li>\\n<p>箭头函数的this指向普通函数，它的new.target就是指向该普通函数的引用。</p>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code><span class=\"token keyword\">new</span> <span class=\"token class-name\">bb</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\n<span class=\"token keyword\">function</span> <span class=\"token function\">bb</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n  <span class=\"token keyword\">let</span> <span class=\"token function-variable function\">a</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span><span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 指向函数bb：function bb(){...}</span>\\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\\n  <span class=\"token function\">a</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\n<span class=\"token punctuation\">}</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e</li>\\n</ol>\\n<p>更多关于<code>new.target</code>可以看一下阮一峰老师关于这部分的<a href=\"http://es6.ruanyifeng.com/?search=new.target&amp;x=0&amp;y=0#docs/class#new-target-%E5%B1%9E%E6%80%A7\" target=\"_blank\" rel=\"noopener noreferrer\">解释<OutboundLink/></a>。</p>\\n<h3 id=\"箭头函数不支持重命名函数参数-普通函数的函数参数支持重命名\"><a class=\"header-anchor\" href=\"#箭头函数不支持重命名函数参数-普通函数的函数参数支持重命名\" aria-hidden=\"true\">#</a> 箭头函数不支持重命名函数参数,普通函数的函数参数支持重命名</h3>\\n<p>如下示例，普通函数的函数参数支持重命名，后面出现的会覆盖前面的，箭头函数会抛出错误：</p>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">func1</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> arguments<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 2 [1,2]</span>\\n<span class=\"token punctuation\">}</span>\\n\\n<span class=\"token keyword\">var</span> <span class=\"token function-variable function\">func2</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span>a<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 报错：在此上下文中不允许重复参数名称</span>\\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\\n<span class=\"token function\">func1</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token function\">func2</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<h3 id=\"箭头函数相对于普通函数语法更简洁优雅：\"><a class=\"header-anchor\" href=\"#箭头函数相对于普通函数语法更简洁优雅：\" aria-hidden=\"true\">#</a> 箭头函数相对于普通函数语法更简洁优雅：</h3>\\n<p>讲道理，语法上的不同，也属与它们两个的区别！</p>\\n<ol>\\n<li>\\n<p>箭头函数都是匿名函数，并且都不用写<code>function</code></p>\\n</li>\\n<li>\\n<p>只有一个参数的时候可以省略括号:</p>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code><span class=\"token keyword\">var</span> <span class=\"token function-variable function\">f</span> <span class=\"token operator\">=</span> a <span class=\"token operator\">=></span> a<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 传入a 返回a</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e</li>\\n<li>\\n<p>函数只有一条语句时可以省略<code>{}</code>和<code>return</code></p>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code><span class=\"token keyword\">var</span> <span class=\"token function-variable function\">f</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">,</span>c<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> a<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 传入a,b,c 返回a</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e</li>\\n<li>\\n<p>简化回调函数，让你的回调函数更优雅：</p>\\n</li>\\n</ol>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n  <span class=\"token keyword\">return</span> x <span class=\"token operator\">*</span> x<span class=\"token punctuation\">;</span>\\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 普通函数写法 </span>\\n<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">=></span> x <span class=\"token operator\">*</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 箭头函数只需要一行</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<hr>\\n<h2 id=\"箭头函数的注意事项及不适用场景\"><a class=\"header-anchor\" href=\"#箭头函数的注意事项及不适用场景\" aria-hidden=\"true\">#</a> 箭头函数的注意事项及不适用场景</h2>\\n<h3 id=\"箭头函数的注意事项\"><a class=\"header-anchor\" href=\"#箭头函数的注意事项\" aria-hidden=\"true\">#</a> 箭头函数的注意事项</h3>\\n<ol>\\n<li>\\n<p>一条语句返回对象字面量，需要加括号，或者直接写成多条语句的<code>return</code>形式，</p>\\n<p>否则像func中演示的一样，花括号会被解析为多条语句的花括号，不能正确解析</p>\\n</li>\\n</ol>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code><span class=\"token keyword\">var</span> <span class=\"token function-variable function\">func1</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span> foo<span class=\"token punctuation\">:</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 想返回一个对象,花括号被当成多条语句来解析，执行后返回undefined</span>\\n<span class=\"token keyword\">var</span> <span class=\"token function-variable function\">func2</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>foo<span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 用圆括号是正确的写法</span>\\n<span class=\"token keyword\">var</span> <span class=\"token function-variable function\">func2</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\\n    foo<span class=\"token punctuation\">:</span> <span class=\"token number\">1</span> <span class=\"token comment\">// 更推荐直接当成多条语句的形式来写，可读性高</span>\\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<ol start=\"2\">\\n<li>箭头函数在参数和箭头之间不能换行！</li>\\n</ol>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code><span class=\"token keyword\">var</span> <span class=\"token function-variable function\">func</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\\n           <span class=\"token operator\">=></span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 报错： Unexpected token =></span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<ol start=\"3\">\\n<li>箭头函数的解析顺序相对靠前</li>\\n</ol>\\n<p>MDN: 虽然箭头函数中的箭头不是运算符，但箭头函数具有与常规函数不同的特殊<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Operator_Precedence\" target=\"_blank\" rel=\"noopener noreferrer\">运算符优先级<OutboundLink/></a>解析规则</p>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code><span class=\"token keyword\">let</span> a <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span> <span class=\"token operator\">||</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ok</span>\\n<span class=\"token keyword\">let</span> b <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span> <span class=\"token operator\">||</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Malformed arrow function parameter list</span>\\n<span class=\"token keyword\">let</span> c <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span> <span class=\"token operator\">||</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ok</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<h3 id=\"箭头函数不适用场景：\"><a class=\"header-anchor\" href=\"#箭头函数不适用场景：\" aria-hidden=\"true\">#</a> 箭头函数不适用场景：</h3>\\n<p>围绕两点：箭头函数的this意外指向和代码的可读性。</p>\\n<ol>\\n<li>定义字面量方法,this的意外指向。</li>\\n</ol>\\n<p>因为箭头函数的简洁</p>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code><span class=\"token keyword\">const</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\\n  array<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\\n  sum<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\\n    <span class=\"token comment\">// 根据上文学到的：外层没有普通函数this会指向全局对象</span>\\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>array<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token string\">\\'全局对象下没有array，这里会报错\\'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 找不到push方法</span>\\n  <span class=\"token punctuation\">}</span>\\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\\nobj<span class=\"token punctuation\">.</span><span class=\"token function\">sum</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<p>上述栗子使用普通函数或者ES6中的方法简写的来定义方法，就没有问题了：</p>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code><span class=\"token comment\">// 这两种写法是等价的</span>\\n<span class=\"token function\">sum</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>array<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token string\">\\'this指向obj\\'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\n<span class=\"token punctuation\">}</span>\\nsum<span class=\"token punctuation\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>array<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token string\">\\'this指向obj\\'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\n<span class=\"token punctuation\">}</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<p>还有一种情况是给普通函数的原型定义方法的时候，通常会在普通函数的外部进行定义，比如说继承/添加方法的时候。</p>\\n<p>这时候因为没有在普通函数的内部进行定义，所以this会指向其他普通函数，或者全局对象上，导致bug！</p>\\n<ol start=\"2\">\\n<li>回调函数的动态this</li>\\n</ol>\\n<p>下文是一个修改dom文本的操作，因为this指向错误，导致修改失败：</p>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code><span class=\"token keyword\">const</span> button <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\\'myButton\\'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\nbutton<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">\\'click\\'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> <span class=\"token string\">\\'Clicked button\\'</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// this又指向了全局</span>\\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<p>相信你也知道了，改成普通函数就成了。</p>\\n<ol start=\"3\">\\n<li>\\n<p>考虑代码的可读性，使用普通函数</p>\\n<ul>\\n<li>\\n<p>函数体复杂：</p>\\n<p>具体表现就是箭头函数中使用多个三元运算符号，就是不换行，非要在一行内写完，非常恶心！</p>\\n</li>\\n<li>\\n<p>行数较多</p>\\n</li>\\n<li>\\n<p>函数内部有大量操作</p>\\n</li>\\n</ul>\\n</li>\\n</ol>\\n<h2 id=\"文章内容小结：\"><a class=\"header-anchor\" href=\"#文章内容小结：\" aria-hidden=\"true\">#</a> 文章内容小结：</h2>\\n<h3 id=\"普通函数和箭头函数的区别：-2\"><a class=\"header-anchor\" href=\"#普通函数和箭头函数的区别：-2\" aria-hidden=\"true\">#</a> 普通函数和箭头函数的区别：</h3>\\n<ol>\\n<li>箭头函数没有<code>prototype</code>(原型)，所以箭头函数本身没有this</li>\\n<li>箭头函数的this在定义的时候继承自外层第一个普通函数的this。</li>\\n<li>如果箭头函数外层没有普通函数，严格模式和非严格模式下它的this都会指向<code>window</code>(全局对象)</li>\\n<li>箭头函数本身的this指向不能改变，但可以修改它要继承的对象的this。</li>\\n<li>箭头函数的this指向全局，使用arguments会报未声明的错误。</li>\\n<li>箭头函数的this指向普通函数时,它的<code>argumens</code>继承于该普通函数</li>\\n<li>使用<code>new</code>调用箭头函数会报错，因为箭头函数没有<code>constructor</code></li>\\n<li>箭头函数不支持<code>new.target</code></li>\\n<li>箭头函数不支持重命名函数参数,普通函数的函数参数支持重命名</li>\\n<li>箭头函数相对于普通函数语法更简洁优雅</li>\\n</ol>\\n<h3 id=\"箭头函数的注意事项及不适用场景-2\"><a class=\"header-anchor\" href=\"#箭头函数的注意事项及不适用场景-2\" aria-hidden=\"true\">#</a> 箭头函数的注意事项及不适用场景</h3>\\n<p><strong>箭头函数的注意事项</strong>：</p>\\n<ol>\\n<li>箭头函数一条语句返回对象字面量，需要加括号</li>\\n<li>箭头函数在参数和箭头之间不能换行</li>\\n<li>箭头函数的解析顺序相对<code>||</code>靠前</li>\\n</ol>\\n<p><strong>不适用场景</strong>：箭头函数的this意外指向和代码的可读性。</p>\\n<hr>\\n<h2 id=\"结语\"><a class=\"header-anchor\" href=\"#结语\" aria-hidden=\"true\">#</a> 结语</h2>\\n<p>呕心沥血，可以说是很全了，反正第一次问到我的时候只能想到箭头函数的this是继承而来的，以及语法上的简洁性，其他的我都不知道，希望这篇文章能够帮助各位同学学到知识。</p>\\n<p>PS：目前找工作中，求大佬们内推，中高级前端，偏JS，Vue，上海杨浦。</p>\\n<p><a href=\"http://obkoro1.com/\" target=\"_blank\" rel=\"noopener noreferrer\">博客<OutboundLink/></a>、<a href=\"http://obkoro1.com/web_accumulate/accumulate/\" target=\"_blank\" rel=\"noopener noreferrer\">前端积累文档<OutboundLink/></a>、<a href=\"https://github.com/OBKoro1/articleImg_src/blob/master/juejin/1631b6f52f7e7015.jpeg?raw=true\" target=\"_blank\" rel=\"noopener noreferrer\">公众号<OutboundLink/></a>、<a href=\"https://github.com/OBKoro1\" target=\"_blank\" rel=\"noopener noreferrer\">GitHub<OutboundLink/></a>、wx:OBkoro1、邮箱：obkoro1@foxmail.com</p>\\n<p>以上2019.03.22</p>\\n<p>参考资料：</p>\\n<p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Functions/Arrow_functions\" target=\"_blank\" rel=\"noopener noreferrer\">MDN 箭头函数<OutboundLink/></a></p>\\n<p><a href=\"http://es6.ruanyifeng.com/?search=new.target&amp;x=0&amp;y=0#docs/function#%E7%AE%AD%E5%A4%B4%E5%87%BD%E6%95%B0\" target=\"_blank\" rel=\"noopener noreferrer\">阮一峰-ES6入门<OutboundLink/></a></p>\\n<p><a href=\"https://zhuanlan.zhihu.com/p/26540168\" target=\"_blank\" rel=\"noopener noreferrer\">什么时候你不能使用箭头函数？<OutboundLink/></a>\\n\\x3c!-- 特殊字符串：用于修改/删除markdown的结尾提示语-OBKoro1 --\\x3e</p>\\n<h3 id=\"点个star支持我一下\"><a class=\"header-anchor\" href=\"#点个star支持我一下\" aria-hidden=\"true\">#</a> 点个<a href=\"https://github.com/OBKoro1/web_accumulate\" target=\"_blank\" rel=\"noopener noreferrer\">Star<OutboundLink/></a>支持我一下~</h3>\\n\\x3c!-- \\'特殊字符串：用于删除编译后的issue组件-OBKoro1 --\\x3e\\n'},{key:\"v-6193f44fbf264\",path:\"/accumulate/JS/JS%E5%9F%BA%E7%A1%80-call%E5%92%8Capply%E8%BF%98%E6%9C%89bind.html\",lastUpdated:1566813337e3,title:\"JS基础系列-重新认识call apply bind\",headers:[{level:3,title:\"目录\",slug:\"目录\"},{level:2,title:\"call,apply,bind的基本介绍\",slug:\"call-apply-bind的基本介绍\"},{level:3,title:\"调用call/apply/bind的必须是个函数\",slug:\"调用call-apply-bind的必须是个函数\"},{level:3,title:\"作用：\",slug:\"作用：\"},{level:3,title:\"如何不弄混call和apply\",slug:\"如何不弄混call和apply\"},{level:3,title:\"区别：\",slug:\"区别：\"},{level:2,title:\"call/apply/bind的核心理念：借用方法\",slug:\"call-apply-bind的核心理念：借用方法\"},{level:2,title:\"call和apply的应用场景：\",slug:\"call和apply的应用场景：\"},{level:2,title:\"call、apply，该用哪个？、\",slug:\"call、apply，该用哪个？、\"},{level:2,title:\"bind的应用场景：\",slug:\"bind的应用场景：\"},{level:2,title:\"中高级面试题-手写call/apply、bind：\",slug:\"中高级面试题-手写call-apply、bind：\"},{level:3,title:\"使用Symbol临时储存函数\",slug:\"使用symbol临时储存函数\"},{level:3,title:\"2019/8/26更新：修复函数没有prototype的情况\",slug:\"_2019-8-26更新：修复函数没有prototype的情况\"},{level:3,title:\"对象缩写方法没有prototype\",slug:\"对象缩写方法没有prototype\"},{level:3,title:\"小结\",slug:\"小结\"},{level:3,title:\"点个Star支持我一下~\",slug:\"点个star支持我一下\"}],excerpt:'<h1 id=\"js基础系列-重新认识call-apply-bind\"><a class=\"header-anchor\" href=\"#js基础系列-重新认识call-apply-bind\" aria-hidden=\"true\">#</a> JS基础系列-重新认识call apply bind</h1>\\n<p>函数原型链中的 apply，call 和 bind 方法是 JavaScript 中相当重要的概念，与 this 关键字密切相关，相当一部分人对它们的理解还是比较浅显，所谓js基础扎实，绕不开这些基础常用的API，这次让我们来彻底掌握它们吧！</p>\\n<h3 id=\"目录\"><a class=\"header-anchor\" href=\"#目录\" aria-hidden=\"true\">#</a> 目录</h3>\\n<ol>\\n<li>call,apply,bind的基本介绍</li>\\n<li>call/apply/bind的核心理念：借用方法</li>\\n<li>call和apply的应用场景</li>\\n<li>bind的应用场景</li>\\n<li>中高级面试题：手写call/apply、bind</li>\\n</ol>\\n<hr>\\n<h2 id=\"call-apply-bind的基本介绍\"><a class=\"header-anchor\" href=\"#call-apply-bind的基本介绍\" aria-hidden=\"true\">#</a> call,apply,bind的基本介绍</h2>\\n<h4 id=\"语法：\"><a class=\"header-anchor\" href=\"#语法：\" aria-hidden=\"true\">#</a> 语法：</h4>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code>fun<span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>thisArg<span class=\"token punctuation\">,</span> param1<span class=\"token punctuation\">,</span> param2<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span><span class=\"token punctuation\">)</span>\\nfun<span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span>thisArg<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>param1<span class=\"token punctuation\">,</span>param2<span class=\"token punctuation\">,</span><span class=\"token operator\">...</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\\nfun<span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span>thisArg<span class=\"token punctuation\">,</span> param1<span class=\"token punctuation\">,</span> param2<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span><span class=\"token punctuation\">)</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<h4 id=\"返回值：\"><a class=\"header-anchor\" href=\"#返回值：\" aria-hidden=\"true\">#</a> 返回值：</h4>\\n<p>call/apply：<code>fun</code>执行的结果\\nbind：返回<code>fun</code>的拷贝，并拥有指定的<code>this</code>值和初始参数</p>\\n<h4 id=\"参数\"><a class=\"header-anchor\" href=\"#参数\" aria-hidden=\"true\">#</a> 参数</h4>\\n<p><code>thisArg</code>(可选):</p>\\n<ol>\\n<li><strong><code>fun</code>的<code>this</code>指向<code>thisArg</code>对象</strong></li>\\n<li>非严格模式下：thisArg指定为null，undefined，fun中的this指向window对象.</li>\\n<li>严格模式下：<code>fun</code>的<code>this</code>为<code>undefined</code></li>\\n<li>值为原始值(数字，字符串，布尔值)的this会指向该原始值的自动包装对象，如 String、Number、Boolean</li>\\n</ol>\\n<p><code>param1,param2</code>(可选): 传给<code>fun</code>的参数。</p>\\n<ol>\\n<li>如果param不传或为 null/undefined，则表示不需要传入任何参数.</li>\\n<li>apply第二个参数为数组，数组内的值为传给<code>fun</code>的参数。</li>\\n</ol>\\n<h3 id=\"调用call-apply-bind的必须是个函数\"><a class=\"header-anchor\" href=\"#调用call-apply-bind的必须是个函数\" aria-hidden=\"true\">#</a> 调用<code>call</code>/<code>apply</code>/<code>bind</code>的必须是个函数</h3>\\n<p>call、apply和bind是挂在Function对象上的三个方法,只有函数才有这些方法。</p>\\n<p>只要是函数就可以，比如: <code>Object.prototype.toString</code>就是个函数，我们经常看到这样的用法：<code>Object.prototype.toString.call(data)</code></p>\\n<h3 id=\"作用：\"><a class=\"header-anchor\" href=\"#作用：\" aria-hidden=\"true\">#</a> 作用：</h3>\\n<p>改变函数执行时的this指向，目前所有关于它们的运用，都是基于这一点来进行的。</p>\\n<h3 id=\"如何不弄混call和apply\"><a class=\"header-anchor\" href=\"#如何不弄混call和apply\" aria-hidden=\"true\">#</a> 如何不弄混call和apply</h3>\\n<blockquote>\\n<p>弄混这两个API的不在少数，不要小看这个问题，记住下面的这个方法就好了。</p>\\n</blockquote>\\n<p><code>apply</code>是以<code>a</code>开头，它传给<code>fun</code>的参数是<code>Array</code>，也是以<code>a</code>开头的。</p>\\n<h3 id=\"区别：\"><a class=\"header-anchor\" href=\"#区别：\" aria-hidden=\"true\">#</a> 区别：</h3>\\n<h4 id=\"call与apply的唯一区别\"><a class=\"header-anchor\" href=\"#call与apply的唯一区别\" aria-hidden=\"true\">#</a> call与apply的唯一区别</h4>\\n<p>传给<code>fun</code>的参数写法不同：</p>\\n<ul>\\n<li><code>apply</code>是第2个参数，这个参数是一个数组：传给<code>fun</code>参数都写在数组中。</li>\\n<li><code>call</code>从第2~n的参数都是传给<code>fun</code>的。</li>\\n</ul>\\n<h4 id=\"call-apply与bind的区别\"><a class=\"header-anchor\" href=\"#call-apply与bind的区别\" aria-hidden=\"true\">#</a> call/apply与bind的区别</h4>\\n<p><strong>执行</strong>：</p>\\n<ul>\\n<li>call/apply改变了函数的this上下文后马上<strong>执行该函数</strong></li>\\n<li>bind则是返回改变了上下文后的函数,<strong>不执行该函数</strong></li>\\n</ul>\\n<p><strong>返回值</strong>:</p>\\n<ul>\\n<li>call/apply 返回<code>fun</code>的执行结果</li>\\n<li>bind返回fun的拷贝，并指定了fun的this指向，保存了fun的参数。</li>\\n</ul>\\n<p>返回值这段在下方bind应用中有详细的示例解析。</p>\\n<h2 id=\"call-apply-bind的核心理念：借用方法\"><a class=\"header-anchor\" href=\"#call-apply-bind的核心理念：借用方法\" aria-hidden=\"true\">#</a> call/apply/bind的核心理念：借用方法</h2>\\n<p>看到一个非常棒的<a href=\"https://juejin.im/post/5c493086f265da6115111ce4\" target=\"_blank\" rel=\"noopener noreferrer\">例子<OutboundLink/></a>：</p>\\n<p>生活中：</p>\\n<p>平时没时间做饭的我，周末想给孩子炖个腌笃鲜尝尝。但是没有适合的锅，而我又不想出去买。所以就问邻居借了一个锅来用，这样既达到了目的，又节省了开支，一举两得。</p>\\n<p>程序中：</p>\\n<p>A对象有个方法，B对象因为某种原因也需要用到同样的方法，那么这时候我们是单独为 B 对象扩展一个方法呢，还是借用一下 A 对象的方法呢？</p>\\n<p>当然是借用 A 对象的方法啦，既达到了目的，又节省了内存。</p>\\n<p><strong>这就是call/apply/bind的核心理念：借用方法</strong>。</p>\\n<p><strong>借助已实现的方法，改变方法中数据的this指向，减少重复代码，节省内存。</strong></p>\\n<h2 id=\"call和apply的应用场景：\"><a class=\"header-anchor\" href=\"#call和apply的应用场景：\" aria-hidden=\"true\">#</a> call和apply的应用场景：</h2>\\n<blockquote>\\n<p>这些应用场景，多加体会就可以发现它们的理念都是：借用方法</p>\\n</blockquote>\\n<ol>\\n<li>判断数据类型：</li>\\n</ol>\\n<p><code>Object.prototype.toString</code>用来判断类型再合适不过，借用它我们几乎可以判断所有类型的数据：</p>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">isType</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">,</span> type<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n    <span class=\"token keyword\">const</span> typeObj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\\n        <span class=\"token string\">\\'[object String]\\'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\\'string\\'</span><span class=\"token punctuation\">,</span>\\n        <span class=\"token string\">\\'[object Number]\\'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\\'number\\'</span><span class=\"token punctuation\">,</span>\\n        <span class=\"token string\">\\'[object Boolean]\\'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\\'boolean\\'</span><span class=\"token punctuation\">,</span>\\n        <span class=\"token string\">\\'[object Null]\\'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\\'null\\'</span><span class=\"token punctuation\">,</span>\\n        <span class=\"token string\">\\'[object Undefined]\\'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\\'undefined\\'</span><span class=\"token punctuation\">,</span>\\n        <span class=\"token string\">\\'[object Object]\\'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\\'object\\'</span><span class=\"token punctuation\">,</span>\\n        <span class=\"token string\">\\'[object Array]\\'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\\'array\\'</span><span class=\"token punctuation\">,</span>\\n        <span class=\"token string\">\\'[object Function]\\'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\\'function\\'</span><span class=\"token punctuation\">,</span>\\n        <span class=\"token string\">\\'[object Date]\\'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\\'date\\'</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// Object.prototype.toString.call(new Date())</span>\\n        <span class=\"token string\">\\'[object RegExp]\\'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\\'regExp\\'</span><span class=\"token punctuation\">,</span>\\n        <span class=\"token string\">\\'[object Map]\\'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\\'map\\'</span><span class=\"token punctuation\">,</span>\\n        <span class=\"token string\">\\'[object Set]\\'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\\'set\\'</span><span class=\"token punctuation\">,</span>\\n        <span class=\"token string\">\\'[object HTMLDivElement]\\'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\\'dom\\'</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// document.querySelector(\\'#app\\')</span>\\n        <span class=\"token string\">\\'[object WeakMap]\\'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\\'weakMap\\'</span><span class=\"token punctuation\">,</span>\\n        <span class=\"token string\">\\'[object Window]\\'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\\'window\\'</span><span class=\"token punctuation\">,</span>  <span class=\"token comment\">// Object.prototype.toString.call(window)</span>\\n        <span class=\"token string\">\\'[object Error]\\'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\\'error\\'</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// new Error(\\'1\\')</span>\\n        <span class=\"token string\">\\'[object Arguments]\\'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\\'arguments\\'</span><span class=\"token punctuation\">,</span>\\n    <span class=\"token punctuation\">}</span>\\n    <span class=\"token keyword\">let</span> name <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>toString<span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 借用Object.prototype.toString()获取数据类型</span>\\n    <span class=\"token keyword\">let</span> typeName <span class=\"token operator\">=</span> typeObj<span class=\"token punctuation\">[</span>name<span class=\"token punctuation\">]</span> <span class=\"token operator\">||</span> <span class=\"token string\">\\'未知类型\\'</span> <span class=\"token comment\">// 匹配数据类型</span>\\n    <span class=\"token keyword\">return</span> typeName <span class=\"token operator\">===</span> type <span class=\"token comment\">// 判断该数据类型是否为传入的类型</span>\\n<span class=\"token punctuation\">}</span>\\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>\\n    <span class=\"token function\">isType</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\\'object\\'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// true</span>\\n    <span class=\"token function\">isType</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\\'array\\'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// true</span>\\n    <span class=\"token function\">isType</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\\'object\\'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// false</span>\\n    <span class=\"token function\">isType</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\\'date\\'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// true</span>\\n<span class=\"token punctuation\">)</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br><span class=\"line-number\">11</span><br><span class=\"line-number\">12</span><br><span class=\"line-number\">13</span><br><span class=\"line-number\">14</span><br><span class=\"line-number\">15</span><br><span class=\"line-number\">16</span><br><span class=\"line-number\">17</span><br><span class=\"line-number\">18</span><br><span class=\"line-number\">19</span><br><span class=\"line-number\">20</span><br><span class=\"line-number\">21</span><br><span class=\"line-number\">22</span><br><span class=\"line-number\">23</span><br><span class=\"line-number\">24</span><br><span class=\"line-number\">25</span><br><span class=\"line-number\">26</span><br><span class=\"line-number\">27</span><br><span class=\"line-number\">28</span><br><span class=\"line-number\">29</span><br><span class=\"line-number\">30</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<ol start=\"2\">\\n<li>类数组借用数组的方法：</li>\\n</ol>\\n<p>类数组因为不是真正的数组所有没有数组类型上自带的种种方法，所以我们需要去借用数组的方法。</p>\\n<p>比如借用数组的push方法：</p>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code><span class=\"token keyword\">var</span> arrayLike <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\\n  <span class=\"token number\">0</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\\'OB\\'</span><span class=\"token punctuation\">,</span>\\n  <span class=\"token number\">1</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\\'Koro1\\'</span><span class=\"token punctuation\">,</span>\\n  length<span class=\"token punctuation\">:</span> <span class=\"token number\">2</span>\\n<span class=\"token punctuation\">}</span>\\nArray<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>push<span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>arrayLike<span class=\"token punctuation\">,</span> <span class=\"token string\">\\'添加元素1\\'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\\'添加元素2\\'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arrayLike<span class=\"token punctuation\">)</span> <span class=\"token comment\">// {\"0\":\"OB\",\"1\":\"Koro1\",\"2\":\"添加元素1\",\"3\":\"添加元素2\",\"length\":4}</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<ol start=\"3\">\\n<li>apply获取数组最大值最小值：</li>\\n</ol>\\n<p>apply直接传递数组做要调用方法的参数，也省一步展开数组，比如使用<code>Math.max</code>、<code>Math.min</code>来获取数组的最大值/最小值:</p>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code><span class=\"token keyword\">const</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">15</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">12</span><span class=\"token punctuation\">,</span> <span class=\"token number\">13</span><span class=\"token punctuation\">,</span> <span class=\"token number\">16</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\\n<span class=\"token keyword\">const</span> max <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span>max<span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span>Math<span class=\"token punctuation\">,</span> arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 16</span>\\n<span class=\"token keyword\">const</span> min <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span>min<span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span>Math<span class=\"token punctuation\">,</span> arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 6</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<ol start=\"4\">\\n<li>继承</li>\\n</ol>\\n<p>ES5的继承也都是通过借用父类的构造方法来实现父类方法/属性的继承：</p>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code><span class=\"token comment\">// 父类</span>\\n<span class=\"token keyword\">function</span> <span class=\"token function\">supFather</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span>\\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>colors <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\\'red\\'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\\'blue\\'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\\'green\\'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 复杂类型</span>\\n<span class=\"token punctuation\">}</span>\\nsupFather<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">sayName</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span>age<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">,</span> <span class=\"token string\">\\'age\\'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\\n<span class=\"token comment\">// 子类</span>\\n<span class=\"token keyword\">function</span> <span class=\"token function\">sub</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> age<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n    <span class=\"token comment\">// 借用父类的方法：修改它的this指向,赋值父类的构造函数里面方法、属性到子类上</span>\\n    supFather<span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> age<span class=\"token punctuation\">;</span>\\n<span class=\"token punctuation\">}</span>\\n<span class=\"token comment\">// 重写子类的prototype，修正constructor指向</span>\\n<span class=\"token keyword\">function</span> <span class=\"token function\">inheritPrototype</span><span class=\"token punctuation\">(</span>sonFn<span class=\"token punctuation\">,</span> fatherFn<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n    sonFn<span class=\"token punctuation\">.</span>prototype <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span>fatherFn<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 继承父类的属性以及方法</span>\\n    sonFn<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>constructor <span class=\"token operator\">=</span> sonFn<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 修正constructor指向到继承的那个函数上</span>\\n<span class=\"token punctuation\">}</span>\\n<span class=\"token function\">inheritPrototype</span><span class=\"token punctuation\">(</span>sub<span class=\"token punctuation\">,</span> supFather<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\nsub<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">sayAge</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>age<span class=\"token punctuation\">,</span> <span class=\"token string\">\\'foo\\'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\\n<span class=\"token comment\">// 实例化子类，可以在实例上找到属性、方法</span>\\n<span class=\"token keyword\">const</span> instance1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">sub</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"OBKoro1\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">24</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\n<span class=\"token keyword\">const</span> instance2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">sub</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"小明\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">18</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\ninstance1<span class=\"token punctuation\">.</span>colors<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token string\">\\'black\\'</span><span class=\"token punctuation\">)</span>\\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>instance1<span class=\"token punctuation\">)</span> <span class=\"token comment\">// {\"name\":\"OBKoro1\",\"colors\":[\"red\",\"blue\",\"green\",\"black\"],\"age\":24}</span>\\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>instance2<span class=\"token punctuation\">)</span> <span class=\"token comment\">// {\"name\":\"小明\",\"colors\":[\"red\",\"blue\",\"green\"],\"age\":18} </span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br><span class=\"line-number\">11</span><br><span class=\"line-number\">12</span><br><span class=\"line-number\">13</span><br><span class=\"line-number\">14</span><br><span class=\"line-number\">15</span><br><span class=\"line-number\">16</span><br><span class=\"line-number\">17</span><br><span class=\"line-number\">18</span><br><span class=\"line-number\">19</span><br><span class=\"line-number\">20</span><br><span class=\"line-number\">21</span><br><span class=\"line-number\">22</span><br><span class=\"line-number\">23</span><br><span class=\"line-number\">24</span><br><span class=\"line-number\">25</span><br><span class=\"line-number\">26</span><br><span class=\"line-number\">27</span><br><span class=\"line-number\">28</span><br><span class=\"line-number\">29</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<p>类似的应用场景还有很多，就不赘述了，关键在于它们借用方法的理念，不理解的话多看几遍。</p>\\n<h2 id=\"call、apply，该用哪个？、\"><a class=\"header-anchor\" href=\"#call、apply，该用哪个？、\" aria-hidden=\"true\">#</a> call、apply，该用哪个？、</h2>\\n<p>call,apply的效果完全一样，它们的区别也在于</p>\\n<ul>\\n<li><strong>参数数量/顺序确定就用call，参数数量/顺序不确定的话就用apply</strong>。</li>\\n<li>考虑可读性：参数数量不多就用call，参数数量比较多的话，把参数整合成数组，使用apply。</li>\\n<li>参数集合已经是一个数组的情况，用apply，比如上文的获取数组最大值/最小值。</li>\\n</ul>\\n<p>参数数量/顺序不确定的话就用apply，比如以下示例：</p>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code><span class=\"token keyword\">const</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\\n    age<span class=\"token punctuation\">:</span> <span class=\"token number\">24</span><span class=\"token punctuation\">,</span>\\n    name<span class=\"token punctuation\">:</span> <span class=\"token string\">\\'OBKoro1\\'</span><span class=\"token punctuation\">,</span>\\n<span class=\"token punctuation\">}</span>\\n<span class=\"token keyword\">const</span> obj2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\\n    age<span class=\"token punctuation\">:</span> <span class=\"token number\">777</span>\\n<span class=\"token punctuation\">}</span>\\n<span class=\"token function\">callObj</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">,</span> handle<span class=\"token punctuation\">)</span>\\n<span class=\"token function\">callObj</span><span class=\"token punctuation\">(</span>obj2<span class=\"token punctuation\">,</span> handle<span class=\"token punctuation\">)</span>\\n<span class=\"token comment\">// 根据某些条件来决定要传递参数的数量、以及顺序</span>\\n<span class=\"token keyword\">function</span> <span class=\"token function\">callObj</span><span class=\"token punctuation\">(</span>thisAge<span class=\"token punctuation\">,</span> fn<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n    <span class=\"token keyword\">let</span> params <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>thisAge<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n        params<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>thisAge<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span>\\n    <span class=\"token punctuation\">}</span>\\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>thisAge<span class=\"token punctuation\">.</span>age<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n        params<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>thisAge<span class=\"token punctuation\">.</span>age<span class=\"token punctuation\">)</span>\\n    <span class=\"token punctuation\">}</span>\\n    fn<span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span>thisAge<span class=\"token punctuation\">,</span> params<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 数量和顺序不确定 不能使用call</span>\\n<span class=\"token punctuation\">}</span>\\n<span class=\"token keyword\">function</span> <span class=\"token function\">handle</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>params<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\\'params\\'</span><span class=\"token punctuation\">,</span> params<span class=\"token punctuation\">)</span> <span class=\"token comment\">// do some thing</span>\\n<span class=\"token punctuation\">}</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br><span class=\"line-number\">11</span><br><span class=\"line-number\">12</span><br><span class=\"line-number\">13</span><br><span class=\"line-number\">14</span><br><span class=\"line-number\">15</span><br><span class=\"line-number\">16</span><br><span class=\"line-number\">17</span><br><span class=\"line-number\">18</span><br><span class=\"line-number\">19</span><br><span class=\"line-number\">20</span><br><span class=\"line-number\">21</span><br><span class=\"line-number\">22</span><br><span class=\"line-number\">23</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<h2 id=\"bind的应用场景：\"><a class=\"header-anchor\" href=\"#bind的应用场景：\" aria-hidden=\"true\">#</a> bind的应用场景：</h2>\\n<h4 id=\"_1-保存函数参数：\"><a class=\"header-anchor\" href=\"#_1-保存函数参数：\" aria-hidden=\"true\">#</a> 1. 保存函数参数：</h4>\\n<p>首先来看下一道经典的面试题：</p>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n   <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 依次输出：6 6 6 6 6</span>\\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> i <span class=\"token operator\">*</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\n<span class=\"token punctuation\">}</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<p>造成这个现象的原因是等到<code>setTimeout</code>异步执行时,<code>i</code>已经变成6了。</p>\\n<p>关于js事件循环机制不理解的同学，可以看我这篇博客：<a href=\"https://juejin.im/post/5b24b116e51d4558a65fdb70\" target=\"_blank\" rel=\"noopener noreferrer\">Js 的事件循环(Event Loop)机制以及实例讲解<OutboundLink/></a></p>\\n<p>那么如何使他输出: 1,2,3,4,5呢？</p>\\n<p>方法有很多：</p>\\n<ul>\\n<li>闭包, 保存变量</li>\\n</ul>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n    <span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n        <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n            console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\\'闭包:\\'</span><span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 依次输出：1 2 3 4 5</span>\\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> i <span class=\"token operator\">*</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\n<span class=\"token punctuation\">}</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<p>在这里创建了一个闭包，每次循环都会把<code>i</code>的最新值传进去，然后被闭包保存起来。</p>\\n<ul>\\n<li><strong>bind</strong></li>\\n</ul>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n    <span class=\"token comment\">// 缓存参数</span>\\n    <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\\'bind\\'</span><span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 依次输出：1 2 3 4 5</span>\\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> i <span class=\"token operator\">*</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\n<span class=\"token punctuation\">}</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<p><strong>实际上这里也用了闭包，我们知道bind会返回一个函数，这个函数也是闭包</strong>。</p>\\n<p>它保存了函数的this指向、初始参数，每次<code>i</code>的变更都会被bind的闭包存起来，所以输出1-5。</p>\\n<p>具体细节，下面有个手写bind方法，研究一下，就能搞懂了。</p>\\n<ul>\\n<li><code>let</code></li>\\n</ul>\\n<p>用<code>let</code>声明<code>i</code>也可以输出1-5: 因为<code>let</code>是块级作用域,所以每次都会创建一个新的变量,所以<code>setTimeout</code>每次读的值都是不同的,<a href=\"https://segmentfault.com/q/1010000007541743\" target=\"_blank\" rel=\"noopener noreferrer\">详解<OutboundLink/></a>。</p>\\n<h4 id=\"_2-回调函数this丢失问题：\"><a class=\"header-anchor\" href=\"#_2-回调函数this丢失问题：\" aria-hidden=\"true\">#</a> 2. 回调函数this丢失问题：</h4>\\n<p>这是一个常见的问题，下面是我在开发VSCode插件处理<code>webview</code>通信时，遇到的真实问题，一开始以为VSCode的API哪里出问题，调试了一番才发现是<code>this</code>指向丢失的问题。</p>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code><span class=\"token keyword\">class</span> <span class=\"token class-name\">Page</span> <span class=\"token punctuation\">{</span>\\n    <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span>callBack<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>className <span class=\"token operator\">=</span> <span class=\"token string\">\\'Page\\'</span>\\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>MessageCallBack <span class=\"token operator\">=</span> callBack <span class=\"token comment\">// </span>\\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">MessageCallBack</span><span class=\"token punctuation\">(</span><span class=\"token string\">\\'发给注册页面的信息\\'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 执行PageA的回调函数</span>\\n    <span class=\"token punctuation\">}</span>\\n<span class=\"token punctuation\">}</span>\\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">PageA</span> <span class=\"token punctuation\">{</span>\\n    <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>className <span class=\"token operator\">=</span> <span class=\"token string\">\\'PageA\\'</span>\\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>pageClass <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Page</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleMessage<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 注册页面 传递回调函数 问题在这里</span>\\n    <span class=\"token punctuation\">}</span>\\n    <span class=\"token comment\">// 与页面通信回调</span>\\n    <span class=\"token function\">handleMessage</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\\'处理通信\\'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>className<span class=\"token punctuation\">,</span> msg<span class=\"token punctuation\">)</span> <span class=\"token comment\">//  \\'Page\\' this指向错误</span>\\n    <span class=\"token punctuation\">}</span>\\n<span class=\"token punctuation\">}</span>\\n<span class=\"token keyword\">new</span> <span class=\"token class-name\">PageA</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br><span class=\"line-number\">11</span><br><span class=\"line-number\">12</span><br><span class=\"line-number\">13</span><br><span class=\"line-number\">14</span><br><span class=\"line-number\">15</span><br><span class=\"line-number\">16</span><br><span class=\"line-number\">17</span><br><span class=\"line-number\">18</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<h4 id=\"回调函数this为何会丢失？\"><a class=\"header-anchor\" href=\"#回调函数this为何会丢失？\" aria-hidden=\"true\">#</a> 回调函数<code>this</code>为何会丢失？</h4>\\n<p>显然声明的时候不会出现问题，执行回调函数的时候也不可能出现问题。</p>\\n<p>问题出在传递回调函数的时候：</p>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>pageClass <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Page</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleMessage<span class=\"token punctuation\">)</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<p>因为传递过去的<code>this.handleMessage</code>是一个函数内存地址，没有上下文对象，也就是说该函数没有绑定它的<code>this</code>指向。</p>\\n<p>那它的<code>this</code>指向于它所应用的<a href=\"https://juejin.im/post/5b3715def265da59af40a630#comment\" target=\"_blank\" rel=\"noopener noreferrer\">绑定规则<OutboundLink/></a>：</p>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code><span class=\"token keyword\">class</span> <span class=\"token class-name\">Page</span> <span class=\"token punctuation\">{</span>\\n    <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span>callBack<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>className <span class=\"token operator\">=</span> <span class=\"token string\">\\'Page\\'</span>\\n        <span class=\"token comment\">// callBack() // 直接执行的话 由于class 内部是严格模式，所以this 实际指向的是 undefined</span>\\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>MessageCallBack <span class=\"token operator\">=</span> callBack <span class=\"token comment\">// 回调函数的this 隐式绑定到class page</span>\\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">MessageCallBack</span><span class=\"token punctuation\">(</span><span class=\"token string\">\\'发给注册页面的信息\\'</span><span class=\"token punctuation\">)</span>\\n    <span class=\"token punctuation\">}</span>\\n<span class=\"token punctuation\">}</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<p>既然知道问题了，那我们只要绑定回调函数的<code>this</code>指向为<code>PageA</code>就解决问题了。</p>\\n<p><strong>回调函数this丢失的解决方案</strong>：</p>\\n<ol>\\n<li><code>bind</code>绑定回调函数的<code>this</code>指向：</li>\\n</ol>\\n<p>这是典型bind的应用场景, 绑定this指向，用做回调函数。</p>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>pageClass <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Page</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleMessage<span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 绑定回调函数的this指向</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<p>PS： 这也是为什么<code>react</code>的<code>render</code>函数在绑定回调函数的时候，也要使用bind绑定一下<code>this</code>的指向，也是因为同样的问题以及原理。</p>\\n<ol start=\"2\">\\n<li>箭头函数绑定this指向</li>\\n</ol>\\n<p>箭头函数的this指向定义的时候外层第一个普通函数的this，在这里指的是class类：<code>PageA</code></p>\\n<p>这块内容，可以看下我之前写的博客：<a href=\"https://juejin.im/post/5c76972af265da2dc4538b64#heading-3\" target=\"_blank\" rel=\"noopener noreferrer\">详解箭头函数和普通函数的区别以及箭头函数的注意事项、不适用场景<OutboundLink/></a></p>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>pageClass <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Page</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">handleMessage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 箭头函数绑定this指向</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<h2 id=\"中高级面试题-手写call-apply、bind：\"><a class=\"header-anchor\" href=\"#中高级面试题-手写call-apply、bind：\" aria-hidden=\"true\">#</a> 中高级面试题-手写call/apply、bind：</h2>\\n<p>在大厂的面试中，手写实现call,apply,bind(特别是bind)一直是比较高频的面试题，在这里我们也一起来实现一下这几个函数。</p>\\n<h4 id=\"你能手写实现一个call吗？\"><a class=\"header-anchor\" href=\"#你能手写实现一个call吗？\" aria-hidden=\"true\">#</a> 你能手写实现一个<code>call</code>吗？</h4>\\n<p><strong>思路</strong></p>\\n<ol>\\n<li>根据call的规则设置上下文对象,也就是<code>this</code>的指向。</li>\\n<li>通过设置<code>context</code>的属性,将函数的this指向<a href=\"https://juejin.im/post/5b3715def265da59af40a630#heading-4\" target=\"_blank\" rel=\"noopener noreferrer\">隐式绑定<OutboundLink/></a>到context上</li>\\n<li>通过隐式绑定执行函数并传递参数。</li>\\n<li>删除临时属性，返回函数执行结果</li>\\n</ol>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code>Function<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">myCall</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>arr<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>context <span class=\"token operator\">===</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> context <span class=\"token operator\">===</span> undefined<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n       <span class=\"token comment\">// 指定为 null 和 undefined 的 this 值会自动指向全局对象(浏览器中为window)</span>\\n        context <span class=\"token operator\">=</span> window \\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\\n        context <span class=\"token operator\">=</span> <span class=\"token function\">Object</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 值为原始值（数字，字符串，布尔值）的 this 会指向该原始值的实例对象</span>\\n    <span class=\"token punctuation\">}</span>\\n    <span class=\"token keyword\">const</span> specialPrototype <span class=\"token operator\">=</span> <span class=\"token function\">Symbol</span><span class=\"token punctuation\">(</span><span class=\"token string\">\\'特殊属性Symbol\\'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 用于临时储存函数</span>\\n    context<span class=\"token punctuation\">[</span>specialPrototype<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 函数的this指向隐式绑定到context上</span>\\n    <span class=\"token keyword\">let</span> result <span class=\"token operator\">=</span> context<span class=\"token punctuation\">[</span>specialPrototype<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 通过隐式绑定执行函数并传递参数</span>\\n    <span class=\"token keyword\">delete</span> context<span class=\"token punctuation\">[</span>specialPrototype<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 删除上下文对象的属性</span>\\n    <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 返回函数执行结果</span>\\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br><span class=\"line-number\">11</span><br><span class=\"line-number\">12</span><br><span class=\"line-number\">13</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<h4 id=\"判断函数的上下文对象：\"><a class=\"header-anchor\" href=\"#判断函数的上下文对象：\" aria-hidden=\"true\">#</a> 判断函数的上下文对象：</h4>\\n<p>很多人判断函数上下文对象，只是简单的以<code>context</code>是否为false来判断,比如：</p>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code><span class=\"token comment\">// 判断函数上下文绑定到`window`不够严谨</span>\\ncontext <span class=\"token operator\">=</span> context <span class=\"token operator\">?</span> <span class=\"token function\">Object</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">:</span> window<span class=\"token punctuation\">;</span> \\ncontext <span class=\"token operator\">=</span> context <span class=\"token operator\">||</span> window<span class=\"token punctuation\">;</span> \\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<p>经过测试,以下三种为false的情况,函数的上下文对象都会绑定到<code>window</code>上：</p>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code><span class=\"token comment\">// 网上的其他绑定函数上下文对象的方案: context = context || window; </span>\\n<span class=\"token keyword\">function</span> <span class=\"token function\">handle</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>params<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>test <span class=\"token operator\">=</span> <span class=\"token string\">\\'handle\\'</span>\\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\\'params\\'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>params<span class=\"token punctuation\">)</span> <span class=\"token comment\">// do some thing</span>\\n<span class=\"token punctuation\">}</span>\\nhandle<span class=\"token punctuation\">.</span><span class=\"token function\">elseCall</span><span class=\"token punctuation\">(</span><span class=\"token string\">\\'\\'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// window</span>\\nhandle<span class=\"token punctuation\">.</span><span class=\"token function\">elseCall</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// window</span>\\nhandle<span class=\"token punctuation\">.</span><span class=\"token function\">elseCall</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// window</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<p>而<code>call</code>则将函数的上下文对象会绑定到这些原始值的实例对象上：</p>\\n<p><img src=\"https://user-gold-cdn.xitu.io/2019/8/4/16c5bdb742a5f2b0?w=474&amp;h=92&amp;f=png&amp;s=18011\" alt=\"原始值的实例对象\"></p>\\n<p>所以正确的解决方案，应该是像我上面那么做：</p>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code><span class=\"token comment\">// 正确判断函数上下文对象</span>\\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>context <span class=\"token operator\">===</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> context <span class=\"token operator\">===</span> undefined<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n       <span class=\"token comment\">// 指定为 null 和 undefined 的 this 值会自动指向全局对象(浏览器中为window)</span>\\n        context <span class=\"token operator\">=</span> window \\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\\n        context <span class=\"token operator\">=</span> <span class=\"token function\">Object</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 值为原始值（数字，字符串，布尔值）的 this 会指向该原始值的实例对象</span>\\n    <span class=\"token punctuation\">}</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<h3 id=\"使用symbol临时储存函数\"><a class=\"header-anchor\" href=\"#使用symbol临时储存函数\" aria-hidden=\"true\">#</a> 使用<code>Symbol</code>临时储存函数</h3>\\n<p>尽管之前用的属性是<code>testFn</code>但不得不承认，还是有跟上下文对象的原属性冲突的风险,经网友提醒使用<code>Symbol</code>就不会出现冲突了。</p>\\n<p>考虑兼容的话,还是用尽量特殊的属性，比如带上自己的ID：<code>OBKoro1TestFn</code>。</p>\\n<h4 id=\"你能手写实现一个apply吗？\"><a class=\"header-anchor\" href=\"#你能手写实现一个apply吗？\" aria-hidden=\"true\">#</a> 你能手写实现一个<code>apply</code>吗？</h4>\\n<p>思路：</p>\\n<ol>\\n<li>传递给函数的参数处理，不太一样，其他部分跟<code>call</code>一样。</li>\\n<li><code>apply</code>接受第二个参数为类数组对象, 这里用了JavaScript权威指南中判断是否为类数组对象的方法。</li>\\n</ol>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code>Function<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">myApply</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>context <span class=\"token operator\">===</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> context <span class=\"token operator\">===</span> undefined<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n        context <span class=\"token operator\">=</span> window <span class=\"token comment\">// 指定为 null 和 undefined 的 this 值会自动指向全局对象(浏览器中为window)</span>\\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\\n        context <span class=\"token operator\">=</span> <span class=\"token function\">Object</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 值为原始值（数字，字符串，布尔值）的 this 会指向该原始值的实例对象</span>\\n    <span class=\"token punctuation\">}</span>\\n    <span class=\"token comment\">// JavaScript权威指南判断是否为类数组对象</span>\\n    <span class=\"token keyword\">function</span> <span class=\"token function\">isArrayLike</span><span class=\"token punctuation\">(</span>o<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>o <span class=\"token operator\">&amp;&amp;</span>                                    <span class=\"token comment\">// o不是null、undefined等</span>\\n            <span class=\"token keyword\">typeof</span> o <span class=\"token operator\">===</span> <span class=\"token string\">\\'object\\'</span> <span class=\"token operator\">&amp;&amp;</span>                <span class=\"token comment\">// o是对象</span>\\n            <span class=\"token function\">isFinite</span><span class=\"token punctuation\">(</span>o<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span>                   <span class=\"token comment\">// o.length是有限数值</span>\\n            o<span class=\"token punctuation\">.</span>length <span class=\"token operator\">>=</span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span>                        <span class=\"token comment\">// o.length为非负值</span>\\n            o<span class=\"token punctuation\">.</span>length <span class=\"token operator\">===</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">floor</span><span class=\"token punctuation\">(</span>o<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span>    <span class=\"token comment\">// o.length是整数</span>\\n            o<span class=\"token punctuation\">.</span>length <span class=\"token operator\">&lt;</span> <span class=\"token number\">4294967296</span><span class=\"token punctuation\">)</span>                  <span class=\"token comment\">// o.length &lt; 2^32</span>\\n            <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span>\\n        <span class=\"token keyword\">else</span>\\n            <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span>\\n    <span class=\"token punctuation\">}</span>\\n    <span class=\"token keyword\">const</span> specialPrototype <span class=\"token operator\">=</span> <span class=\"token function\">Symbol</span><span class=\"token punctuation\">(</span><span class=\"token string\">\\'特殊属性Symbol\\'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 用于临时储存函数</span>\\n    context<span class=\"token punctuation\">[</span>specialPrototype<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 隐式绑定this指向到context上</span>\\n    <span class=\"token keyword\">let</span> args <span class=\"token operator\">=</span> arguments<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 获取参数数组</span>\\n    <span class=\"token keyword\">let</span> result\\n    <span class=\"token comment\">// 处理传进来的第二个参数</span>\\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n        <span class=\"token comment\">// 是否传递第二个参数</span>\\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>Array<span class=\"token punctuation\">.</span><span class=\"token function\">isArray</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span><span class=\"token function\">isArrayLike</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TypeError</span><span class=\"token punctuation\">(</span><span class=\"token string\">\\'myApply 第二个参数不为数组并且不为类数组对象抛出错误\\'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\\n            args <span class=\"token operator\">=</span> Array<span class=\"token punctuation\">.</span><span class=\"token keyword\">from</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 转为数组</span>\\n            result <span class=\"token operator\">=</span> context<span class=\"token punctuation\">[</span>specialPrototype<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 执行函数并展开数组，传递函数参数</span>\\n        <span class=\"token punctuation\">}</span>\\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\\n        result <span class=\"token operator\">=</span> context<span class=\"token punctuation\">[</span>specialPrototype<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 执行函数 </span>\\n    <span class=\"token punctuation\">}</span>\\n    <span class=\"token keyword\">delete</span> context<span class=\"token punctuation\">[</span>specialPrototype<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 删除上下文对象的属性</span>\\n    <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 返回函数执行结果</span>\\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br><span class=\"line-number\">11</span><br><span class=\"line-number\">12</span><br><span class=\"line-number\">13</span><br><span class=\"line-number\">14</span><br><span class=\"line-number\">15</span><br><span class=\"line-number\">16</span><br><span class=\"line-number\">17</span><br><span class=\"line-number\">18</span><br><span class=\"line-number\">19</span><br><span class=\"line-number\">20</span><br><span class=\"line-number\">21</span><br><span class=\"line-number\">22</span><br><span class=\"line-number\">23</span><br><span class=\"line-number\">24</span><br><span class=\"line-number\">25</span><br><span class=\"line-number\">26</span><br><span class=\"line-number\">27</span><br><span class=\"line-number\">28</span><br><span class=\"line-number\">29</span><br><span class=\"line-number\">30</span><br><span class=\"line-number\">31</span><br><span class=\"line-number\">32</span><br><span class=\"line-number\">33</span><br><span class=\"line-number\">34</span><br><span class=\"line-number\">35</span><br><span class=\"line-number\">36</span><br><span class=\"line-number\">37</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<h4 id=\"你能手写实现一个bind吗？\"><a class=\"header-anchor\" href=\"#你能手写实现一个bind吗？\" aria-hidden=\"true\">#</a> 你能手写实现一个<code>bind</code>吗？</h4>\\n<p><strong>划重点</strong>：</p>\\n<p>手写<code>bind</code>是大厂中的一个高频的面试题，如果面试的中高级前端，只是能说出它们的区别，用法并不能脱颖而出，理解要有足够的深度才能抱得offer归！</p>\\n<p><strong>思路</strong></p>\\n<ol>\\n<li>拷贝源函数:\\n<ul>\\n<li>通过变量储存源函数</li>\\n<li>使用<code>Object.create</code>复制源函数的prototype给fToBind</li>\\n</ul>\\n</li>\\n<li>返回拷贝的函数</li>\\n<li>调用拷贝的函数：\\n<ul>\\n<li>new调用判断：通过<code>instanceof</code>判断函数是否通过<code>new</code>调用，来决定绑定的<code>context</code></li>\\n<li>绑定this+传递参数</li>\\n<li>返回源函数的执行结果</li>\\n</ul>\\n</li>\\n</ol>\\n<h3 id=\"_2019-8-26更新：修复函数没有prototype的情况\"><a class=\"header-anchor\" href=\"#_2019-8-26更新：修复函数没有prototype的情况\" aria-hidden=\"true\">#</a> 2019/8/26更新：修复函数没有<code>prototype</code>的情况</h3>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code>Function<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">myBind</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span>objThis<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>params<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n    <span class=\"token keyword\">const</span> thisFn <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 存储源函数以及上方的params(函数参数)</span>\\n    <span class=\"token comment\">// 对返回的函数 secondParams 二次传参</span>\\n    <span class=\"token keyword\">let</span> <span class=\"token function-variable function\">fToBind</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>secondParams<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n        <span class=\"token keyword\">const</span> isNew <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span> <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">fToBind</span> <span class=\"token comment\">// this是否是fToBind的实例 也就是返回的fToBind是否通过new调用</span>\\n        <span class=\"token keyword\">const</span> context <span class=\"token operator\">=</span> isNew <span class=\"token operator\">?</span> <span class=\"token keyword\">this</span> <span class=\"token punctuation\">:</span> <span class=\"token function\">Object</span><span class=\"token punctuation\">(</span>objThis<span class=\"token punctuation\">)</span> <span class=\"token comment\">// new调用就绑定到this上,否则就绑定到传入的objThis上</span>\\n        <span class=\"token keyword\">return</span> thisFn<span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>params<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>secondParams<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 用call调用源函数绑定this的指向并传递参数,返回执行结果</span>\\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>thisFn<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n        <span class=\"token comment\">// 复制源函数的prototype给fToBind 一些情况下函数没有prototype，比如箭头函数</span>\\n        fToBind<span class=\"token punctuation\">.</span>prototype <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span>thisFn<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\n    <span class=\"token punctuation\">}</span>\\n    <span class=\"token keyword\">return</span> fToBind<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 返回拷贝的函数</span>\\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br><span class=\"line-number\">11</span><br><span class=\"line-number\">12</span><br><span class=\"line-number\">13</span><br><span class=\"line-number\">14</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<h3 id=\"对象缩写方法没有prototype\"><a class=\"header-anchor\" href=\"#对象缩写方法没有prototype\" aria-hidden=\"true\">#</a> 对象缩写方法没有<code>prototype</code></h3>\\n<p>箭头函数没有<code>prototype</code>，这个我知道的，可是<code>getInfo2</code>就是一个缩写，为什么没有<code>prototype</code>。</p>\\n<p>谷歌/<code>stack overflow</code>都没有找到原因，有大佬指点迷津一下吗？？</p>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code><span class=\"token keyword\">var</span> student <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\\n    getInfo<span class=\"token punctuation\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> isRegistered<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\\'this1\\'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span>\\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\\n    <span class=\"token function\">getInfo2</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> isRegistered<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\\'this2\\'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 没有prototype</span>\\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\\n    getInfo3<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> isRegistered<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\\'this3\\'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 没有prototype</span>\\n    <span class=\"token punctuation\">}</span>\\n<span class=\"token punctuation\">}</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br><span class=\"line-number\">11</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<h3 id=\"小结\"><a class=\"header-anchor\" href=\"#小结\" aria-hidden=\"true\">#</a> 小结</h3>\\n<p>本来以为这篇会写的很快，结果断断续续的写了好几天，终于把这三个API相关知识介绍清楚了，希望大家看完之后，面试的时候再遇到这个问题，就可以海陆空全方位的装逼了^_^\\n\\x3c!-- 特殊字符串：用于修改/删除markdown的结尾提示语-OBKoro1 --\\x3e</p>\\n<h3 id=\"点个star支持我一下\"><a class=\"header-anchor\" href=\"#点个star支持我一下\" aria-hidden=\"true\">#</a> 点个<a href=\"https://github.com/OBKoro1/web_accumulate\" target=\"_blank\" rel=\"noopener noreferrer\">Star<OutboundLink/></a>支持我一下~</h3>\\n\\x3c!-- \\'特殊字符串：用于删除编译后的issue组件-OBKoro1 --\\x3e\\n'},{key:\"v-4bdbe92686fae\",path:\"/accumulate/JS/JS%E5%9F%BA%E7%A1%80-%E7%BB%A7%E6%89%BF.html\",lastUpdated:1569210246e3,title:\"JS基础-深入浅出继承\",headers:[{level:2,title:\"JS基础-深入浅出继承\",slug:\"js基础-深入浅出继承\"},{level:3,title:\"何为继承？\",slug:\"何为继承？\"},{level:3,title:\"原型链继承(new)：\",slug:\"原型链继承-new-：\"},{level:3,title:\"借用构造函数继承(call)\",slug:\"借用构造函数继承-call\"},{level:3,title:\"组合继承(call+new)\",slug:\"组合继承-call-new\"},{level:3,title:\"原型式继承(Object.create())\",slug:\"原型式继承-object-create\"},{level:3,title:\"寄生式继承(封装继承过程)\",slug:\"寄生式继承-封装继承过程\"},{level:3,title:\"寄生组合式继承(call+寄生式封装)\",slug:\"寄生组合式继承-call-寄生式封装\"},{level:3,title:\"ES6 extends继承：\",slug:\"es6-extends继承：\"},{level:2,title:\"扩展：\",slug:\"扩展：\"},{level:3,title:\"为什么要修正constructor指向？\",slug:\"为什么要修正constructor指向？\"},{level:3,title:\"小结\",slug:\"小结\"},{level:3,title:\"点个Star支持我一下~\",slug:\"点个star支持我一下\"}],excerpt:'<h2 id=\"js基础-深入浅出继承\"><a class=\"header-anchor\" href=\"#js基础-深入浅出继承\" aria-hidden=\"true\">#</a> JS基础-深入浅出继承</h2>\\n<p>上篇文章详细解析了原型、原型链的相关知识点，这篇文章讲的是和原型链有密切关联的继承，它是前端基础中很重要的一个知识点，它对于代码复用来说非常有用，本篇将详细解析JS中的各种继承方式和优缺点进行，希望看完本篇文章能够对继承以及相关概念理解的更为透彻。</p>\\n<h4 id=\"本篇文章需要先理解原型、原型链以及call的相关知识：\"><a class=\"header-anchor\" href=\"#本篇文章需要先理解原型、原型链以及call的相关知识：\" aria-hidden=\"true\">#</a> 本篇文章需要先理解原型、原型链以及<code>call</code>的相关知识：</h4>\\n<p><a href=\"https://juejin.im/post/5d622f14f265da03a1486408\" target=\"_blank\" rel=\"noopener noreferrer\">JS基础-函数、对象和原型、原型链的关系<OutboundLink/></a></p>\\n<p><a href=\"https://juejin.im/post/5d469e0851882544b85c32ef\" target=\"_blank\" rel=\"noopener noreferrer\">js基础-面试官想知道你有多理解call,apply,bind？<OutboundLink/></a></p>\\n<h3 id=\"何为继承？\"><a class=\"header-anchor\" href=\"#何为继承？\" aria-hidden=\"true\">#</a> 何为继承？</h3>\\n<blockquote>\\n<p><a href=\"https://zh.wikipedia.org/wiki/%E7%BB%A7%E6%89%BF_(%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6)\" target=\"_blank\" rel=\"noopener noreferrer\">维基百科<OutboundLink/></a>：继承可以使得子类具有父类别的各种属性和方法，而不需要再次编写相同的代码。</p>\\n</blockquote>\\n<p><strong>继承是一个类从另一个类获取方法和属性的过程</strong>。</p>\\n<p>PS：或者是多个类</p>\\n<h4 id=\"js实现继承的原理\"><a class=\"header-anchor\" href=\"#js实现继承的原理\" aria-hidden=\"true\">#</a> JS实现继承的原理</h4>\\n<blockquote>\\n<p>记住这个概念，你会发现JS中的继承都是在实现这个目的，差异是它们的实现方式不同。</p>\\n</blockquote>\\n<p><strong>复制父类的属性和方法来重写子类原型对象</strong>。</p>\\n<h3 id=\"原型链继承-new-：\"><a class=\"header-anchor\" href=\"#原型链继承-new-：\" aria-hidden=\"true\">#</a> 原型链继承(new)：</h3>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">fatherFn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>some <span class=\"token operator\">=</span> <span class=\"token string\">\\'父类的this属性\\'</span><span class=\"token punctuation\">;</span>\\n<span class=\"token punctuation\">}</span>\\nfatherFn<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>fatherFnSome <span class=\"token operator\">=</span>  <span class=\"token string\">\\'父类原型对象的属性或者方法\\'</span><span class=\"token punctuation\">;</span>\\n<span class=\"token comment\">// 子类</span>\\n<span class=\"token keyword\">function</span> <span class=\"token function\">sonFn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>obkoro1 <span class=\"token operator\">=</span> <span class=\"token string\">\\'子类的this属性\\'</span><span class=\"token punctuation\">;</span>\\n<span class=\"token punctuation\">}</span>\\n<span class=\"token comment\">// 核心步骤：重写子类的原型对象</span>\\nsonFn<span class=\"token punctuation\">.</span>prototype <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">fatherFn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 将fatherFn的实例赋值给sonFn的prototype</span>\\nsonFn<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>sonFnSome <span class=\"token operator\">=</span> <span class=\"token string\">\\'子类原型对象的属性或者方法\\'</span> <span class=\"token comment\">// 子类的属性/方法声明在后面,避免被覆盖</span>\\n<span class=\"token comment\">// 实例化子类</span>\\n<span class=\"token keyword\">const</span> sonFnInstance <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">sonFn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\\'子类的实例：\\'</span><span class=\"token punctuation\">,</span> sonFnInstance<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br><span class=\"line-number\">11</span><br><span class=\"line-number\">12</span><br><span class=\"line-number\">13</span><br><span class=\"line-number\">14</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<h4 id=\"原型链子类实例\"><a class=\"header-anchor\" href=\"#原型链子类实例\" aria-hidden=\"true\">#</a> 原型链子类实例</h4>\\n<p><img src=\"https://github.com/OBKoro1/articleImg_src/blob/master/2019/2019_9_16_inherit_1.png?raw=true\" alt=\"原型链子类实例\"></p>\\n<h4 id=\"原型链继承获取父类的属性和方法\"><a class=\"header-anchor\" href=\"#原型链继承获取父类的属性和方法\" aria-hidden=\"true\">#</a> 原型链继承获取父类的属性和方法</h4>\\n<ol>\\n<li><code>fatherFn</code>通过this声明的属性/方法都会绑定在<code>new</code>期间创建的新对象上。</li>\\n<li>新对象的原型是<code>father.prototype</code>,通过原型链的属性查找到<code>father.prototype</code>的属性和方法。</li>\\n</ol>\\n<h4 id=\"理解new做了什么：\"><a class=\"header-anchor\" href=\"#理解new做了什么：\" aria-hidden=\"true\">#</a> 理解<code>new</code>做了什么：</h4>\\n<blockquote>\\n<p>new在本文出现多次，new也是JS基础中很重要的一块内容，很多知识点会涉及到new，不太理解的要多看几遍。</p>\\n</blockquote>\\n<ol>\\n<li>创建一个全新的对象。</li>\\n<li>这个新对象的原型(<code>__proto__</code>)指向函数的<code>prototype</code>对象。</li>\\n<li>执行函数，函数的this会绑定在新创建的对象上。</li>\\n<li>如果函数没有返回其他对象(包括数组、函数、日期对象等)，那么会自动返回这个新对象。</li>\\n<li>返回的那个对象为构造函数的实例。</li>\\n</ol>\\n<h4 id=\"构造调用函数返回其他对象\"><a class=\"header-anchor\" href=\"#构造调用函数返回其他对象\" aria-hidden=\"true\">#</a> 构造调用函数返回其他对象</h4>\\n<blockquote>\\n<p><strong>返回其他对象会导致获取不到构造函数的实例，很容易因此引起意外的问题</strong>！</p>\\n</blockquote>\\n<p><strong>我们知道了<code>fatherFn</code>的<code>this</code>和<code>prototype</code>的属性/方法都跟<code>new</code>期间创建的新对象有关系</strong>。</p>\\n<p><strong>如果在父类中返回了其他对象(<code>new</code>的第四点)，其他对象没有父类的<code>this</code>和<code>prototype</code>，因此导致原型链继承失败</strong>。</p>\\n<p>我们来测试一下，修改原型链继承中的父类<code>fatherFn</code>：</p>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">fatherFn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>some <span class=\"token operator\">=</span> <span class=\"token string\">\\'父类的this属性\\'</span><span class=\"token punctuation\">;</span>\\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\\'new fatherFn 期间生成的对象\\'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span>\\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span> <span class=\"token string\">\\'数组对象\\'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\\'函数对象\\'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\\'日期对象\\'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\\'正则对象\\'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\\'等等等\\'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\\'都不会返回new期间创建的新对象\\'</span> <span class=\"token punctuation\">]</span>\\n<span class=\"token punctuation\">}</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<p><img src=\"/img/remote/1460000020462550?w=1256&amp;h=800\" alt=\"原型链继承返回其他对象,将导致原型链继承失败\"></p>\\n<p>PS： 本文中构造调用函数都不能返回其他函数，下文不再提及该点。</p>\\n<h4 id=\"不要使用对象字面量的形式创建原型方法：\"><a class=\"header-anchor\" href=\"#不要使用对象字面量的形式创建原型方法：\" aria-hidden=\"true\">#</a> 不要使用对象字面量的形式创建原型方法：</h4>\\n<blockquote>\\n<p>这种方式很容易在不经意间，清除/覆盖了原型对象原有的属性/方法，不该为了稍微简便一点，而使用这种写法。</p>\\n</blockquote>\\n<p>有些人在需要在原型对象上创建多个属性和方法，会使用对象字面量的形式来创建：</p>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code>sonFn<span class=\"token punctuation\">.</span>prototype <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">fatherFn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\n<span class=\"token comment\">// 子类的prototype被清空后 重新赋值, 导致上一行代码失效</span>\\nsonFn<span class=\"token punctuation\">.</span>prototype <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\\n    sonFnSome<span class=\"token punctuation\">:</span> <span class=\"token string\">\\'子类原型对象的属性\\'</span><span class=\"token punctuation\">,</span>\\n    one<span class=\"token punctuation\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\\n    two<span class=\"token punctuation\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\\n    three<span class=\"token punctuation\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\\n<span class=\"token punctuation\">}</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<p>还有一种常见的做法，该方式会导致函数原型对象的属性<code>constructor</code>丢失：</p>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\\ntest<span class=\"token punctuation\">.</span>prototype <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\\n    <span class=\"token operator\">...</span>\\n<span class=\"token punctuation\">}</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<h4 id=\"原型链继承的缺点\"><a class=\"header-anchor\" href=\"#原型链继承的缺点\" aria-hidden=\"true\">#</a> 原型链继承的缺点</h4>\\n<ol>\\n<li>\\n<p><strong>父类使用<code>this</code>声明的属性被所有实例共享</strong></p>\\n<p>原因是：实例化的父类(<code>sonFn.prototype = new fatherFn()</code>)是一次性赋值到子类实例的原型(<code>sonFn.prototype</code>)上，它会将父类通过<code>this</code>声明的属性也在赋值到<code>sonFn.prototype</code>上。</p>\\n</li>\\n</ol>\\n<blockquote>\\n<p>值得一提的是：很多博客中说，引用类型的属性被所有实例共享，通常会用数组来举例，实际上数组以及其他父类通过<code>this</code>声明的属性也只是通过<a href=\"https://juejin.im/post/5d622f14f265da03a1486408#heading-11\" target=\"_blank\" rel=\"noopener noreferrer\">原型链查找<OutboundLink/></a>去获取子类实例的原型(<code>sonFn.prototype</code>)上的值。</p>\\n</blockquote>\\n<ol start=\"2\">\\n<li>创建子类实例时，无法向父类构造函数传参，不够灵活。</li>\\n</ol>\\n<p>这种模式父类的属性、方法一开始就是定义好的，无法向父类传参，不够灵活。</p>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code>sonFn<span class=\"token punctuation\">.</span>prototype <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">fatherFn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<h3 id=\"借用构造函数继承-call\"><a class=\"header-anchor\" href=\"#借用构造函数继承-call\" aria-hidden=\"true\">#</a> 借用构造函数继承(call)</h3>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code> <span class=\"token keyword\">function</span> <span class=\"token function\">fatherFn</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>arr<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>some <span class=\"token operator\">=</span> <span class=\"token string\">\\'父类的this属性\\'</span><span class=\"token punctuation\">;</span>\\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>params <span class=\"token operator\">=</span> arr <span class=\"token comment\">// 父类的参数</span>\\n<span class=\"token punctuation\">}</span>\\nfatherFn<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>fatherFnSome <span class=\"token operator\">=</span> <span class=\"token string\">\\'父类原型对象的属性或者方法\\'</span><span class=\"token punctuation\">;</span>\\n<span class=\"token keyword\">function</span> <span class=\"token function\">sonFn</span><span class=\"token punctuation\">(</span>fatherParams<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>sonParams<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n  fatherFn<span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>fatherParams<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 核心步骤: 将fatherFn的this指向sonFn的this对象上</span>\\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>obkoro1 <span class=\"token operator\">=</span> <span class=\"token string\">\\'子类的this属性\\'</span><span class=\"token punctuation\">;</span>\\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>sonParams <span class=\"token operator\">=</span> sonParams<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 子类的参数</span>\\n<span class=\"token punctuation\">}</span>\\nsonFn<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>sonFnSome <span class=\"token operator\">=</span> <span class=\"token string\">\\'子类原型对象的属性或者方法\\'</span>\\n<span class=\"token keyword\">let</span> fatherParamsArr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\\'父类的参数1\\'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\\'父类的参数2\\'</span><span class=\"token punctuation\">]</span>\\n<span class=\"token keyword\">let</span> sonParamsArr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\\'子类的参数1\\'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\\'子类的参数2\\'</span><span class=\"token punctuation\">]</span>\\n<span class=\"token keyword\">const</span> sonFnInstance <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">sonFn</span><span class=\"token punctuation\">(</span>fatherParamsArr<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>sonParamsArr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 实例化子类</span>\\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\\'借用构造函数子类实例\\'</span><span class=\"token punctuation\">,</span> sonFnInstance<span class=\"token punctuation\">)</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br><span class=\"line-number\">11</span><br><span class=\"line-number\">12</span><br><span class=\"line-number\">13</span><br><span class=\"line-number\">14</span><br><span class=\"line-number\">15</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<h4 id=\"借用构造函数继承的子类实例\"><a class=\"header-anchor\" href=\"#借用构造函数继承的子类实例\" aria-hidden=\"true\">#</a> 借用构造函数继承的子类实例</h4>\\n<p><img src=\"/img/remote/1460000020462551?w=852&amp;h=360\" alt=\"借用构造函数继承的子类实例\"></p>\\n<h4 id=\"借用构造函数继承做了什么？\"><a class=\"header-anchor\" href=\"#借用构造函数继承做了什么？\" aria-hidden=\"true\">#</a> 借用构造函数继承做了什么？</h4>\\n<p>声明类，组织参数等，只是辅助的上下文代码，核心是借用构造函数使用<code>call</code>做了什么：</p>\\n<p><strong>一经调用<code>call/apply</code>它们就会立即执行函数，并在函数执行时改变函数的<code>this</code>指向</strong></p>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code>fatherFn<span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>fatherParams<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<ol>\\n<li>在子类中使用<code>call</code>调用父类，<code>fatherFn</code>将会被立即执行，并且将<code>fatherFn</code>函数的this指向<code>sonFn</code>的<code>this</code>。</li>\\n<li>因为函数执行了，所以<code>fatherFn</code>使用this声明的函数都会被<strong>声明到<code>sonFn</code>的<code>this</code>对象</strong>下。</li>\\n<li>实例化子类，this将指向<code>new</code>期间创建的新对象，返回该新对象。</li>\\n<li>对<code>fatherFn.prototype</code>没有任何操作，无法继承。</li>\\n</ol>\\n<p>该对象的属性为：子类和父类声明的<code>this</code>属性/方法，它的原型是</p>\\n<p>PS: 关于call/apply/bind的更多细节，推荐查看我的博客：<a href=\"https://juejin.im/post/5d469e0851882544b85c32ef\" target=\"_blank\" rel=\"noopener noreferrer\">js基础-面试官想知道你有多理解call,apply,bind？[不看后悔系列]<OutboundLink/></a></p>\\n<h4 id=\"借用构造函数继承的优缺点\"><a class=\"header-anchor\" href=\"#借用构造函数继承的优缺点\" aria-hidden=\"true\">#</a> 借用构造函数继承的优缺点</h4>\\n<p>优点：</p>\\n<ol>\\n<li>可以向父类传递参数</li>\\n<li>解决了原型链继承中：父类属性使用<code>this</code>声明的属性会在所有实例共享的问题。</li>\\n</ol>\\n<p>缺点：</p>\\n<ol>\\n<li>只能继承父类通过<code>this</code>声明的属性/方法，不能继承父类<code>prototype</code>上的属性/方法。</li>\\n<li>父类方法无法复用：因为无法继承父类的<code>prototype</code>，所以每次子类实例化都要执行父类函数，重新声明父类<code>this</code>里所定义的方法，因此方法无法复用。</li>\\n</ol>\\n<h3 id=\"组合继承-call-new\"><a class=\"header-anchor\" href=\"#组合继承-call-new\" aria-hidden=\"true\">#</a> 组合继承(call+new)</h3>\\n<blockquote>\\n<p><strong>原理</strong>：使用原型链继承(<code>new</code>)将<code>this</code>和<code>prototype</code>声明的属性/方法继承至子类的<code>prototype</code>上，使用借用构造函数来继承父类通过<code>this</code>声明属性和方法至子类实例的属性上。</p>\\n</blockquote>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">fatherFn</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>arr<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>some <span class=\"token operator\">=</span> <span class=\"token string\">\\'父类的this属性\\'</span><span class=\"token punctuation\">;</span>\\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>params <span class=\"token operator\">=</span> arr <span class=\"token comment\">// 父类的参数</span>\\n<span class=\"token punctuation\">}</span>\\nfatherFn<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>fatherFnSome <span class=\"token operator\">=</span> <span class=\"token string\">\\'父类原型对象的属性或者方法\\'</span><span class=\"token punctuation\">;</span>\\n<span class=\"token keyword\">function</span> <span class=\"token function\">sonFn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n  fatherFn<span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\\'借用构造继承\\'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\\'第二次调用\\'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 借用构造继承: 继承父类通过this声明属性和方法至子类实例的属性上</span>\\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>obkoro1 <span class=\"token operator\">=</span> <span class=\"token string\">\\'子类的this属性\\'</span><span class=\"token punctuation\">;</span>\\n<span class=\"token punctuation\">}</span>\\nsonFn<span class=\"token punctuation\">.</span>prototype <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">fatherFn</span><span class=\"token punctuation\">(</span><span class=\"token string\">\\'原型链继承\\'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\\'第一次调用\\'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 原型链继承: 将`this`和`prototype`声明的属性/方法继承至子类的`prototype`上</span>\\nsonFn<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>sonFnSome <span class=\"token operator\">=</span> <span class=\"token string\">\\'子类原型对象的属性或者方法\\'</span>\\n<span class=\"token keyword\">const</span> sonFnInstance <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">sonFn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\\'组合继承子类实例\\'</span><span class=\"token punctuation\">,</span> sonFnInstance<span class=\"token punctuation\">)</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br><span class=\"line-number\">11</span><br><span class=\"line-number\">12</span><br><span class=\"line-number\">13</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<h4 id=\"组合继承的子类实例\"><a class=\"header-anchor\" href=\"#组合继承的子类实例\" aria-hidden=\"true\">#</a> 组合继承的子类实例</h4>\\n<p><img src=\"https://github.com/OBKoro1/articleImg_src/blob/master/2019/2019_9_16_inherit_4.png?raw=true\" alt=\"组合继承的子类实例\"></p>\\n<p>从图中可以看到<code>fatherFn</code>通过<code>this</code>声明的属性/方法，在子类实例的属性上，和其原型上都复制了一份，原因在代码中也有注释：</p>\\n<ol>\\n<li>原型链继承: 父类通过<code>this</code>和<code>prototype</code>声明的属性/方法继承至子类的<code>prototype</code>上。</li>\\n<li>借用构造继承: 父类通过this声明属性和方法继承至子类实例的属性上。</li>\\n</ol>\\n<h4 id=\"组合继承的优缺点\"><a class=\"header-anchor\" href=\"#组合继承的优缺点\" aria-hidden=\"true\">#</a> 组合继承的优缺点</h4>\\n<p>优点：</p>\\n<p>完整继承(又不是不能用)，解决了：</p>\\n<ol>\\n<li>父类通过<code>this</code>声明属性/方法被子类实例共享的问题(原型链继承的问题)\\n每次实例化子类将重新初始化父类通过<code>this</code>声明的属性，实例根据原型链查找规则，每次都会</li>\\n<li>父类通过<code>prototype</code>声明的属性/方法无法继承的问题(借用构造函数的问题)。</li>\\n</ol>\\n<p>缺点：</p>\\n<ol>\\n<li>两次调用父类函数(<code>new fatherFn()</code>和<code>fatherFn.call(this)</code>)，造成一定的性能损耗。</li>\\n<li>因调用两次父类,导致父类通过<code>this</code>声明的属性/方法，生成两份的问题。</li>\\n<li>原型链上下文丢失：子类和父类通过prototype声明的属性/方法都存在于子类的prototype上</li>\\n</ol>\\n<h3 id=\"原型式继承-object-create\"><a class=\"header-anchor\" href=\"#原型式继承-object-create\" aria-hidden=\"true\">#</a> 原型式继承(<code>Object.create()</code>)</h3>\\n<h4 id=\"继承对象原型-object-create-实现\"><a class=\"header-anchor\" href=\"#继承对象原型-object-create-实现\" aria-hidden=\"true\">#</a> 继承对象原型-Object.create()实现</h4>\\n<p>以下是<code>Object.create()</code>的模拟实现，使用<code>Object.create()</code>可以达成同样的效果，基本上现在都是使用<code>Object.create()</code>来做对象的原型继承。</p>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">cloneObject</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\\n  <span class=\"token keyword\">function</span> <span class=\"token constant\">F</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\\n  <span class=\"token constant\">F</span><span class=\"token punctuation\">.</span>prototype <span class=\"token operator\">=</span> obj<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 将被继承的对象作为空函数的prototype</span>\\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">F</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 返回new期间创建的新对象,此对象的原型为被继承的对象, 通过原型链查找可以拿到被继承对象的属性</span>\\n<span class=\"token punctuation\">}</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<p>PS：上面<code>Object.create()</code>实现原理可以记一下，有些公司可能会让你讲一下它的实现原理。</p>\\n<h4 id=\"例子：\"><a class=\"header-anchor\" href=\"#例子：\" aria-hidden=\"true\">#</a> 例子：</h4>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code><span class=\"token keyword\">let</span> oldObj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> p<span class=\"token punctuation\">:</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\\n<span class=\"token keyword\">let</span> newObj <span class=\"token operator\">=</span> <span class=\"token function\">cloneObject</span><span class=\"token punctuation\">(</span>oldObj<span class=\"token punctuation\">)</span>\\noldObj<span class=\"token punctuation\">.</span>p <span class=\"token operator\">=</span> <span class=\"token number\">2</span>\\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\\'oldObj newObj\\'</span><span class=\"token punctuation\">,</span> oldObj<span class=\"token punctuation\">,</span> newObj<span class=\"token punctuation\">)</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<p><img src=\"/img/remote/1460000020462553?w=477&amp;h=75\" alt=\"原型式继承\"></p>\\n<h4 id=\"原型式继承优缺点：\"><a class=\"header-anchor\" href=\"#原型式继承优缺点：\" aria-hidden=\"true\">#</a> 原型式继承优缺点：</h4>\\n<p>优点： 兼容性好，最简单的对象继承。</p>\\n<p>缺点：</p>\\n<ol>\\n<li>因为旧对象(<code>oldObj</code>)是实例对象(<code>newObj</code>)的原型，多个实例共享被继承对象的属性，存在篡改的可能。</li>\\n<li>无法传参</li>\\n</ol>\\n<h3 id=\"寄生式继承-封装继承过程\"><a class=\"header-anchor\" href=\"#寄生式继承-封装继承过程\" aria-hidden=\"true\">#</a> 寄生式继承(封装继承过程)</h3>\\n<blockquote>\\n<p>创建一个<strong>仅用于封装继承过程的函数，该函数在内部以某种方式来增强对象</strong>，最后返回对象。</p>\\n</blockquote>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">createAnother</span><span class=\"token punctuation\">(</span>original<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\\n  <span class=\"token keyword\">var</span> clone <span class=\"token operator\">=</span> <span class=\"token function\">cloneObject</span><span class=\"token punctuation\">(</span>original<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 继承一个对象 返回新函数</span>\\n  <span class=\"token comment\">// do something 以某种方式来增强对象</span>\\n  clone<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">some</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 方法</span>\\n  clone<span class=\"token punctuation\">.</span>obkoro1 <span class=\"token operator\">=</span> <span class=\"token string\">\\'封装继承过程\\'</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 属性</span>\\n  <span class=\"token keyword\">return</span> clone<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 返回这个对象</span>\\n<span class=\"token punctuation\">}</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<p>使用场景：专门为对象来做某种固定方式的增强。</p>\\n<h3 id=\"寄生组合式继承-call-寄生式封装\"><a class=\"header-anchor\" href=\"#寄生组合式继承-call-寄生式封装\" aria-hidden=\"true\">#</a> 寄生组合式继承(call+寄生式封装)</h3>\\n<h4 id=\"寄生组合式继承原理：\"><a class=\"header-anchor\" href=\"#寄生组合式继承原理：\" aria-hidden=\"true\">#</a> 寄生组合式继承原理：</h4>\\n<ol>\\n<li>使用借用构造函数(<code>call</code>)来<strong>继承父类this声明的属性/方法</strong></li>\\n<li>通过寄生式封装函数设置父类prototype为子类prototype的原型来继<strong>承父类的prototype声明的属性/方法</strong>。</li>\\n</ol>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">fatherFn</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>arr<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>some <span class=\"token operator\">=</span> <span class=\"token string\">\\'父类的this属性\\'</span><span class=\"token punctuation\">;</span>\\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>params <span class=\"token operator\">=</span> arr <span class=\"token comment\">// 父类的参数</span>\\n<span class=\"token punctuation\">}</span>\\nfatherFn<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>fatherFnSome <span class=\"token operator\">=</span> <span class=\"token string\">\\'父类原型对象的属性或者方法\\'</span><span class=\"token punctuation\">;</span>\\n<span class=\"token keyword\">function</span> <span class=\"token function\">sonFn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n  fatherFn<span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\\'借用构造继承\\'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 核心1 借用构造继承: 继承父类通过this声明属性和方法至子类实例的属性上</span>\\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>obkoro1 <span class=\"token operator\">=</span> <span class=\"token string\">\\'子类的this属性\\'</span><span class=\"token punctuation\">;</span>\\n<span class=\"token punctuation\">}</span>\\n<span class=\"token comment\">// 核心2 寄生式继承：封装了son.prototype对象原型式继承father.prototype的过程，并且增强了传入的对象。</span>\\n<span class=\"token keyword\">function</span> <span class=\"token function\">inheritPrototype</span><span class=\"token punctuation\">(</span>son<span class=\"token punctuation\">,</span> father<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n  <span class=\"token keyword\">const</span> fatherFnPrototype <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span>father<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 原型式继承：浅拷贝father.prototype对象 father.prototype为新对象的原型</span>\\n  son<span class=\"token punctuation\">.</span>prototype <span class=\"token operator\">=</span> fatherFnPrototype<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 设置father.prototype为son.prototype的原型</span>\\n  son<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>constructor <span class=\"token operator\">=</span> son<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 修正constructor 指向</span>\\n<span class=\"token punctuation\">}</span>\\n<span class=\"token function\">inheritPrototype</span><span class=\"token punctuation\">(</span>sonFn<span class=\"token punctuation\">,</span> fatherFn<span class=\"token punctuation\">)</span>\\nsonFn<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>sonFnSome <span class=\"token operator\">=</span> <span class=\"token string\">\\'子类原型对象的属性或者方法\\'</span>\\n<span class=\"token keyword\">const</span> sonFnInstance <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">sonFn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\\'寄生组合式继承子类实例\\'</span><span class=\"token punctuation\">,</span> sonFnInstance<span class=\"token punctuation\">)</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br><span class=\"line-number\">11</span><br><span class=\"line-number\">12</span><br><span class=\"line-number\">13</span><br><span class=\"line-number\">14</span><br><span class=\"line-number\">15</span><br><span class=\"line-number\">16</span><br><span class=\"line-number\">17</span><br><span class=\"line-number\">18</span><br><span class=\"line-number\">19</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<h4 id=\"寄生组合式继承子类实例\"><a class=\"header-anchor\" href=\"#寄生组合式继承子类实例\" aria-hidden=\"true\">#</a> 寄生组合式继承子类实例</h4>\\n<p><img src=\"https://github.com/OBKoro1/articleImg_src/blob/master/2019/2019_9_16_inherit_6.png?raw=true\" alt=\"寄生组合式继承子类实例\"></p>\\n<h4 id=\"寄生组合式继承是最成熟的继承方法：\"><a class=\"header-anchor\" href=\"#寄生组合式继承是最成熟的继承方法：\" aria-hidden=\"true\">#</a> 寄生组合式继承是最成熟的继承方法：</h4>\\n<blockquote>\\n<p>寄生组合式继承是最成熟的继承方法, 也是现在最常用的继承方法，众多JS库采用的继承方案也是它。</p>\\n</blockquote>\\n<p>寄生组合式继承相对于组合继承有如下优点：</p>\\n<ol>\\n<li>\\n<p>只调用一次父类<code>fatherFn</code>构造函数。</p>\\n</li>\\n<li>\\n<p>避免在子类prototype上创建不必要多余的属性。</p>\\n</li>\\n<li>\\n<p>使用原型式继承父类的prototype，保持了原型链上下文不变。</p>\\n<p>子类的prototype只有子类通过prototype声明的属性/方法和父类prototype上的属性/方法泾渭分明。</p>\\n</li>\\n</ol>\\n<h3 id=\"es6-extends继承：\"><a class=\"header-anchor\" href=\"#es6-extends继承：\" aria-hidden=\"true\">#</a> ES6 extends继承：</h3>\\n<blockquote>\\n<p>ES6继承的原理跟寄生组合式继承是一样的。</p>\\n</blockquote>\\n<p>ES6 <code>extends</code>核心代码：</p>\\n<p>这段代码是通过<a href=\"%5Bhttps://www.babeljs.cn/repl%5D(https://www.babeljs.cn/repl)\">babel在线编译</a>成es5, 用于子类prototype原型式继承父类<code>prototype</code>的属性/方法。</p>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code><span class=\"token comment\">// 寄生式继承 封装继承过程</span>\\n<span class=\"token keyword\">function</span> <span class=\"token function\">_inherits</span><span class=\"token punctuation\">(</span>son<span class=\"token punctuation\">,</span> father<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n  <span class=\"token comment\">// 原型式继承: 设置father.prototype为son.prototype的原型 用于继承father.prototype的属性/方法</span>\\n  son<span class=\"token punctuation\">.</span>prototype <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span>father <span class=\"token operator\">&amp;&amp;</span> father<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\n  son<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>constructor <span class=\"token operator\">=</span> son<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 修正constructor 指向</span>\\n  <span class=\"token comment\">// 将父类设置为子类的原型 用于继承父类的静态属性/方法(father.some)</span>\\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>father<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n    Object<span class=\"token punctuation\">.</span>setPrototypeOf\\n      <span class=\"token operator\">?</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">setPrototypeOf</span><span class=\"token punctuation\">(</span>son<span class=\"token punctuation\">,</span> father<span class=\"token punctuation\">)</span>\\n      <span class=\"token punctuation\">:</span> son<span class=\"token punctuation\">.</span>__proto__ <span class=\"token operator\">=</span> father<span class=\"token punctuation\">;</span>\\n  <span class=\"token punctuation\">}</span>\\n<span class=\"token punctuation\">}</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br><span class=\"line-number\">11</span><br><span class=\"line-number\">12</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<p>另外子类是通过借用构造函数继承(<code>call</code>)来继承父类通过<code>this</code>声明的属性/方法，也跟寄生组合式继承一样。</p>\\n<h4 id=\"es5继承与es6继承的区别：\"><a class=\"header-anchor\" href=\"#es5继承与es6继承的区别：\" aria-hidden=\"true\">#</a> ES5继承与ES6继承的区别：</h4>\\n<blockquote>\\n<p>本段摘自<a href=\"http://es6.ruanyifeng.com/#docs/class-extends#%E7%AE%80%E4%BB%8B\" target=\"_blank\" rel=\"noopener noreferrer\">阮一峰-es6入门文档<OutboundLink/></a></p>\\n</blockquote>\\n<ul>\\n<li>\\n<p>ES5的继承实质上是<strong>先创建子类的实例对象，再将父类的方法添加到this上</strong>。</p>\\n</li>\\n<li>\\n<p>ES6的继承是<strong>先创建父类的实例对象this，再用子类的构造函数修改this</strong>。</p>\\n<p>因为子类没有自己的this对象，所以必须先调用父类的super()方法。</p>\\n</li>\\n</ul>\\n<h2 id=\"扩展：\"><a class=\"header-anchor\" href=\"#扩展：\" aria-hidden=\"true\">#</a> 扩展：</h2>\\n<h3 id=\"为什么要修正constructor指向？\"><a class=\"header-anchor\" href=\"#为什么要修正constructor指向？\" aria-hidden=\"true\">#</a> 为什么要修正constructor指向？</h3>\\n<p>在寄生组合式继承中有一段如下一段修正constructor 指向的代码，很多人对于它的作用以及为什么要修正它不太清楚。</p>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code>son<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>constructor <span class=\"token operator\">=</span> son<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 修正constructor 指向</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<h4 id=\"constructor的作用\"><a class=\"header-anchor\" href=\"#constructor的作用\" aria-hidden=\"true\">#</a> constructor的作用</h4>\\n<p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/constructor\" target=\"_blank\" rel=\"noopener noreferrer\">MDN<OutboundLink/></a>的定义：<strong>返回创建实例对象的<code>Object</code>构造函数的引用</strong>。</p>\\n<p>即返回实例对象的构造函数的引用，例如：</p>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code><span class=\"token keyword\">let</span> instance <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">sonFn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\\ninstance<span class=\"token punctuation\">.</span>constructor <span class=\"token comment\">// sonFn函数</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<h4 id=\"constructor的应用场景：\"><a class=\"header-anchor\" href=\"#constructor的应用场景：\" aria-hidden=\"true\">#</a> <code>constructor</code>的应用场景：</h4>\\n<p><strong>当我们只有实例对象没有构造函数的引用时</strong>：</p>\\n<p>某些场景下，我们对实例对象经过多轮导入导出，我们不知道实例是从哪个函数中构造出来或者追踪实例的构造函数，较为艰难。</p>\\n<p>这个时候就可以通过实例对象的<code>constructor</code>属性来得到构造函数的引用：</p>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code><span class=\"token keyword\">let</span> instance <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">sonFn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 实例化子类</span>\\n<span class=\"token keyword\">export</span> instance<span class=\"token punctuation\">;</span>\\n<span class=\"token comment\">// 多轮导入+导出，导致sonFn追踪非常麻烦，或者不想在文件中再引入sonFn</span>\\n<span class=\"token keyword\">let</span>  fn <span class=\"token operator\">=</span> instance<span class=\"token punctuation\">.</span>constructor\\n<span class=\"token comment\">// do something： new fn() / fn.prototype / fn.length / fn.arguments等等</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<h4 id=\"保持constructor指向的一致性：\"><a class=\"header-anchor\" href=\"#保持constructor指向的一致性：\" aria-hidden=\"true\">#</a> 保持<code>constructor</code>指向的一致性：</h4>\\n<p>因此每次重写函数的prototype都应该修正一下<code>constructor</code>的指向，以保持读取<code>constructor</code>行为的一致性。</p>\\n<h3 id=\"小结\"><a class=\"header-anchor\" href=\"#小结\" aria-hidden=\"true\">#</a> 小结</h3>\\n<p>继承也是前端的高频面试题，了解本文中继承方法的优缺点，有助于更深刻的理解JS继承机制。除了组合继承和寄生式继承都是由其他方法组合而成的，分块理解会对它们理解的更深刻。</p>\\n<p>建议多看几遍本文，建个<code>html</code>文件试试文中的例子，两相结合更佳！</p>\\n<p>对prototype还不是很理解的同学，可以再看看：<a href=\"https://juejin.im/post/5d622f14f265da03a1486408\" target=\"_blank\" rel=\"noopener noreferrer\">JS基础-函数、对象和原型、原型链的关系<OutboundLink/></a></p>\\n<h4 id=\"觉得我的博客对你有帮助的话，就给我点个star吧！\"><a class=\"header-anchor\" href=\"#觉得我的博客对你有帮助的话，就给我点个star吧！\" aria-hidden=\"true\">#</a> 觉得我的博客对你有帮助的话，就给我点个<a href=\"https://github.com/OBKoro1/web_accumulate\" target=\"_blank\" rel=\"noopener noreferrer\">Star<OutboundLink/></a>吧！</h4>\\n<p><a href=\"http://obkoro1.com/web_accumulate/\" target=\"_blank\" rel=\"noopener noreferrer\">前端进阶积累<OutboundLink/></a>、<a href=\"https://user-gold-cdn.xitu.io/2018/5/1/1631b6f52f7e7015?w=344&amp;h=344&amp;f=jpeg&amp;s=8317\" target=\"_blank\" rel=\"noopener noreferrer\">公众号<OutboundLink/></a>、<a href=\"https://github.com/OBKoro1\" target=\"_blank\" rel=\"noopener noreferrer\">GitHub<OutboundLink/></a>、wx:OBkoro1、邮箱：obkoro1@foxmail.com</p>\\n<p>以上2019/9/22</p>\\n<p>作者：<a href=\"https://github.com/OBKoro1\" target=\"_blank\" rel=\"noopener noreferrer\">OBKoro1<OutboundLink/></a></p>\\n<p>参考资料：</p>\\n<p>JS高级程序设计(红宝书)6.3继承</p>\\n<p><a href=\"https://juejin.im/post/5bcb2e295188255c55472db0\" target=\"_blank\" rel=\"noopener noreferrer\">JavaScript常用八种继承方案<OutboundLink/></a>\\n\\x3c!-- 特殊字符串：用于修改/删除markdown的结尾提示语-OBKoro1 --\\x3e</p>\\n<h3 id=\"点个star支持我一下\"><a class=\"header-anchor\" href=\"#点个star支持我一下\" aria-hidden=\"true\">#</a> 点个<a href=\"https://github.com/OBKoro1/web_accumulate\" target=\"_blank\" rel=\"noopener noreferrer\">Star<OutboundLink/></a>支持我一下~</h3>\\n\\x3c!-- \\'特殊字符串：用于删除编译后的issue组件-OBKoro1 --\\x3e\\n'},{key:\"v-47cb4cdb0689\",path:\"/accumulate/JS/Object.defineProperty.html\",lastUpdated:1564720698e3,title:\"一次弄懂 Object.defineProperty\",headers:[{level:2,title:\"一次弄懂 Object.defineProperty\",slug:\"一次弄懂-object-defineproperty\"},{level:3,title:\"基本用法：\",slug:\"基本用法：\"},{level:3,title:\"设置get、set：\",slug:\"设置get、set：\"},{level:3,title:\"点个Star支持我一下~\",slug:\"点个star支持我一下\"}],excerpt:'<h2 id=\"一次弄懂-object-defineproperty\"><a class=\"header-anchor\" href=\"#一次弄懂-object-defineproperty\" aria-hidden=\"true\">#</a> 一次弄懂 Object.defineProperty</h2>\\n<h3 id=\"基本用法：\"><a class=\"header-anchor\" href=\"#基本用法：\" aria-hidden=\"true\">#</a> 基本用法：</h3>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code><span class=\"token keyword\">let</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\\n  singer<span class=\"token punctuation\">:</span> <span class=\"token string\">\\'周杰伦\\'</span>\\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\\n<span class=\"token keyword\">let</span> value <span class=\"token operator\">=</span> <span class=\"token string\">\\'青花瓷\\'</span><span class=\"token punctuation\">;</span>\\nObject<span class=\"token punctuation\">.</span><span class=\"token function\">defineProperty</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">,</span> <span class=\"token string\">\\'music\\'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\\n  value<span class=\"token punctuation\">:</span> value <span class=\"token comment\">// music的值</span>\\n  <span class=\"token comment\">// configurable: false, // music默认不能删除 要删除须设置为true 设为true 可删除</span>\\n  <span class=\"token comment\">// writable: false,  // 默认不能修改music 设为true 可修改</span>\\n  <span class=\"token comment\">// enumerable: false, // music默认是不能被枚举(遍历) 设为true 可遍历</span>\\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\n<span class=\"token keyword\">delete</span> obj<span class=\"token punctuation\">.</span>music<span class=\"token punctuation\">;</span>\\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">.</span>music<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 青花瓷 删除无效</span>\\nobj<span class=\"token punctuation\">.</span>music <span class=\"token operator\">=</span> <span class=\"token string\">\\'听妈妈的话\\'</span><span class=\"token punctuation\">;</span>\\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">.</span>music<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 青花瓷 修改无效</span>\\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> key <span class=\"token keyword\">in</span> obj<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// singer</span>\\n<span class=\"token punctuation\">}</span>\\n<span class=\"token comment\">// music 没有被遍历</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br><span class=\"line-number\">11</span><br><span class=\"line-number\">12</span><br><span class=\"line-number\">13</span><br><span class=\"line-number\">14</span><br><span class=\"line-number\">15</span><br><span class=\"line-number\">16</span><br><span class=\"line-number\">17</span><br><span class=\"line-number\">18</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<h4 id=\"默认不能修改、不能删除、不能遍历\"><a class=\"header-anchor\" href=\"#默认不能修改、不能删除、不能遍历\" aria-hidden=\"true\">#</a> 默认不能修改、不能删除、不能遍历</h4>\\n<p>通过栗子可以发现：通过 defineProperty 设置的属性，<strong>默认不能修改，不能删除，不能遍历</strong>，当然你可以通过设置更改他们。</p>\\n<h4 id=\"object-defineproperty的作用：\"><a class=\"header-anchor\" href=\"#object-defineproperty的作用：\" aria-hidden=\"true\">#</a> <code>Object.defineProperty</code>的作用：</h4>\\n<p><strong>完全掌控</strong>对象的某个属性，增删改查全都可以设定！</p>\\n<h3 id=\"设置get、set：\"><a class=\"header-anchor\" href=\"#设置get、set：\" aria-hidden=\"true\">#</a> 设置<code>get</code>、<code>set</code>：</h3>\\n<div class=\"danger custom-block\"><p class=\"custom-block-title\">不能同时设置</p>\\n<p>get,set 设置时不能同时设置 writable 和 value, 他们是一对情侣的存在，交叉设置或同时存在,会报错</p>\\n</div>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code><span class=\"token keyword\">let</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\\n  singer<span class=\"token punctuation\">:</span> <span class=\"token string\">\\'周杰伦\\'</span>\\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\\n<span class=\"token keyword\">let</span> value <span class=\"token operator\">=</span> <span class=\"token string\">\\'青花瓷\\'</span><span class=\"token punctuation\">;</span>\\nObject<span class=\"token punctuation\">.</span><span class=\"token function\">defineProperty</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">,</span> <span class=\"token string\">\\'music\\'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\\n  enumerable<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 设置可枚举</span>\\n  <span class=\"token keyword\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n    <span class=\"token comment\">// 获取obj.music的时候就会调用get方法</span>\\n    <span class=\"token comment\">// let value = \"强行设置get的返回值\"; // 打开注释 读取属性永远都是‘强行设置get的返回值’</span>\\n    <span class=\"token keyword\">return</span> value<span class=\"token punctuation\">;</span>\\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\\n  <span class=\"token keyword\">set</span><span class=\"token punctuation\">(</span>val<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n    <span class=\"token comment\">// value = val; // 将修改的值重新赋给song</span>\\n    value <span class=\"token operator\">=</span> <span class=\"token string\">\\'强行设置修改的值\\'</span><span class=\"token punctuation\">;</span>\\n  <span class=\"token punctuation\">}</span>\\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\n\\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">.</span>music<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 青花瓷</span>\\n<span class=\"token keyword\">delete</span> obj<span class=\"token punctuation\">.</span>music<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 删除无效</span>\\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">.</span>music<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 青花瓷</span>\\nobj<span class=\"token punctuation\">.</span>music <span class=\"token operator\">=</span> <span class=\"token string\">\\'听妈妈的话\\'</span><span class=\"token punctuation\">;</span>\\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">.</span>music<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 强行设置修改的值</span>\\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> key <span class=\"token keyword\">in</span> obj<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// singer, music 上面设置了enumerable可枚举</span>\\n<span class=\"token punctuation\">}</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br><span class=\"line-number\">11</span><br><span class=\"line-number\">12</span><br><span class=\"line-number\">13</span><br><span class=\"line-number\">14</span><br><span class=\"line-number\">15</span><br><span class=\"line-number\">16</span><br><span class=\"line-number\">17</span><br><span class=\"line-number\">18</span><br><span class=\"line-number\">19</span><br><span class=\"line-number\">20</span><br><span class=\"line-number\">21</span><br><span class=\"line-number\">22</span><br><span class=\"line-number\">23</span><br><span class=\"line-number\">24</span><br><span class=\"line-number\">25</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<p>这个<code>Object.defineProperty</code>的用法就是上面两个栗子中所展示的那样，可以将栗子<code>copy</code>到本地自己玩一下。\\n\\x3c!-- 特殊字符串：用于修改/删除markdown的结尾提示语-OBKoro1 --\\x3e</p>\\n<h3 id=\"点个star支持我一下\"><a class=\"header-anchor\" href=\"#点个star支持我一下\" aria-hidden=\"true\">#</a> 点个<a href=\"https://github.com/OBKoro1/web_accumulate\" target=\"_blank\" rel=\"noopener noreferrer\">Star<OutboundLink/></a>支持我一下~</h3>\\n\\x3c!-- \\'特殊字符串：用于删除编译后的issue组件-OBKoro1 --\\x3e\\n'},{key:\"v-4cb74a814fd2c\",path:\"/accumulate/JS/cookie%E5%92%8Cstorage%E7%9A%84%E4%BD%BF%E7%94%A8%E4%BB%A5%E5%8F%8A%E5%8C%BA%E5%88%AB.html\",lastUpdated:1564720698e3,title:\"cookie、localStorage 和 sessionStorage 的使用以及区别\",headers:[{level:2,title:\"cookie、localStorage 和 sessionStorage 的使用以及区别\",slug:\"cookie、localstorage-和-sessionstorage-的使用以及区别\"},{level:3,title:\"localStorage 和 sessionStorage 的增删改查：\",slug:\"localstorage-和-sessionstorage-的增删改查：\"},{level:3,title:\"cookie 的增删改茶:\",slug:\"cookie-的增删改茶\"},{level:3,title:\"三者的异同：\",slug:\"三者的异同：\"},{level:3,title:\"应用场景：\",slug:\"应用场景：\"},{level:3,title:\"浏览器支持情况：\",slug:\"浏览器支持情况：\"},{level:3,title:\"数据存放处：\",slug:\"数据存放处：\"},{level:3,title:\"番外：各浏览器Cookie大小、个数限制。\",slug:\"番外：各浏览器cookie大小、个数限制。\"},{level:3,title:\"点个Star支持我一下~\",slug:\"点个star支持我一下\"}],excerpt:'<h2 id=\"cookie、localstorage-和-sessionstorage-的使用以及区别\"><a class=\"header-anchor\" href=\"#cookie、localstorage-和-sessionstorage-的使用以及区别\" aria-hidden=\"true\">#</a> cookie、localStorage 和 sessionStorage 的使用以及区别</h2>\\n<h3 id=\"localstorage-和-sessionstorage-的增删改查：\"><a class=\"header-anchor\" href=\"#localstorage-和-sessionstorage-的增删改查：\" aria-hidden=\"true\">#</a> localStorage 和 sessionStorage 的增删改查：</h3>\\n<ol>\\n<li>\\n<p><strong>存储数据</strong>：</p>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code>sessionStorage<span class=\"token punctuation\">.</span><span class=\"token function\">setItem</span><span class=\"token punctuation\">(</span><span class=\"token string\">\\'key\\'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\\'sessionStorage的值\\'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 存储数据</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e</li>\\n<li>\\n<p><strong>获取指定键名数据</strong>：</p>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code><span class=\"token keyword\">let</span> dataSession<span class=\"token operator\">=</span>sessionStorage<span class=\"token punctuation\">.</span><span class=\"token function\">getItem</span><span class=\"token punctuation\">(</span><span class=\"token string\">\\'key\\'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//获取指定键名数据</span>\\n<span class=\"token keyword\">let</span> dataSession2<span class=\"token operator\">=</span>sessionStorage<span class=\"token punctuation\">.</span>key<span class=\"token punctuation\">;</span><span class=\"token comment\">//sessionStorage是js对象，也可以使用key的方式来获取值</span>\\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>dataSession<span class=\"token punctuation\">,</span>dataSession2<span class=\"token punctuation\">,</span><span class=\"token string\">\\'获取指定键名数据\\'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e</li>\\n<li>\\n<p><strong>获取sessionStorage全部数据</strong>：</p>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code><span class=\"token keyword\">let</span> dataAll <span class=\"token operator\">=</span> sessionStorage<span class=\"token punctuation\">.</span><span class=\"token function\">valueOf</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//获取全部数据</span>\\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>dataAll<span class=\"token punctuation\">,</span> <span class=\"token string\">\\'获取全部数据\\'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e</li>\\n<li>\\n<p><strong>清空sessionStorage数据</strong>：</p>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code>sessionStorage<span class=\"token punctuation\">.</span><span class=\"token function\">clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//清空</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e</li>\\n</ol>\\n<div class=\"tip custom-block\"><p class=\"custom-block-title\">localStorage</p>\\n<p>只要将<code>sessionStorage</code>替换成<code>localStorage</code>即可，他们两个的使用方法完全是一样的。</p>\\n</div>\\n<h3 id=\"cookie-的增删改茶\"><a class=\"header-anchor\" href=\"#cookie-的增删改茶\" aria-hidden=\"true\">#</a> cookie 的增删改茶:</h3>\\n<ol>\\n<li>\\n<p><strong>保存 cookie 值：</strong></p>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code><span class=\"token keyword\">let</span> dataCookie <span class=\"token operator\">=</span> <span class=\"token string\">\\'110\\'</span><span class=\"token punctuation\">;</span>\\ndocument<span class=\"token punctuation\">.</span>cookie <span class=\"token operator\">=</span> <span class=\"token string\">\\'token\\'</span> <span class=\"token operator\">+</span> <span class=\"token string\">\\'=\\'</span> <span class=\"token operator\">+</span> dataCookie<span class=\"token punctuation\">;</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e</li>\\n<li>\\n<p><strong>获取指定名称的 cookie 值</strong></p>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code><span class=\"token keyword\">let</span> cookieData <span class=\"token operator\">=</span> <span class=\"token function\">getCookie</span><span class=\"token punctuation\">(</span><span class=\"token string\">\\'token\\'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\n<span class=\"token keyword\">function</span> <span class=\"token function\">getCookie</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n  <span class=\"token comment\">// 获取指定名称的cookie值</span>\\n  <span class=\"token keyword\">let</span> arr <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span>cookie<span class=\"token punctuation\">.</span><span class=\"token function\">match</span><span class=\"token punctuation\">(</span>\\n    <span class=\"token keyword\">new</span> <span class=\"token class-name\">RegExp</span><span class=\"token punctuation\">(</span><span class=\"token string\">\\'(^| )\\'</span> <span class=\"token operator\">+</span> name <span class=\"token operator\">+</span> <span class=\"token string\">\\'=([^;]*)(;|$)\\'</span><span class=\"token punctuation\">)</span>\\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 使用正则匹配 对应cookie，返回数组</span>\\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>arr <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\n    <span class=\"token keyword\">return</span> <span class=\"token function\">unescape</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\n  <span class=\"token punctuation\">}</span>\\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\\n<span class=\"token punctuation\">}</span>\\n<span class=\"token keyword\">let</span> cookieData <span class=\"token operator\">=</span> <span class=\"token function\">getCookie</span><span class=\"token punctuation\">(</span><span class=\"token string\">\\'token\\'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// cookie赋值给变量。</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br><span class=\"line-number\">11</span><br><span class=\"line-number\">12</span><br><span class=\"line-number\">13</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e</li>\\n<li>\\n<p>保存 cookie 并且设置过期时间：</p>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code><span class=\"token function\">setTime</span><span class=\"token punctuation\">(</span><span class=\"token string\">\\'token\\'</span><span class=\"token punctuation\">,</span><span class=\"token string\">\\'cookie的值\\'</span><span class=\"token punctuation\">,</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\n<span class=\"token keyword\">function</span> <span class=\"token function\">setTime</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span>value<span class=\"token punctuation\">,</span>expiresDays<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n    <span class=\"token comment\">//存储 cookie 值并且设置 cookie 过期时间</span>\\n    <span class=\"token keyword\">let</span> date<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\n    date<span class=\"token punctuation\">.</span><span class=\"token function\">setTime</span><span class=\"token punctuation\">(</span>date<span class=\"token punctuation\">.</span><span class=\"token function\">getTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>expiresDays<span class=\"token operator\">*</span><span class=\"token number\">24</span><span class=\"token operator\">*</span><span class=\"token number\">3600</span>\\\\<span class=\"token operator\">*</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\n        document<span class=\"token punctuation\">.</span>cookie<span class=\"token operator\">=</span><span class=\"token template-string\"><span class=\"token string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>key<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">=</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>value<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">; expires=</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>date<span class=\"token punctuation\">.</span><span class=\"token function\">toGMTString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">`</span></span><span class=\"token punctuation\">;</span>\\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>document<span class=\"token punctuation\">.</span>cookie<span class=\"token punctuation\">,</span><span class=\"token string\">\\'存储 cookie 值并且设置 cookie 过期时间\\'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\n<span class=\"token punctuation\">}</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e</li>\\n<li>\\n<p>删除 cookie:</p>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code><span class=\"token function\">delCookie</span><span class=\"token punctuation\">(</span><span class=\"token string\">\\'token\\'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\n<span class=\"token keyword\">function</span> <span class=\"token function\">delCookie</span><span class=\"token punctuation\">(</span>cookieName1<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n  <span class=\"token comment\">//删除cookie</span>\\n  <span class=\"token keyword\">let</span> date2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\n  date2<span class=\"token punctuation\">.</span><span class=\"token function\">setTime</span><span class=\"token punctuation\">(</span>date2<span class=\"token punctuation\">.</span><span class=\"token function\">getTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">10001</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//把时间设置为过去的时间，会自动删除</span>\\n  document<span class=\"token punctuation\">.</span>cookie <span class=\"token operator\">=</span> cookieName1 <span class=\"token operator\">+</span> <span class=\"token string\">\\'=v; expires=\\'</span> <span class=\"token operator\">+</span> date2<span class=\"token punctuation\">.</span><span class=\"token function\">toGMTString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>document<span class=\"token punctuation\">.</span>cookie<span class=\"token punctuation\">,</span> <span class=\"token string\">\\'删除cookie\\'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\n<span class=\"token punctuation\">}</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e</li>\\n</ol>\\n<hr>\\n<h3 id=\"三者的异同：\"><a class=\"header-anchor\" href=\"#三者的异同：\" aria-hidden=\"true\">#</a> 三者的异同：</h3>\\n<p>这个问题其实很多大厂面试的时候也都会问到，所以可以注意一下这几个之间的区别：</p>\\n<p><strong>生命周期</strong>：</p>\\n<p>cookie：可设置失效时间，没有设置的话，默认是关闭浏览器后失效</p>\\n<p>localStorage：除非被手动清除，否则将会永久保存。</p>\\n<p>sessionStorage： 仅在当前网页会话下有效，关闭页面或浏览器后就会被清除。</p>\\n<p><strong>存放数据大小</strong>：</p>\\n<p>cookie：4KB左右</p>\\n<p>localStorage和sessionStorage：可以保存5MB的信息。</p>\\n<p><strong>http请求</strong>：</p>\\n<p>cookie：每次都会携带在HTTP头中，如果使用cookie保存过多数据会带来性能问题</p>\\n<p>localStorage和sessionStorage：仅在客户端（即浏览器）中保存，不参与和服务器的通信</p>\\n<p><strong>易用性</strong>：</p>\\n<p>cookie：需要程序员自己封装，源生的Cookie接口不友好</p>\\n<p>localStorage和sessionStorage：源生接口可以接受，亦可再次封装来对Object和Array有更好的支持</p>\\n<hr>\\n<h3 id=\"应用场景：\"><a class=\"header-anchor\" href=\"#应用场景：\" aria-hidden=\"true\">#</a> 应用场景：</h3>\\n<p>从安全性来说，因为每次http请求都会携带cookie信息，这样无形中浪费了带宽，所以cookie应该尽可能少的使用，另外cookie还需要指定作用域，不可以跨域调用，限制比较多。但是用来识别用户登录来说，cookie还是比stprage更好用的。其他情况下，可以使用storage，就用storage。</p>\\n<p>storage在存储数据的大小上面秒杀了cookie，现在基本上很少使用cookie了，因为更大总是更好的，哈哈哈你们懂得。</p>\\n<p>localStorage和sessionStorage唯一的差别一个是永久保存在浏览器里面，一个是关闭网页就清除了信息。localStorage可以用来夸页面传递参数，sessionStorage用来保存一些临时的数据，防止用户刷新页面之后丢失了一些参数。</p>\\n<h3 id=\"浏览器支持情况：\"><a class=\"header-anchor\" href=\"#浏览器支持情况：\" aria-hidden=\"true\">#</a> 浏览器支持情况：</h3>\\n<p>localStorage和sessionStorage是html5才应用的新特性，可能有些浏览器并不支持，这里要注意。</p>\\n<p><img src=\"https://github.com/OBKoro1/articleImg_src/blob/master/juejin/15ff2d54764e53af?raw=true\" alt=\"\"></p>\\n<p>cookie的浏览器支持没有找到，可以通过下面这段代码来判断所使用的浏览器是否支持cookie：</p>\\n<pre><code>if(navigator.cookieEnabled) {\\n  alert(&quot;你的浏览器支持cookie功能&quot;);//提示浏览器支持cookie  \\n} else {\\n  alert(&quot;你的浏览器不支持cookie&quot;);//提示浏览器不支持cookie   }\\n</code></pre>\\n<h3 id=\"数据存放处：\"><a class=\"header-anchor\" href=\"#数据存放处：\" aria-hidden=\"true\">#</a> 数据存放处：</h3>\\n<p><img src=\"https://github.com/OBKoro1/articleImg_src/blob/master/juejin/15ff2f727028f37b?raw=true\" alt=\"Cookie、localStorage、sessionStorage数据存放处\"></p>\\n<h3 id=\"番外：各浏览器cookie大小、个数限制。\"><a class=\"header-anchor\" href=\"#番外：各浏览器cookie大小、个数限制。\" aria-hidden=\"true\">#</a> 番外：各浏览器Cookie大小、个数限制。</h3>\\n<p>cookie 使用起来还是需要小心一点，有兴趣的可以看一下这个<a href=\"https://www.cnblogs.com/henryhappier/archive/2011/03/03/1969564.html\" target=\"_blank\" rel=\"noopener noreferrer\">链接<OutboundLink/></a>。\\n\\x3c!-- 特殊字符串：用于修改/删除markdown的结尾提示语-OBKoro1 --\\x3e</p>\\n<h3 id=\"点个star支持我一下\"><a class=\"header-anchor\" href=\"#点个star支持我一下\" aria-hidden=\"true\">#</a> 点个<a href=\"https://github.com/OBKoro1/web_accumulate\" target=\"_blank\" rel=\"noopener noreferrer\">Star<OutboundLink/></a>支持我一下~</h3>\\n\\x3c!-- \\'特殊字符串：用于删除编译后的issue组件-OBKoro1 --\\x3e\\n'},{key:\"v-44a4ba9fb172d\",path:\"/accumulate/JS/prototype.html\",lastUpdated:156678938e4,title:\"JS基础-原型、原型链\",headers:[{level:2,title:\"prototype\",slug:\"prototype\"},{level:3,title:\"只有函数有prototype属性\",slug:\"只有函数有prototype属性\"},{level:3,title:\"为什么只有函数有prototype属性\",slug:\"为什么只有函数有prototype属性\"},{level:2,title:\"原型链\",slug:\"原型链\"},{level:3,title:\"__proto__和Object.getPrototypeOf(target)： 对象的原型\",slug:\"proto-和object-getprototypeof-target-：-对象的原型\"},{level:3,title:\"不要再使用__proto__:\",slug:\"不要再使用-proto\"},{level:3,title:\"构造函数是什么、它做了什么\",slug:\"构造函数是什么、它做了什么\"},{level:3,title:\"原型链是什么\",slug:\"原型链是什么\"},{level:3,title:\"一个对象是否在另一个对象的原型链上\",slug:\"一个对象是否在另一个对象的原型链上\"},{level:3,title:\"原型链的终点: Object.prototype\",slug:\"原型链的终点-object-prototype\"},{level:3,title:\"原型链用来做什么？\",slug:\"原型链用来做什么？\"},{level:2,title:\"扩展：\",slug:\"扩展：\"},{level:3,title:\"实例的属性\",slug:\"实例的属性\"},{level:3,title:\"小结\",slug:\"小结\"},{level:3,title:\"点个Star支持我一下~\",slug:\"点个star支持我一下\"}],excerpt:'<h1 id=\"js基础-原型、原型链\"><a class=\"header-anchor\" href=\"#js基础-原型、原型链\" aria-hidden=\"true\">#</a> JS基础-原型、原型链</h1>\\n<p>JS的原型、原型链一直是比较难理解的内容，不少初学者甚至有一定经验的老鸟都不一定能完全说清楚，更多的&quot;很可能&quot;是一知半解，而这部分内容又是JS的核心内容，想要技术进阶的话肯定不能对这个概念一知半解，碰到问题靠“猜”，却不理解它的规则！</p>\\n<h2 id=\"prototype\"><a class=\"header-anchor\" href=\"#prototype\" aria-hidden=\"true\">#</a> prototype</h2>\\n<h3 id=\"只有函数有prototype属性\"><a class=\"header-anchor\" href=\"#只有函数有prototype属性\" aria-hidden=\"true\">#</a> 只有函数有prototype属性</h3>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code><span class=\"token keyword\">let</span> a <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\\n<span class=\"token keyword\">let</span> <span class=\"token function-variable function\">b</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">}</span>\\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">)</span> <span class=\"token comment\">// undefined</span>\\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">)</span> <span class=\"token comment\">// { constructor: function(){...} }</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<h4 id=\"object-prototype怎么解释？\"><a class=\"header-anchor\" href=\"#object-prototype怎么解释？\" aria-hidden=\"true\">#</a> Object.prototype怎么解释？</h4>\\n<p>其实<code>Object</code>是一个全局对象，也是一个构造函数，以及其他基本类型的全局对象也都是构造函数：</p>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">outTypeName</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">,</span> type<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n    <span class=\"token keyword\">let</span> typeName <span class=\"token operator\">=</span>  Object<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>toString<span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span>\\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>typeName<span class=\"token punctuation\">)</span>\\n<span class=\"token punctuation\">}</span>\\n<span class=\"token function\">outTypeName</span><span class=\"token punctuation\">(</span>Object<span class=\"token punctuation\">)</span> <span class=\"token comment\">//[object Function]</span>\\n<span class=\"token function\">outTypeName</span><span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">)</span> <span class=\"token comment\">// [object Function]</span>\\n<span class=\"token function\">outTypeName</span><span class=\"token punctuation\">(</span>Number<span class=\"token punctuation\">)</span> <span class=\"token comment\">// [object Function]</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<h3 id=\"为什么只有函数有prototype属性\"><a class=\"header-anchor\" href=\"#为什么只有函数有prototype属性\" aria-hidden=\"true\">#</a> 为什么只有函数有prototype属性</h3>\\n<p>JS通过<code>new</code>来生成对象，但是仅靠构造函数，每次生成的对象都不一样。</p>\\n<p>有时候需要在两个对象之间共享属性，由于JS在设计之初没有类的概念，所以JS使用函数的<code>prototype</code>来处理这部分<strong>需要被共享的属性</strong>，通过函数的<code>prototype</code>来模拟类：</p>\\n<p>当创建一个函数时，JS会自动为函数添加<code>prototype</code>属性，值是一个有<code>constructor</code>的对象。</p>\\n<p>以下是共享属性<code>prototype</code>的栗子：</p>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">People</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name\\n<span class=\"token punctuation\">}</span>\\nPeople<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> <span class=\"token number\">23</span> <span class=\"token comment\">// 岁数</span>\\n<span class=\"token comment\">// 创建两个实例</span>\\n<span class=\"token keyword\">let</span> People1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">People</span><span class=\"token punctuation\">(</span><span class=\"token string\">\\'OBKoro1\\'</span><span class=\"token punctuation\">)</span>\\n<span class=\"token keyword\">let</span> People2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">People</span><span class=\"token punctuation\">(</span><span class=\"token string\">\\'扣肉\\'</span><span class=\"token punctuation\">)</span>\\nPeople<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> <span class=\"token number\">24</span> <span class=\"token comment\">// 长大了一岁</span>\\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>People1<span class=\"token punctuation\">.</span>age<span class=\"token punctuation\">,</span> People2<span class=\"token punctuation\">.</span>age<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 24 24</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<p><strong>为什么<code>People1</code>和<code>People2</code>可以访问到<code>People.prototype.age</code></strong>？</p>\\n<p>原因是：<code>People1</code>和<code>People2</code>的原型是<code>People.prototype</code>，答案在下方的：构造函数是什么以及它做了什么。</p>\\n<h2 id=\"原型链\"><a class=\"header-anchor\" href=\"#原型链\" aria-hidden=\"true\">#</a> 原型链</h2>\\n<h3 id=\"proto-和object-getprototypeof-target-：-对象的原型\"><a class=\"header-anchor\" href=\"#proto-和object-getprototypeof-target-：-对象的原型\" aria-hidden=\"true\">#</a> <code>__proto__</code>和<code>Object.getPrototypeOf(target)</code>： 对象的原型</h3>\\n<p><code>__proto__</code>是对象实例和它的构造函数之间建立的链接，它的值是：构造函数的`prototype。</p>\\n<p>也就是说：<code>__proto__</code>的值是它所对应的原型对象，是某个函数的<code>prototype</code></p>\\n<p><code>Object.getPrototypeOf(target)</code>全等于<code>__proto__</code>。</p>\\n<p>它是ES6的标准，兼容IE9，主流浏览器也都支持，<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/GetPrototypeOf#%E6%B5%8F%E8%A7%88%E5%99%A8%E5%85%BC%E5%AE%B9\" target=\"_blank\" rel=\"noopener noreferrer\">MDN<OutboundLink/></a>，本文将以<code>Object.getPrototypeOf(target)</code>指代<code>__proto__</code>。</p>\\n<h3 id=\"不要再使用-proto\"><a class=\"header-anchor\" href=\"#不要再使用-proto\" aria-hidden=\"true\">#</a> 不要再使用<code>__proto__</code>:</h3>\\n<blockquote>\\n<p>本段摘自<a href=\"http://es6.ruanyifeng.com/#docs/object-methods#__proto__%E5%B1%9E%E6%80%A7%EF%BC%8CObject-setPrototypeOf%EF%BC%8CObject-getPrototypeOf\" target=\"_blank\" rel=\"noopener noreferrer\">阮一峰-ES6入门<OutboundLink/></a>，具体解析请点击链接查看</p>\\n</blockquote>\\n<ol>\\n<li>\\n<p><code>__proto__</code>属性没有写入 ES6 的正文，而是写入了附录。</p>\\n</li>\\n<li>\\n<p>原因是它本质上是一个内部属性，而<strong>不是一个正式的对外的 API，只是由于浏览器广泛支持，才被加入了 ES6</strong>。</p>\\n</li>\\n<li>\\n<p>标准明确规定，只有浏览器必须部署这个属性，<strong>其他运行环境不一定需要部署，而且新的代码最好认为这个属性是不存在的</strong>。</p>\\n</li>\\n<li>\\n<p>所以无论从语义的角度，还是从兼容性的角度，都不要使用这个属性，应该使用：<code>Object.getPrototypeOf(target)</code>（读操作）、<code>Object.setPrototypeOf(target)</code>（写操作）、<code>Object.create(target)</code>（生成操作）代替</p>\\n</li>\\n</ol>\\n<h3 id=\"构造函数是什么、它做了什么\"><a class=\"header-anchor\" href=\"#构造函数是什么、它做了什么\" aria-hidden=\"true\">#</a> 构造函数是什么、它做了什么</h3>\\n<blockquote>\\n<p>出自《你不知道的在js》：在js中, 实际上并不存在所谓的\\'构造函数\\'，只有对于函数的\\'构造调用\\'。</p>\\n</blockquote>\\n<p>上文一直提到构造函数，所谓的构造函数，实际上就是通过关键字<code>new</code>来调用的函数：</p>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code><span class=\"token keyword\">let</span> newObj <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">someFn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 构造调用函数</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<p><strong>构造/new调用函数的时候做了什么</strong>：</p>\\n<ol>\\n<li>创建一个全新的对象。</li>\\n<li>这个新对象的原型(<code>Object.getPrototypeOf(target)</code>)指向构造函数的<code>prototype</code>对象。</li>\\n<li>该函数的this会绑定在新创建的对象上。</li>\\n<li>如果函数没有返回其他对象，那么new表达式中的函数调用会自动返回这个新对象。</li>\\n<li>我们称这个新对象为构造函数的实例。</li>\\n</ol>\\n<p><strong>原型继承就是利用构造调用函数的特性</strong>：</p>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code>SubType<span class=\"token punctuation\">.</span>prototype <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SuperType</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 原型继承：SubType继承SuperType</span>\\nSubType<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>constructor <span class=\"token operator\">=</span> SubType <span class=\"token comment\">// 重新指定constructor指向 方便找到构造函数</span>\\n<span class=\"token comment\">// 挂载SuperType的this和prototype的属性和方法到SubType.prototype上</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<ol>\\n<li>\\b构造调用的第二点：将新对象的<code>Object.getPrototypeOf(target)</code>指向函数的<code>prototype</code></li>\\n<li>构造调用的第三点：该函数的this会绑定在新创建的对象上。</li>\\n<li>新对象赋值给<code>SubType.prototype</code></li>\\n</ol>\\n<p>原型类型有个缺点：多个实例对引用类型的操作会被篡改。</p>\\n<blockquote>\\n<p>因为每次实例化引用类型的数据都指向同一个地址，所以它们读/写的是同一个数据，当一个实例对其进行操作，其他实例的数据就会一起更改。</p>\\n</blockquote>\\n<h3 id=\"原型链是什么\"><a class=\"header-anchor\" href=\"#原型链是什么\" aria-hidden=\"true\">#</a> 原型链是什么</h3>\\n<p>来看个例子：</p>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">}</span>\\n<span class=\"token keyword\">const</span> newObj <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 构造调用foo 返回一个新对象</span>\\n<span class=\"token keyword\">const</span> newObj__proto__ <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">getPrototypeOf</span><span class=\"token punctuation\">(</span>newObj<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 获取newObj的原型对象</span>\\nnewObj__proto__ <span class=\"token operator\">===</span> foo<span class=\"token punctuation\">.</span>prototype <span class=\"token comment\">// true 验证newObj的原型指向foo</span>\\n<span class=\"token keyword\">const</span> foo__proto__ <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">getPrototypeOf</span><span class=\"token punctuation\">(</span>foo<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 获取foo.prototype的原型</span>\\nfoo__proto__ <span class=\"token operator\">===</span> Object<span class=\"token punctuation\">.</span>prototype <span class=\"token comment\">// true foo.prototype的原型是Object.prototype</span>\\n<span class=\"token template-string\"><span class=\"token string\">``</span></span>\\n如果用以前的语法，从<span class=\"token template-string\"><span class=\"token string\">`newObj`</span></span>查找<span class=\"token template-string\"><span class=\"token string\">`foo`</span></span>的原型，是这样的：\\n<span class=\"token template-string\"><span class=\"token string\">``</span></span>`js\\nnewObj<span class=\"token punctuation\">.</span>__proto__<span class=\"token punctuation\">.</span>__proto__ <span class=\"token comment\">// 这种关系就是原型链</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<p><strong>可以用以下三句话来理解原型链</strong>：</p>\\n<ol>\\n<li><strong>每个对象都拥有一个原型对象</strong>: <code>newObj</code>的原型是<code>foo.prototype</code>。</li>\\n<li><strong>对象的原型可能也是继承其他原型对象的</strong>: <code>foo.prototype</code>也有它的原型<code>Object.prototype</code>。</li>\\n<li><strong>一层一层的，以此类推，这种关系就是原型链</strong>。</li>\\n</ol>\\n<h3 id=\"一个对象是否在另一个对象的原型链上\"><a class=\"header-anchor\" href=\"#一个对象是否在另一个对象的原型链上\" aria-hidden=\"true\">#</a> 一个对象是否在另一个对象的原型链上</h3>\\n<blockquote>\\n<p>如果一个对象存在另一个对象的原型链上，我们可以说：它们是继承关系。</p>\\n</blockquote>\\n<p>判断方式有两种，但都是根据构造函数的<code>prototype</code>是否在原型链上来判断的：</p>\\n<ol>\\n<li><code>instanceof</code>: 用于测试构造函数的prototype属性是否出现在对象的原型链中的任何位置</li>\\n</ol>\\n<p>语法：<code>object instanceof constructor</code></p>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code><span class=\"token keyword\">let</span> <span class=\"token function-variable function\">test</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">}</span>\\n<span class=\"token keyword\">let</span> testObject <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\ntestObject <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">test</span> <span class=\"token comment\">// true test.prototype在testObject的原型链上</span>\\n testObject <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Function</span> <span class=\"token comment\">// false Function.prototype 不在testObject的原型链上</span>\\ntestObject <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Object</span> <span class=\"token comment\">// true Object.prototype在testObject的原型链上</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<ol start=\"2\">\\n<li><code>isPrototypeOf</code>：测试一个对象是否存在于另一个对象的原型链上</li>\\n</ol>\\n<p>语法：<code>prototypeObj.isPrototypeOf(object)</code></p>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code><span class=\"token keyword\">let</span> <span class=\"token function-variable function\">test</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">}</span>\\n<span class=\"token keyword\">let</span> testObject <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\ntest<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function\">isPrototypeOf</span><span class=\"token punctuation\">(</span>testObject<span class=\"token punctuation\">)</span> <span class=\"token comment\">// true test.prototype在testObject的原型链上</span>\\nObject<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function\">isPrototypeOf</span><span class=\"token punctuation\">(</span>testObject<span class=\"token punctuation\">)</span> <span class=\"token comment\">// true Object.prototype在testObject的原型链上</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<h3 id=\"原型链的终点-object-prototype\"><a class=\"header-anchor\" href=\"#原型链的终点-object-prototype\" aria-hidden=\"true\">#</a> 原型链的终点: <code>Object.prototype</code></h3>\\n<p><code>Object.prototype</code>是原型链的终点，所有对象都是从它继承了方法和属性。</p>\\n<p><strong><code>Object.prototype</code>没有原型对象</strong>：</p>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code><span class=\"token keyword\">const</span> proto <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">getPrototypeOf</span><span class=\"token punctuation\">(</span>Object<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">)</span> <span class=\"token comment\">// null</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<p>下面是两个验证例子，有疑虑的同学多写几个测试用例印证一下。</p>\\n<p><strong>字符串原型链的终点</strong>：<code>Object.prototype</code></p>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code><span class=\"token keyword\">let</span> test <span class=\"token operator\">=</span> <span class=\"token string\">\\'由String函数构造出来的\\'</span>\\n<span class=\"token keyword\">let</span> stringPrototype <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">getPrototypeOf</span><span class=\"token punctuation\">(</span>test<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 字符串的原型</span>\\nstringPrototype <span class=\"token operator\">===</span> String<span class=\"token punctuation\">.</span>prototype <span class=\"token comment\">// true 字符串的原型是String对象</span>\\nObject<span class=\"token punctuation\">.</span><span class=\"token function\">getPrototypeOf</span><span class=\"token punctuation\">(</span>stringPrototype<span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> Object<span class=\"token punctuation\">.</span>prototype <span class=\"token comment\">// true String对象的原型是Object对象</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<p><strong>函数原型链的终点</strong>:<code>Object.prototype</code></p>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code><span class=\"token keyword\">let</span> <span class=\"token function-variable function\">test</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">}</span>\\n<span class=\"token keyword\">let</span> fnPrototype <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">getPrototypeOf</span><span class=\"token punctuation\">(</span>test<span class=\"token punctuation\">)</span>\\nfnPrototype <span class=\"token operator\">===</span> Function<span class=\"token punctuation\">.</span>prototype <span class=\"token comment\">// true test的原型是Function.prototype</span>\\nObject<span class=\"token punctuation\">.</span><span class=\"token function\">getPrototypeOf</span><span class=\"token punctuation\">(</span>Function<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> Object<span class=\"token punctuation\">.</span>prototype <span class=\"token comment\">// true</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<h3 id=\"原型链用来做什么？\"><a class=\"header-anchor\" href=\"#原型链用来做什么？\" aria-hidden=\"true\">#</a> 原型链用来做什么？</h3>\\n<h4 id=\"属性查找：\"><a class=\"header-anchor\" href=\"#属性查找：\" aria-hidden=\"true\">#</a> 属性查找：</h4>\\n<blockquote>\\n<p>如果试图访问对象(实例instance)的某个属性,会首先在对象内部寻找该属性,直至找不到,然后才在该对象的原型(instance.prototype)里去找这个属性，以此类推</p>\\n</blockquote>\\n<p>我们用一个例子来形象说明一下：</p>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code><span class=\"token keyword\">let</span> test <span class=\"token operator\">=</span> <span class=\"token string\">\\'由String函数构造出来的\\'</span>\\n<span class=\"token keyword\">let</span> stringPrototype <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">getPrototypeOf</span><span class=\"token punctuation\">(</span>test<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 字符串的原型</span>\\nstringPrototype <span class=\"token operator\">===</span> String<span class=\"token punctuation\">.</span>prototype <span class=\"token comment\">// true 字符串的原型是String对象</span>\\nObject<span class=\"token punctuation\">.</span><span class=\"token function\">getPrototypeOf</span><span class=\"token punctuation\">(</span>stringPrototype<span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> Object<span class=\"token punctuation\">.</span>prototype <span class=\"token comment\">// true String对象的原型是Object对象</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<p>当你访问<code>test</code>的某个属性时，浏览器会进行以下查找：</p>\\n<ol>\\n<li>浏览器首先查找<code>test</code> 本身</li>\\n<li>接着查找它的原型对象：<code>String.prototype</code></li>\\n<li>最后查找<code>String.prototype</code>的原型对象：<code>Object.prototype</code></li>\\n<li>一旦在原型链上找到该属性，就会立即返回该属性，停止查找。</li>\\n<li>原型链上的原型都没有找到的话，返回<code>undefiend</code></li>\\n</ol>\\n<p>这种查找机制还解释了字符串为何会有自带的方法: <code>slice</code>/<code>split</code>/<code>indexOf</code>等。</p>\\n<p>准确的说：</p>\\n<ul>\\n<li>这些属性和方法是定义在<code>String</code>这个全局对象/函数上的。</li>\\n<li>字符串的原型指向了<code>String</code>函数的<code>prototype</code>。</li>\\n<li>之后通过查找原型链，在String函数的<code>prototype</code>中找到这些属性和方法。</li>\\n</ul>\\n<h4 id=\"拒绝查找原型链：\"><a class=\"header-anchor\" href=\"#拒绝查找原型链：\" aria-hidden=\"true\">#</a> 拒绝查找原型链：</h4>\\n<p><code>hasOwnProperty</code>: 指示对象自身属性中是否具有指定的属性</p>\\n<p>语法：<code>obj.hasOwnProperty(prop)</code></p>\\n<p>参数: <code>prop</code> 要查找的属性</p>\\n<p>返回值: 用来判断某个对象是否含有指定的属性的<code>Boolean</code>。</p>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code><span class=\"token keyword\">let</span> test <span class=\"token operator\">=</span><span class=\"token punctuation\">{</span> <span class=\"token string\">\\'OBKoro1\\'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\\'扣肉\\'</span> <span class=\"token punctuation\">}</span>\\ntest<span class=\"token punctuation\">.</span><span class=\"token function\">hasOwnProperty</span><span class=\"token punctuation\">(</span><span class=\"token string\">\\'OBKoro1\\'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// true</span>\\ntest<span class=\"token punctuation\">.</span><span class=\"token function\">hasOwnProperty</span><span class=\"token punctuation\">(</span><span class=\"token string\">\\'toString\\'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// false test本身没查找到toString </span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<p>这个<code>API</code>是挂载在<code>object.prototype</code>上，所有对象都可以使用，API会忽略掉那些从原型链上继承到的属性。</p>\\n<h2 id=\"扩展：\"><a class=\"header-anchor\" href=\"#扩展：\" aria-hidden=\"true\">#</a> 扩展：</h2>\\n<h3 id=\"实例的属性\"><a class=\"header-anchor\" href=\"#实例的属性\" aria-hidden=\"true\">#</a> 实例的属性</h3>\\n<p>你知道构造函数的实例对象上有哪些属性吗？这些属性分别挂载在哪个地方？原因是什么？</p>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>some <span class=\"token operator\">=</span> <span class=\"token string\">\\'222\\'</span>\\n    <span class=\"token keyword\">let</span> ccc <span class=\"token operator\">=</span> <span class=\"token string\">\\'ccc\\'</span>\\n    foo<span class=\"token punctuation\">.</span>obkoro1 <span class=\"token operator\">=</span> <span class=\"token string\">\\'obkoro1\\'</span>\\n    foo<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>a <span class=\"token operator\">=</span> <span class=\"token string\">\\'aaa\\'</span>\\n<span class=\"token punctuation\">}</span>\\nfoo<span class=\"token punctuation\">.</span>koro <span class=\"token operator\">=</span> <span class=\"token string\">\\'扣肉\\'</span>\\nfoo<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>test <span class=\"token operator\">=</span> <span class=\"token string\">\\'test\\'</span>\\n<span class=\"token keyword\">let</span> foo1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// `foo1`上有哪些属性,这些属性分别挂载在哪个地方</span>\\nfoo<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>test <span class=\"token operator\">=</span> <span class=\"token string\">\\'test2\\'</span> <span class=\"token comment\">// 重新赋值</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<p>上面这道是考察<code>JS</code>基础的题，很多人都没说对，原因是没有彻底掌握<code>this</code>、<code>原型链</code>、<code>函数</code>。</p>\\n<h4 id=\"想一下再看解析：\"><a class=\"header-anchor\" href=\"#想一下再看解析：\" aria-hidden=\"true\">#</a> 想一下再看解析：</h4>\\n<h4 id=\"想一下再看解析：-2\"><a class=\"header-anchor\" href=\"#想一下再看解析：-2\" aria-hidden=\"true\">#</a> 想一下再看解析：</h4>\\n<h4 id=\"想一下再看解析：-3\"><a class=\"header-anchor\" href=\"#想一下再看解析：-3\" aria-hidden=\"true\">#</a> 想一下再看解析：</h4>\\n<h4 id=\"想一下再看解析：-4\"><a class=\"header-anchor\" href=\"#想一下再看解析：-4\" aria-hidden=\"true\">#</a> 想一下再看解析：</h4>\\n<h4 id=\"想一下再看解析：-5\"><a class=\"header-anchor\" href=\"#想一下再看解析：-5\" aria-hidden=\"true\">#</a> 想一下再看解析：</h4>\\n<ol>\\n<li><code>this.some</code>：<code>foo1</code>对象的属性</li>\\n</ol>\\n<p>通过构造调用<code>foo</code>的<code>this</code>指向<code>foo1</code>，所以<code>this.some</code>挂载在<code>foo1</code>对象下。</p>\\n<p>属性查找: <code>foo1.some</code></p>\\n<p><code>foo1.some</code>直接读取<code>foo1</code>的属性。</p>\\n<ol start=\"2\">\\n<li><code>foo1.test</code>、<code>foo1.a</code>：<code>foo1</code>对象的原型</li>\\n</ol>\\n<p>根据上文提到的：构造/new调用函数的时候会创建一个新对象(<code>foo1</code>)，自动将<code>foo1</code>的原型(<code>Object.getPrototypeOf(foo1)</code>)指向构造函数的prototype对象。</p>\\n<p>构造调用会执行函数，所以<code>foo.prototype.a = \\'aaaaa\\'</code>也会执行，单就赋值这个层面来说写在<code>foo</code>外面和写在<code>foo</code>里面是一样的。</p>\\n<p>属性查找：<code>foo1.test</code>、<code>foo1.a</code></p>\\n<ul>\\n<li><code>foo1</code>本身没有找到,继续查找</li>\\n<li><code>foo1</code>的原型<code>Object.getPrototypeOf(foo1)</code>上找到了<code>a</code>和<code>test</code>，返回它们，停止查找。</li>\\n</ul>\\n<ol start=\"3\">\\n<li><code>foo1.obkoro1</code>和<code>foo1.koro</code>：返回undefined</li>\\n</ol>\\n<h4 id=\"静态属性-foo-obkoro1、foo-koro\"><a class=\"header-anchor\" href=\"#静态属性-foo-obkoro1、foo-koro\" aria-hidden=\"true\">#</a> 静态属性: <code>foo.obkoro1</code>、<code>foo.koro</code></h4>\\n<blockquote>\\n<p>函数在JS中是一等公民，它也是一个对象, 用来模拟类。</p>\\n</blockquote>\\n<p>这两个属性跟<code>foo1</code>没有关系，它是对象<code>foo</code>上的两个属性(类似函数的:<code>arguments</code>/<code>prototype</code>/<code>length</code>等属性)，称为<strong>静态属性</strong>。</p>\\n<p>它们只能通过<code>foo.obkoro1</code>和<code>foo.koro</code>来访问。</p>\\n<h4 id=\"原型对象改变，原型链下游获取的值也会改变\"><a class=\"header-anchor\" href=\"#原型对象改变，原型链下游获取的值也会改变\" aria-hidden=\"true\">#</a> 原型对象改变，原型链下游获取的值也会改变</h4>\\n<p>上面那个例子中的<code>foo1.test</code>的值是什么？</p>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code>foo<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>test <span class=\"token operator\">=</span> <span class=\"token string\">\\'test\\'</span>\\n<span class=\"token keyword\">let</span> foo1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// `foo1`上有哪些属性,这些属性分别挂载在哪个地方</span>\\nfoo<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>test <span class=\"token operator\">=</span> <span class=\"token string\">\\'test2\\'</span> <span class=\"token comment\">// 重新赋值</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<p><code>foo1.test</code>的值是<code>test2</code>，原因是：<code>foo1</code>的原型对象是<code>Object.getPrototypeOf(foo1)</code>存的指针，指向<code>foo.prototype</code>的内存地址，不是拷贝，每次读取的值都是当前<code>foo.prototype</code>的最新值。</p>\\n<p><strong>打印<code>foo1</code></strong>：</p>\\n<p><img src=\"https://github.com/OBKoro1/articleImg_src/blob/master/2019/2019_8_25_prototype.png?raw=true\" alt=\"\"></p>\\n<h3 id=\"小结\"><a class=\"header-anchor\" href=\"#小结\" aria-hidden=\"true\">#</a> 小结</h3>\\n<p>写了好几天，之前网上很多图文博客，那些线指来指去，就我个人看来还是比较难以理解的，所以本文纯文字的形式来描述这些概念，相信认真看完的同学肯定都有所收获，如果没看懂的话，建议多看几遍，这部分概念真的很重要！</p>\\n<p>PS：实际上还有很多引申出来的东西没写全，准备放到其他文章中去写。</p>\\n<h4 id=\"觉得我的博客对你有帮助的话，就给我点个star吧！\"><a class=\"header-anchor\" href=\"#觉得我的博客对你有帮助的话，就给我点个star吧！\" aria-hidden=\"true\">#</a> 觉得我的博客对你有帮助的话，就给我点个<a href=\"https://github.com/OBKoro1/web_accumulate\" target=\"_blank\" rel=\"noopener noreferrer\">Star<OutboundLink/></a>吧！</h4>\\n<p><a href=\"http://obkoro1.com/web_accumulate/\" target=\"_blank\" rel=\"noopener noreferrer\">前端进阶积累<OutboundLink/></a>、<a href=\"https://user-gold-cdn.xitu.io/2018/5/1/1631b6f52f7e7015?w=344&amp;h=344&amp;f=jpeg&amp;s=8317\" target=\"_blank\" rel=\"noopener noreferrer\">公众号<OutboundLink/></a>、<a href=\"https://github.com/OBKoro1\" target=\"_blank\" rel=\"noopener noreferrer\">GitHub<OutboundLink/></a>、wx:OBkoro1、邮箱：obkoro1@foxmail.com</p>\\n<p>以上2019/8/25</p>\\n<p>作者：<a href=\"https://github.com/OBKoro1\" target=\"_blank\" rel=\"noopener noreferrer\">OBKoro1<OutboundLink/></a></p>\\n<p>参考资料：</p>\\n<p><a href=\"https://developer.mozilla.org/zh-CN/docs/Learn/JavaScript/Objects/Object_prototypes\" target=\"_blank\" rel=\"noopener noreferrer\">MDN:对象原型<OutboundLink/></a></p>\\n<p><a href=\"https://juejin.im/post/58f94c9bb123db411953691b#heading-14\" target=\"_blank\" rel=\"noopener noreferrer\">JS原型链与继承别再被问倒了<OutboundLink/></a></p>\\n<p><a href=\"https://github.com/creeperyang/blog/issues/9\" target=\"_blank\" rel=\"noopener noreferrer\">从__proto__和prototype来深入理解JS对象和原型链<OutboundLink/></a>\\n\\x3c!-- 特殊字符串：用于修改/删除markdown的结尾提示语-OBKoro1 --\\x3e</p>\\n<h3 id=\"点个star支持我一下\"><a class=\"header-anchor\" href=\"#点个star支持我一下\" aria-hidden=\"true\">#</a> 点个<a href=\"https://github.com/OBKoro1/web_accumulate\" target=\"_blank\" rel=\"noopener noreferrer\">Star<OutboundLink/></a>支持我一下~</h3>\\n\\x3c!-- \\'特殊字符串：用于删除编译后的issue组件-OBKoro1 --\\x3e\\n'},{key:\"v-6193f2d3000da\",path:\"/accumulate/JS/webWorker%E4%B8%8A%E6%89%8B.html\",lastUpdated:1564720698e3,title:\"前端er来学习一下webWorker吧\",headers:[{level:2,title:\"前端er来学习一下webWorker吧\",slug:\"前端er来学习一下webworker吧\"},{level:3,title:\"场景\",slug:\"场景\"},{level:3,title:\"WebWorker 的作用：创建 worker 线程\",slug:\"webworker-的作用：创建-worker-线程\"},{level:2,title:\"主线程\",slug:\"主线程\"},{level:3,title:\"我们先来看一下栗子：\",slug:\"我们先来看一下栗子：\"},{level:3,title:\"创建 worker 对象：\",slug:\"创建-worker-对象：\"},{level:3,title:\"主线程的其他 API：\",slug:\"主线程的其他-api：\"},{level:2,title:\"Worker 线程\",slug:\"worker-线程\"},{level:3,title:\"self 代表 worker 进程自身\",slug:\"self-代表-worker-进程自身\"},{level:3,title:\"监听主线程传过来的信息：\",slug:\"监听主线程传过来的信息：\"},{level:3,title:\"发送信息给主线程\",slug:\"发送信息给主线程\"},{level:3,title:\"worker 线程关闭自身\",slug:\"worker-线程关闭自身\"},{level:3,title:\"worker 线程加载脚本：\",slug:\"worker-线程加载脚本：\"},{level:3,title:\"Worker 线程限制\",slug:\"worker-线程限制\"},{level:3,title:\"多个 worker 线程\",slug:\"多个-worker-线程\"},{level:3,title:\"线程间转移二进制数据\",slug:\"线程间转移二进制数据\"},{level:3,title:\"应用场景：\",slug:\"应用场景：\"},{level:3,title:\"兼容：\",slug:\"兼容：\"},{level:2,title:\"结语：\",slug:\"结语：\"},{level:3,title:\"点个Star支持我一下~\",slug:\"点个star支持我一下\"}],excerpt:'<h2 id=\"前端er来学习一下webworker吧\"><a class=\"header-anchor\" href=\"#前端er来学习一下webworker吧\" aria-hidden=\"true\">#</a> 前端er来学习一下webWorker吧</h2>\\n<p>我们都知道，JavaScript 是单线程的，在同一时刻只能处理一个任务，我们会通过 setTimeout()、setInterval()、ajax 和事件处理程序等技术模拟“并行”。但都不是真正意义上的并行:</p>\\n<p>Web Worker 是 HTML5 标准的一部分，这一规范定义了一套 API，它允许一段 JavaScript 程序运行在主线程之外的另外一个线程中。</p>\\n<p>这在很大程度上利用了现在不断升级的电脑计算能力：能够在同一时间平行处理两个任务。</p>\\n<blockquote>\\n<p>游泳、健身了解一下：<a href=\"http://obkoro1.com/\" target=\"_blank\" rel=\"noopener noreferrer\">博客<OutboundLink/></a>、<a href=\"http://obkoro1.com/web_accumulate/accumulate/\" target=\"_blank\" rel=\"noopener noreferrer\">前端积累文档<OutboundLink/></a>、<a href=\"https://github.com/OBKoro1/articleImg_src/blob/master/juejin/1631b6f52f7e7015.jpeg?raw=true\" target=\"_blank\" rel=\"noopener noreferrer\">公众号<OutboundLink/></a>、<a href=\"https://github.com/OBKoro1\" target=\"_blank\" rel=\"noopener noreferrer\">GitHub<OutboundLink/></a></p>\\n</blockquote>\\n<h3 id=\"场景\"><a class=\"header-anchor\" href=\"#场景\" aria-hidden=\"true\">#</a> 场景</h3>\\n<p><strong>当我们有些任务需要花费大量的时间，进行复杂的运算</strong>，就会导致页面卡死：用户点击页面需要很长的时间才能响应，因为前面的任务还未完成，后面的任务只能排队等待。对用户来说，这样的体验无疑是糟糕的，web worker 就是为了解决这种花费大量时间的复杂运算而诞生的！</p>\\n<h3 id=\"webworker-的作用：创建-worker-线程\"><a class=\"header-anchor\" href=\"#webworker-的作用：创建-worker-线程\" aria-hidden=\"true\">#</a> WebWorker 的作用：创建 worker 线程</h3>\\n<p>WebWorker 允许在主线程之外再创建一个 worker 线程，<strong>在主线程执行任务的同时，worker 线程也可以在后台执行它自己的任务，互不干扰</strong>。</p>\\n<p>这样就让 JS 变成多线程的环境了，我们可以把高延迟、花费大量时间的运算，分给 worker 线程，最后再把结果返回给主线程就可以了，因为时间花费多的任务被 web worker 承担了，主线程就会很流畅了！</p>\\n<hr>\\n<h2 id=\"主线程\"><a class=\"header-anchor\" href=\"#主线程\" aria-hidden=\"true\">#</a> 主线程</h2>\\n<h3 id=\"我们先来看一下栗子：\"><a class=\"header-anchor\" href=\"#我们先来看一下栗子：\" aria-hidden=\"true\">#</a> 我们先来看一下栗子：</h3>\\n<p><a href=\"https://codepen.io/OBKoro1/pen/JevMZY?editors=1000\" target=\"_blank\" rel=\"noopener noreferrer\">codepen<OutboundLink/></a>,这里我写了一个 class，里面有详细注释，可以参考一下。</p>\\n<h3 id=\"创建-worker-对象：\"><a class=\"header-anchor\" href=\"#创建-worker-对象：\" aria-hidden=\"true\">#</a> 创建 worker 对象：</h3>\\n<p>主线程调用<code>new Worker()</code>构造函数，新建一个 worker 线程，构造函数的参数是一个 url，生成这个 url 的方法有两种：</p>\\n<ol>\\n<li>\\n<p>脚本文件：</p>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code><span class=\"token keyword\">const</span> worker <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Worker</span><span class=\"token punctuation\">(</span><span class=\"token string\">\\'https://~.js\\'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<p>因为 worker 的两个限制：</p>\\n<ol>\\n<li>\\n<p><strong>分配给 Worker 线程运行的脚本文件，必须与主线程的脚本文件同源</strong>。</p>\\n</li>\\n<li>\\n<p><strong>worker 不能读取本地的文件</strong>(不能打开本机的文件系统<code>file://</code>)，它所加载的脚本必须来自网络。</p>\\n</li>\\n</ol>\\n<p>可以看到限制还是比较多的，如果要使用这种形式的话，在项目中推荐把文件放在静态文件夹中，打包的时候直接拷贝进去，这样我们就可以拿到固定的链接了，</p>\\n</li>\\n<li>\\n<p>字符串形式：</p>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code><span class=\"token keyword\">const</span> data <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token string\">`\\n    //  worker线程 do something\\n    `</span></span><span class=\"token punctuation\">;</span>\\n<span class=\"token comment\">// 转成二进制对象</span>\\n<span class=\"token keyword\">const</span> blob <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Blob</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>data<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\n<span class=\"token comment\">// 生成url</span>\\n<span class=\"token keyword\">const</span> url <span class=\"token operator\">=</span> window<span class=\"token punctuation\">.</span><span class=\"token constant\">URL</span><span class=\"token punctuation\">.</span><span class=\"token function\">createObjectURL</span><span class=\"token punctuation\">(</span>blob<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\n<span class=\"token comment\">// 加载url</span>\\n<span class=\"token keyword\">const</span> worker <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Worker</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<p><a href=\"https://codepen.io/OBKoro1/pen/JevMZY?editors=1000\" target=\"_blank\" rel=\"noopener noreferrer\">栗子<OutboundLink/></a>中就是使用这种形式的，方便我们演示。</p>\\n<p>在项目中：我们可以把worker线程的逻辑写在js文件里面，然后字符串化，然后再export、import，配合webpack进行模块化管理,这样就很容易使用了。</p>\\n</li>\\n</ol>\\n<h3 id=\"主线程的其他-api：\"><a class=\"header-anchor\" href=\"#主线程的其他-api：\" aria-hidden=\"true\">#</a> 主线程的其他 API：</h3>\\n<h4 id=\"_1-主线程与-worker-线程通信\"><a class=\"header-anchor\" href=\"#_1-主线程与-worker-线程通信\" aria-hidden=\"true\">#</a> 1. 主线程与 worker 线程通信:</h4>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code>worker<span class=\"token punctuation\">.</span><span class=\"token function\">postMessage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\\n  hello<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\\'hello\\'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\\'world\\'</span><span class=\"token punctuation\">]</span>\\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<p>它们<strong>相互之间的通信可以传递对象和数组</strong>，这样我们就可以根据相互之间传递的信息来进行一些操作，比如可以设置一个<code>type</code>属性，当值为<code>hello</code>时执行什么函数，当值为<code>world</code>的时候执行什么函数。</p>\\n<p>值得注意的是：它们之间通信是通过拷贝的形式来传递数据的，进行传递的对象需要经过序列化，接下来在另一端还需要反序列化。这就意味着：</p>\\n<ol>\\n<li><strong>我们不能传递不能被序列化的数据</strong>，比如函数，会抛出错误的。</li>\\n<li>在一端改变数据，另外一端不会受影响，因为数据不存在引用，是拷贝过来的。</li>\\n</ol>\\n<h4 id=\"_2-监听-worker-线程返回的信息\"><a class=\"header-anchor\" href=\"#_2-监听-worker-线程返回的信息\" aria-hidden=\"true\">#</a> 2. 监听 worker 线程返回的信息</h4>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code>worker<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onmessage</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\\'父进程接收的数据：\\'</span><span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\n    <span class=\"token comment\">// doSomething();</span>\\n<span class=\"token punctuation\">}</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<h4 id=\"_3-主线程关闭-worker-线程\"><a class=\"header-anchor\" href=\"#_3-主线程关闭-worker-线程\" aria-hidden=\"true\">#</a> 3. 主线程关闭 worker 线程</h4>\\n<p>Worker 线程一旦新建成功，就会始终运行，这样有利于随时响应主线程的通信。</p>\\n<p>这也是 Worker 比较耗费计算机的计算资源(<code>CPU</code>)的原因，一旦使用完毕，就应该关闭 worker 线程。</p>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code>worker<span class=\"token punctuation\">.</span><span class=\"token function\">terminate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 主线程关闭worker线程</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<h4 id=\"_4-监听错误\"><a class=\"header-anchor\" href=\"#_4-监听错误\" aria-hidden=\"true\">#</a> 4. 监听错误</h4>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code><span class=\"token comment\">// worker线程报错</span>\\nworker<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onerror</span> <span class=\"token operator\">=</span> e <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\\n    <span class=\"token comment\">// e.filename - 发生错误的脚本文件名；e.lineno - 出现错误的行号；以及 e.message - 可读性良好的错误消息</span>\\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\\'onerror\\'</span><span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<p>也可以像我给出的<a href=\"https://codepen.io/OBKoro1/pen/JevMZY?editors=1000\" target=\"_blank\" rel=\"noopener noreferrer\">栗子<OutboundLink/></a>一样,把两个报错放在一起写，有报错把信息传出来就好了。</p>\\n<hr>\\n<h2 id=\"worker-线程\"><a class=\"header-anchor\" href=\"#worker-线程\" aria-hidden=\"true\">#</a> Worker 线程</h2>\\n<h3 id=\"self-代表-worker-进程自身\"><a class=\"header-anchor\" href=\"#self-代表-worker-进程自身\" aria-hidden=\"true\">#</a> self 代表 worker 进程自身</h3>\\n<p>worker 线程的执行上下文是一个叫做<code>WorkerGlobalScope</code>的东西跟主线程的上下文(window)不一样。</p>\\n<p>我们可以使用<code>self</code>/<code>WorkerGlobalScope</code>来访问全局对象。</p>\\n<h3 id=\"监听主线程传过来的信息：\"><a class=\"header-anchor\" href=\"#监听主线程传过来的信息：\" aria-hidden=\"true\">#</a> 监听主线程传过来的信息：</h3>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code>self<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onmessage</span> <span class=\"token operator\">=</span> e <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\\'主线程传来的信息：\\'</span><span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\n    <span class=\"token comment\">// do something</span>\\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<h3 id=\"发送信息给主线程\"><a class=\"header-anchor\" href=\"#发送信息给主线程\" aria-hidden=\"true\">#</a> 发送信息给主线程</h3>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code>self<span class=\"token punctuation\">.</span><span class=\"token function\">postMessage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\\n    hello<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span> <span class=\"token string\">\\'这条信息\\'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\\'来自worker线程\\'</span> <span class=\"token punctuation\">]</span>\\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<h3 id=\"worker-线程关闭自身\"><a class=\"header-anchor\" href=\"#worker-线程关闭自身\" aria-hidden=\"true\">#</a> worker 线程关闭自身</h3>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code>self<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<h3 id=\"worker-线程加载脚本：\"><a class=\"header-anchor\" href=\"#worker-线程加载脚本：\" aria-hidden=\"true\">#</a> worker 线程加载脚本：</h3>\\n<p>Worker 线程能够访问一个全局函数 imprtScripts()来引入脚本，该函数接受 0 个或者多个 URI 作为参数。</p>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code><span class=\"token function\">importScripts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\\'http~.js\\'</span><span class=\"token punctuation\">,</span><span class=\"token string\">\\'http~2.js\\'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<ol>\\n<li>\\n<p>脚本中的全局变量都能被 worker 线程使用。</p>\\n</li>\\n<li>\\n<p>脚本的下载顺序是不固定的，但执行时会按照传入 importScripts() 中的文件名顺序进行，这个过程是同步的。</p>\\n</li>\\n</ol>\\n<h3 id=\"worker-线程限制\"><a class=\"header-anchor\" href=\"#worker-线程限制\" aria-hidden=\"true\">#</a> Worker 线程限制</h3>\\n<p>因为 worker 创造了另外一个线程，不在主线程上，相应的会有一些限制，我们无法使用下列对象：</p>\\n<ol>\\n<li>window 对象</li>\\n<li>document 对象</li>\\n<li>DOM 对象</li>\\n<li>parent 对象</li>\\n</ol>\\n<p><strong>我们可以使用下列对象/功能</strong>：</p>\\n<ol>\\n<li>\\n<p>浏览器：navigator 对象</p>\\n</li>\\n<li>\\n<p>URL：location 对象，只读</p>\\n</li>\\n<li>\\n<p>发送请求：XMLHttpRequest 对象</p>\\n</li>\\n<li>\\n<p>定时器：setTimeout/setInterval，在 worker 线程轮询也是很棒！</p>\\n</li>\\n<li>\\n<p>应用缓存：Application Cache</p>\\n</li>\\n</ol>\\n<hr>\\n<h3 id=\"多个-worker-线程\"><a class=\"header-anchor\" href=\"#多个-worker-线程\" aria-hidden=\"true\">#</a> 多个 worker 线程</h3>\\n<ol>\\n<li>\\n<p><strong>在主线程内可以创建多个 worker 线程</strong></p>\\n<p><a href=\"https://codepen.io/OBKoro1/pen/JevMZY?editors=1010\" target=\"_blank\" rel=\"noopener noreferrer\">栗子<OutboundLink/></a>最下方有。</p>\\n</li>\\n<li>\\n<p><strong>worker 线程内还可以新建 worker 线程，使用同源的脚本文件创建</strong>。</p>\\n<p>在 worker 线程内再新建 worker 线程就不能使用<code>window.URL.createObjectURL(blob)</code>，需要使用同源的脚本文件来创建新的 worker 线程，因为我们无法访问到<code>window</code>对象。</p>\\n<p>这里不方便演示，跟在主线程创建 worker 线程是一个套路，只是改成了脚本文件形式创建 worker 线程。</p>\\n</li>\\n</ol>\\n<h3 id=\"线程间转移二进制数据\"><a class=\"header-anchor\" href=\"#线程间转移二进制数据\" aria-hidden=\"true\">#</a> 线程间转移二进制数据</h3>\\n<p>因为主线程与 worker 线程之间的通信是拷贝关系，当我们要传递一个巨大的二进制文件给 worker 线程处理时(worker 线程就是用来干这个的)，这时候使用拷贝的方式来传递数据，无疑会造成性能问题。</p>\\n<p><strong>幸运的是，Web Worker 提供了一中转移数据的方式，允许主线程把二进制数据直接转移给子线程</strong>。这种方式比原先拷贝的方式，有巨大的性能提升。</p>\\n<p><strong>一旦数据转移到其他线程，原先线程就无法再使用这些二进制数据了，这是为了防止出现多个线程同时修改数据的麻烦局面</strong></p>\\n<p>下方栗子出自<a href=\"https://juejin.im/post/59c1b3645188250ea1502e46#comment\" target=\"_blank\" rel=\"noopener noreferrer\">浅谈 HTML5 Web Worker<OutboundLink/></a></p>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code><span class=\"token comment\">// 创建二进制数据</span>\\n<span class=\"token keyword\">var</span> uInt8Array <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Uint8Array</span><span class=\"token punctuation\">(</span><span class=\"token number\">1024</span><span class=\"token operator\">*</span><span class=\"token number\">1024</span><span class=\"token operator\">*</span><span class=\"token number\">32</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 32MB</span>\\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> uInt8Array <span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n    uInt8Array<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span>\\n<span class=\"token punctuation\">}</span>\\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>uInt8Array<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 传递前长度:33554432</span>\\n<span class=\"token comment\">// 字符串形式创建worker线程</span>\\n<span class=\"token keyword\">var</span> myTask <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token string\">`\\n    onmessage = function (e) {\\n        var data = e.data;\\n        console.log(\\'worker:\\', data);\\n    };\\n`</span></span><span class=\"token punctuation\">;</span>\\n\\n<span class=\"token keyword\">var</span> blob <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Blob</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>myTask<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\n<span class=\"token keyword\">var</span> myWorker <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Worker</span><span class=\"token punctuation\">(</span>window<span class=\"token punctuation\">.</span><span class=\"token constant\">URL</span><span class=\"token punctuation\">.</span><span class=\"token function\">createObjectURL</span><span class=\"token punctuation\">(</span>blob<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\n\\n<span class=\"token comment\">// 使用这个格式(a,[a]) 来转移二进制数据</span>\\nmyWorker<span class=\"token punctuation\">.</span><span class=\"token function\">postMessage</span><span class=\"token punctuation\">(</span>uInt8Array<span class=\"token punctuation\">.</span>buffer<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>uInt8Array<span class=\"token punctuation\">.</span>buffer<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 发送数据、转移数据</span>\\n\\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>uInt8Array<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 传递后长度:0，原先线程内没有这个数据了</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br><span class=\"line-number\">11</span><br><span class=\"line-number\">12</span><br><span class=\"line-number\">13</span><br><span class=\"line-number\">14</span><br><span class=\"line-number\">15</span><br><span class=\"line-number\">16</span><br><span class=\"line-number\">17</span><br><span class=\"line-number\">18</span><br><span class=\"line-number\">19</span><br><span class=\"line-number\">20</span><br><span class=\"line-number\">21</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<blockquote>\\n<p>二进制数据有：File、Blob、ArrayBuffer 等类型，也允许在 worker 线程之间发送，<strong>这对于影像处理、声音处理、3D 运算等就非常方便了，不会产生性能负担</strong></p>\\n</blockquote>\\n<h3 id=\"应用场景：\"><a class=\"header-anchor\" href=\"#应用场景：\" aria-hidden=\"true\">#</a> 应用场景：</h3>\\n<ol>\\n<li>\\n<p>数学运算</p>\\n</li>\\n<li>\\n<p>图像、影音等文件处理</p>\\n</li>\\n<li>\\n<p>大量数据检索</p>\\n<p>比如用户输入时，我们在后台检索答案，或者帮助用户联想，纠错等操作.</p>\\n</li>\\n<li>\\n<p>耗时任务都丢到 webworker 解放我们的主线程。</p>\\n</li>\\n</ol>\\n<h3 id=\"兼容：\"><a class=\"header-anchor\" href=\"#兼容：\" aria-hidden=\"true\">#</a> 兼容：</h3>\\n<p>没有找到具体的制定日期，有篇博客是在 10 年的 7 月份写的，也就是说 web worker 至少出现了八年了，以下兼容摘自<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Web_Workers_API/Using_web_workers\" target=\"_blank\" rel=\"noopener noreferrer\">MDN<OutboundLink/></a>：</p>\\n<p>Chrome：4, Firefox：3.5, IE：10.0, Opera：10.6, Safari：4</p>\\n<p>现在兼容还是做的比较好的，如果实在不放心的话：</p>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>window<span class=\"token punctuation\">.</span>Worker<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n    <span class=\"token operator\">...</span>\\n<span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span>\\n    <span class=\"token operator\">...</span>\\n<span class=\"token punctuation\">}</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<hr>\\n<h2 id=\"结语：\"><a class=\"header-anchor\" href=\"#结语：\" aria-hidden=\"true\">#</a> 结语：</h2>\\n<p>Web Worker的出现，给浏览器带来了后台计算的能力，把耗时的任务分配给worker线程来做，在很大程度上缓解了主线程UI渲染阻塞的问题，提升页面性能。</p>\\n<p>使用起来也不复杂，以后有复杂的问题，记得要丢给我们浏览器的后台(web worker)来处理</p>\\n<p>看完之后，一定要研究一下文中的栗子，自己鼓捣鼓捣，实践出真知！</p>\\n<p>PS: 推荐一下我上个月写的<a href=\"https://juejin.im/post/5bcad1326fb9a05cda779d0b\" target=\"_blank\" rel=\"noopener noreferrer\">手摸手教你使用WebSocket<OutboundLink/></a>，感兴趣的可以看一下。</p>\\n<p>以上2018.11.25</p>\\n<p>参考资料：</p>\\n<p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Web_Workers_API/Using_web_workers\" target=\"_blank\" rel=\"noopener noreferrer\">MDN<OutboundLink/></a></p>\\n<p><a href=\"http://www.ruanyifeng.com/blog/2018/07/web-worker.html\" target=\"_blank\" rel=\"noopener noreferrer\">Web Worker 使用教程<OutboundLink/></a></p>\\n<p><a href=\"https://juejin.im/post/59c1b3645188250ea1502e46\" target=\"_blank\" rel=\"noopener noreferrer\">浅谈HTML5 Web Worker<OutboundLink/></a>\\n\\x3c!-- 特殊字符串：用于修改/删除markdown的结尾提示语-OBKoro1 --\\x3e</p>\\n<h3 id=\"点个star支持我一下\"><a class=\"header-anchor\" href=\"#点个star支持我一下\" aria-hidden=\"true\">#</a> 点个<a href=\"https://github.com/OBKoro1/web_accumulate\" target=\"_blank\" rel=\"noopener noreferrer\">Star<OutboundLink/></a>支持我一下~</h3>\\n\\x3c!-- \\'特殊字符串：用于删除编译后的issue组件-OBKoro1 --\\x3e\\n'},{key:\"v-5e5b68f6d8647\",path:\"/accumulate/JS/%E5%87%BD%E6%95%B0%E9%98%B2%E6%8A%96%E5%92%8C%E5%87%BD%E6%95%B0%E8%8A%82%E6%B5%81.html\",lastUpdated:1564720698e3,title:\"防抖函数&节流函数\",headers:[{level:2,title:\"防抖函数(debounce):\",slug:\"防抖函数-debounce\"},{level:3,title:\"概念：\",slug:\"概念：\"},{level:3,title:\"生活中的栗子：\",slug:\"生活中的栗子：\"},{level:3,title:\"代码栗子：\",slug:\"代码栗子：\"},{level:3,title:\"机制：\",slug:\"机制：\"},{level:3,title:\"应用场景：\",slug:\"应用场景：\"},{level:2,title:\"节流函数(throttle):\",slug:\"节流函数-throttle\"},{level:3,title:\"概念：\",slug:\"概念：-2\"},{level:3,title:\"生活中的栗子：\",slug:\"生活中的栗子：-2\"},{level:3,title:\"代码栗子：\",slug:\"代码栗子：-2\"},{level:3,title:\"机制：\",slug:\"机制：-2\"},{level:3,title:\"应用场景：\",slug:\"应用场景：-2\"},{level:2,title:\"作用和本质：\",slug:\"作用和本质：\"},{level:2,title:\"应用实例，需要加个括号：\",slug:\"应用实例，需要加个括号：\"},{level:3,title:\"点个Star支持我一下~\",slug:\"点个star支持我一下\"}],excerpt:'\\x3c!--\\n * @Author: shuyu.wu\\n * @LastEditors: shuyu.wu\\n * @Description:\\n * @Date: 2019-01-23 20:04:27\\n * @LastEditTime: 2019-02-23 18:19:45\\n --\\x3e\\n<h1 id=\"防抖函数-节流函数\"><a class=\"header-anchor\" href=\"#防抖函数-节流函数\" aria-hidden=\"true\">#</a> 防抖函数&amp;节流函数</h1>\\n<p>节流函数和防抖函数是 JS 比较重要的概念，应用好了可以提高很大的性能，在面试中也是很高频的一个考点。下面一起来看看这两种方法是如何使用的：</p>\\n<h2 id=\"防抖函数-debounce\"><a class=\"header-anchor\" href=\"#防抖函数-debounce\" aria-hidden=\"true\">#</a> 防抖函数(debounce):</h2>\\n<h3 id=\"概念：\"><a class=\"header-anchor\" href=\"#概念：\" aria-hidden=\"true\">#</a> 概念：</h3>\\n<p><strong>在事件被触发 n 秒后再执行回调，如果在这 n 秒内又被触发，则重新计时</strong>。</p>\\n<h3 id=\"生活中的栗子：\"><a class=\"header-anchor\" href=\"#生活中的栗子：\" aria-hidden=\"true\">#</a> 生活中的栗子：</h3>\\n<p>如果有人进电梯（触发事件），那电梯将在 10 秒钟后出发（执行事件），这时如果又有人进电梯了（在 10 秒内再次触发该事件），我们又得等 10 秒再出发（重新计时）。</p>\\n<h3 id=\"代码栗子：\"><a class=\"header-anchor\" href=\"#代码栗子：\" aria-hidden=\"true\">#</a> 代码栗子：</h3>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code><span class=\"token comment\">/**\\n * @description: 防抖函数：函数被触发 n 秒后再执行回调，如果在这 n 秒内又被触发，则重新计时\\n * @param {Function} fn 要执行的函数\\n * @param {Number} wait  wait毫秒后执行回调\\n * @param {*} ...arr 传递给fn的参数\\n */</span>\\n<span class=\"token keyword\">function</span> <span class=\"token function\">debounce</span><span class=\"token punctuation\">(</span>fn<span class=\"token punctuation\">,</span> wait<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>arr<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n  <span class=\"token keyword\">let</span> timer <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>timer<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n      <span class=\"token comment\">// 如果有一个函数在等待执行 清除定时器 下面重新计时</span>\\n      <span class=\"token function\">clearTimeout</span><span class=\"token punctuation\">(</span>timer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\n      timer <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 清空timer 下次重启定时器</span>\\n    <span class=\"token punctuation\">}</span>\\n    <span class=\"token comment\">// 设定时器/重置定时器</span>\\n    timer <span class=\"token operator\">=</span> <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\\n      <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// wait时间后 执行回调 期间再触发debounce 需要重新等待</span>\\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> wait<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\\n<span class=\"token punctuation\">}</span>\\n<span class=\"token comment\">// 要防抖的函数</span>\\n<span class=\"token keyword\">let</span> <span class=\"token function-variable function\">actionFn</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\\'回调\\'</span><span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\\n<span class=\"token function\">setInterval</span><span class=\"token punctuation\">(</span><span class=\"token function\">debounce</span><span class=\"token punctuation\">(</span>actionFn<span class=\"token punctuation\">,</span> <span class=\"token number\">500</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\\'actionFn参数1\\'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\\'参数2\\'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 第一次在1500ms后触发，之后每1000ms触发一次</span>\\n<span class=\"token function\">setInterval</span><span class=\"token punctuation\">(</span><span class=\"token function\">debounce</span><span class=\"token punctuation\">(</span>actionFn<span class=\"token punctuation\">,</span> <span class=\"token number\">2000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 还没执行就一直重复触发,不会执行</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br><span class=\"line-number\">11</span><br><span class=\"line-number\">12</span><br><span class=\"line-number\">13</span><br><span class=\"line-number\">14</span><br><span class=\"line-number\">15</span><br><span class=\"line-number\">16</span><br><span class=\"line-number\">17</span><br><span class=\"line-number\">18</span><br><span class=\"line-number\">19</span><br><span class=\"line-number\">20</span><br><span class=\"line-number\">21</span><br><span class=\"line-number\">22</span><br><span class=\"line-number\">23</span><br><span class=\"line-number\">24</span><br><span class=\"line-number\">25</span><br><span class=\"line-number\">26</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<div class=\"tip custom-block\"><p class=\"custom-block-title\">可以这样理解</p>\\n<p>函数触发停止一段时间后(期间不能再触发 debounce，否则将重新计时)，再执行回调函数</p>\\n</div>\\n<h3 id=\"机制：\"><a class=\"header-anchor\" href=\"#机制：\" aria-hidden=\"true\">#</a> 机制：</h3>\\n<p>防抖函数主要利用定时器的延迟执行特性，根据是否有定时器在等待执行：</p>\\n<ul>\\n<li>触发了一个事件后：如果有一个定时任务待执行，就清除定时器，重新计时。</li>\\n<li>如果没有任务待执行，就定时执行这个事件。</li>\\n</ul>\\n<h3 id=\"应用场景：\"><a class=\"header-anchor\" href=\"#应用场景：\" aria-hidden=\"true\">#</a> 应用场景：</h3>\\n<ol>\\n<li>表单的连续点击，防止重复提交。比如重复发送一篇文章。</li>\\n<li>类百度的搜索，连续输入等输入停止后再搜索。</li>\\n<li>一直拖动浏览器窗口，只想触发一次事件等。</li>\\n</ol>\\n<h2 id=\"节流函数-throttle\"><a class=\"header-anchor\" href=\"#节流函数-throttle\" aria-hidden=\"true\">#</a> 节流函数(throttle):</h2>\\n<h3 id=\"概念：-2\"><a class=\"header-anchor\" href=\"#概念：-2\" aria-hidden=\"true\">#</a> 概念：</h3>\\n<p><strong>规定一个单位时间，在这个单位时间内，只能有一次触发事件的回调函数执行(单位时间内有事件被多次触发则，只生效一次)</strong>。</p>\\n<h3 id=\"生活中的栗子：-2\"><a class=\"header-anchor\" href=\"#生活中的栗子：-2\" aria-hidden=\"true\">#</a> 生活中的栗子：</h3>\\n<p>漏水的自来水水龙头，尽管水龙头里面有很多水(一直在触发事件)，但还是一滴一滴的往下滴(单位事件内只生效一次)。</p>\\n<h3 id=\"代码栗子：-2\"><a class=\"header-anchor\" href=\"#代码栗子：-2\" aria-hidden=\"true\">#</a> 代码栗子：</h3>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code><span class=\"token comment\">/**\\n * @description: 节流函数：规定一个单位时间，在这个单位时间内，只能有一次触发事件的回调函数执行\\n * @param {Function} fn 要执行的函数\\n * @param {Number} gapTime  单位时间\\n * @param {*} ...arr 传递给fn的参数\\n */</span>\\n<span class=\"token keyword\">function</span> <span class=\"token function\">throttle</span><span class=\"token punctuation\">(</span>fn<span class=\"token punctuation\">,</span> gapTime<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>arr<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n  <span class=\"token keyword\">let</span> last <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 上次执行时间 第一次马上执行</span>\\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\\n    <span class=\"token keyword\">let</span> nowTime <span class=\"token operator\">=</span> Date<span class=\"token punctuation\">.</span><span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 当前时间</span>\\n    <span class=\"token comment\">// 当前时间-上次执行的时间是否超过间隔时间 就执行回调</span>\\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nowTime <span class=\"token operator\">-</span> last <span class=\"token operator\">></span> gapTime<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n      <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ...arr为fn的参数</span>\\n      last <span class=\"token operator\">=</span> nowTime<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 重置上次执行时间为当前时间 方便下次执行</span>\\n    <span class=\"token punctuation\">}</span>\\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\\n<span class=\"token punctuation\">}</span>\\n<span class=\"token keyword\">let</span> <span class=\"token function-variable function\">actionFn</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\\'回调\\'</span><span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 要执行的函数</span>\\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\\n<span class=\"token function\">setInterval</span><span class=\"token punctuation\">(</span><span class=\"token function\">throttle</span><span class=\"token punctuation\">(</span>actionFn<span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\\'actionFn参数1\\'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\\'参数2\\'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\n<span class=\"token comment\">// 每隔10毫秒都会触发一次throttle，每隔一秒触发一次actionFn回调(1秒内再次触发被丢弃)</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br><span class=\"line-number\">11</span><br><span class=\"line-number\">12</span><br><span class=\"line-number\">13</span><br><span class=\"line-number\">14</span><br><span class=\"line-number\">15</span><br><span class=\"line-number\">16</span><br><span class=\"line-number\">17</span><br><span class=\"line-number\">18</span><br><span class=\"line-number\">19</span><br><span class=\"line-number\">20</span><br><span class=\"line-number\">21</span><br><span class=\"line-number\">22</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<h3 id=\"机制：-2\"><a class=\"header-anchor\" href=\"#机制：-2\" aria-hidden=\"true\">#</a> 机制：</h3>\\n<p>节流函数根据时间差是否超过给定时间(gapTime)来决定是否触发回调。</p>\\n<h3 id=\"应用场景：-2\"><a class=\"header-anchor\" href=\"#应用场景：-2\" aria-hidden=\"true\">#</a> 应用场景：</h3>\\n<ol>\\n<li>自动保存草稿功能，当用户在输入的时候(一直触发事件),单位时间内只保存一次草稿。</li>\\n<li>游戏中的刷新率</li>\\n</ol>\\n<h2 id=\"作用和本质：\"><a class=\"header-anchor\" href=\"#作用和本质：\" aria-hidden=\"true\">#</a> 作用和本质：</h2>\\n<ul>\\n<li>\\n<p>防抖函数和节流函数主要解决的问题是：<strong>防止函数”短时间“的重复执行</strong>。</p>\\n</li>\\n<li>\\n<p>它们本质上是：<strong>在时间轴上控制函数的执行次数</strong>。</p>\\n</li>\\n</ul>\\n<h2 id=\"应用实例，需要加个括号：\"><a class=\"header-anchor\" href=\"#应用实例，需要加个括号：\" aria-hidden=\"true\">#</a> 应用实例，需要加个括号：</h2>\\n<p>因为返回<code>debounce</code>和<code>throttle</code>返回的是一个函数，所以如果不是自动执行的事件监听回调，我们应该再后面加个<code>()</code>，执行返回的闭包函数。</p>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code>document<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onclick</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\\n  <span class=\"token comment\">// throttle(actionFn, 1000) 这样不会执行 只返回了一个闭包函数</span>\\n  <span class=\"token function\">throttle</span><span class=\"token punctuation\">(</span>actionFn<span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\\'执行函数参数1\\'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\\'执行函数参数2\\'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 执行闭包函数</span>\\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e\\x3c!-- 特殊字符串：用于修改/删除markdown的结尾提示语-OBKoro1 --\\x3e\\n<h3 id=\"点个star支持我一下\"><a class=\"header-anchor\" href=\"#点个star支持我一下\" aria-hidden=\"true\">#</a> 点个<a href=\"https://github.com/OBKoro1/web_accumulate\" target=\"_blank\" rel=\"noopener noreferrer\">Star<OutboundLink/></a>支持我一下~</h3>\\n\\x3c!-- \\'特殊字符串：用于删除编译后的issue组件-OBKoro1 --\\x3e\\n'},{key:\"v-ec6ea9a74c58e\",path:\"/accumulate/JS/%E6%89%8B%E6%91%B8%E6%89%8B%E6%95%99%E4%BD%A0%E4%BD%BF%E7%94%A8WebSocket.html\",lastUpdated:1564720698e3,title:\"手摸手教你使用WebSocket\",headers:[{level:2,title:\"手摸手教你使用WebSocket\",slug:\"手摸手教你使用websocket\"},{level:3,title:\"WebSocket解决了什么问题：\",slug:\"websocket解决了什么问题：\"},{level:3,title:\"一个超简单的栗子：\",slug:\"一个超简单的栗子：\"},{level:3,title:\"webSocket的class类：\",slug:\"websocket的class类：\"},{level:2,title:\"WebSocket不稳定\",slug:\"websocket不稳定\"},{level:3,title:\"WebSocket设置变量，判断是否手动关闭连接：\",slug:\"websocket设置变量，判断是否手动关闭连接：\"},{level:3,title:\"WebSocket心跳机制：\",slug:\"websocket心跳机制：\"},{level:2,title:\"关于WebSocket\",slug:\"关于websocket\"},{level:3,title:\"WebSocket的当前状态:WebSocket.readyState\",slug:\"websocket的当前状态-websocket-readystate\"},{level:3,title:\"WebSocket还可以发送/接收 二进制数据\",slug:\"websocket还可以发送-接收-二进制数据\"},{level:3,title:\"WebSocket的优点：\",slug:\"websocket的优点：\"},{level:2,title:\"结语\",slug:\"结语\"},{level:3,title:\"点个Star支持我一下~\",slug:\"点个star支持我一下\"}],excerpt:'<h2 id=\"手摸手教你使用websocket\"><a class=\"header-anchor\" href=\"#手摸手教你使用websocket\" aria-hidden=\"true\">#</a> 手摸手教你使用WebSocket</h2>\\n<p><img src=\"https://github.com/OBKoro1/articleImg_src/blob/master/weibo_img_move/005Y4rColy1fwhfykkrenj30w00k075m.jpg?raw=true\" alt=\"\"></p>\\n<p>在本篇文章之前，<code>WebSocket</code>很多人听说过，没见过，没用过，以为是个很高大上的技术，实际上这个技术并不神秘，可以说是个很容易就能掌握的技术，希望在看完本文之后，马上把文中的栗子拿出来自己试一试，实践出真知。</p>\\n<blockquote>\\n<p>游泳、健身了解一下：<a href=\"http://obkoro1.com/\" target=\"_blank\" rel=\"noopener noreferrer\">博客<OutboundLink/></a>、<a href=\"http://obkoro1.com/web_accumulate/accumulate/\" target=\"_blank\" rel=\"noopener noreferrer\">前端积累文档<OutboundLink/></a>、<a href=\"https://github.com/OBKoro1/articleImg_src/blob/master/juejin/1631b6f52f7e7015.jpeg?raw=true\" target=\"_blank\" rel=\"noopener noreferrer\">公众号<OutboundLink/></a>、<a href=\"https://github.com/OBKoro1\" target=\"_blank\" rel=\"noopener noreferrer\">GitHub<OutboundLink/></a></p>\\n</blockquote>\\n<h3 id=\"websocket解决了什么问题：\"><a class=\"header-anchor\" href=\"#websocket解决了什么问题：\" aria-hidden=\"true\">#</a> <code>WebSocket</code>解决了什么问题：</h3>\\n<p>客户端(浏览器)和服务器端进行通信，只能由客户端发起<code>ajax</code>请求，才能进行通信，服务器端无法主动向客户端推送信息。</p>\\n<p>当出现类似体育赛事、聊天室、实时位置之类的场景时，客户端要获取服务器端的变化，就只能通过轮询(定时请求)来了解服务器端有没有新的信息变化。</p>\\n<blockquote>\\n<p>轮询效率低，非常浪费资源(需要不断发送请求，不停链接服务器)</p>\\n</blockquote>\\n<p><strong>WebSocket的出现，让服务器端可以主动向服务器端发送信息，使得浏览器具备了实时双向通信的能力,这就是<code>WebSocket</code>解决的问题</strong></p>\\n<h3 id=\"一个超简单的栗子：\"><a class=\"header-anchor\" href=\"#一个超简单的栗子：\" aria-hidden=\"true\">#</a> 一个超简单的栗子：</h3>\\n<p><strong>新建一个<code>html</code>文件，将本栗子找个地方跑一下试试，即可轻松入门<code>WebSocket</code>：</strong></p>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">socketConnect</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n    <span class=\"token comment\">// 客户端与服务器进行连接</span>\\n    <span class=\"token keyword\">let</span> ws <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">WebSocket</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 返回`WebSocket`对象，赋值给变量ws</span>\\n    <span class=\"token comment\">// 连接成功回调</span>\\n    ws<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onopen</span> <span class=\"token operator\">=</span> e <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\\'连接成功\\'</span><span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">)</span>\\n        ws<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token string\">\\'我发送消息给服务端\\'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 客户端与服务器端通信</span>\\n    <span class=\"token punctuation\">}</span>\\n    <span class=\"token comment\">// 监听服务器端返回的信息</span>\\n    ws<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onmessage</span> <span class=\"token operator\">=</span> e <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\\'服务器端返回：\\'</span><span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span>\\n        <span class=\"token comment\">// do something</span>\\n    <span class=\"token punctuation\">}</span>\\n    <span class=\"token keyword\">return</span> ws<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 返回websocket对象</span>\\n<span class=\"token punctuation\">}</span>\\n<span class=\"token keyword\">let</span> wsValue <span class=\"token operator\">=</span> <span class=\"token function\">socketConnect</span><span class=\"token punctuation\">(</span><span class=\"token string\">\\'ws://121.40.165.18:8800\\'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// websocket对象</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br><span class=\"line-number\">11</span><br><span class=\"line-number\">12</span><br><span class=\"line-number\">13</span><br><span class=\"line-number\">14</span><br><span class=\"line-number\">15</span><br><span class=\"line-number\">16</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<p>上述栗子中<code>WebSocket</code>的接口地址出自：<a href=\"http://www.blue-zero.com/WebSocket/\" target=\"_blank\" rel=\"noopener noreferrer\">WebSocket 在线测试<OutboundLink/></a>，在开发的时候也可以用于测试后端给的地址是否可用。</p>\\n<h3 id=\"websocket的class类：\"><a class=\"header-anchor\" href=\"#websocket的class类：\" aria-hidden=\"true\">#</a> webSocket的class类：</h3>\\n<p>当项目中很多地方使用WebSocket，把它封成一个class类，是更好的选择。</p>\\n<p><strong>下面的栗子，做了非常详细的注释，建个html文件也可直接使用</strong>，websocket的常用<code>API</code>都放进去了。</p>\\n<p><strong>下方注释的代码，先不用管，涉及到心跳机制，用于保持WebSocket连接的</strong></p>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code><span class=\"token keyword\">class</span> <span class=\"token class-name\">WebSocketClass</span> <span class=\"token punctuation\">{</span>\\n    <span class=\"token comment\">/**\\n     * @description: 初始化实例属性，保存参数\\n     * @param {String} url ws的接口\\n     * @param {Function} msgCallback 服务器信息的回调传数据给函数\\n     * @param {String} name 可选值 用于区分ws，用于debugger\\n     */</span>\\n    <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">,</span> msgCallback<span class=\"token punctuation\">,</span> name <span class=\"token operator\">=</span> <span class=\"token string\">\\'default\\'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>url <span class=\"token operator\">=</span> url<span class=\"token punctuation\">;</span>\\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>msgCallback <span class=\"token operator\">=</span> msgCallback<span class=\"token punctuation\">;</span>\\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span>\\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>ws <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// websocket对象</span>\\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>status <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// websocket是否关闭</span>\\n    <span class=\"token punctuation\">}</span>\\n    <span class=\"token comment\">/**\\n     * @description: 初始化 连接websocket或重连webSocket时调用\\n     * @param {*} 可选值 要传的数据\\n     */</span>\\n    <span class=\"token function\">connect</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n        <span class=\"token comment\">// 新建 WebSocket 实例</span>\\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>ws <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">WebSocket</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>url<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>ws<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onopen</span> <span class=\"token operator\">=</span> e <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\\n            <span class=\"token comment\">// 连接ws成功回调</span>\\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>status <span class=\"token operator\">=</span> <span class=\"token string\">\\'open\\'</span><span class=\"token punctuation\">;</span>\\n            console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">连接成功`</span></span><span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">)</span>\\n            <span class=\"token comment\">// this.heartCheck();</span>\\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>data <span class=\"token operator\">!==</span> undefined<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n                <span class=\"token comment\">// 有要传的数据,就发给后端</span>\\n                <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>ws<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\n            <span class=\"token punctuation\">}</span>\\n        <span class=\"token punctuation\">}</span>\\n        <span class=\"token comment\">// 监听服务器端返回的信息</span>\\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>ws<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onmessage</span> <span class=\"token operator\">=</span> e <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\\n            <span class=\"token comment\">// 把数据传给回调函数，并执行回调</span>\\n            <span class=\"token comment\">// if (e.data === \\'pong\\') {</span>\\n            <span class=\"token comment\">//     this.pingPong = \\'pong\\'; // 服务器端返回pong,修改pingPong的状态</span>\\n            <span class=\"token comment\">// }</span>\\n            <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">msgCallback</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\n        <span class=\"token punctuation\">}</span>\\n        <span class=\"token comment\">// ws关闭回调</span>\\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>ws<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onclose</span> <span class=\"token operator\">=</span> e <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">closeHandle</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 判断是否关闭</span>\\n        <span class=\"token punctuation\">}</span>\\n        <span class=\"token comment\">// ws出错回调</span>\\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onerror</span> <span class=\"token operator\">=</span> e <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">closeHandle</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 判断是否关闭</span>\\n        <span class=\"token punctuation\">}</span>\\n    <span class=\"token punctuation\">}</span>\\n    <span class=\"token comment\">// heartCheck() {</span>\\n    <span class=\"token comment\">//     // 心跳机制的时间可以自己与后端约定</span>\\n    <span class=\"token comment\">//     this.pingPong = \\'ping\\'; // ws的心跳机制状态值</span>\\n    <span class=\"token comment\">//     this.pingInterval = setInterval(() => {</span>\\n    <span class=\"token comment\">//         if (this.ws.readyState === 1) {</span>\\n    <span class=\"token comment\">//             // 检查ws为链接状态 才可发送</span>\\n    <span class=\"token comment\">//             this.ws.send(\\'ping\\'); // 客户端发送ping</span>\\n    <span class=\"token comment\">//         }</span>\\n    <span class=\"token comment\">//     }, 10000)</span>\\n    <span class=\"token comment\">//     this.pongInterval = setInterval(() => {</span>\\n    <span class=\"token comment\">//         this.pingPong = false;</span>\\n    <span class=\"token comment\">//         if (this.pingPong === \\'ping\\') {</span>\\n    <span class=\"token comment\">//             this.closeHandle(\\'pingPong没有改变为pong\\'); // 没有返回pong 重启webSocket</span>\\n    <span class=\"token comment\">//         }</span>\\n    <span class=\"token comment\">//         // 重置为ping 若下一次 ping 发送失败 或者pong返回失败(pingPong不会改成pong)，将重启</span>\\n    <span class=\"token comment\">//         console.log(\\'返回pong\\')</span>\\n    <span class=\"token comment\">//         this.pingPong = \\'ping\\'</span>\\n    <span class=\"token comment\">//     }, 20000)</span>\\n    <span class=\"token comment\">// }</span>\\n    <span class=\"token comment\">// 发送信息给服务器</span>\\n    <span class=\"token function\">sendHandle</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">发送消息给服务器:`</span></span><span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">)</span>\\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>ws<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\n    <span class=\"token punctuation\">}</span>\\n    <span class=\"token function\">closeHandle</span><span class=\"token punctuation\">(</span>e <span class=\"token operator\">=</span> <span class=\"token string\">\\'err\\'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n        <span class=\"token comment\">// 因为webSocket并不稳定，规定只能手动关闭(调closeMyself方法)，否则就重连</span>\\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>status <span class=\"token operator\">!==</span> <span class=\"token string\">\\'close\\'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n            console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">断开，重连websocket`</span></span><span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">)</span>\\n            <span class=\"token comment\">// if (this.pingInterval !== undefined &amp;&amp; this.pongInterval !== undefined) {</span>\\n            <span class=\"token comment\">//     // 清除定时器</span>\\n            <span class=\"token comment\">//     clearInterval(this.pingInterval);</span>\\n            <span class=\"token comment\">//     clearInterval(this.pongInterval);</span>\\n            <span class=\"token comment\">// }</span>\\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">connect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 重连</span>\\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\\n            console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">websocket手动关闭`</span></span><span class=\"token punctuation\">)</span>\\n        <span class=\"token punctuation\">}</span>\\n    <span class=\"token punctuation\">}</span>\\n    <span class=\"token comment\">// 手动关闭WebSocket</span>\\n    <span class=\"token function\">closeMyself</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token string\">`关闭</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">`</span></span><span class=\"token punctuation\">)</span>\\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>status <span class=\"token operator\">=</span> <span class=\"token string\">\\'close\\'</span><span class=\"token punctuation\">;</span>\\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>ws<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\n    <span class=\"token punctuation\">}</span>\\n<span class=\"token punctuation\">}</span>\\n<span class=\"token keyword\">function</span> <span class=\"token function\">someFn</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\\'接收服务器消息的回调：\\'</span><span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\n<span class=\"token punctuation\">}</span>\\n<span class=\"token comment\">// const wsValue = new WebSocketClass(\\'ws://121.40.165.18:8800\\', someFn, \\'wsName\\'); // 这个链接一天只能发送消息50次</span>\\n<span class=\"token keyword\">const</span> wsValue <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">WebSocketClass</span><span class=\"token punctuation\">(</span><span class=\"token string\">\\'wss://echo.websocket.org\\'</span><span class=\"token punctuation\">,</span> someFn<span class=\"token punctuation\">,</span> <span class=\"token string\">\\'wsName\\'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 阮一峰老师教程链接</span>\\nwsValue<span class=\"token punctuation\">.</span><span class=\"token function\">connect</span><span class=\"token punctuation\">(</span><span class=\"token string\">\\'立即与服务器通信\\'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 连接服务器</span>\\n<span class=\"token comment\">// setTimeout(() => {</span>\\n<span class=\"token comment\">//     wsValue.sendHandle(\\'传消息给服务器\\')</span>\\n<span class=\"token comment\">// }, 1000);</span>\\n<span class=\"token comment\">// setTimeout(() => {</span>\\n<span class=\"token comment\">//     wsValue.closeMyself(); // 关闭ws</span>\\n<span class=\"token comment\">// }, 10000)</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br><span class=\"line-number\">11</span><br><span class=\"line-number\">12</span><br><span class=\"line-number\">13</span><br><span class=\"line-number\">14</span><br><span class=\"line-number\">15</span><br><span class=\"line-number\">16</span><br><span class=\"line-number\">17</span><br><span class=\"line-number\">18</span><br><span class=\"line-number\">19</span><br><span class=\"line-number\">20</span><br><span class=\"line-number\">21</span><br><span class=\"line-number\">22</span><br><span class=\"line-number\">23</span><br><span class=\"line-number\">24</span><br><span class=\"line-number\">25</span><br><span class=\"line-number\">26</span><br><span class=\"line-number\">27</span><br><span class=\"line-number\">28</span><br><span class=\"line-number\">29</span><br><span class=\"line-number\">30</span><br><span class=\"line-number\">31</span><br><span class=\"line-number\">32</span><br><span class=\"line-number\">33</span><br><span class=\"line-number\">34</span><br><span class=\"line-number\">35</span><br><span class=\"line-number\">36</span><br><span class=\"line-number\">37</span><br><span class=\"line-number\">38</span><br><span class=\"line-number\">39</span><br><span class=\"line-number\">40</span><br><span class=\"line-number\">41</span><br><span class=\"line-number\">42</span><br><span class=\"line-number\">43</span><br><span class=\"line-number\">44</span><br><span class=\"line-number\">45</span><br><span class=\"line-number\">46</span><br><span class=\"line-number\">47</span><br><span class=\"line-number\">48</span><br><span class=\"line-number\">49</span><br><span class=\"line-number\">50</span><br><span class=\"line-number\">51</span><br><span class=\"line-number\">52</span><br><span class=\"line-number\">53</span><br><span class=\"line-number\">54</span><br><span class=\"line-number\">55</span><br><span class=\"line-number\">56</span><br><span class=\"line-number\">57</span><br><span class=\"line-number\">58</span><br><span class=\"line-number\">59</span><br><span class=\"line-number\">60</span><br><span class=\"line-number\">61</span><br><span class=\"line-number\">62</span><br><span class=\"line-number\">63</span><br><span class=\"line-number\">64</span><br><span class=\"line-number\">65</span><br><span class=\"line-number\">66</span><br><span class=\"line-number\">67</span><br><span class=\"line-number\">68</span><br><span class=\"line-number\">69</span><br><span class=\"line-number\">70</span><br><span class=\"line-number\">71</span><br><span class=\"line-number\">72</span><br><span class=\"line-number\">73</span><br><span class=\"line-number\">74</span><br><span class=\"line-number\">75</span><br><span class=\"line-number\">76</span><br><span class=\"line-number\">77</span><br><span class=\"line-number\">78</span><br><span class=\"line-number\">79</span><br><span class=\"line-number\">80</span><br><span class=\"line-number\">81</span><br><span class=\"line-number\">82</span><br><span class=\"line-number\">83</span><br><span class=\"line-number\">84</span><br><span class=\"line-number\">85</span><br><span class=\"line-number\">86</span><br><span class=\"line-number\">87</span><br><span class=\"line-number\">88</span><br><span class=\"line-number\">89</span><br><span class=\"line-number\">90</span><br><span class=\"line-number\">91</span><br><span class=\"line-number\">92</span><br><span class=\"line-number\">93</span><br><span class=\"line-number\">94</span><br><span class=\"line-number\">95</span><br><span class=\"line-number\">96</span><br><span class=\"line-number\">97</span><br><span class=\"line-number\">98</span><br><span class=\"line-number\">99</span><br><span class=\"line-number\">100</span><br><span class=\"line-number\">101</span><br><span class=\"line-number\">102</span><br><span class=\"line-number\">103</span><br><span class=\"line-number\">104</span><br><span class=\"line-number\">105</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<p>栗子里面我直接写在了一起，可以把<code>class</code>放在一个js文件里面,<code>export</code>出去，然后在需要用的地方再<code>import</code>进来，把参数传进去就可以用了。</p>\\n<h2 id=\"websocket不稳定\"><a class=\"header-anchor\" href=\"#websocket不稳定\" aria-hidden=\"true\">#</a> WebSocket不稳定</h2>\\n<p>WebSocket并不稳定，在使用一段时间后，可能会断开连接，貌似至今没有一个为何会断开连接的公论，所以我们需要让WebSocket保持连接状态，这里推荐两种方法。</p>\\n<h3 id=\"websocket设置变量，判断是否手动关闭连接：\"><a class=\"header-anchor\" href=\"#websocket设置变量，判断是否手动关闭连接：\" aria-hidden=\"true\">#</a> WebSocket设置变量，判断是否手动关闭连接：</h3>\\n<p><strong><code>class</code>类中就是用的这种方式</strong>:设置一个变量，在webSocket关闭/报错的回调中，判断是不是手动关闭的，如果不是的话，就重新连接，这样做的优缺点如下：</p>\\n<ul>\\n<li>优点：请求较少(相对于心跳连接)，易设置。</li>\\n<li>缺点：可能会导致丢失数据,在断开重连的这段时间中，恰好双方正在通信。</li>\\n</ul>\\n<h3 id=\"websocket心跳机制：\"><a class=\"header-anchor\" href=\"#websocket心跳机制：\" aria-hidden=\"true\">#</a> WebSocket心跳机制：</h3>\\n<blockquote>\\n<p>因为第一种方案的缺点，并且可能会有其他一些未知情况导致断开连接而没有触发Error或Close事件。这样就导致实际连接已经断开了，而客户端和服务端却不知道，还在傻傻的等着消息来。</p>\\n</blockquote>\\n<p>然后聪明的程序猿们想出了一种叫做<strong>心跳机制</strong>的解决方法：</p>\\n<p>客户端就像心跳一样每隔固定的时间发送一次<code>ping</code>，来告诉服务器，我还活着，而服务器也会返回<code>pong</code>，来告诉客户端，服务器还活着。</p>\\n<p><strong>具体的实现方法，在上面<code>class</code>的注释中，将其打开，即可看到效果</strong>。</p>\\n<h2 id=\"关于websocket\"><a class=\"header-anchor\" href=\"#关于websocket\" aria-hidden=\"true\">#</a> 关于WebSocket</h2>\\n<p>怕一开始就堆太多文字性的内容，把各位吓跑了，现在大家已经会用了，我们再回头来看看WebSocket的其他知识点。</p>\\n<h3 id=\"websocket的当前状态-websocket-readystate\"><a class=\"header-anchor\" href=\"#websocket的当前状态-websocket-readystate\" aria-hidden=\"true\">#</a> WebSocket的当前状态:<code>WebSocket.readyState</code></h3>\\n<p>下面是<code>WebSocket.readyState</code>的四个值(四种状态)：</p>\\n<ul>\\n<li>0: 表示正在连接</li>\\n<li>1: 表示连接成功，可以通信了</li>\\n<li>2: 表示连接正在关闭</li>\\n<li>3: 表示连接已经关闭，或者打开连接失败</li>\\n</ul>\\n<p>我们可以利用当前状态来做一些事情，比如上面栗子中当WebSocket链接成功后，才允许客户端发送<code>ping</code>。</p>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>ws<span class=\"token punctuation\">.</span>readyState <span class=\"token operator\">===</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n    <span class=\"token comment\">// 检查ws为链接状态 才可发送</span>\\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>ws<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token string\">\\'ping\\'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 客户端发送ping</span>\\n<span class=\"token punctuation\">}</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<h3 id=\"websocket还可以发送-接收-二进制数据\"><a class=\"header-anchor\" href=\"#websocket还可以发送-接收-二进制数据\" aria-hidden=\"true\">#</a> <code>WebSocket</code>还可以发送/接收 二进制数据</h3>\\n<p>这里我也没有试过，我是看阮一峰老师的<a href=\"http://www.ruanyifeng.com/blog/2017/05/websocket.html\" target=\"_blank\" rel=\"noopener noreferrer\">WebSocket教程<OutboundLink/></a>才知道有这么个东西，有兴趣的可以再去谷歌，大家知道一下就可以。</p>\\n<p>二进制数据包括：<code>blob</code>对象和<code>Arraybuffer</code>对象，所以我们需要分开来处理。</p>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code>    <span class=\"token comment\">// 接收数据</span>\\nws<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onmessage</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">.</span>data <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">ArrayBuffer</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\\n        <span class=\"token comment\">// 判断 ArrayBuffer 对象</span>\\n    <span class=\"token punctuation\">}</span>\\n    \\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">.</span>data <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Blob</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\\n        <span class=\"token comment\">// 判断 Blob 对象</span>\\n    <span class=\"token punctuation\">}</span>\\n<span class=\"token punctuation\">}</span>\\n\\n<span class=\"token comment\">// 发送 Blob 对象的例子</span>\\n<span class=\"token keyword\">let</span> file <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">\\'input[type=\"file\"]\\'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>files<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\\nws<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span>file<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\n\\n<span class=\"token comment\">// 发送 ArrayBuffer 对象的例子</span>\\n<span class=\"token keyword\">var</span> img <span class=\"token operator\">=</span> canvas_context<span class=\"token punctuation\">.</span><span class=\"token function\">getImageData</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">400</span><span class=\"token punctuation\">,</span> <span class=\"token number\">320</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\n<span class=\"token keyword\">var</span> binary <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Uint8Array</span><span class=\"token punctuation\">(</span>img<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> img<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n    binary<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> img<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\\n<span class=\"token punctuation\">}</span>\\nws<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span>binary<span class=\"token punctuation\">.</span>buffer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br><span class=\"line-number\">11</span><br><span class=\"line-number\">12</span><br><span class=\"line-number\">13</span><br><span class=\"line-number\">14</span><br><span class=\"line-number\">15</span><br><span class=\"line-number\">16</span><br><span class=\"line-number\">17</span><br><span class=\"line-number\">18</span><br><span class=\"line-number\">19</span><br><span class=\"line-number\">20</span><br><span class=\"line-number\">21</span><br><span class=\"line-number\">22</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<p><strong>如果你要发送的二进制数据很大的话，如何判断发送完毕：</strong></p>\\n<p><code>webSocket.bufferedAmount</code>属性，表示还有多少字节的二进制数据没有发送出去：</p>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code><span class=\"token keyword\">var</span> data <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayBuffer</span><span class=\"token punctuation\">(</span><span class=\"token number\">10000000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\nsocket<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>socket<span class=\"token punctuation\">.</span>bufferedAmount <span class=\"token operator\">===</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n    <span class=\"token comment\">// 发送完毕</span>\\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\\n    <span class=\"token comment\">// 发送还没结束</span>\\n<span class=\"token punctuation\">}</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<p>上述栗子出自阮一峰老师的<a href=\"http://www.ruanyifeng.com/blog/2017/05/websocket.html\" target=\"_blank\" rel=\"noopener noreferrer\">WebSocket教程<OutboundLink/></a></p>\\n<h3 id=\"websocket的优点：\"><a class=\"header-anchor\" href=\"#websocket的优点：\" aria-hidden=\"true\">#</a> WebSocket的优点：</h3>\\n<p>最后再吹一波WebSocket：</p>\\n<ol>\\n<li>\\n<p>双向通信(一开始说的，也是最重要的一点)。</p>\\n</li>\\n<li>\\n<p>数据格式比较轻量，性能开销小，通信高效</p>\\n<p>协议控制的数据包头部较小，而HTTP协议每次通信都需要携带完整的头部</p>\\n</li>\\n<li>\\n<p>更好的二进制支持</p>\\n</li>\\n<li>\\n<p>没有同源限制，客户端可以与任意服务器通信</p>\\n</li>\\n<li>\\n<p>与 HTTP 协议有着良好的兼容性。默认端口也是80和443，并且握手阶段采用 HTTP 协议，因此握手时不容易屏蔽，能通过各种 HTTP 代理服务器</p>\\n</li>\\n</ol>\\n<hr>\\n<h2 id=\"结语\"><a class=\"header-anchor\" href=\"#结语\" aria-hidden=\"true\">#</a> 结语</h2>\\n<p>看了本文之后，如果还是有点迷糊的话，一定要把文中的两个栗子，新建个html文件跑起来，自己鼓捣鼓捣一下。不然读多少博客/教程都没有用，实践才出真知，切勿纸上谈兵。</p>\\n<p>以上2018.10.22</p>\\n<p>参考资料：</p>\\n<p><a href=\"http://www.ruanyifeng.com/blog/2017/05/websocket.html\" target=\"_blank\" rel=\"noopener noreferrer\">WebSocket 教程<OutboundLink/></a></p>\\n<p><a href=\"https://www.cnblogs.com/tugenhua0707/p/8648044.html\" target=\"_blank\" rel=\"noopener noreferrer\">理解WebSocket心跳及重连机制<OutboundLink/></a></p>\\n<p><a href=\"https://www.cnblogs.com/chyingp/p/websocket-deep-in.html\" target=\"_blank\" rel=\"noopener noreferrer\">WebSocket协议：5分钟从入门到精通<OutboundLink/></a>\\n\\x3c!-- 特殊字符串：用于修改/删除markdown的结尾提示语-OBKoro1 --\\x3e</p>\\n<h3 id=\"点个star支持我一下\"><a class=\"header-anchor\" href=\"#点个star支持我一下\" aria-hidden=\"true\">#</a> 点个<a href=\"https://github.com/OBKoro1/web_accumulate\" target=\"_blank\" rel=\"noopener noreferrer\">Star<OutboundLink/></a>支持我一下~</h3>\\n\\x3c!-- \\'特殊字符串：用于删除编译后的issue组件-OBKoro1 --\\x3e\\n'},{key:\"v-3c650f1ca12ed\",path:\"/accumulate/JS/%E6%95%B0%E7%BB%84API%E8%A7%A3%E6%9E%90%E5%90%88%E9%9B%86.html\",lastUpdated:1564720698e3,title:\"数组API解析合集\",headers:[{level:2,title:\"数组API解析合集\",slug:\"数组api解析合集\"},{level:3,title:\"创建一个数组:\",slug:\"创建一个数组\"},{level:3,title:\"ES6 Array.of()  返回由所有参数值组成的数组\",slug:\"es6-array-of-返回由所有参数值组成的数组\"},{level:3,title:\"ES6 Arrary.from() 将两类对象转为真正的数组\",slug:\"es6-arrary-from-将两类对象转为真正的数组\"},{level:2,title:\"方法:\",slug:\"方法\"},{level:3,title:\"改变原数组的方法(9个):\",slug:\"改变原数组的方法-9个\"},{level:3,title:\"splice() 添加/删除数组元素\",slug:\"splice-添加-删除数组元素\"},{level:3,title:\"sort() 数组排序\",slug:\"sort-数组排序\"},{level:3,title:\"pop() 删除一个数组中的最后的一个元素\",slug:\"pop-删除一个数组中的最后的一个元素\"},{level:3,title:\"shift() 删除数组的第一个元素\",slug:\"shift-删除数组的第一个元素\"},{level:3,title:\"push() 向数组的末尾添加元素\",slug:\"push-向数组的末尾添加元素\"},{level:3,title:\"unshift()\",slug:\"unshift\"},{level:3,title:\"reverse() 颠倒数组中元素的顺序\",slug:\"reverse-颠倒数组中元素的顺序\"},{level:3,title:\"ES6: copyWithin() 指定位置的成员复制到其他位置\",slug:\"es6-copywithin-指定位置的成员复制到其他位置\"},{level:3,title:\"ES6: fill() 填充数组\",slug:\"es6-fill-填充数组\"},{level:3,title:\"不改变原数组的方法(8个):\",slug:\"不改变原数组的方法-8个\"},{level:3,title:\"slice() 浅拷贝数组的元素\",slug:\"slice-浅拷贝数组的元素\"},{level:3,title:\"join()  数组转字符串\",slug:\"join-数组转字符串\"},{level:3,title:\"toLocaleString() 数组转字符串\",slug:\"tolocalestring-数组转字符串\"},{level:3,title:\"toString() 数组转字符串 不推荐\",slug:\"tostring-数组转字符串-不推荐\"},{level:3,title:\"cancat\",slug:\"cancat\"},{level:3,title:\"indexOf() 查找数组是否存在某个元素，返回下标\",slug:\"indexof-查找数组是否存在某个元素，返回下标\"},{level:3,title:\"lastIndexOf() 查找指定元素在数组中的最后一个位置\",slug:\"lastindexof-查找指定元素在数组中的最后一个位置\"},{level:3,title:\"ES7 includes() 查找数组是否包含某个元素 返回布尔\",slug:\"es7-includes-查找数组是否包含某个元素-返回布尔\"},{level:3,title:\"遍历方法(12个):\",slug:\"遍历方法-12个\"},{level:3,title:\"关于遍历：\",slug:\"关于遍历：\"},{level:3,title:\"forEach\",slug:\"foreach\"},{level:3,title:\"下面类似语法同样适用这些规则\",slug:\"下面类似语法同样适用这些规则\"},{level:3,title:\"every 检测数组所有元素是否都符合判断条件\",slug:\"every-检测数组所有元素是否都符合判断条件\"},{level:3,title:\"some 数组中的是否有满足判断条件的元素\",slug:\"some-数组中的是否有满足判断条件的元素\"},{level:3,title:\"filter 过滤原始数组，返回新数组\",slug:\"filter-过滤原始数组，返回新数组\"},{level:3,title:\"map 对数组中的每个元素进行处理，返回新的数组\",slug:\"map-对数组中的每个元素进行处理，返回新的数组\"},{level:3,title:\"reduce 为数组提供累加器，合并为一个值\",slug:\"reduce-为数组提供累加器，合并为一个值\"},{level:3,title:\"reduceRight  从右至左累加\",slug:\"reduceright-从右至左累加\"},{level:3,title:\"ES6：find()& findIndex() 根据条件找到数组成员\",slug:\"es6：find-findindex-根据条件找到数组成员\"},{level:3,title:\"ES6 keys()&values()&entries() 遍历键名、遍历键值、遍历键名+键值\",slug:\"es6-keys-values-entries-遍历键名、遍历键值、遍历键名-键值\"},{level:3,title:\"点个Star支持我一下~\",slug:\"点个star支持我一下\"}],excerpt:'<h2 id=\"数组api解析合集\"><a class=\"header-anchor\" href=\"#数组api解析合集\" aria-hidden=\"true\">#</a> 数组API解析合集</h2>\\n<p>数组的使用场景非常多，平日中也涉及到很多数组的<code>api</code>/相关操作，一直也没有对这块内容进行一块整理总结，所以这次对这块内容做一个较为系统的总结，方便自己、也方便他人。</p>\\n<h3 id=\"创建一个数组\"><a class=\"header-anchor\" href=\"#创建一个数组\" aria-hidden=\"true\">#</a> 创建一个数组:</h3>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code><span class=\"token comment\">// 字面量方式:</span>\\n<span class=\"token comment\">// 这个方法也是我们最常用的，在初始化数组的时候 相当方便</span>\\n<span class=\"token keyword\">let</span> a <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">11</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// [3,11,8];</span>\\n<span class=\"token comment\">// 构造器:</span>\\n<span class=\"token comment\">// 实际上 new Array === Array,加不加new 一点影响都没有。</span>\\n<span class=\"token keyword\">let</span> a <span class=\"token operator\">=</span> <span class=\"token function\">Array</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// []</span>\\n<span class=\"token keyword\">let</span> a <span class=\"token operator\">=</span> <span class=\"token function\">Array</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [,,]</span>\\n<span class=\"token keyword\">let</span> a <span class=\"token operator\">=</span> <span class=\"token function\">Array</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">11</span><span class=\"token punctuation\">,</span><span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [ 3,11,8 ]</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<h3 id=\"es6-array-of-返回由所有参数值组成的数组\"><a class=\"header-anchor\" href=\"#es6-array-of-返回由所有参数值组成的数组\" aria-hidden=\"true\">#</a> ES6 Array.of()  返回由所有参数值组成的数组</h3>\\n<p>定义：返回由所有参数值组成的数组，如果没有参数，就返回一个空数组。</p>\\n<p>目的：Array.of() 出现的目的是为了解决上述构造器因参数个数不同，导致的行为有差异的问题。</p>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code><span class=\"token keyword\">let</span> a <span class=\"token operator\">=</span> Array<span class=\"token punctuation\">.</span><span class=\"token keyword\">of</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">11</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [3,11,8]</span>\\n<span class=\"token keyword\">let</span> a <span class=\"token operator\">=</span> Array<span class=\"token punctuation\">.</span><span class=\"token keyword\">of</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [3]</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<h3 id=\"es6-arrary-from-将两类对象转为真正的数组\"><a class=\"header-anchor\" href=\"#es6-arrary-from-将两类对象转为真正的数组\" aria-hidden=\"true\">#</a> ES6 Arrary.from() 将两类对象转为真正的数组</h3>\\n<p>定义：用于将两类对象转为真正的数组（不改变原对象，返回新的数组）。</p>\\n<p>参数：</p>\\n<p>第一个参数(必需):要转化为真正数组的对象。</p>\\n<p>第二个参数(可选): 类似数组的map方法，对每个元素进行处理，将处理后的值放入返回的数组。</p>\\n<p>第三个参数(可选): 用来绑定this。</p>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code><span class=\"token comment\">// 1. 对象拥有length属性</span>\\n<span class=\"token keyword\">let</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token number\">0</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\\'a\\'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\\'b\\'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">:</span><span class=\"token string\">\\'c\\'</span><span class=\"token punctuation\">,</span> length<span class=\"token punctuation\">:</span> <span class=\"token number\">3</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\\n<span class=\"token keyword\">let</span> arr <span class=\"token operator\">=</span> Array<span class=\"token punctuation\">.</span><span class=\"token keyword\">from</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [\\'a\\',\\'b\\',\\'c\\'];</span>\\n<span class=\"token comment\">// 2. 部署了 Iterator接口的数据结构 比如:字符串、Set、NodeList对象</span>\\n<span class=\"token keyword\">let</span> arr <span class=\"token operator\">=</span> Array<span class=\"token punctuation\">.</span><span class=\"token keyword\">from</span><span class=\"token punctuation\">(</span><span class=\"token string\">\\'hello\\'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [\\'h\\',\\'e\\',\\'l\\',\\'l\\',\\'o\\']</span>\\n<span class=\"token keyword\">let</span> arr <span class=\"token operator\">=</span> Array<span class=\"token punctuation\">.</span><span class=\"token keyword\">from</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Set</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">\\'a\\'</span><span class=\"token punctuation\">,</span><span class=\"token string\">\\'b\\'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [\\'a\\',\\'b\\']</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<hr>\\n<h2 id=\"方法\"><a class=\"header-anchor\" href=\"#方法\" aria-hidden=\"true\">#</a> 方法:</h2>\\n<p>数组原型提供了非常多的方法，这里分为三类来讲，一类会改变原数组的值，一类是不会改变原数组，以及数组的遍历方法。</p>\\n<h3 id=\"改变原数组的方法-9个\"><a class=\"header-anchor\" href=\"#改变原数组的方法-9个\" aria-hidden=\"true\">#</a> 改变原数组的方法(9个):</h3>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code><span class=\"token keyword\">let</span> a <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\\n<span class=\"token constant\">ES5</span><span class=\"token punctuation\">:</span>\\n    a<span class=\"token punctuation\">.</span><span class=\"token function\">splice</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">/</span> a<span class=\"token punctuation\">.</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> a<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">/</span> a<span class=\"token punctuation\">.</span><span class=\"token function\">shift</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">/</span>  a<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">/</span> a<span class=\"token punctuation\">.</span><span class=\"token function\">unshift</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">/</span> a<span class=\"token punctuation\">.</span><span class=\"token function\">reverse</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\\n<span class=\"token constant\">ES6</span><span class=\"token punctuation\">:</span>\\na<span class=\"token punctuation\">.</span><span class=\"token function\">copyWithin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> a<span class=\"token punctuation\">.</span>fill\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<p>对于这些能够改变原数组的方法，要注意避免在循环遍历中改变原数组的选项，比如: 改变数组的长度，导致遍历的长度出现问题。</p>\\n<h3 id=\"splice-添加-删除数组元素\"><a class=\"header-anchor\" href=\"#splice-添加-删除数组元素\" aria-hidden=\"true\">#</a> splice() 添加/删除数组元素</h3>\\n<p>定义： splice() 方法<strong>向/从数组中添加/删除</strong>项目，然后返回被删除的项目</p>\\n<p>语法： <code>array.splice(index,howmany,item1,.....,itemX)</code></p>\\n<p>参数:</p>\\n<ol>\\n<li>index：必需。整数，规定添加/删除项目的位置，使用负数可从数组结尾处规定位置。</li>\\n<li>howmany：可选。要删除的项目数量。如果设置为 0，则不会删除项目。</li>\\n<li>item1, ..., itemX： 可选。向数组添加的新项目。</li>\\n</ol>\\n<p>返回值: 如果有元素被删除,返回包含被删除项目的新数组。</p>\\n<p>eg1:删除元素</p>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code><span class=\"token keyword\">let</span> a <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\\n<span class=\"token keyword\">let</span> item <span class=\"token operator\">=</span> a<span class=\"token punctuation\">.</span><span class=\"token function\">splice</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [1,2,3]</span>\\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [4,5,6,7]</span>\\n<span class=\"token comment\">// 从数组下标0开始，删除3个元素</span>\\n<span class=\"token keyword\">let</span> item <span class=\"token operator\">=</span> a<span class=\"token punctuation\">.</span><span class=\"token function\">splice</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [7]</span>\\n<span class=\"token comment\">// 从最后一个元素开始删除3个元素，因为最后一个元素，所以只删除了7</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<p>eg2: 删除并添加</p>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code><span class=\"token keyword\">let</span> a <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\\n<span class=\"token keyword\">let</span> item <span class=\"token operator\">=</span> a<span class=\"token punctuation\">.</span><span class=\"token function\">splice</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token string\">\\'添加\\'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [1,2,3]</span>\\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [\\'添加\\',4,5,6,7]</span>\\n<span class=\"token comment\">// 从数组下标0开始，删除3个元素，并添加元素\\'添加\\'</span>\\n<span class=\"token keyword\">let</span> b <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\\n<span class=\"token keyword\">let</span> item <span class=\"token operator\">=</span> b<span class=\"token punctuation\">.</span><span class=\"token function\">splice</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token string\">\\'添加1\\'</span><span class=\"token punctuation\">,</span><span class=\"token string\">\\'添加2\\'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [6,7]</span>\\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [1,2,3,4,5,\\'添加1\\',\\'添加2\\']</span>\\n<span class=\"token comment\">// 从数组最后第二个元素开始，删除3个元素，并添加两个元素\\'添加1\\'、\\'添加2\\'</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<p>eg3: 不删除只添加:</p>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code><span class=\"token keyword\">let</span> a <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\\n<span class=\"token keyword\">let</span> item <span class=\"token operator\">=</span> a<span class=\"token punctuation\">.</span><span class=\"token function\">splice</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token string\">\\'添加1\\'</span><span class=\"token punctuation\">,</span><span class=\"token string\">\\'添加2\\'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [] 没有删除元素，返回空数组</span>\\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [\\'添加1\\',\\'添加2\\',1,2,3,4,5,6,7]</span>\\n<span class=\"token keyword\">let</span> b <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\\n<span class=\"token keyword\">let</span> item <span class=\"token operator\">=</span> b<span class=\"token punctuation\">.</span><span class=\"token function\">splice</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token string\">\\'添加1\\'</span><span class=\"token punctuation\">,</span><span class=\"token string\">\\'添加2\\'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [] 没有删除元素，返回空数组</span>\\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [1,2,3,4,5,6,\\'添加1\\',\\'添加2\\',7] 在最后一个元素的前面添加两个元素</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<p>从上述三个栗子可以得出:</p>\\n<ol>\\n<li>数组如果元素不够，会删除到最后一个元素为止</li>\\n<li>操作的元素，包括开始的那个元素</li>\\n<li>可以添加很多个元素</li>\\n<li>添加是在开始的元素前面添加的</li>\\n</ol>\\n<h3 id=\"sort-数组排序\"><a class=\"header-anchor\" href=\"#sort-数组排序\" aria-hidden=\"true\">#</a> sort() 数组排序</h3>\\n<p>定义: sort()方法对数组元素进行排序，并返回这个数组。</p>\\n<p>参数可选: 规定排序顺序的比较函数。</p>\\n<p>默认情况下sort()方法没有传比较函数的话，默认按字母升序，如果不是元素不是字符串的话，会调用<code>toString()</code>方法将元素转化为字符串的Unicode(万国码)位点，然后再比较字符。</p>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code><span class=\"token comment\">// 字符串排列 看起来很正常</span>\\n<span class=\"token keyword\">let</span> a <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"Banana\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Orange\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Apple\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Mango\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\\na<span class=\"token punctuation\">.</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [\"Apple\",\"Banana\",\"Mango\",\"Orange\"]</span>\\n<span class=\"token comment\">// 数字排序的时候 因为转换成Unicode字符串之后，有些数字会比较大会排在后面 这显然不是我们想要的</span>\\n<span class=\"token keyword\">let</span>\\ta <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span><span class=\"token number\">25</span><span class=\"token punctuation\">,</span><span class=\"token number\">8</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">.</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// [1,10,20,25,3,8];</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<p><strong>比较函数的两个参数：</strong></p>\\n<p>sort的比较函数有两个默认参数，要在函数中接收这两个参数，这两个参数是数组中两个要比较的元素，通常我们用 a 和 b 接收两个将要比较的元素：</p>\\n<ul>\\n<li>若比较函数返回值&lt;0，那么a将排到b的前面;</li>\\n<li>若比较函数返回值=0，那么a 和 b 相对位置不变；</li>\\n<li>若比较函数返回值&gt;0，那么b 排在a 将的前面；</li>\\n</ul>\\n<p>对于sort()方法更深层级的内部实现以及处理机制可以看一下这篇文章<a href=\"https://juejin.im/entry/59f7f3346fb9a04514635552\" target=\"_blank\" rel=\"noopener noreferrer\">深入了解javascript的sort方法<OutboundLink/></a></p>\\n<p><strong>sort排序常见用法</strong>：</p>\\n<ol>\\n<li>数组元素为数字的升序、降序:</li>\\n</ol>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code><span class=\"token keyword\">let</span> array <span class=\"token operator\">=</span>  <span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">20</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">25</span><span class=\"token punctuation\">,</span><span class=\"token number\">8</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\\n<span class=\"token comment\">// 升序 a-b &lt; 0   a将排到b的前面，按照a的大小来排序的 </span>\\n<span class=\"token comment\">// 比如被减数a是10，减数是20  10-20 &lt; 0   被减数a(10)在减数b(20)前面   </span>\\narray<span class=\"token punctuation\">.</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\\n    <span class=\"token keyword\">return</span> a<span class=\"token operator\">-</span>b<span class=\"token punctuation\">;</span>\\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [1,3,4,4,8,10,20,25];</span>\\n<span class=\"token comment\">// 降序 被减数和减数调换了  20-10>0 被减数b(20)在减数a(10)的前面</span>\\narray<span class=\"token punctuation\">.</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\\n    <span class=\"token keyword\">return</span> b<span class=\"token operator\">-</span>a<span class=\"token punctuation\">;</span>\\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [25,20,10,8,4,4,3,1];</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br><span class=\"line-number\">11</span><br><span class=\"line-number\">12</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<ol start=\"2\">\\n<li>数组多条件排序</li>\\n</ol>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code><span class=\"token keyword\">let</span> array <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">{</span>id<span class=\"token punctuation\">:</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span>age<span class=\"token punctuation\">:</span><span class=\"token number\">2</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">{</span>id<span class=\"token punctuation\">:</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span>age<span class=\"token punctuation\">:</span><span class=\"token number\">4</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">{</span>id<span class=\"token punctuation\">:</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span>age<span class=\"token punctuation\">:</span><span class=\"token number\">10</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">{</span>id<span class=\"token punctuation\">:</span><span class=\"token number\">9</span><span class=\"token punctuation\">,</span>age<span class=\"token punctuation\">:</span><span class=\"token number\">6</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">{</span>id<span class=\"token punctuation\">:</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span>age<span class=\"token punctuation\">:</span><span class=\"token number\">8</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">{</span>id<span class=\"token punctuation\">:</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span>age<span class=\"token punctuation\">:</span><span class=\"token number\">9</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\\narray<span class=\"token punctuation\">.</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">.</span>id <span class=\"token operator\">===</span> b<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token comment\">// 如果id的值相等，按照age的值降序</span>\\n        <span class=\"token keyword\">return</span> b<span class=\"token punctuation\">.</span>age <span class=\"token operator\">-</span> a<span class=\"token punctuation\">.</span>age\\n    <span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span> <span class=\"token comment\">// 如果id的值不相等，按照id的值升序</span>\\n        <span class=\"token keyword\">return</span> a<span class=\"token punctuation\">.</span>id <span class=\"token operator\">-</span> b<span class=\"token punctuation\">.</span>id\\n    <span class=\"token punctuation\">}</span>\\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\\n<span class=\"token comment\">// [{\"id\":2,\"age\":8},{\"id\":5,\"age\":4},{\"id\":6,\"age\":10},{\"id\":9,\"age\":6},{\"id\":10,\"age\":9},{\"id\":10,\"age\":2}]</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<ol start=\"3\">\\n<li>自定义比较函数，天空才是你的极限</li>\\n</ol>\\n<p>类似的：<strong>运用好返回值，我们可以写出任意符合自己需求的比较函数</strong></p>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code><span class=\"token keyword\">let</span> array <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">{</span>name<span class=\"token punctuation\">:</span><span class=\"token string\">\\'Koro1\\'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">{</span>name<span class=\"token punctuation\">:</span><span class=\"token string\">\\'Koro1\\'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">{</span>name<span class=\"token punctuation\">:</span><span class=\"token string\">\\'OB\\'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">{</span>name<span class=\"token punctuation\">:</span><span class=\"token string\">\\'Koro1\\'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">{</span>name<span class=\"token punctuation\">:</span><span class=\"token string\">\\'OB\\'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">{</span>name<span class=\"token punctuation\">:</span><span class=\"token string\">\\'OB\\'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\\narray<span class=\"token punctuation\">.</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">.</span>name <span class=\"token operator\">===</span> <span class=\"token string\">\\'Koro1\\'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token comment\">// 如果name是\\'Koro1\\' 返回-1 ，-1&lt;0 a排在b的前面</span>\\n        <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span>\\n    <span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span> <span class=\"token comment\">// 如果不是的话，a排在b的后面</span>\\n        <span class=\"token keyword\">return</span> <span class=\"token number\">1</span>\\n    <span class=\"token punctuation\">}</span>\\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\\n<span class=\"token comment\">// [{\"name\":\"Koro1\"},{\"name\":\"Koro1\"},{\"name\":\"Koro1\"},{\"name\":\"OB\"},{\"name\":\"OB\"},{\"name\":\"OB\"}]</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<h3 id=\"pop-删除一个数组中的最后的一个元素\"><a class=\"header-anchor\" href=\"#pop-删除一个数组中的最后的一个元素\" aria-hidden=\"true\">#</a> pop() 删除一个数组中的最后的一个元素</h3>\\n<p>定义: pop() 方法删除一个数组中的最后的一个元素，并且返回这个元素。</p>\\n<p>参数: 无。</p>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code><span class=\"token keyword\">let</span>  a <span class=\"token operator\">=</span>  <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\\n<span class=\"token keyword\">let</span> item <span class=\"token operator\">=</span> a<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 3</span>\\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [1,2]</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<h3 id=\"shift-删除数组的第一个元素\"><a class=\"header-anchor\" href=\"#shift-删除数组的第一个元素\" aria-hidden=\"true\">#</a> shift() 删除数组的第一个元素</h3>\\n<p>定义: shift()方法删除数组的第一个元素，并返回这个元素。</p>\\n<p>参数: 无。</p>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code><span class=\"token keyword\">let</span>  a <span class=\"token operator\">=</span>  <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\\n<span class=\"token keyword\">let</span> item <span class=\"token operator\">=</span> a<span class=\"token punctuation\">.</span><span class=\"token function\">shift</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 1</span>\\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [2,3]</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<h3 id=\"push-向数组的末尾添加元素\"><a class=\"header-anchor\" href=\"#push-向数组的末尾添加元素\" aria-hidden=\"true\">#</a> push() 向数组的末尾添加元素</h3>\\n<p>定义：push() 方法可向数组的末尾添加一个或多个元素，并返回新的长度。</p>\\n<p>参数:  item1, item2, ..., itemX ,要添加到数组末尾的元素</p>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code><span class=\"token keyword\">let</span>  a <span class=\"token operator\">=</span>  <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\\n<span class=\"token keyword\">let</span> item <span class=\"token operator\">=</span> a<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token string\">\\'末尾\\'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 4</span>\\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [1,2,3,\\'末尾\\']</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<h3 id=\"unshift\"><a class=\"header-anchor\" href=\"#unshift\" aria-hidden=\"true\">#</a> unshift()</h3>\\n<p>定义：unshift() 方法可向数组的开头添加一个或更多元素，并返回新的长度。</p>\\n<p>参数:  item1, item2, ..., itemX ,要添加到数组开头的元素</p>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code><span class=\"token keyword\">let</span>  a <span class=\"token operator\">=</span>  <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\\n<span class=\"token keyword\">let</span> item <span class=\"token operator\">=</span> a<span class=\"token punctuation\">.</span><span class=\"token function\">unshift</span><span class=\"token punctuation\">(</span><span class=\"token string\">\\'开头\\'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 4</span>\\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [\\'开头\\',1,2,3]</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<h3 id=\"reverse-颠倒数组中元素的顺序\"><a class=\"header-anchor\" href=\"#reverse-颠倒数组中元素的顺序\" aria-hidden=\"true\">#</a> reverse() 颠倒数组中元素的顺序</h3>\\n<p>定义: reverse() 方法用于颠倒数组中元素的顺序。</p>\\n<p>参数: 无</p>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code><span class=\"token keyword\">let</span>  a <span class=\"token operator\">=</span>  <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\\na<span class=\"token punctuation\">.</span><span class=\"token function\">reverse</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [3,2,1]</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<h3 id=\"es6-copywithin-指定位置的成员复制到其他位置\"><a class=\"header-anchor\" href=\"#es6-copywithin-指定位置的成员复制到其他位置\" aria-hidden=\"true\">#</a> ES6: copyWithin() 指定位置的成员复制到其他位置</h3>\\n<p>定义: 在当前数组内部，将指定位置的成员复制到其他位置,并返回这个数组。</p>\\n<p>语法:</p>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code>array<span class=\"token punctuation\">.</span><span class=\"token function\">copyWithin</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">,</span> start <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> end <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<p>参数:</p>\\n<p>三个参数都是数值，如果不是，会自动转为数值.</p>\\n<ol>\\n<li>target（必需）：从该位置开始替换数据。如果为负值，表示倒数。</li>\\n<li>start（可选）：从该位置开始读取数据，默认为 0。如果为负值，表示倒数。</li>\\n<li>end（可选）：到该位置前停止读取数据，默认等于数组长度。使用负数可从数组结尾处规定位置。</li>\\n</ol>\\n<p>浏览器兼容(MDN): chrome 45,Edge 12,Firefox32,Opera 32,Safari 9, IE 不支持</p>\\n<p>eg:</p>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code><span class=\"token comment\">// -2相当于3号位，-1相当于4号位</span>\\n<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">copyWithin</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\\n<span class=\"token comment\">// [4, 2, 3, 4, 5]</span>\\n<span class=\"token keyword\">let</span> a<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token string\">\\'OB1\\'</span><span class=\"token punctuation\">,</span><span class=\"token string\">\\'Koro1\\'</span><span class=\"token punctuation\">,</span><span class=\"token string\">\\'OB2\\'</span><span class=\"token punctuation\">,</span><span class=\"token string\">\\'Koro2\\'</span><span class=\"token punctuation\">,</span><span class=\"token string\">\\'OB3\\'</span><span class=\"token punctuation\">,</span><span class=\"token string\">\\'Koro3\\'</span><span class=\"token punctuation\">,</span><span class=\"token string\">\\'OB4\\'</span><span class=\"token punctuation\">,</span><span class=\"token string\">\\'Koro4\\'</span><span class=\"token punctuation\">,</span><span class=\"token string\">\\'OB5\\'</span><span class=\"token punctuation\">,</span><span class=\"token string\">\\'Koro5\\'</span><span class=\"token punctuation\">]</span>\\n<span class=\"token comment\">// 2位置开始被替换,3位置开始读取要替换的 5位置前面停止替换</span>\\na<span class=\"token punctuation\">.</span><span class=\"token function\">copyWithin</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span>\\n<span class=\"token comment\">// [\"OB1\",\"Koro1\",\"Koro2\",\"OB3\",\"OB3\",\"Koro3\",\"OB4\",\"Koro4\",\"OB5\",\"Koro5\"] </span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<p>从上述栗子:</p>\\n<ol>\\n<li>第一个参数是开始被替换的元素位置</li>\\n<li>要替换数据的位置范围:从第二个参数是开始读取的元素，在第三个参数前面一个元素停止读取</li>\\n<li>数组的长度不会改变</li>\\n<li><strong>读了几个元素就从开始被替换的地方替换几个元素</strong></li>\\n</ol>\\n<h3 id=\"es6-fill-填充数组\"><a class=\"header-anchor\" href=\"#es6-fill-填充数组\" aria-hidden=\"true\">#</a> ES6: fill() 填充数组</h3>\\n<p>定义:  使用给定值，填充一个数组。</p>\\n<p>参数:</p>\\n<p>第一个元素(必须): 要填充数组的值</p>\\n<p>第二个元素(可选): 填充的开始位置,默认值为0</p>\\n<p>第三个元素(可选)：填充的结束位置，默认是为<code>this.length</code></p>\\n<p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/fill#%E6%B5%8F%E8%A7%88%E5%99%A8%E5%85%BC%E5%AE%B9%E6%80%A7\" target=\"_blank\" rel=\"noopener noreferrer\">MDN浏览器兼容<OutboundLink/></a></p>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code><span class=\"token punctuation\">[</span><span class=\"token string\">\\'a\\'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\\'b\\'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\\'c\\'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">fill</span><span class=\"token punctuation\">(</span><span class=\"token number\">7</span><span class=\"token punctuation\">)</span>\\n<span class=\"token comment\">// [7, 7, 7]</span>\\n<span class=\"token punctuation\">[</span><span class=\"token string\">\\'a\\'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\\'b\\'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\\'c\\'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">fill</span><span class=\"token punctuation\">(</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\\n<span class=\"token comment\">// [\\'a\\', 7, \\'c\\']</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<hr>\\n<h3 id=\"不改变原数组的方法-8个\"><a class=\"header-anchor\" href=\"#不改变原数组的方法-8个\" aria-hidden=\"true\">#</a> 不改变原数组的方法(8个):</h3>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code><span class=\"token constant\">ES5</span>：\\nslice、join、toLocateString、toStrigin、cancat、indexOf、lastIndexOf、\\n<span class=\"token constant\">ES7</span>：\\nincludes\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<h3 id=\"slice-浅拷贝数组的元素\"><a class=\"header-anchor\" href=\"#slice-浅拷贝数组的元素\" aria-hidden=\"true\">#</a> slice() 浅拷贝数组的元素</h3>\\n<p>定义： 方法返回一个从开始到结束（不包括结束）选择的数组的一部分浅拷贝到一个新数组对象，且原数组不会被修改。</p>\\n<p><strong>注意</strong>：字符串也有一个slice() 方法是用来提取字符串的，不要弄混了。</p>\\n<p>语法:</p>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code>array<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span>begin<span class=\"token punctuation\">,</span> end<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<p>参数:</p>\\n<p>begin(可选): 索引数值,接受负值，从该索引处开始提取原数组中的元素,默认值为0。</p>\\n<p>end(可选):索引数值(不包括),接受负值，在该索引处前结束提取原数组元素，默认值为数组末尾(包括最后一个元素)。</p>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code><span class=\"token keyword\">let</span> a<span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\\'hello\\'</span><span class=\"token punctuation\">,</span><span class=\"token string\">\\'world\\'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\\n<span class=\"token keyword\">let</span> b<span class=\"token operator\">=</span>a<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [\\'hello\\']</span>\\na<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token string\">\\'改变原数组\\'</span><span class=\"token punctuation\">;</span>\\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [\\'改变原数组\\',\\'world\\'] [\\'hello\\']</span>\\nb<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token string\">\\'改变拷贝的数组\\'</span><span class=\"token punctuation\">;</span>\\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [\\'改变原数组\\',\\'world\\'] [\\'改变拷贝的数组\\']</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<p>如上：新数组是浅拷贝的，<strong>元素是简单数据类型，改变之后不会互相干扰</strong>。</p>\\n<p>如果是<strong>复杂数据类型(对象,数组)的话，改变其中一个，另外一个也会改变</strong>。</p>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code><span class=\"token keyword\">let</span> a<span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">{</span>name<span class=\"token punctuation\">:</span><span class=\"token string\">\\'OBKoro1\\'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\\n<span class=\"token keyword\">let</span> b<span class=\"token operator\">=</span>a<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">,</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [{\"name\":\"OBKoro1\"}]  [{\"name\":\"OBKoro1\"}]</span>\\n<span class=\"token comment\">// a[0].name=\\'改变原数组\\';</span>\\n<span class=\"token comment\">// console.log(b,a); // [{\"name\":\"改变原数组\"}] [{\"name\":\"改变原数组\"}]</span>\\n<span class=\"token comment\">// b[0].name=\\'改变拷贝数组\\',b[0].koro=\\'改变拷贝数组\\';</span>\\n<span class=\"token comment\">//  [{\"name\":\"改变拷贝数组\",\"koro\":\"改变拷贝数组\"}] [{\"name\":\"改变拷贝数组\",\"koro\":\"改变拷贝数组\"}]</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<p>原因在定义上面说过了的：slice()是浅拷贝，对于复杂的数据类型浅拷贝，拷贝的只是指向原数组的指针，所以无论改变原数组，还是浅拷贝的数组，都是改变原数组的数据。</p>\\n<h3 id=\"join-数组转字符串\"><a class=\"header-anchor\" href=\"#join-数组转字符串\" aria-hidden=\"true\">#</a> join()  数组转字符串</h3>\\n<p>定义:  join() 方法用于把数组中的所有元素通过指定的分隔符进行分隔放入一个字符串，返回生成的字符串。</p>\\n<p>语法:</p>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code>array<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<p>参数:</p>\\n<p>str(可选): 指定要使用的分隔符，默认使用逗号作为分隔符。</p>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code><span class=\"token keyword\">let</span> a<span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\\'hello\\'</span><span class=\"token punctuation\">,</span><span class=\"token string\">\\'world\\'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\\n<span class=\"token keyword\">let</span> str<span class=\"token operator\">=</span>a<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \\'hello,world\\'</span>\\n<span class=\"token keyword\">let</span> str2<span class=\"token operator\">=</span>a<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">\\'+\\'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \\'hello+world\\'</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<p>使用join方法或者下文说到的toString方法时，当数组中的元素也是数组或者是对象时会出现什么情况？</p>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code><span class=\"token keyword\">let</span> a<span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token string\">\\'OBKoro1\\'</span><span class=\"token punctuation\">,</span><span class=\"token string\">\\'23\\'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token string\">\\'test\\'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\\n<span class=\"token keyword\">let</span> str1<span class=\"token operator\">=</span>a<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// OBKoro1,23,test</span>\\n<span class=\"token keyword\">let</span> b<span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">{</span>name<span class=\"token punctuation\">:</span><span class=\"token string\">\\'OBKoro1\\'</span><span class=\"token punctuation\">,</span>age<span class=\"token punctuation\">:</span><span class=\"token string\">\\'23\\'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span><span class=\"token string\">\\'test\\'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\\n<span class=\"token keyword\">let</span> str2 <span class=\"token operator\">=</span> b<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [object Object],test</span>\\n<span class=\"token comment\">// 对象转字符串推荐JSON.stringify(obj);</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<p>所以，<code>join()/toString()</code>方法在数组元素是数组的时候，会将里面的数组也调用<code>join()/toString()</code>,如果是对象的话，对象会被转为<code>[object Object]</code>字符串。</p>\\n<h3 id=\"tolocalestring-数组转字符串\"><a class=\"header-anchor\" href=\"#tolocalestring-数组转字符串\" aria-hidden=\"true\">#</a> toLocaleString() 数组转字符串</h3>\\n<p>定义: 返回一个表示数组元素的字符串。该字符串由数组中的每个元素的 toLocaleString() 返回值经调用 join() 方法连接（由逗号隔开）组成。</p>\\n<p>语法:</p>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code>array<span class=\"token punctuation\">.</span><span class=\"token function\">toLocaleString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<p>参数：无。</p>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code><span class=\"token keyword\">let</span> a<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">{</span>name<span class=\"token punctuation\">:</span><span class=\"token string\">\\'OBKoro1\\'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span><span class=\"token number\">23</span><span class=\"token punctuation\">,</span><span class=\"token string\">\\'abcd\\'</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\\n<span class=\"token keyword\">let</span> str<span class=\"token operator\">=</span>a<span class=\"token punctuation\">.</span><span class=\"token function\">toLocaleString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [object Object],23,abcd,2018/5/28 下午1:52:20 </span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<p>如上述栗子：调用数组的<code>toLocaleString</code>方法，数组中的每个元素都会调用自身的<code>toLocaleString</code>方法，对象调用对象的<code>toLocaleString</code>,Date调用Date的<code>toLocaleString</code>。</p>\\n<h3 id=\"tostring-数组转字符串-不推荐\"><a class=\"header-anchor\" href=\"#tostring-数组转字符串-不推荐\" aria-hidden=\"true\">#</a> toString() 数组转字符串 不推荐</h3>\\n<p>定义: toString() 方法可把数组转换为由逗号链接起来的字符串。</p>\\n<p>语法:</p>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code>array<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<p>参数: 无。</p>\\n<p>该方法的效果和join方法一样，都是用于数组转字符串的，但是与join方法相比没有优势，也不能自定义字符串的分隔符，因此不推荐使用。</p>\\n<p><strong>值得注意的是</strong>：当数组和字符串操作的时候，js 会调用这个方法将数组自动转换成字符串</p>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code><span class=\"token keyword\">let</span> b<span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span> <span class=\"token string\">\\'toString\\'</span><span class=\"token punctuation\">,</span><span class=\"token string\">\\'演示\\'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// toString,演示</span>\\n<span class=\"token keyword\">let</span> a<span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\\'调用toString\\'</span><span class=\"token punctuation\">,</span><span class=\"token string\">\\'连接在我后面\\'</span><span class=\"token punctuation\">]</span><span class=\"token operator\">+</span><span class=\"token string\">\\'啦啦啦\\'</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 调用toString,连接在我后面啦啦啦</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<h3 id=\"cancat\"><a class=\"header-anchor\" href=\"#cancat\" aria-hidden=\"true\">#</a> cancat</h3>\\n<p>定义： 方法用于合并两个或多个数组，返回一个新数组。</p>\\n<p>语法：</p>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code><span class=\"token keyword\">let</span> newArr <span class=\"token operator\">=</span>oldArray<span class=\"token punctuation\">.</span><span class=\"token function\">concat</span><span class=\"token punctuation\">(</span>arrayX<span class=\"token punctuation\">,</span>arrayX<span class=\"token punctuation\">,</span><span class=\"token operator\">...</span><span class=\"token operator\">...</span><span class=\"token punctuation\">,</span>arrayX<span class=\"token punctuation\">)</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<p>参数：</p>\\n<p>arrayX（必须）：该参数可以是具体的值，也可以是数组对象。可以是任意多个。</p>\\n<p>eg1:</p>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code><span class=\"token keyword\">let</span> a <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\\n<span class=\"token keyword\">let</span> b <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\\n<span class=\"token comment\">//连接两个数组</span>\\n<span class=\"token keyword\">let</span> newVal<span class=\"token operator\">=</span>a<span class=\"token punctuation\">.</span><span class=\"token function\">concat</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [1,2,3,4,5,6]</span>\\n<span class=\"token comment\">// 连接三个数组</span>\\n<span class=\"token keyword\">let</span> c <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">]</span>\\n<span class=\"token keyword\">let</span> newVal2 <span class=\"token operator\">=</span> a<span class=\"token punctuation\">.</span><span class=\"token function\">concat</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [1,2,3,4,5,6,7,8,9]</span>\\n<span class=\"token comment\">// 添加元素</span>\\n<span class=\"token keyword\">let</span> newVal3 <span class=\"token operator\">=</span> a<span class=\"token punctuation\">.</span><span class=\"token function\">concat</span><span class=\"token punctuation\">(</span><span class=\"token string\">\\'添加元素\\'</span><span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">,</span><span class=\"token string\">\\'再加一个\\'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \\n<span class=\"token comment\">// [1,2,3,\"添加元素\",4,5,6,7,8,9,\"再加一个\"]</span>\\n<span class=\"token comment\">// 合并嵌套数组  会浅拷贝嵌套数组</span>\\n<span class=\"token keyword\">let</span> d <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\\n<span class=\"token keyword\">let</span> f <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\\n<span class=\"token keyword\">let</span> newVal4 <span class=\"token operator\">=</span> d<span class=\"token punctuation\">.</span><span class=\"token function\">concat</span><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [1,2,3,[4]]</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br><span class=\"line-number\">11</span><br><span class=\"line-number\">12</span><br><span class=\"line-number\">13</span><br><span class=\"line-number\">14</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<p><strong>ES6扩展运算符<code>...</code>合并数组</strong>：</p>\\n<p>因为ES6的语法更简洁易懂，所以现在合并数组我大部分采用<code>...</code>来处理，<code>...</code>运算符可以实现<code>cancat</code>的每个栗子，且更简洁和具有高度自定义数组元素位置的效果。</p>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code><span class=\"token keyword\">let</span> a <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span>\\n<span class=\"token keyword\">let</span> b <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token operator\">...</span>a<span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span>\\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//  [2, 3, 4, 5] [4,2,3,4,5,4,4]</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<p>更多关于扩展符的详细内容移步阮一峰大神的<a href=\"http://es6.ruanyifeng.com/#docs/array#%E6%89%A9%E5%B1%95%E8%BF%90%E7%AE%97%E7%AC%A6\" target=\"_blank\" rel=\"noopener noreferrer\">ECMAScript 6 入门<OutboundLink/></a></p>\\n<h3 id=\"indexof-查找数组是否存在某个元素，返回下标\"><a class=\"header-anchor\" href=\"#indexof-查找数组是否存在某个元素，返回下标\" aria-hidden=\"true\">#</a> indexOf() 查找数组是否存在某个元素，返回下标</h3>\\n<p>定义: 返回在数组中可以找到一个给定元素的第一个索引，如果不存在，则返回-1。</p>\\n<p>语法:</p>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code>array<span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span>searchElement<span class=\"token punctuation\">,</span>fromIndex<span class=\"token punctuation\">)</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<p>参数:</p>\\n<p>searchElement(必须):被查找的元素</p>\\n<p>fromIndex(可选):开始查找的位置(不能大于等于数组的长度，返回-1)，接受负值，默认值为0。</p>\\n<p>严格相等的搜索:</p>\\n<p>数组的indexOf搜索跟字符串的indexOf不一样,数组的indexOf使用严格相等<code>===</code>搜索元素，即<strong>数组元素要完全匹配</strong>才能搜索成功。</p>\\n<p><strong>注意</strong>：indexOf()不能识别<code>NaN</code></p>\\n<p>eg:</p>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code><span class=\"token keyword\">let</span> a<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token string\">\\'啦啦\\'</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">24</span><span class=\"token punctuation\">,</span><span class=\"token number\">NaN</span><span class=\"token punctuation\">]</span>\\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\\'啦\\'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// -1 </span>\\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\\'NaN\\'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// -1 </span>\\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\\'啦啦\\'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 0</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<p>使用场景：</p>\\n<ol>\\n<li><a href=\"https://juejin.im/post/5aad40e4f265da237f1e12ed#heading-10\" target=\"_blank\" rel=\"noopener noreferrer\">数组去重<OutboundLink/></a></li>\\n<li>根据获取的数组下标执行操作，改变数组中的值等。</li>\\n<li>判断是否存在，执行操作。</li>\\n</ol>\\n<h3 id=\"lastindexof-查找指定元素在数组中的最后一个位置\"><a class=\"header-anchor\" href=\"#lastindexof-查找指定元素在数组中的最后一个位置\" aria-hidden=\"true\">#</a> lastIndexOf() 查找指定元素在数组中的最后一个位置</h3>\\n<p>定义:  方法返回指定元素,在数组中的最后一个的索引，如果不存在则返回 -1。（从数组后面往前查找）</p>\\n<p>语法:</p>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code>arr<span class=\"token punctuation\">.</span><span class=\"token function\">lastIndexOf</span><span class=\"token punctuation\">(</span>searchElement<span class=\"token punctuation\">,</span>fromIndex<span class=\"token punctuation\">)</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<p>参数:</p>\\n<p>searchElement(必须): 被查找的元素</p>\\n<p>fromIndex(可选): 逆向查找开始位置，默认值数组的长度-1，即查找整个数组。</p>\\n<p>关于fromIndex有三个规则:</p>\\n<ol>\\n<li>正值。如果该值大于或等于数组的长度，则整个数组会被查找。</li>\\n<li>负值。将其视为从数组末尾向前的偏移。(比如-2，从数组最后第二个元素开始往前查找)</li>\\n<li>负值。其绝对值大于数组长度，则方法返回 -1，即数组不会被查找。</li>\\n</ol>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code><span class=\"token keyword\">let</span> a<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token string\">\\'OB\\'</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token string\">\\'Koro1\\'</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token string\">\\'Koro1\\'</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token string\">\\'Koro1\\'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 数组长度为10</span>\\n<span class=\"token comment\">// let b=a.lastIndexOf(\\'Koro1\\',4); // 从下标4开始往前找 返回下标2</span>\\n<span class=\"token comment\">// let b=a.lastIndexOf(\\'Koro1\\',100); //  大于或数组的长度 查找整个数组 返回9</span>\\n<span class=\"token comment\">// let b=a.lastIndexOf(\\'Koro1\\',-11); // -1 数组不会被查找</span>\\n<span class=\"token keyword\">let</span> b<span class=\"token operator\">=</span>a<span class=\"token punctuation\">.</span><span class=\"token function\">lastIndexOf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\\'Koro1\\'</span><span class=\"token punctuation\">,</span><span class=\"token operator\">-</span><span class=\"token number\">9</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 从第二个元素4往前查找，没有找到 返回-1</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<h3 id=\"es7-includes-查找数组是否包含某个元素-返回布尔\"><a class=\"header-anchor\" href=\"#es7-includes-查找数组是否包含某个元素-返回布尔\" aria-hidden=\"true\">#</a> ES7 includes() 查找数组是否包含某个元素 返回布尔</h3>\\n<p>定义： 返回一个布尔值，表示某个数组是否包含给定的值</p>\\n<p>语法：</p>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code>array<span class=\"token punctuation\">.</span><span class=\"token function\">includes</span><span class=\"token punctuation\">(</span>searchElement<span class=\"token punctuation\">,</span>fromIndex<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<p>参数：</p>\\n<p>searchElement(必须):被查找的元素</p>\\n<p>fromIndex(可选):默认值为0，参数表示搜索的起始位置，接受负值。正值超过数组长度，数组不会被搜索，返回false。负值绝对值超过长数组度，重置从0开始搜索。</p>\\n<p><strong>includes方法是为了弥补indexOf方法的缺陷而出现的:</strong></p>\\n<ol>\\n<li>indexOf方法不能识别<code>NaN</code></li>\\n<li>indexOf方法检查是否包含某个值不够语义化，需要判断是否不等于<code>-1</code>，表达不够直观</li>\\n</ol>\\n<p>eg:</p>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code><span class=\"token keyword\">let</span> a<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token string\">\\'OB\\'</span><span class=\"token punctuation\">,</span><span class=\"token string\">\\'Koro1\\'</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">NaN</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\\n<span class=\"token comment\">// let b=a.includes(NaN); // true 识别NaN</span>\\n<span class=\"token comment\">// let b=a.includes(\\'Koro1\\',100); // false 超过数组长度 不搜索</span>\\n<span class=\"token comment\">// let b=a.includes(\\'Koro1\\',-3);  // true 从倒数第三个元素开始搜索 </span>\\n<span class=\"token comment\">// let b=a.includes(\\'Koro1\\',-100);  // true 负值绝对值超过数组长度，搜索整个数组</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<p>兼容性(MDN): chrome47, Firefox 43,Edge 14,Opera 34, Safari 9,IE 未实现。</p>\\n<hr>\\n<h3 id=\"遍历方法-12个\"><a class=\"header-anchor\" href=\"#遍历方法-12个\" aria-hidden=\"true\">#</a> 遍历方法(12个):</h3>\\n<p>js中遍历数组并不会改变原始数组的方法总共有12个:</p>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code><span class=\"token constant\">ES5</span>：\\nforEach、every 、some、 filter、map、reduce、reduceRight、\\n<span class=\"token constant\">ES6</span>：\\nfind、findIndex、keys、values、entries\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<h3 id=\"关于遍历：\"><a class=\"header-anchor\" href=\"#关于遍历：\" aria-hidden=\"true\">#</a> 关于遍历：</h3>\\n<ul>\\n<li>关于遍历的效率，可以看一下这篇<a href=\"http://louiszhai.github.io/2015/12/18/traverse/#%E6%B5%8B%E8%AF%95%E5%90%84%E6%96%B9%E6%B3%95%E6%95%88%E7%8E%87\" target=\"_blank\" rel=\"noopener noreferrer\">详解JS遍历<OutboundLink/></a></li>\\n<li>尽量不要在遍历的时候，修改后面要遍历的值</li>\\n<li>尽量不要在遍历的时候修改数组的长度（删除/添加）</li>\\n</ul>\\n<h3 id=\"foreach\"><a class=\"header-anchor\" href=\"#foreach\" aria-hidden=\"true\">#</a> forEach</h3>\\n<p>定义: 按升序为数组中含有效值的每一项执行一次回调函数。</p>\\n<p>语法：</p>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code>array<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>currentValue<span class=\"token punctuation\">,</span> index<span class=\"token punctuation\">,</span> arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> thisValue<span class=\"token punctuation\">)</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<p>参数:</p>\\n<p>function(必须): 数组中每个元素需要调用的函数。</p>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code><span class=\"token comment\">// 回调函数的参数</span>\\n<span class=\"token number\">1.</span> <span class=\"token function\">currentValue</span><span class=\"token punctuation\">(</span>必须<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>数组当前元素的值\\n<span class=\"token number\">2.</span> <span class=\"token function\">index</span><span class=\"token punctuation\">(</span>可选<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> 当前元素的索引值\\n<span class=\"token number\">3.</span> <span class=\"token function\">arr</span><span class=\"token punctuation\">(</span>可选<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>数组对象本身\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<p>thisValue(可选):  当执行回调函数时this绑定对象的值，默认值为<code>undefined</code></p>\\n<p><strong>关于forEach()你要知道</strong>：</p>\\n<ul>\\n<li>无法中途退出循环，只能用<code>return</code>退出本次回调，进行下一次回调。</li>\\n<li>它总是返回 undefined值,即使你return了一个值。</li>\\n</ul>\\n<h3 id=\"下面类似语法同样适用这些规则\"><a class=\"header-anchor\" href=\"#下面类似语法同样适用这些规则\" aria-hidden=\"true\">#</a> 下面类似语法同样适用这些规则</h3>\\n<ol>\\n<li>对于空数组是不会执行回调函数的</li>\\n<li>对于已在迭代过程中删除的元素，或者空元素会跳过回调函数</li>\\n<li>遍历次数再第一次循环前就会确定，再添加到数组中的元素不会被遍历。</li>\\n<li>如果已经存在的值被改变，则传递给 callback 的值是遍历到他们那一刻的值。</li>\\n</ol>\\n<p>eg:</p>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code><span class=\"token keyword\">let</span> a <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 最后第二个元素是空的，不会遍历(undefined、null会遍历)</span>\\n<span class=\"token keyword\">let</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> name<span class=\"token punctuation\">:</span> <span class=\"token string\">\\'OBKoro1\\'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\\n<span class=\"token keyword\">let</span> result <span class=\"token operator\">=</span> a<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">,</span> index<span class=\"token punctuation\">,</span> array<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> \\n    a<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\\'改变元素\\'</span><span class=\"token punctuation\">;</span>\\n    a<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token string\">\\'添加到尾端，不会被遍历\\'</span><span class=\"token punctuation\">)</span>\\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">,</span> <span class=\"token string\">\\'forEach传递的第一个参数\\'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 分别打印 1 ,2 ,改变元素</span>\\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// OBKoro1 打印三次 this绑定在obj对象上</span>\\n    <span class=\"token comment\">// break; // break会报错</span>\\n    <span class=\"token keyword\">return</span> value<span class=\"token punctuation\">;</span> <span class=\"token comment\">// return只能结束本次回调 会执行下次回调</span>\\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\\'不会执行，因为return 会执行下一次循环回调\\'</span><span class=\"token punctuation\">)</span>\\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 即使return了一个值,也还是返回undefined</span>\\n<span class=\"token comment\">// 回调函数也接受接头函数写法</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br><span class=\"line-number\">11</span><br><span class=\"line-number\">12</span><br><span class=\"line-number\">13</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<h3 id=\"every-检测数组所有元素是否都符合判断条件\"><a class=\"header-anchor\" href=\"#every-检测数组所有元素是否都符合判断条件\" aria-hidden=\"true\">#</a> every 检测数组所有元素是否都符合判断条件</h3>\\n<p>定义: 方法用于检测数组所有元素是否都符合函数定义的条件</p>\\n<p>语法：</p>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code>array<span class=\"token punctuation\">.</span><span class=\"token function\">every</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>currentValue<span class=\"token punctuation\">,</span> index<span class=\"token punctuation\">,</span> arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> thisValue<span class=\"token punctuation\">)</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<p><strong>参数:(这几个方法的参数，语法都类似)</strong></p>\\n<p>function(必须): 数组中<strong>每个元素需要调用的函数</strong>。</p>\\n<ol>\\n<li>currentValue(必须),数组当前元素的值</li>\\n<li>index(可选), 当前元素的索引值</li>\\n<li>arr(可选),数组对象本身</li>\\n</ol>\\n<p>thisValue(可选):  当执行回调函数时this绑定对象的值，默认值为<code>undefined</code></p>\\n<p>方法返回值规则:</p>\\n<ol>\\n<li>如果数组中检测到<strong>有一个元素不满足，则整个表达式返回 false</strong>，且剩余的元素不会再进行检测。</li>\\n<li>如果所有元素<strong>都满足条件，则返回 true</strong>。=</li>\\n</ol>\\n<p>eg:</p>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">isBigEnough</span><span class=\"token punctuation\">(</span>element<span class=\"token punctuation\">,</span> index<span class=\"token punctuation\">,</span> array<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> \\n    <span class=\"token keyword\">return</span> element <span class=\"token operator\">>=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 判断数组中的所有元素是否都大于10</span>\\n<span class=\"token punctuation\">}</span>\\n<span class=\"token keyword\">let</span> result <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">12</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">130</span><span class=\"token punctuation\">,</span> <span class=\"token number\">44</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">every</span><span class=\"token punctuation\">(</span>isBigEnough<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// false</span>\\n<span class=\"token keyword\">let</span> result <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">12</span><span class=\"token punctuation\">,</span> <span class=\"token number\">54</span><span class=\"token punctuation\">,</span> <span class=\"token number\">18</span><span class=\"token punctuation\">,</span> <span class=\"token number\">130</span><span class=\"token punctuation\">,</span> <span class=\"token number\">44</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">every</span><span class=\"token punctuation\">(</span>isBigEnough<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\\n<span class=\"token comment\">// 接受箭头函数写法 </span>\\n<span class=\"token punctuation\">[</span><span class=\"token number\">12</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">130</span><span class=\"token punctuation\">,</span> <span class=\"token number\">44</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">every</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">=></span> x <span class=\"token operator\">>=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// false</span>\\n<span class=\"token punctuation\">[</span><span class=\"token number\">12</span><span class=\"token punctuation\">,</span> <span class=\"token number\">54</span><span class=\"token punctuation\">,</span> <span class=\"token number\">18</span><span class=\"token punctuation\">,</span> <span class=\"token number\">130</span><span class=\"token punctuation\">,</span> <span class=\"token number\">44</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">every</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">=></span> x <span class=\"token operator\">>=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<h3 id=\"some-数组中的是否有满足判断条件的元素\"><a class=\"header-anchor\" href=\"#some-数组中的是否有满足判断条件的元素\" aria-hidden=\"true\">#</a> some 数组中的是否有满足判断条件的元素</h3>\\n<p>定义：数组中的是否有满足判断条件的元素</p>\\n<p>语法：</p>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code>array<span class=\"token punctuation\">.</span><span class=\"token function\">some</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>currentValue<span class=\"token punctuation\">,</span> index<span class=\"token punctuation\">,</span> arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> thisValue<span class=\"token punctuation\">)</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<p>参数:(这几个方法的参数，语法都类似)</p>\\n<p>function(必须): 数组中每个元素需要调用的函数。</p>\\n<ol>\\n<li>currentValue(必须),数组当前元素的值</li>\\n<li>index(可选), 当前元素的索引值</li>\\n<li>arr(可选),数组对象本身</li>\\n</ol>\\n<p>thisValue(可选):  当执行回调函数时this绑定对象的值，默认值为<code>undefined</code></p>\\n<p><strong>方法返回值规则</strong>：</p>\\n<ol>\\n<li>如果<strong>有一个元素满足条件，则表达式返回true</strong>, 剩余的元素不会再执行检测。</li>\\n<li>如果<strong>没有满足条件的元素，则返回false</strong>。</li>\\n</ol>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">isBigEnough</span><span class=\"token punctuation\">(</span>element<span class=\"token punctuation\">,</span> index<span class=\"token punctuation\">,</span> array<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>element <span class=\"token operator\">>=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//数组中是否有一个元素大于 10</span>\\n<span class=\"token punctuation\">}</span>\\n<span class=\"token keyword\">let</span> result <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">some</span><span class=\"token punctuation\">(</span>isBigEnough<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// false</span>\\n<span class=\"token keyword\">let</span> result <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">12</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">some</span><span class=\"token punctuation\">(</span>isBigEnough<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<h3 id=\"filter-过滤原始数组，返回新数组\"><a class=\"header-anchor\" href=\"#filter-过滤原始数组，返回新数组\" aria-hidden=\"true\">#</a> filter 过滤原始数组，返回新数组</h3>\\n<p>定义: 返回一个新数组, 其包含通过所提供函数实现的测试的所有元素。</p>\\n<p>语法：</p>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code><span class=\"token keyword\">let</span> new_array <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>currentValue<span class=\"token punctuation\">,</span> index<span class=\"token punctuation\">,</span> arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> thisArg<span class=\"token punctuation\">)</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<p>参数:(这几个方法的参数，语法都类似)</p>\\n<p>function(必须): 数组中每个元素需要调用的函数。</p>\\n<ol>\\n<li>currentValue(必须),数组当前元素的值</li>\\n<li>index(可选), 当前元素的索引值</li>\\n<li>arr(可选),数组对象本身</li>\\n</ol>\\n<p>thisValue(可选):  当执行回调函数时this绑定对象的值，默认值为<code>undefined</code></p>\\n<p>eg:</p>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code><span class=\"token keyword\">let</span> a <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">32</span><span class=\"token punctuation\">,</span> <span class=\"token number\">33</span><span class=\"token punctuation\">,</span> <span class=\"token number\">16</span><span class=\"token punctuation\">,</span> <span class=\"token number\">40</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\\n<span class=\"token keyword\">let</span> result <span class=\"token operator\">=</span> a<span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">,</span> index<span class=\"token punctuation\">,</span> array<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n    <span class=\"token keyword\">return</span> value <span class=\"token operator\">>=</span> <span class=\"token number\">18</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 返回a数组中所有大于18的元素</span>\\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">,</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// [32,33,40] [32,33,16,40]</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<h3 id=\"map-对数组中的每个元素进行处理，返回新的数组\"><a class=\"header-anchor\" href=\"#map-对数组中的每个元素进行处理，返回新的数组\" aria-hidden=\"true\">#</a> map 对数组中的每个元素进行处理，返回新的数组</h3>\\n<p>定义：创建一个新数组，其结果是该数组中的每个元素都调用一个提供的函数后返回的结果。</p>\\n<p>语法：</p>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code><span class=\"token keyword\">let</span> new_array <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>currentValue<span class=\"token punctuation\">,</span> index<span class=\"token punctuation\">,</span> arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> thisArg<span class=\"token punctuation\">)</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<p>参数:(这几个方法的参数，语法都类似)</p>\\n<p>function(必须): 数组中每个元素需要调用的函数。</p>\\n<ol>\\n<li>currentValue(必须),数组当前元素的值</li>\\n<li>index(可选), 当前元素的索引值</li>\\n<li>arr(可选),数组对象本身</li>\\n</ol>\\n<p>thisValue(可选):  当执行回调函数时this绑定对象的值，默认值为<code>undefined</code></p>\\n<p>eg:</p>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code><span class=\"token keyword\">let</span> a <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\\'1\\'</span><span class=\"token punctuation\">,</span><span class=\"token string\">\\'2\\'</span><span class=\"token punctuation\">,</span><span class=\"token string\">\\'3\\'</span><span class=\"token punctuation\">,</span><span class=\"token string\">\\'4\\'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\\n<span class=\"token keyword\">let</span> result <span class=\"token operator\">=</span> a<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">,</span> index<span class=\"token punctuation\">,</span> array<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n<span class=\"token keyword\">return</span> value <span class=\"token operator\">+</span> <span class=\"token string\">\\'新数组的新元素\\'</span>\\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \\n<span class=\"token comment\">// [\"1新数组的新元素\",\"2新数组的新元素\",\"3新数组的新元素\",\"4新数组的新元素\"] [\"1\",\"2\",\"3\",\"4\"]</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<h3 id=\"reduce-为数组提供累加器，合并为一个值\"><a class=\"header-anchor\" href=\"#reduce-为数组提供累加器，合并为一个值\" aria-hidden=\"true\">#</a> reduce 为数组提供累加器，合并为一个值</h3>\\n<p>定义：reduce() 方法对累加器和数组中的每个元素（从左到右）应用一个函数，最终合并为一个值。</p>\\n<p>语法：</p>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code>array<span class=\"token punctuation\">.</span><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>total<span class=\"token punctuation\">,</span> currentValue<span class=\"token punctuation\">,</span> currentIndex<span class=\"token punctuation\">,</span> arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> initialValue<span class=\"token punctuation\">)</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<p>参数：</p>\\n<p>function(必须): 数组中每个元素需要调用的函数。</p>\\n<ol>\\n<li>total(必须)，初始值, 或者上一次调用回调返回的值</li>\\n<li>currentValue(必须),数组当前元素的值</li>\\n<li>index(可选), 当前元素的索引值</li>\\n<li>arr(可选),数组对象本身</li>\\n</ol>\\n<p>initialValue(可选): 指定第一次回调 的第一个参数。</p>\\n<p><strong>回调第一次执行时</strong>:</p>\\n<ul>\\n<li>如果 initialValue 在调用 reduce 时被提供，那么第一个 total 将等于 initialValue，此时 currentValue 等于数组中的第一个值；</li>\\n<li>如果 initialValue 未被提供，那么 total 等于数组中的第一个值，currentValue 等于数组中的第二个值。此时如果数组为空，那么将抛出 TypeError。</li>\\n<li>如果数组仅有一个元素，并且没有提供 initialValue，或提供了 initialValue 但数组为空，那么回调不会被执行，数组的唯一值将被返回。</li>\\n</ul>\\n<p>eg:</p>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code><span class=\"token comment\">// 数组求和 </span>\\n<span class=\"token keyword\">let</span> sum <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n    <span class=\"token keyword\">return</span> a <span class=\"token operator\">+</span> b<span class=\"token punctuation\">;</span>\\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\n<span class=\"token comment\">// 6</span>\\n<span class=\"token comment\">// 将二维数组转化为一维 将数组元素展开</span>\\n<span class=\"token keyword\">let</span> flattened <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span>\\n    <span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> a<span class=\"token punctuation\">.</span><span class=\"token function\">concat</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\\n    <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\n<span class=\"token comment\">// [0, 1, 2, 3, 4, 5]</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br><span class=\"line-number\">11</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<h3 id=\"reduceright-从右至左累加\"><a class=\"header-anchor\" href=\"#reduceright-从右至左累加\" aria-hidden=\"true\">#</a> reduceRight  从右至左累加</h3>\\n<p>这个方法除了与reduce执行方向相反外，其他完全与其一致，请参考上述 reduce 方法介绍。</p>\\n<h3 id=\"es6：find-findindex-根据条件找到数组成员\"><a class=\"header-anchor\" href=\"#es6：find-findindex-根据条件找到数组成员\" aria-hidden=\"true\">#</a> ES6：find()&amp; findIndex() 根据条件找到数组成员</h3>\\n<p>find()定义：用于找出第一个符合条件的数组成员，并返回该成员，如果没有符合条件的成员，则返回undefined。</p>\\n<p>findIndex()定义：返回第一个符合条件的数组成员的位置，如果所有成员都不符合条件，则返回-1。</p>\\n<p>这两个方法</p>\\n<p>语法：</p>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code><span class=\"token keyword\">let</span> item <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>currentValue<span class=\"token punctuation\">,</span> index<span class=\"token punctuation\">,</span> arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> thisArg<span class=\"token punctuation\">)</span>\\n<span class=\"token keyword\">let</span> index <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">.</span><span class=\"token function\">findIndex</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>currentValue<span class=\"token punctuation\">,</span> index<span class=\"token punctuation\">,</span> arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> thisArg<span class=\"token punctuation\">)</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<p>参数:(这几个方法的参数，语法都类似)</p>\\n<p>function(必须): 数组中每个元素需要调用的函数。</p>\\n<ol>\\n<li>currentValue(必须),数组当前元素的值</li>\\n<li>index(可选), 当前元素的索引值</li>\\n<li>arr(可选),数组对象本身</li>\\n</ol>\\n<p>thisValue(可选):  当执行回调函数时this绑定对象的值，默认值为<code>undefined</code></p>\\n<p>这两个方法都可以识别<code>NaN</code>,弥补了<code>indexOf</code>的不足.</p>\\n<p>eg:</p>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code><span class=\"token comment\">// find</span>\\n<span class=\"token keyword\">let</span> a <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> n <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 返回元素-5</span>\\n<span class=\"token keyword\">let</span> b <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span><span class=\"token number\">NaN</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">is</span><span class=\"token punctuation\">(</span><span class=\"token number\">NaN</span><span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 返回元素NaN</span>\\n<span class=\"token comment\">// findIndex</span>\\n<span class=\"token keyword\">let</span> a <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">findIndex</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> n <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 返回索引2</span>\\n<span class=\"token keyword\">let</span> b <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span><span class=\"token number\">NaN</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">findIndex</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">is</span><span class=\"token punctuation\">(</span><span class=\"token number\">NaN</span><span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 返回索引4</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<p>浏览器兼容(MDN):Chrome 45,Firefox 25,Opera 32, Safari 8, Edge yes,</p>\\n<h3 id=\"es6-keys-values-entries-遍历键名、遍历键值、遍历键名-键值\"><a class=\"header-anchor\" href=\"#es6-keys-values-entries-遍历键名、遍历键值、遍历键名-键值\" aria-hidden=\"true\">#</a> ES6 keys()&amp;values()&amp;entries() 遍历键名、遍历键值、遍历键名+键值</h3>\\n<p>定义：三个方法都返回一个新的 Array Iterator 对象，对象根据方法不同包含不同的值。</p>\\n<p>语法：</p>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code>array<span class=\"token punctuation\">.</span><span class=\"token function\">keys</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\\narray<span class=\"token punctuation\">.</span><span class=\"token function\">values</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\\narray<span class=\"token punctuation\">.</span><span class=\"token function\">entries</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<p>参数：无。</p>\\n<p>遍历栗子(摘自<a href=\"http://es6.ruanyifeng.com/#docs/array#%E6%95%B0%E7%BB%84%E5%AE%9E%E4%BE%8B%E7%9A%84-entries%EF%BC%8Ckeys-%E5%92%8C-values\" target=\"_blank\" rel=\"noopener noreferrer\">ECMAScript 6 入门<OutboundLink/></a>)：</p>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> index <span class=\"token keyword\">of</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\\'a\\'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\\'b\\'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">keys</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\n<span class=\"token punctuation\">}</span>\\n<span class=\"token comment\">// 0</span>\\n<span class=\"token comment\">// 1</span>\\n\\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> elem <span class=\"token keyword\">of</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\\'a\\'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\\'b\\'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">values</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>elem<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\n<span class=\"token punctuation\">}</span>\\n<span class=\"token comment\">// \\'a\\'</span>\\n<span class=\"token comment\">// \\'b\\'</span>\\n\\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> <span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">,</span> elem<span class=\"token punctuation\">]</span> <span class=\"token keyword\">of</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\\'a\\'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\\'b\\'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">entries</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">,</span> elem<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\n<span class=\"token punctuation\">}</span>\\n<span class=\"token comment\">// 0 \"a\"</span>\\n<span class=\"token comment\">// 1 \"b\"</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br><span class=\"line-number\">11</span><br><span class=\"line-number\">12</span><br><span class=\"line-number\">13</span><br><span class=\"line-number\">14</span><br><span class=\"line-number\">15</span><br><span class=\"line-number\">16</span><br><span class=\"line-number\">17</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<p>在<code>for..of</code>中如果遍历中途要退出，可以使用<code>break</code>退出循环。</p>\\n<p>如果不使用<code>for...of</code>循环，可以手动调用遍历器对象的next方法，进行遍历:</p>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code><span class=\"token keyword\">let</span> letter <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\\'a\\'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\\'b\\'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\\'c\\'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\\n<span class=\"token keyword\">let</span> entries <span class=\"token operator\">=</span> letter<span class=\"token punctuation\">.</span><span class=\"token function\">entries</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>entries<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [0, \\'a\\']</span>\\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>entries<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [1, \\'b\\']</span>\\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>entries<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [2, \\'c\\']</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<p>entries()浏览器兼容性(MDN):Chrome 38, Firefox 28,Opera 25,Safari 7.1</p>\\n<p>keys()浏览器兼容性(MDN):Chrome 38, Firefox 28,Opera 25,Safari 8,\\n\\x3c!-- 特殊字符串：用于修改/删除markdown的结尾提示语-OBKoro1 --\\x3e</p>\\n<h3 id=\"点个star支持我一下\"><a class=\"header-anchor\" href=\"#点个star支持我一下\" aria-hidden=\"true\">#</a> 点个<a href=\"https://github.com/OBKoro1/web_accumulate\" target=\"_blank\" rel=\"noopener noreferrer\">Star<OutboundLink/></a>支持我一下~</h3>\\n\\x3c!-- \\'特殊字符串：用于删除编译后的issue组件-OBKoro1 --\\x3e\\n'},{key:\"v-d5f4b80bfeed7\",path:\"/accumulate/\",lastUpdated:1564720698e3,title:\"前端进阶积累\",headers:[{level:2,title:\"前端进阶积累\",slug:\"前端进阶积累\"},{level:3,title:\"来社区关注我,不错过最新文章：\",slug:\"来社区关注我-不错过最新文章：\"},{level:3,title:\"点个Star支持我一下~\",slug:\"点个star支持我一下\"}],excerpt:'<h2 id=\"前端进阶积累\"><a class=\"header-anchor\" href=\"#前端进阶积累\" aria-hidden=\"true\">#</a> 前端进阶积累</h2>\\n<p><strong>本项目用于记录前端进阶路上积累的知识点，希望我们能够在纷乱的前端娱乐圈里，专注js基础，打磨核心竞争力，一通百通，无惧工具/框架变迁</strong>。</p>\\n<p>前端进阶之路漫漫，期待与你一起成长...</p>\\n<p>如果我的博客对你的成长有帮助的话,那就给我的点个<a href=\"https://github.com/OBKoro1/web_accumulate\" target=\"_blank\" rel=\"noopener noreferrer\">Star<OutboundLink/></a>吧~</p>\\n<h3 id=\"来社区关注我-不错过最新文章：\"><a class=\"header-anchor\" href=\"#来社区关注我-不错过最新文章：\" aria-hidden=\"true\">#</a> 来社区关注我,不错过最新文章：</h3>\\n<ul>\\n<li>\\n<p><a href=\"https://juejin.im/user/58714f0eb123db4a2eb95372/posts\" target=\"_blank\" rel=\"noopener noreferrer\">掘金<OutboundLink/></a></p>\\n</li>\\n<li>\\n<p><a href=\"https://segmentfault.com/u/obkoro1/articles\" target=\"_blank\" rel=\"noopener noreferrer\">segmentfault<OutboundLink/></a></p>\\n</li>\\n<li>\\n<p><a href=\"https://github.com/OBKoro1/articleImg_src/blob/master/juejin/1631b6f52f7e7015.jpeg?raw=true\" target=\"_blank\" rel=\"noopener noreferrer\">微信公众号<OutboundLink/></a>\\n\\x3c!-- 特殊字符串：用于修改/删除markdown的结尾提示语-OBKoro1 --\\x3e</p>\\n</li>\\n</ul>\\n<h3 id=\"点个star支持我一下\"><a class=\"header-anchor\" href=\"#点个star支持我一下\" aria-hidden=\"true\">#</a> 点个<a href=\"https://github.com/OBKoro1/web_accumulate\" target=\"_blank\" rel=\"noopener noreferrer\">Star<OutboundLink/></a>支持我一下~</h3>\\n\\x3c!-- \\'特殊字符串：用于删除编译后的issue组件-OBKoro1 --\\x3e\\n'},{key:\"v-2f2b0f8d7598c\",path:\"/accumulate/Vue/vue%E5%AE%9A%E4%B9%89%E5%85%A8%E5%B1%80%E5%87%BD%E6%95%B0.html\",lastUpdated:1564720698e3,title:\"Vue 定义全局函数\",headers:[{level:2,title:\"Vue 定义全局函数\",slug:\"vue-定义全局函数\"},{level:3,title:\"原理\",slug:\"原理\"},{level:3,title:\"1. 在 main.js 里面直接写函数\",slug:\"_1-在-main-js-里面直接写函数\"},{level:3,title:\"2. 写一个模块文件，挂载到 main.js 上面。\",slug:\"_2-写一个模块文件，挂载到-main-js-上面。\"},{level:3,title:\"点个Star支持我一下~\",slug:\"点个star支持我一下\"}],excerpt:'<h2 id=\"vue-定义全局函数\"><a class=\"header-anchor\" href=\"#vue-定义全局函数\" aria-hidden=\"true\">#</a> Vue 定义全局函数</h2>\\n<h3 id=\"原理\"><a class=\"header-anchor\" href=\"#原理\" aria-hidden=\"true\">#</a> 原理</h3>\\n<p><strong>通过 Vue.prototype 将函数挂载到 Vue 实例上面</strong>，在组件中通过 this.函数名，来运行函数。</p>\\n<h3 id=\"_1-在-main-js-里面直接写函数\"><a class=\"header-anchor\" href=\"#_1-在-main-js-里面直接写函数\" aria-hidden=\"true\">#</a> 1. 在 main.js 里面直接写函数</h3>\\n<p><strong>直接在 main.js 里面写</strong>:</p>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code>Vue<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">test</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\\'执行全局函数test\\'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<p><strong>组件中调用</strong>：</p>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 直接通过this运行函数</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<h3 id=\"_2-写一个模块文件，挂载到-main-js-上面。\"><a class=\"header-anchor\" href=\"#_2-写一个模块文件，挂载到-main-js-上面。\" aria-hidden=\"true\">#</a> 2. 写一个模块文件，挂载到 main.js 上面。</h3>\\n<p>想要定义的全局函数比较多的话，推荐写在一个js文件里面，文件位置可以放在跟 main.js 同一级，方便引用</p>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code><span class=\"token comment\">// base.js</span>\\nexports<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">install</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>Vue<span class=\"token punctuation\">,</span> options<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n  Vue<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">text1</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\\'执行成功1\\'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\\n  Vue<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">text2</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\\'执行成功2\\'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<p>main.js 入口文件：</p>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code><span class=\"token keyword\">import</span> Vue <span class=\"token keyword\">from</span> <span class=\"token string\">\\'vue\\'</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// vue要在引文件之前</span>\\n<span class=\"token keyword\">import</span> base <span class=\"token keyword\">from</span> <span class=\"token string\">\\'./base.js\\'</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 引用文件</span>\\nVue<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span>base<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//将全局函数当做插件来进行注册</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<p>组件里面调用：</p>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">text1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\n<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">text2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e\\x3c!-- 特殊字符串：用于修改/删除markdown的结尾提示语-OBKoro1 --\\x3e\\n<h3 id=\"点个star支持我一下\"><a class=\"header-anchor\" href=\"#点个star支持我一下\" aria-hidden=\"true\">#</a> 点个<a href=\"https://github.com/OBKoro1/web_accumulate\" target=\"_blank\" rel=\"noopener noreferrer\">Star<OutboundLink/></a>支持我一下~</h3>\\n\\x3c!-- \\'特殊字符串：用于删除编译后的issue组件-OBKoro1 --\\x3e\\n'},{key:\"v-496fa96760c7\",path:\"/accumulate/Vue/vue%E9%92%A9%E5%AD%90%E5%87%BD%E6%95%B0.html\",lastUpdated:1564720698e3,title:\"Vue的钩子函数[路由导航守卫、keep-alive、生命周期钩子]\",headers:[{level:2,title:\"Vue的钩子函数[路由导航守卫、keep-alive、生命周期钩子]\",slug:\"vue的钩子函数-路由导航守卫、keep-alive、生命周期钩子\"},{level:2,title:\"Vue-Router导航守卫：\",slug:\"vue-router导航守卫：\"},{level:3,title:\"全局守卫\",slug:\"全局守卫\"},{level:3,title:\"路由独享守卫\",slug:\"路由独享守卫\"},{level:3,title:\"路由组件内的守卫：\",slug:\"路由组件内的守卫：\"},{level:3,title:\"关于钩子的一些知识：\",slug:\"关于钩子的一些知识：\"},{level:3,title:\"完整的路由导航解析流程(不包括其他生命周期)：\",slug:\"完整的路由导航解析流程-不包括其他生命周期-：\"},{level:2,title:\"你不知道的keep-alive[我猜你不知道]\",slug:\"你不知道的keep-alive-我猜你不知道\"},{level:3,title:\"用法：\",slug:\"用法：\"},{level:3,title:\"生命周期钩子：\",slug:\"生命周期钩子：\"},{level:3,title:\"缓存你想缓存的路由：\",slug:\"缓存你想缓存的路由：\"},{level:2,title:\"组件生命周期钩子：\",slug:\"组件生命周期钩子：\"},{level:2,title:\"触发钩子的完整顺序：\",slug:\"触发钩子的完整顺序：\"},{level:2,title:\"小结\",slug:\"小结\"},{level:3,title:\"点个Star支持我一下~\",slug:\"点个star支持我一下\"}],excerpt:'<h2 id=\"vue的钩子函数-路由导航守卫、keep-alive、生命周期钩子\"><a class=\"header-anchor\" href=\"#vue的钩子函数-路由导航守卫、keep-alive、生命周期钩子\" aria-hidden=\"true\">#</a> Vue的钩子函数[路由导航守卫、keep-alive、生命周期钩子]</h2>\\n<p>说到Vue的钩子函数，可能很多人只停留在一些很简单常用的钩子(<code>created</code>,<code>mounted</code>)，而且对于里面的区别，什么时候该用什么钩子，并没有仔细的去研究过，且Vue的生命周期在面试中也算是比较高频的考点，那么该如何回答这类问题，让人有眼前一亮的感觉呢...</p>\\n<h2 id=\"vue-router导航守卫：\"><a class=\"header-anchor\" href=\"#vue-router导航守卫：\" aria-hidden=\"true\">#</a> Vue-Router导航守卫：</h2>\\n<p>有的时候，我们需要通过路由来进行一些操作，比如最常见的登录权限验证，当用户满足条件时，才让其进入导航，否则就取消跳转，并跳到登录页面让其登录。</p>\\n<p>为此我们有很多种方法可以植入路由的导航过程：<strong>全局的, 单个路由独享的, 或者组件级的</strong>,推荐优先阅读<a href=\"https://router.vuejs.org/zh/guide/advanced/navigation-guards.html\" target=\"_blank\" rel=\"noopener noreferrer\">路由文档<OutboundLink/></a></p>\\n<h3 id=\"全局守卫\"><a class=\"header-anchor\" href=\"#全局守卫\" aria-hidden=\"true\">#</a> 全局守卫</h3>\\n<p>vue-router全局有三个守卫：</p>\\n<ol>\\n<li>router.beforeEach 全局前置守卫 进入路由之前</li>\\n<li>router.beforeResolve 全局解析守卫(2.5.0+) 在beforeRouteEnter调用之后调用</li>\\n<li>router.afterEach 全局后置钩子 进入路由之后</li>\\n</ol>\\n<p><strong>使用方法</strong>：</p>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code><span class=\"token comment\">// main.js 入口文件</span>\\n<span class=\"token keyword\">import</span> router <span class=\"token keyword\">from</span> <span class=\"token string\">\\'./router\\'</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 引入路由</span>\\nrouter<span class=\"token punctuation\">.</span><span class=\"token function\">beforeEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>to<span class=\"token punctuation\">,</span> <span class=\"token keyword\">from</span><span class=\"token punctuation\">,</span> next<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span> \\n    <span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\nrouter<span class=\"token punctuation\">.</span><span class=\"token function\">beforeResolve</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>to<span class=\"token punctuation\">,</span> <span class=\"token keyword\">from</span><span class=\"token punctuation\">,</span> next<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\\n    <span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\nrouter<span class=\"token punctuation\">.</span><span class=\"token function\">afterEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>to<span class=\"token punctuation\">,</span> <span class=\"token keyword\">from</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\\'afterEach 全局后置钩子\\'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br><span class=\"line-number\">11</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<h4 id=\"to-from-next-这三个参数：\"><a class=\"header-anchor\" href=\"#to-from-next-这三个参数：\" aria-hidden=\"true\">#</a> to,from,next 这三个参数：</h4>\\n<p>to和from是<strong>将要进入和将要离开的路由对象</strong>,路由对象指的是平时通过this.$route获取到的路由对象。</p>\\n<p><strong>next:Function</strong> 这个参数是个函数，且<strong>必须调用，否则不能进入路由</strong>(页面空白)。</p>\\n<ul>\\n<li>next() 进入该路由。</li>\\n<li>next(false): 取消进入路由，url地址重置为from路由地址(也就是将要离开的路由地址)。</li>\\n<li>next 跳转新路由，当前的导航被中断，重新开始一个新的导航。</li>\\n</ul>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code>        <span class=\"token function\">我们可以这样跳转：next</span><span class=\"token punctuation\">(</span><span class=\"token string\">\\'path地址\\'</span><span class=\"token punctuation\">)</span><span class=\"token function\">或者next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>path<span class=\"token punctuation\">:</span><span class=\"token string\">\\'\\'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token function\">或者next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>name<span class=\"token punctuation\">:</span><span class=\"token string\">\\'\\'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\\n        且允许设置诸如 replace<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span>、name<span class=\"token punctuation\">:</span> <span class=\"token string\">\\'home\\'</span> 之类的选项\\n        以及你用在router<span class=\"token operator\">-</span>link或router<span class=\"token punctuation\">.</span>push的对象选项。\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<h3 id=\"路由独享守卫\"><a class=\"header-anchor\" href=\"#路由独享守卫\" aria-hidden=\"true\">#</a> 路由独享守卫</h3>\\n<p>如果你不想全局配置守卫的话，你可以为某些路由单独配置守卫：</p>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code><span class=\"token keyword\">const</span> router <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">VueRouter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\\n    routes<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>\\n    <span class=\"token punctuation\">{</span>\\n        path<span class=\"token punctuation\">:</span> <span class=\"token string\">\\'/foo\\'</span><span class=\"token punctuation\">,</span>\\n        component<span class=\"token punctuation\">:</span> Foo<span class=\"token punctuation\">,</span>\\n        beforeEnter<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span>to<span class=\"token punctuation\">,</span> <span class=\"token keyword\">from</span><span class=\"token punctuation\">,</span> next<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span> \\n        <span class=\"token comment\">// 参数用法什么的都一样,调用顺序在全局前置守卫后面，所以不会被全局守卫覆盖</span>\\n        <span class=\"token comment\">// ...</span>\\n        <span class=\"token punctuation\">}</span>\\n    <span class=\"token punctuation\">}</span>\\n    <span class=\"token punctuation\">]</span>\\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br><span class=\"line-number\">11</span><br><span class=\"line-number\">12</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<h3 id=\"路由组件内的守卫：\"><a class=\"header-anchor\" href=\"#路由组件内的守卫：\" aria-hidden=\"true\">#</a> 路由组件内的守卫：</h3>\\n<ol>\\n<li>beforeRouteEnter 进入路由前</li>\\n<li>beforeRouteUpdate (2.2) 路由复用同一个组件时</li>\\n<li>beforeRouteLeave 离开当前路由时</li>\\n</ol>\\n<p><strong>文档中的介绍：</strong></p>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code><span class=\"token function\">beforeRouteEnter</span> <span class=\"token punctuation\">(</span>to<span class=\"token punctuation\">,</span> <span class=\"token keyword\">from</span><span class=\"token punctuation\">,</span> next<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n<span class=\"token comment\">// 在路由独享守卫后调用 不！能！获取组件实例 `this`，组件实例还没被创建</span>\\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\\n<span class=\"token function\">beforeRouteUpdate</span> <span class=\"token punctuation\">(</span>to<span class=\"token punctuation\">,</span> <span class=\"token keyword\">from</span><span class=\"token punctuation\">,</span> next<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n<span class=\"token comment\">// 在当前路由改变，但是该组件被复用时调用 可以访问组件实例 `this`</span>\\n<span class=\"token comment\">// 举例来说，对于一个带有动态参数的路径 /foo/:id，在 /foo/1 和 /foo/2 之间跳转的时候，</span>\\n<span class=\"token comment\">// 由于会渲染同样的 Foo 组件，因此组件实例会被复用。而这个钩子就会在这个情况下被调用。</span>\\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\\n<span class=\"token function\">beforeRouteLeave</span> <span class=\"token punctuation\">(</span>to<span class=\"token punctuation\">,</span> <span class=\"token keyword\">from</span><span class=\"token punctuation\">,</span> next<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n<span class=\"token comment\">// 导航离开该组件的对应路由时调用，可以访问组件实例 `this`</span>\\n<span class=\"token punctuation\">}</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br><span class=\"line-number\">11</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<p><strong>beforeRouteEnter访问this</strong></p>\\n<p>因为钩子在组件实例还没被创建的时候调用，所以不能获取组件实例 <code>this</code>，可以通过传一个回调给<code>next</code>来访问组件实例\\n。</p>\\n<p>但是<strong>回调的执行时机在mounted后面</strong>,所以在我看来这里对this的访问意义不太大，可以放在<code>created</code>或者<code>mounted</code>里面。</p>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code><span class=\"token function\">beforeRouteEnter</span> <span class=\"token punctuation\">(</span>to<span class=\"token punctuation\">,</span> <span class=\"token keyword\">from</span><span class=\"token punctuation\">,</span> next<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\\'在路由独享守卫后调用\\'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\n    <span class=\"token function\">next</span><span class=\"token punctuation\">(</span>vm <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\\n        <span class=\"token comment\">// 通过 `vm` 访问组件实例`this` 执行回调的时机在mounted后面，</span>\\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\\n<span class=\"token punctuation\">}</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<p><strong>beforeRouteLeave：</strong></p>\\n<p>导航离开该组件的对应路由时调用，我们用它来禁止用户离开，比如还未保存草稿，或者在用户离开前，将<code>setInterval</code>销毁，防止离开之后，定时器还在调用。</p>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code><span class=\"token function\">beforeRouteLeave</span> <span class=\"token punctuation\">(</span>to<span class=\"token punctuation\">,</span> <span class=\"token keyword\">from</span> <span class=\"token punctuation\">,</span> next<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>文章保存<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n    <span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 允许离开或者可以跳到别的路由 上面讲过了</span>\\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\\n    <span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 取消离开</span>\\n    <span class=\"token punctuation\">}</span>\\n<span class=\"token punctuation\">}</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<h3 id=\"关于钩子的一些知识：\"><a class=\"header-anchor\" href=\"#关于钩子的一些知识：\" aria-hidden=\"true\">#</a> 关于钩子的一些知识：</h3>\\n<h4 id=\"路由钩子函数的错误捕获\"><a class=\"header-anchor\" href=\"#路由钩子函数的错误捕获\" aria-hidden=\"true\">#</a> 路由钩子函数的错误捕获</h4>\\n<p>如果我们在全局守卫/路由独享守卫/组件路由守卫的钩子函数中有错误，可以这样捕获：</p>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code>router<span class=\"token punctuation\">.</span><span class=\"token function\">onError</span><span class=\"token punctuation\">(</span>callback <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span> \\n<span class=\"token comment\">// 2.4.0新增 并不常用，了解一下就可以了 </span>\\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>callback<span class=\"token punctuation\">,</span> <span class=\"token string\">\\'callback\\'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<p>在路由文档中还有更多的<a href=\"https://router.vuejs.org/zh/api/#router-%E5%AE%9E%E4%BE%8B%E6%96%B9%E6%B3%95\" target=\"_blank\" rel=\"noopener noreferrer\">实例方法<OutboundLink/></a>：动态添加路由等，有兴趣可以了解一下。</p>\\n<h4 id=\"跳转死循环，页面永远空白\"><a class=\"header-anchor\" href=\"#跳转死循环，页面永远空白\" aria-hidden=\"true\">#</a> 跳转死循环，页面永远空白</h4>\\n<p>我了解到的，很多人会碰到这个问题，来看一下这段伪代码：</p>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code>router<span class=\"token punctuation\">.</span><span class=\"token function\">beforeEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>to<span class=\"token punctuation\">,</span> <span class=\"token keyword\">from</span><span class=\"token punctuation\">,</span> next<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>登录<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\\n        <span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\\n    <span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span>\\n        <span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> name<span class=\"token punctuation\">:</span> <span class=\"token string\">\\'login\\'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \\n    <span class=\"token punctuation\">}</span>\\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<p>看逻辑貌似是对的，但是当我们跳转到<code>login</code>之后，因为此时还是未登录状态，所以会一直跳转到<code>login</code>然后死循环，页面一直是空白的，所以：我们需要把判断条件稍微改一下。</p>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code><span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>登录 <span class=\"token operator\">||</span> to<span class=\"token punctuation\">.</span>name <span class=\"token operator\">===</span> <span class=\"token string\">\\'login\\'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span> <span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span> <span class=\"token comment\">// 登录，或者将要前往login页面的时候，就允许进入路由</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<h4 id=\"全局后置钩子的跳转：\"><a class=\"header-anchor\" href=\"#全局后置钩子的跳转：\" aria-hidden=\"true\">#</a> 全局后置钩子的跳转：</h4>\\n<p>文档中提到因为router.afterEach不接受<code>next</code>函数所以也不会改变导航本身，意思就是只能当成一个钩子来使用，但是我自己在试的时候发现，我们可以通过这种形式来实现跳转：</p>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code><span class=\"token comment\">// main.js 入口文件</span>\\n<span class=\"token keyword\">import</span> router <span class=\"token keyword\">from</span> <span class=\"token string\">\\'./router\\'</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 引入路由</span>\\nrouter<span class=\"token punctuation\">.</span><span class=\"token function\">afterEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>to<span class=\"token punctuation\">,</span> <span class=\"token keyword\">from</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>未登录 <span class=\"token operator\">&amp;&amp;</span> to<span class=\"token punctuation\">.</span>name <span class=\"token operator\">!==</span> <span class=\"token string\">\\'login\\'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n    router<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> name<span class=\"token punctuation\">:</span> <span class=\"token string\">\\'login\\'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 跳转login</span>\\n    <span class=\"token punctuation\">}</span>\\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<p>额，通过router.beforeEach 也完全可以实现且更好，我就骚一下。</p>\\n<h3 id=\"完整的路由导航解析流程-不包括其他生命周期-：\"><a class=\"header-anchor\" href=\"#完整的路由导航解析流程-不包括其他生命周期-：\" aria-hidden=\"true\">#</a> 完整的路由导航解析流程(不包括其他生命周期)：</h3>\\n<ol>\\n<li>触发进入其他路由。</li>\\n<li>调用要离开路由的组件守卫<code>beforeRouteLeave</code></li>\\n<li>调用局前置守卫：<code>beforeEach</code></li>\\n<li>在重用的组件里调用 <code>beforeRouteUpdate</code></li>\\n<li>调用路由独享守卫 <code>beforeEnter</code>。</li>\\n<li>解析异步路由组件。</li>\\n<li>在将要进入的路由组件中调用<code>beforeRouteEnter</code></li>\\n<li>调用全局解析守卫 <code>beforeResolve</code></li>\\n<li>导航被确认。</li>\\n<li>调用全局后置钩子的 <code>afterEach</code> 钩子。</li>\\n<li>触发DOM更新(<code>mounted</code>)。</li>\\n<li>执行<code>beforeRouteEnter</code> 守卫中传给 next 的回调函数</li>\\n</ol>\\n<hr>\\n<h2 id=\"你不知道的keep-alive-我猜你不知道\"><a class=\"header-anchor\" href=\"#你不知道的keep-alive-我猜你不知道\" aria-hidden=\"true\">#</a> 你不知道的keep-alive[我猜你不知道]</h2>\\n<p>在开发Vue项目的时候，大部分组件是没必要多次渲染的，所以Vue提供了一个内置组件<code>keep-alive</code>来<strong>缓存组件内部状态，避免重新渲染</strong>，<a href=\"https://cn.vuejs.org/v2/api/#keep-alive\" target=\"_blank\" rel=\"noopener noreferrer\">文档在这里<OutboundLink/></a>。</p>\\n<blockquote>\\n<p>文档：和 <code>&lt;transition&gt;</code>相似，<code>&lt;keep-alive&gt;</code> 是一个抽象组件：它自身不会渲染一个 DOM 元素，也不会出现在父组件链中。</p>\\n</blockquote>\\n<h3 id=\"用法：\"><a class=\"header-anchor\" href=\"#用法：\" aria-hidden=\"true\">#</a> 用法：</h3>\\n<p><strong>缓存动态组件：</strong></p>\\n<p><code>&lt;keep-alive&gt;</code>包裹动态组件时，会缓存不活动的组件实例，而不是销毁它们，此种方式并无太大的实用意义。</p>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-html line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-html\"><code><span class=\"token comment\">&lt;!-- 基本 --\\x3e</span>\\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>keep-alive</span><span class=\"token punctuation\">></span></span>\\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>component</span> <span class=\"token attr-name\">:is</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>view<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>component</span><span class=\"token punctuation\">></span></span>\\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>keep-alive</span><span class=\"token punctuation\">></span></span>\\n<span class=\"token comment\">&lt;!-- 多个条件判断的子组件 --\\x3e</span>\\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>keep-alive</span><span class=\"token punctuation\">></span></span>\\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>comp-a</span> <span class=\"token attr-name\">v-if</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>a > 1<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>comp-a</span><span class=\"token punctuation\">></span></span>\\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>comp-b</span> <span class=\"token attr-name\">v-else</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>comp-b</span><span class=\"token punctuation\">></span></span>\\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>keep-alive</span><span class=\"token punctuation\">></span></span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<p><strong>缓存路由组件：</strong></p>\\n<p>使用<code>keep-alive</code>可以将所有路径匹配到的路由组件都缓存起来，包括路由组件里面的组件，<code>keep-alive</code>大多数使用场景就是这种。</p>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-html line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-html\"><code><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>keep-alive</span><span class=\"token punctuation\">></span></span>\\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>router-view</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>router-view</span><span class=\"token punctuation\">></span></span>\\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>keep-alive</span><span class=\"token punctuation\">></span></span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<h3 id=\"生命周期钩子：\"><a class=\"header-anchor\" href=\"#生命周期钩子：\" aria-hidden=\"true\">#</a> 生命周期钩子：</h3>\\n<p>这篇既然是Vue钩子函数的专场，那肯定要扣题呀~</p>\\n<p>在被<code>keep-alive</code>包含的组件/路由中，会多出两个生命周期的钩子:<code>activated</code> 与 <code>deactivated</code>。</p>\\n<blockquote>\\n<p>文档：在 2.2.0 及其更高版本中，activated 和 deactivated 将会在 <code>&lt;keep-alive&gt;</code> 树内的<strong>所有嵌套组件</strong>中触发。</p>\\n</blockquote>\\n<p><strong>activated在组件第一次渲染时会被调用，之后在每次缓存组件被激活时调用</strong>。</p>\\n<p><strong>activated调用时机：</strong></p>\\n<p>第一次进入缓存路由/组件，在<code>mounted</code>后面，<code>beforeRouteEnter</code>守卫传给 next 的回调函数之前调用：</p>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code>        beforeMount<span class=\"token operator\">=></span> 如果你是从别的路由<span class=\"token operator\">/</span><span class=\"token function\">组件进来</span><span class=\"token punctuation\">(</span>组件销毁destroyed<span class=\"token operator\">/</span>或离开缓存deactivated<span class=\"token punctuation\">)</span><span class=\"token operator\">=></span>\\n        mounted<span class=\"token operator\">=></span> activated 进入缓存组件 <span class=\"token operator\">=></span> 执行 beforeRouteEnter回调\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<p>因为组件被缓存了，<strong>再次进入缓存路由/组件时，不会触发这些钩子</strong>：</p>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code><span class=\"token comment\">// beforeCreate created beforeMount mounted 都不会触发。</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<p>所以之后的调用时机是：</p>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code>        组件销毁destroyed<span class=\"token operator\">/</span>或离开缓存deactivated <span class=\"token operator\">=></span> activated 进入当前缓存组件 \\n        <span class=\"token operator\">=></span> 执行 beforeRouteEnter回调\\n        <span class=\"token comment\">// 组件缓存或销毁，嵌套组件的销毁和缓存也在这里触发</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<p><strong>deactivated：组件被停用(离开路由)时调用</strong></p>\\n<p><strong>使用了<code>keep-alive</code>就不会调用<code>beforeDestroy</code>(组件销毁前钩子)和<code>destroyed</code>(组件销毁)，因为组件没被销毁，被缓存起来了</strong>。</p>\\n<p>这个钩子可以看作<code>beforeDestroy</code>的替代，如果你缓存了组件，要在组件销毁的的时候做一些事情，你可以放在这个钩子里。</p>\\n<p>如果你离开了路由，会依次触发：</p>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code>        组件内的离开当前路由钩子beforeRouteLeave <span class=\"token operator\">=></span>  路由前置守卫 beforeEach <span class=\"token operator\">=></span>\\n        全局后置钩子afterEach <span class=\"token operator\">=></span> deactivated 离开缓存组件 <span class=\"token operator\">=></span> activated <span class=\"token function\">进入缓存组件</span><span class=\"token punctuation\">(</span>如果你进入的也是缓存路由<span class=\"token punctuation\">)</span>\\n        <span class=\"token comment\">// 如果离开的组件没有缓存的话 beforeDestroy会替换deactivated </span>\\n        <span class=\"token comment\">// 如果进入的路由也没有缓存的话  全局后置钩子afterEach=>销毁 destroyed=> beforeCreate等</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<p>那么，如果我只是想缓存其中几个路由/组件，那该怎么做？</p>\\n<h3 id=\"缓存你想缓存的路由：\"><a class=\"header-anchor\" href=\"#缓存你想缓存的路由：\" aria-hidden=\"true\">#</a> 缓存你想缓存的路由：</h3>\\n<h4 id=\"vue2-1-0之前\"><a class=\"header-anchor\" href=\"#vue2-1-0之前\" aria-hidden=\"true\">#</a> Vue2.1.0之前:</h4>\\n<p>想实现类似的操作，你可以：</p>\\n<ol>\\n<li>配置一下路由元信息</li>\\n<li>创建两个<code>keep-alive</code>标签</li>\\n<li>使用<code>v-if</code>通过路由元信息判断缓存哪些路由。</li>\\n</ol>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code>        <span class=\"token operator\">&lt;</span>keep<span class=\"token operator\">-</span>alive<span class=\"token operator\">></span>\\n            <span class=\"token operator\">&lt;</span>router<span class=\"token operator\">-</span>view v<span class=\"token operator\">-</span><span class=\"token keyword\">if</span><span class=\"token operator\">=</span><span class=\"token string\">\"$route.meta.keepAlive\"</span><span class=\"token operator\">></span>\\n                <span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span>这里是会被缓存的路由<span class=\"token operator\">--</span><span class=\"token operator\">></span>\\n            <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>router<span class=\"token operator\">-</span>view<span class=\"token operator\">></span>\\n        <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>keep<span class=\"token operator\">-</span>alive<span class=\"token operator\">></span>\\n        <span class=\"token operator\">&lt;</span>router<span class=\"token operator\">-</span>view v<span class=\"token operator\">-</span><span class=\"token keyword\">if</span><span class=\"token operator\">=</span><span class=\"token string\">\"!$route.meta.keepAlive\"</span><span class=\"token operator\">></span>\\n            <span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span>因为用的是v<span class=\"token operator\">-</span><span class=\"token keyword\">if</span> 所以下面还要创建一个未缓存的路由视图出口<span class=\"token operator\">--</span><span class=\"token operator\">></span>\\n        <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>router<span class=\"token operator\">-</span>view<span class=\"token operator\">></span>\\n        <span class=\"token comment\">//router配置</span>\\n        <span class=\"token keyword\">new</span> <span class=\"token class-name\">Router</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\\n          routes<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>\\n            <span class=\"token punctuation\">{</span>\\n              path<span class=\"token punctuation\">:</span> <span class=\"token string\">\\'/\\'</span><span class=\"token punctuation\">,</span>\\n              name<span class=\"token punctuation\">:</span> <span class=\"token string\">\\'home\\'</span><span class=\"token punctuation\">,</span>\\n              component<span class=\"token punctuation\">:</span> Home<span class=\"token punctuation\">,</span>\\n              meta<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\\n                keepAlive<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span> <span class=\"token comment\">// 需要被缓存</span>\\n              <span class=\"token punctuation\">}</span>\\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\\n            <span class=\"token punctuation\">{</span>\\n              path<span class=\"token punctuation\">:</span> <span class=\"token string\">\\'/:id\\'</span><span class=\"token punctuation\">,</span>\\n              name<span class=\"token punctuation\">:</span> <span class=\"token string\">\\'edit\\'</span><span class=\"token punctuation\">,</span>\\n              component<span class=\"token punctuation\">:</span> Edit<span class=\"token punctuation\">,</span>\\n              meta<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\\n                keepAlive<span class=\"token punctuation\">:</span> <span class=\"token boolean\">false</span> <span class=\"token comment\">// 不需要被缓存</span>\\n              <span class=\"token punctuation\">}</span>\\n            <span class=\"token punctuation\">}</span>\\n          <span class=\"token punctuation\">]</span>\\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br><span class=\"line-number\">11</span><br><span class=\"line-number\">12</span><br><span class=\"line-number\">13</span><br><span class=\"line-number\">14</span><br><span class=\"line-number\">15</span><br><span class=\"line-number\">16</span><br><span class=\"line-number\">17</span><br><span class=\"line-number\">18</span><br><span class=\"line-number\">19</span><br><span class=\"line-number\">20</span><br><span class=\"line-number\">21</span><br><span class=\"line-number\">22</span><br><span class=\"line-number\">23</span><br><span class=\"line-number\">24</span><br><span class=\"line-number\">25</span><br><span class=\"line-number\">26</span><br><span class=\"line-number\">27</span><br><span class=\"line-number\">28</span><br><span class=\"line-number\">29</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<h4 id=\"vue2-1-0版本之后：\"><a class=\"header-anchor\" href=\"#vue2-1-0版本之后：\" aria-hidden=\"true\">#</a> Vue2.1.0版本之后：</h4>\\n<p>使用路由元信息的方式，要多创建一个<code>router-view</code>标签，并且每个路由都要配置一个元信息，是可以实现我们想要的效果，但是过于繁琐了点。</p>\\n<p>幸运的是在Vue2.1.0之后，Vue新增了两个属性配合<code>keep-alive</code>来有条件地缓存 路由/组件。</p>\\n<p><strong>新增属性：</strong></p>\\n<ul>\\n<li><code>include</code>：匹配的 路由/组件 会被缓存</li>\\n<li><code>exclude</code>：匹配的 路由/组件 不会被缓存</li>\\n</ul>\\n<p><code>include</code>和<code>exclude</code>支持三种方式来有条件的缓存路由：采用逗号分隔的字符串形式，正则形式，数组形式。</p>\\n<p>正则和数组形式，必须采用<code>v-bind</code>形式来使用。</p>\\n<p><strong>缓存组件的使用方式</strong>：</p>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-html line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-html\"><code>        <span class=\"token comment\">&lt;!-- 逗号分隔字符串 --\\x3e</span>\\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>keep-alive</span> <span class=\"token attr-name\">include</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>a,b<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\\n          <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>component</span> <span class=\"token attr-name\">:is</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>view<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>component</span><span class=\"token punctuation\">></span></span>\\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>keep-alive</span><span class=\"token punctuation\">></span></span>\\n        \\n        <span class=\"token comment\">&lt;!-- 正则表达式 (使用 `v-bind`) --\\x3e</span>\\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>keep-alive</span> <span class=\"token attr-name\">:include</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>/a|b/<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\\n          <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>component</span> <span class=\"token attr-name\">:is</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>view<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>component</span><span class=\"token punctuation\">></span></span>\\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>keep-alive</span><span class=\"token punctuation\">></span></span>\\n        \\n        <span class=\"token comment\">&lt;!-- 数组 (使用 `v-bind`) --\\x3e</span>\\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>keep-alive</span> <span class=\"token attr-name\">:include</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>[<span class=\"token punctuation\">\\'</span>a<span class=\"token punctuation\">\\'</span>, <span class=\"token punctuation\">\\'</span>b<span class=\"token punctuation\">\\'</span>]<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\\n          <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>component</span> <span class=\"token attr-name\">:is</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>view<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>component</span><span class=\"token punctuation\">></span></span>\\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>keep-alive</span><span class=\"token punctuation\">></span></span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br><span class=\"line-number\">11</span><br><span class=\"line-number\">12</span><br><span class=\"line-number\">13</span><br><span class=\"line-number\">14</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<p><strong>但更多场景中，我们会使用<code>keep-alive</code>来缓存路由</strong>：</p>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-html line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-html\"><code>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>keep-alive</span> <span class=\"token attr-name\">include</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\\'</span>a<span class=\"token punctuation\">\\'</span></span><span class=\"token punctuation\">></span></span>\\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>router-view</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>router-view</span><span class=\"token punctuation\">></span></span>\\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>keep-alive</span><span class=\"token punctuation\">></span></span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<p><strong>匹配规则：</strong></p>\\n<ol>\\n<li><strong>首先匹配组件的name选项</strong>，如果<code>name</code>选项不可用。</li>\\n<li>则匹配它的<strong>局部注册名称</strong>。 (父组件 <code>components</code> 选项的键值)</li>\\n<li><strong>匿名组件，不可匹配</strong>。</li>\\n</ol>\\n<p>比如路由组件没有<code>name</code>选项，并且没有注册的组件名。</p>\\n<ol start=\"4\">\\n<li>只能匹配当前被包裹的组件，<strong>不能匹配更下面嵌套的子组件</strong>。</li>\\n</ol>\\n<p>比如用在路由上，只能匹配路由组件的<code>name</code>选项，不能匹配路由组件里面的嵌套组件的<code>name</code>选项。</p>\\n<ol start=\"5\">\\n<li>文档：<code>&lt;keep-alive&gt;</code><strong>不会在函数式组件中正常工作</strong>，因为它们没有缓存实例。</li>\\n<li><strong><code>exclude</code>的优先级大于<code>include</code></strong></li>\\n</ol>\\n<p>也就是说：当<code>include</code>和<code>exclude</code>同时存在时，<code>exclude</code>生效，<code>include</code>不生效。</p>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-html line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-html\"><code>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>keep-alive</span> <span class=\"token attr-name\">include</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>a,b<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">exclude</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>a<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\\n        <span class=\"token comment\">&lt;!--只有a不被缓存--\\x3e</span>\\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>router-view</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>router-view</span><span class=\"token punctuation\">></span></span>\\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>keep-alive</span><span class=\"token punctuation\">></span></span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<p><strong>当组件被<code>exclude</code>匹配，该组件将不会被缓存，不会调用<code>activated</code> 和 <code>deactivated</code></strong>。</p>\\n<hr>\\n<h2 id=\"组件生命周期钩子：\"><a class=\"header-anchor\" href=\"#组件生命周期钩子：\" aria-hidden=\"true\">#</a> 组件生命周期钩子：</h2>\\n<p>关于组件的生命周期，是时候放出这张图片了：</p>\\n<p><img src=\"https://github.com/OBKoro1/articleImg_src/blob/master/juejin/164bbf610b61f3cd?raw=true\" alt=\"\"></p>\\n<p>这张图片已经讲得很清楚了，很多人这部分也很清楚了，大部分生命周期并不会用到，这里提一下几点：</p>\\n<ol>\\n<li>\\n<p><strong>ajax请求最好放在<code>created</code>里面</strong>，因为此时已经可以访问<code>this</code>了，请求到数据就可以直接放在<code>data</code>里面。</p>\\n<p>这里也碰到过几次，面试官问：ajax请求应该放在哪个生命周期。</p>\\n</li>\\n<li>\\n<p><strong>关于dom的操作要放在<code>mounted</code>里面</strong>，在<code>mounted</code>前面访问dom会是<code>undefined</code>。</p>\\n</li>\\n<li>\\n<p>每次进入/离开组件都要做一些事情，用什么钩子：</p>\\n</li>\\n</ol>\\n<ul>\\n<li>\\n<p>不缓存：</p>\\n<p>进入的时候可以用<code>created</code>和<code>mounted</code>钩子，离开的时候用<code>beforeDestory</code>和<code>destroyed</code>钩子,<code>beforeDestory</code>可以访问<code>this</code>，<code>destroyed</code>不可以访问<code>this</code>。</p>\\n</li>\\n<li>\\n<p>缓存了组件：</p>\\n<p>缓存了组件之后，再次进入组件不会触发<code>beforeCreate</code>、<code>created</code> 、<code>beforeMount</code>、 <code>mounted</code>，<strong>如果你想每次进入组件都做一些事情的话，你可以放在<code>activated</code>进入缓存组件的钩子中</strong>。</p>\\n<p>同理：离开缓存组件的时候，<code>beforeDestroy</code>和<code>destroyed</code>并不会触发，可以使用<code>deactivated</code>离开缓存组件的钩子来代替。</p>\\n</li>\\n</ul>\\n<hr>\\n<h2 id=\"触发钩子的完整顺序：\"><a class=\"header-anchor\" href=\"#触发钩子的完整顺序：\" aria-hidden=\"true\">#</a> 触发钩子的完整顺序：</h2>\\n<p>将路由导航、<code>keep-alive</code>、和组件生命周期钩子结合起来的，触发顺序，假设是从a组件离开，第一次进入b组件：</p>\\n<ol>\\n<li><code>beforeRouteLeave</code>:路由组件的组件离开路由前钩子，可取消路由离开。</li>\\n<li><code>beforeEach</code>: 路由全局前置守卫，可用于登录验证、全局路由loading等。</li>\\n<li><code>beforeEnter</code>: 路由独享守卫</li>\\n<li><code>beforeRouteEnter</code>: 路由组件的组件进入路由前钩子。</li>\\n<li><code>beforeResolve</code>:<a href=\"https://router.vuejs.org/zh/guide/advanced/navigation-guards.html#%E5%85%A8%E5%B1%80%E8%A7%A3%E6%9E%90%E5%AE%88%E5%8D%AB\" target=\"_blank\" rel=\"noopener noreferrer\">路由全局解析守卫<OutboundLink/></a></li>\\n<li><code>afterEach</code>:路由全局后置钩子</li>\\n<li><code>beforeCreate</code>:组件生命周期，不能访问<code>this</code>。</li>\\n<li><code>created</code>:组件生命周期，可以访问<code>this</code>，不能访问dom。</li>\\n<li><code>beforeMount</code>:组件生命周期</li>\\n<li><code>deactivated</code>: 离开缓存组件a，或者触发a的<code>beforeDestroy</code>和<code>destroyed</code>组件销毁钩子。</li>\\n<li><code>mounted</code>:访问/操作dom。</li>\\n<li><code>activated</code>:进入缓存组件，进入a的嵌套子组件(如果有的话)。</li>\\n<li>执行beforeRouteEnter回调函数next。</li>\\n</ol>\\n<hr>\\n<h2 id=\"小结\"><a class=\"header-anchor\" href=\"#小结\" aria-hidden=\"true\">#</a> 小结</h2>\\n<p>Vue提供了很多钩子，但很多钩子我们几乎不会用到，只有清楚这些钩子函数的触发顺序以及背后的一些限制等，这样我们才能够正确的使用这些钩子，希望看了本文的同学，能对这些钩子有更加清晰的认识，使用起来更加得心应手。\\n\\x3c!-- 特殊字符串：用于修改/删除markdown的结尾提示语-OBKoro1 --\\x3e</p>\\n<h3 id=\"点个star支持我一下\"><a class=\"header-anchor\" href=\"#点个star支持我一下\" aria-hidden=\"true\">#</a> 点个<a href=\"https://github.com/OBKoro1/web_accumulate\" target=\"_blank\" rel=\"noopener noreferrer\">Star<OutboundLink/></a>支持我一下~</h3>\\n\\x3c!-- \\'特殊字符串：用于删除编译后的issue组件-OBKoro1 --\\x3e\\n'},{key:\"v-ac82f9958cd89\",path:\"/accumulate/Vue/%E5%BC%B9%E7%AA%97.html\",lastUpdated:1564720698e3,title:\"简单的弹窗组件实现\",headers:[{level:2,title:\"简单的弹窗组件实现\",slug:\"简单的弹窗组件实现\"},{level:3,title:\"组件最后实现的效果\",slug:\"组件最后实现的效果\"},{level:2,title:\"实现步骤\",slug:\"实现步骤\"},{level:3,title:\"1.搭建组件的html和css样式。\",slug:\"_1-搭建组件的html和css样式。\"},{level:3,title:\"2. 通过slot定制弹窗内容\",slug:\"_2-通过slot定制弹窗内容\"},{level:3,title:\"3.通过props控制弹窗显隐&&定制弹窗style\",slug:\"_3-通过props控制弹窗显隐-定制弹窗style\"},{level:3,title:\"4.$emit触发父组件事件修改数据，关闭弹窗\",slug:\"_4-emit触发父组件事件修改数据，关闭弹窗\"},{level:3,title:\"弹窗组件代码\",slug:\"弹窗组件代码\"},{level:2,title:\"小结：\",slug:\"小结：\"},{level:3,title:\"参考资料：\",slug:\"参考资料：\"},{level:3,title:\"点个Star支持我一下~\",slug:\"点个star支持我一下\"}],excerpt:'<h2 id=\"简单的弹窗组件实现\"><a class=\"header-anchor\" href=\"#简单的弹窗组件实现\" aria-hidden=\"true\">#</a> 简单的弹窗组件实现</h2>\\n<p>最近在使用element-ui框架，用到了Dialog对话框组件，大致实现的效果，跟我之前自己在移动端项目里面弄的一个弹窗组件差不太多。然后就想着把这种弹窗组件的实现方式与大家分享一下，下面本文会带着大家手摸手实现一个弹窗组件。</p>\\n<p>本文主要内容会涉及到弹窗遮罩的实现，<code>slot</code>插槽的使用方式，<code>props</code>、<code>$emit</code>传参，具体组件代码也传上去了。如果喜欢的话可以点波赞/关注，支持一下，希望大家看完本文可以有所收获。</p>\\n<hr>\\n<h3 id=\"组件最后实现的效果\"><a class=\"header-anchor\" href=\"#组件最后实现的效果\" aria-hidden=\"true\">#</a> 组件最后实现的效果</h3>\\n<p><img src=\"https://github.com/OBKoro1/articleImg_src/blob/master/juejin/162e6f9251c7c18f?raw=true\" alt=\"\"></p>\\n<h2 id=\"实现步骤\"><a class=\"header-anchor\" href=\"#实现步骤\" aria-hidden=\"true\">#</a> 实现步骤</h2>\\n<ol>\\n<li>先搭建组件的html和css样式，遮罩层和内容层。</li>\\n<li>定制弹窗内容：弹窗组件通过<code>slot</code>插槽接受从父组件那里传过来弹窗内容。</li>\\n<li>定制弹窗样式：弹窗组件通过<code>props</code>接收从父组件传过来的弹窗宽度，上下左右的位置。</li>\\n<li>组件开关：通过父组件传进来的<code>props</code>控制组件的显示与隐藏，子组件关闭时通过事件<code>$emit</code>触发父组件改变值。</li>\\n</ol>\\n<hr>\\n<h3 id=\"_1-搭建组件的html和css样式。\"><a class=\"header-anchor\" href=\"#_1-搭建组件的html和css样式。\" aria-hidden=\"true\">#</a> 1.搭建组件的html和css样式。</h3>\\n<p>html结构：一层遮罩层，一层内容层，内容层里面又有一个头部title和主体内容和一个关闭按钮。</p>\\n<p>下面是组件中的html结构，里面有一些后面才要加进去的东西，如果看不懂的话可以先跳过，</p>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-html line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-html\"><code><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>template</span><span class=\"token punctuation\">></span></span>\\n   <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>dialog<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\\n       <span class=\"token comment\">&lt;!--外层的遮罩 点击事件用来关闭弹窗，isShow控制弹窗显示 隐藏的props--\\x3e</span>\\n       <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>dialog-cover back<span class=\"token punctuation\">\"</span></span>  <span class=\"token attr-name\">v-if</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>isShow<span class=\"token punctuation\">\"</span></span>  <span class=\"token attr-name\">@click</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>closeMyself<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\\n       <span class=\"token comment\">&lt;!-- transition 这里可以加一些简单的动画效果 --\\x3e</span>\\n       <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>transition</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>drop<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\\n           <span class=\"token comment\">&lt;!--style 通过props 控制内容的样式  --\\x3e</span>\\n         <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>dialog-content<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">:</span><span class=\"token style-attr language-css\"><span class=\"token attr-name\"><span class=\"token attr-name\">style</span></span><span class=\"token punctuation\">=\"</span><span class=\"token attr-value\"><span class=\"token punctuation\">{</span><span class=\"token property\">top</span><span class=\"token punctuation\">:</span>topDistance+<span class=\"token string\">\\'%\\'</span>,<span class=\"token property\">width</span><span class=\"token punctuation\">:</span>widNum+<span class=\"token string\">\\'%\\'</span>,<span class=\"token property\">left</span><span class=\"token punctuation\">:</span>leftSite+<span class=\"token string\">\\'%\\'</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">\"</span></span>  <span class=\"token attr-name\">v-if</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>isShow<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\\n           <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>dialog_head back<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\\n               <span class=\"token comment\">&lt;!--弹窗头部 title--\\x3e</span>\\n               <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>slot</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>header<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>提示信息<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>slot</span><span class=\"token punctuation\">></span></span>\\n           <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\\n           <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>dialog_main<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">:</span><span class=\"token style-attr language-css\"><span class=\"token attr-name\"><span class=\"token attr-name\">style</span></span><span class=\"token punctuation\">=\"</span><span class=\"token attr-value\"><span class=\"token punctuation\">{</span><span class=\"token property\">paddingTop</span><span class=\"token punctuation\">:</span>pdt+<span class=\"token string\">\\'px\\'</span>,<span class=\"token property\">paddingBottom</span><span class=\"token punctuation\">:</span>pdb+<span class=\"token string\">\\'px\\'</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\\n             <span class=\"token comment\">&lt;!--弹窗的内容--\\x3e</span>\\n             <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>slot</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>main<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>弹窗内容<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>slot</span><span class=\"token punctuation\">></span></span>\\n           <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\\n           <span class=\"token comment\">&lt;!--弹窗关闭按钮--\\x3e</span>\\n           <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span>  <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>foot_close<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">@click</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>closeMyself<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\\n               <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>close_img back<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\\n           <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\\n         <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\\n     <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>transition</span><span class=\"token punctuation\">></span></span>\\n   <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>template</span><span class=\"token punctuation\">></span></span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br><span class=\"line-number\">11</span><br><span class=\"line-number\">12</span><br><span class=\"line-number\">13</span><br><span class=\"line-number\">14</span><br><span class=\"line-number\">15</span><br><span class=\"line-number\">16</span><br><span class=\"line-number\">17</span><br><span class=\"line-number\">18</span><br><span class=\"line-number\">19</span><br><span class=\"line-number\">20</span><br><span class=\"line-number\">21</span><br><span class=\"line-number\">22</span><br><span class=\"line-number\">23</span><br><span class=\"line-number\">24</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<p>下面是组件中的主要的css样式，里面都做了充分的注释，主要通过<code>z-index</code>和<code>background</code>达到遮罩的效果，具体内容的css可以根据自己的需求来设置。</p>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-css line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-css\"><code>&lt;style lang=<span class=\"token string\">\"scss\"</span> scoped>\\n  <span class=\"token comment\">/* 最外层 设置position定位  */</span>\\n  <span class=\"token selector\">.dialog</span> <span class=\"token punctuation\">{</span>\\n    <span class=\"token property\">position</span><span class=\"token punctuation\">:</span> relative<span class=\"token punctuation\">;</span>\\n    <span class=\"token property\">color</span><span class=\"token punctuation\">:</span> #2e2c2d<span class=\"token punctuation\">;</span>\\n    <span class=\"token property\">font-size</span><span class=\"token punctuation\">:</span> 16px<span class=\"token punctuation\">;</span>\\n  <span class=\"token punctuation\">}</span>\\n  <span class=\"token comment\">/* 遮罩 设置背景层，z-index值要足够大确保能覆盖，高度 宽度设置满 做到全屏遮罩 */</span>\\n  <span class=\"token selector\">.dialog-cover</span> <span class=\"token punctuation\">{</span>\\n    <span class=\"token property\">background</span><span class=\"token punctuation\">:</span> <span class=\"token function\">rgba</span><span class=\"token punctuation\">(</span>0,0,0, 0.8<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\n    <span class=\"token property\">position</span><span class=\"token punctuation\">:</span> fixed<span class=\"token punctuation\">;</span>\\n    <span class=\"token property\">z-index</span><span class=\"token punctuation\">:</span> 200<span class=\"token punctuation\">;</span>\\n    <span class=\"token property\">top</span><span class=\"token punctuation\">:</span> 0<span class=\"token punctuation\">;</span>\\n    <span class=\"token property\">left</span><span class=\"token punctuation\">:</span> 0<span class=\"token punctuation\">;</span>\\n    <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 100%<span class=\"token punctuation\">;</span>\\n    <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 100%<span class=\"token punctuation\">;</span>\\n  <span class=\"token punctuation\">}</span>\\n  <span class=\"token comment\">/* 内容层 z-index要比遮罩大，否则会被遮盖， */</span>\\n  <span class=\"token selector\">.dialog-content</span><span class=\"token punctuation\">{</span>\\n    <span class=\"token property\">position</span><span class=\"token punctuation\">:</span> fixed<span class=\"token punctuation\">;</span>\\n    <span class=\"token property\">top</span><span class=\"token punctuation\">:</span> 35%<span class=\"token punctuation\">;</span>\\n    <span class=\"token comment\">/* 移动端使用felx布局  */</span>\\n    <span class=\"token property\">display</span><span class=\"token punctuation\">:</span> flex<span class=\"token punctuation\">;</span>\\n    <span class=\"token property\">flex-direction</span><span class=\"token punctuation\">:</span> column<span class=\"token punctuation\">;</span>\\n    <span class=\"token property\">justify-content</span><span class=\"token punctuation\">:</span> center<span class=\"token punctuation\">;</span>\\n    <span class=\"token property\">align-items</span><span class=\"token punctuation\">:</span> center<span class=\"token punctuation\">;</span>\\n    <span class=\"token property\">z-index</span><span class=\"token punctuation\">:</span> 300<span class=\"token punctuation\">;</span>\\n  <span class=\"token punctuation\">}</span>\\n&lt;/style>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br><span class=\"line-number\">11</span><br><span class=\"line-number\">12</span><br><span class=\"line-number\">13</span><br><span class=\"line-number\">14</span><br><span class=\"line-number\">15</span><br><span class=\"line-number\">16</span><br><span class=\"line-number\">17</span><br><span class=\"line-number\">18</span><br><span class=\"line-number\">19</span><br><span class=\"line-number\">20</span><br><span class=\"line-number\">21</span><br><span class=\"line-number\">22</span><br><span class=\"line-number\">23</span><br><span class=\"line-number\">24</span><br><span class=\"line-number\">25</span><br><span class=\"line-number\">26</span><br><span class=\"line-number\">27</span><br><span class=\"line-number\">28</span><br><span class=\"line-number\">29</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<hr>\\n<h3 id=\"_2-通过slot定制弹窗内容\"><a class=\"header-anchor\" href=\"#_2-通过slot定制弹窗内容\" aria-hidden=\"true\">#</a> 2. 通过<code>slot</code>定制弹窗内容</h3>\\n<p>这一步，只要理解了<code>slot</code>的作用以及用法，就没有问题了。</p>\\n<h4 id=\"单个插槽：\"><a class=\"header-anchor\" href=\"#单个插槽：\" aria-hidden=\"true\">#</a> 单个插槽：</h4>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-html line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-html\"><code><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>slot</span><span class=\"token punctuation\">></span></span>这是在没有slot传进来的时候，才显示的弹窗内容<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>slot</span><span class=\"token punctuation\">></span></span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<p>上面是单个插槽也叫默认插槽，在父组件中使用插槽的正确姿势：</p>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-html line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-html\"><code><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>my-component</span><span class=\"token punctuation\">></span></span>\\n  <span class=\"token comment\">&lt;!--在my-component里面的所有内容片段都将插入到slot所在的DOM位置，并且会替换掉slot标签--\\x3e</span>\\n  <span class=\"token comment\">&lt;!--这两个p标签，将替换整个slot标签里面的内容--\\x3e</span>\\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span>这是一些初始内容<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span>\\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span>这是更多的初始内容<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span>\\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>my-component</span><span class=\"token punctuation\">></span></span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<p>ps:如果子组件里面包含<code>slot</code>插槽，那么上面的p标签的内容将会被丢弃。</p>\\n<h4 id=\"具名插槽：\"><a class=\"header-anchor\" href=\"#具名插槽：\" aria-hidden=\"true\">#</a> 具名插槽：</h4>\\n<p>所谓的具名插槽，即为<code>slot</code>标签赋一个<code>name</code>属性，具名插槽可以父组件中不同的内容片段放到子组件的不同地方，具名插槽还是可以拥有一个默认插槽。下面可以看一下弹窗组件插槽的使用方式：</p>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-html line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-html\"><code><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>dialog_head back <span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\\n <span class=\"token comment\">&lt;!--弹窗头部 title--\\x3e</span>\\n <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>slot</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>header<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>提示信息<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>slot</span><span class=\"token punctuation\">></span></span>\\n <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\\n <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>dialog_main <span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">:</span><span class=\"token style-attr language-css\"><span class=\"token attr-name\"><span class=\"token attr-name\">style</span></span><span class=\"token punctuation\">=\"</span><span class=\"token attr-value\"><span class=\"token punctuation\">{</span><span class=\"token property\">paddingTop</span><span class=\"token punctuation\">:</span>pdt+<span class=\"token string\">\\'px\\'</span>,<span class=\"token property\">paddingBottom</span><span class=\"token punctuation\">:</span>pdb+<span class=\"token string\">\\'px\\'</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\\n   <span class=\"token comment\">&lt;!--弹窗的内容--\\x3e</span>\\n <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>slot</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>main<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>弹窗内容<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>slot</span><span class=\"token punctuation\">></span></span>\\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<p>在父组件中的使用方式：</p>\\n<ol>\\n<li>将弹窗组件引入要使用的组件中，并通过<code>components</code>注册成为组件。</li>\\n<li>父组件中弹窗组件插槽的使用方法如下。</li>\\n</ol>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-html line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-html\"><code><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dialogComponent</span><span class=\"token punctuation\">></span></span>\\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">slot</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>header<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>插入到name为header的slot标签里面<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>dialog_publish_main<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">slot</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>main<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\\n        这里是内容插入到子组件的slot的name为main里面，可以在父组件中添加class定义样式，事件类型等各种操作\\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dialogComponent</span><span class=\"token punctuation\">></span></span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<p>关于组件中用到的插槽的介绍就到这里了，插槽在弹窗组件中的应用是一个典型的栗子，可以看到插槽作用相当强大，而插槽本身的使用并不难，同学们爱上插槽了没有？</p>\\n<hr>\\n<h3 id=\"_3-通过props控制弹窗显隐-定制弹窗style\"><a class=\"header-anchor\" href=\"#_3-通过props控制弹窗显隐-定制弹窗style\" aria-hidden=\"true\">#</a> 3.通过<code>props</code>控制弹窗显隐&amp;&amp;定制弹窗style</h3>\\n<p><code>psops</code>是Vue中父组件向子组件传递数据的一种方式，不熟悉的小伙伴们可以看一下<a href=\"https://cn.vuejs.org/v2/guide/components.html#Prop\" target=\"_blank\" rel=\"noopener noreferrer\">props文档<OutboundLink/></a>。</p>\\n<p>因为弹窗组件都是引到别的组件里面去用的，为了适合不同组件场景中的弹窗，所以弹窗组件必须具备一定的可定制性，否则这样的组件将毫无意义,下面介绍一下props的使用方式，以弹窗组件为例：</p>\\n<ol>\\n<li>首先需要在被传入的组件中定义props的一些特性，验证之类的。</li>\\n<li>然后在父组件中绑定props数据。</li>\\n</ol>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code><span class=\"token operator\">&lt;</span>script<span class=\"token operator\">></span>\\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">{</span>\\n  props<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\\n    isShow<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> \\n    <span class=\"token comment\">//弹窗组件是否显示 默认不显示</span>\\n      type<span class=\"token punctuation\">:</span> Boolean<span class=\"token punctuation\">,</span>\\n      <span class=\"token keyword\">default</span><span class=\"token punctuation\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\\n      required<span class=\"token punctuation\">:</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">//必须</span>\\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\\n    <span class=\"token comment\">//下面这些属性会绑定到div上面 详情参照上面的html结构</span>\\n    <span class=\"token comment\">// 如： :style=\"{top:topDistance+\\'%\\',width:widNum+\\'%\\'}\"</span>\\n    widNum<span class=\"token punctuation\">:</span><span class=\"token punctuation\">{</span> \\n    <span class=\"token comment\">//内容宽度</span>\\n      type<span class=\"token punctuation\">:</span> Number<span class=\"token punctuation\">,</span>\\n      <span class=\"token keyword\">default</span><span class=\"token punctuation\">:</span><span class=\"token number\">86.5</span>\\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\\n    leftSite<span class=\"token punctuation\">:</span><span class=\"token punctuation\">{</span>\\n      <span class=\"token comment\">// 左定位</span>\\n      type<span class=\"token punctuation\">:</span> Number<span class=\"token punctuation\">,</span>\\n      <span class=\"token keyword\">default</span><span class=\"token punctuation\">:</span><span class=\"token number\">6.5</span>\\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\\n    topDistance<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\\n        <span class=\"token comment\">//top上边距</span>\\n      type<span class=\"token punctuation\">:</span> Number<span class=\"token punctuation\">,</span>\\n      <span class=\"token keyword\">default</span><span class=\"token punctuation\">:</span><span class=\"token number\">35</span>\\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\\n    pdt<span class=\"token punctuation\">:</span><span class=\"token punctuation\">{</span>\\n      <span class=\"token comment\">//上padding</span>\\n      type<span class=\"token punctuation\">:</span> Number<span class=\"token punctuation\">,</span>\\n      <span class=\"token keyword\">default</span><span class=\"token punctuation\">:</span><span class=\"token number\">22</span>\\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\\n    pdb<span class=\"token punctuation\">:</span><span class=\"token punctuation\">{</span>\\n      <span class=\"token comment\">//下padding</span>\\n      type<span class=\"token punctuation\">:</span> Number<span class=\"token punctuation\">,</span>\\n      <span class=\"token keyword\">default</span><span class=\"token punctuation\">:</span><span class=\"token number\">47</span>\\n    <span class=\"token punctuation\">}</span>\\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\\n<span class=\"token punctuation\">}</span>\\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">></span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br><span class=\"line-number\">11</span><br><span class=\"line-number\">12</span><br><span class=\"line-number\">13</span><br><span class=\"line-number\">14</span><br><span class=\"line-number\">15</span><br><span class=\"line-number\">16</span><br><span class=\"line-number\">17</span><br><span class=\"line-number\">18</span><br><span class=\"line-number\">19</span><br><span class=\"line-number\">20</span><br><span class=\"line-number\">21</span><br><span class=\"line-number\">22</span><br><span class=\"line-number\">23</span><br><span class=\"line-number\">24</span><br><span class=\"line-number\">25</span><br><span class=\"line-number\">26</span><br><span class=\"line-number\">27</span><br><span class=\"line-number\">28</span><br><span class=\"line-number\">29</span><br><span class=\"line-number\">30</span><br><span class=\"line-number\">31</span><br><span class=\"line-number\">32</span><br><span class=\"line-number\">33</span><br><span class=\"line-number\">34</span><br><span class=\"line-number\">35</span><br><span class=\"line-number\">36</span><br><span class=\"line-number\">37</span><br><span class=\"line-number\">38</span><br><span class=\"line-number\">39</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<p>父组件中使用方式：</p>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-html line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-html\"><code><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dialogComponent</span> <span class=\"token attr-name\">:is-show</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>status.isShowPublish<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">:top-distance</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>status.topNum<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dialogComponent</span><span class=\"token punctuation\">></span></span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<p>ps：props传递数据不是双向绑定的，而是<strong>单向数据流</strong>，父组件的数据变化时，也会传递到子组件中，这就意外着我们不应该在子组件中修改props。所以我们在关闭弹窗的时候就<strong>需要通过<code>$emit</code>来修改父组件的数据</strong>，然后数据会自动传到子组件中。</p>\\n<p>现在基本上弹窗组件都已实现的差不多了，还差一个弹窗的关闭事件，这里就涉及到子组件往父组件传参了。</p>\\n<h3 id=\"_4-emit触发父组件事件修改数据，关闭弹窗\"><a class=\"header-anchor\" href=\"#_4-emit触发父组件事件修改数据，关闭弹窗\" aria-hidden=\"true\">#</a> 4.<code>$emit</code>触发父组件事件修改数据，关闭弹窗</h3>\\n<p>Vue中在子组件往父组件传参，很多都是通过<code>$emit</code>来触发父组件的事件来修改数据。</p>\\n<p>在子组件中，在点击关闭，或者遮罩层的时候触发下面这个方法：</p>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code>methods<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\\n  <span class=\"token function\">closeMyself</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">$emit</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"on-close\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \\n    <span class=\"token comment\">//如果需要传参的话，可以在\"on-close\"后面再加参数，然后在父组件的函数里接收就可以了。</span>\\n  <span class=\"token punctuation\">}</span>\\n<span class=\"token punctuation\">}</span> \\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<p>父组件中的写法：</p>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code><span class=\"token operator\">&lt;</span>dialogComponent <span class=\"token punctuation\">:</span>is<span class=\"token operator\">-</span>show<span class=\"token operator\">=</span><span class=\"token string\">\"status.isShowPublish\"</span> <span class=\"token punctuation\">:</span>top<span class=\"token operator\">-</span>distance<span class=\"token operator\">=</span><span class=\"token string\">\"status.topNum\"</span>  @on<span class=\"token operator\">-</span>close<span class=\"token operator\">=</span><span class=\"token string\">\"closeDialog\"</span><span class=\"token operator\">></span> \\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>dialogComponent<span class=\"token operator\">></span>\\n<span class=\"token comment\">//\"on-close是监听子组件的时间有没有触发，触发的时候执行closeDialog函数</span>\\nmethods<span class=\"token punctuation\">:</span><span class=\"token punctuation\">{</span>\\n  <span class=\"token function\">closeDialog</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\\n    <span class=\"token comment\">// this.status.isShowPublish=false;</span>\\n    <span class=\"token comment\">//把绑定的弹窗数组 设为false即可关闭弹窗</span>\\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\\n<span class=\"token punctuation\">}</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<hr>\\n<p>可以用弹窗组件实现下列这种信息展示，或者事件交互：</p>\\n<p><img src=\"https://github.com/OBKoro1/articleImg_src/blob/master/juejin/162e7a7af2e0effa?raw=true\" alt=\"\"></p>\\n<h3 id=\"弹窗组件代码\"><a class=\"header-anchor\" href=\"#弹窗组件代码\" aria-hidden=\"true\">#</a> <a href=\"https://github.com/OBKoro1/web_accumulate/blob/d6b599ca22d8656d3f31f80bffa976fac36d2d75/example/dialogComponent.vue\" target=\"_blank\" rel=\"noopener noreferrer\">弹窗组件代码<OutboundLink/></a></h3>\\n<p>上面是把弹窗的每个步骤拆分开来，一步步解析的，每一步都说的比较清楚了，具体连起来的话，可以看看<a href=\"https://github.com/OBKoro1/web_accumulate/blob/d6b599ca22d8656d3f31f80bffa976fac36d2d75/example/dialogComponent.vue\" target=\"_blank\" rel=\"noopener noreferrer\">代码<OutboundLink/></a>，再结合文章就能理的很清楚了。</p>\\n<h2 id=\"小结：\"><a class=\"header-anchor\" href=\"#小结：\" aria-hidden=\"true\">#</a> 小结：</h2>\\n<p>这个弹窗组件，实现起来一点都不难，我这里主要是提供了一个实现方式，当项目中有需要的话，大家也可以自己撸一个出来，以上就是本文的内容了，希望同学们看完能有所收获。</p>\\n<p>以上2018.4.21</p>\\n<h3 id=\"参考资料：\"><a class=\"header-anchor\" href=\"#参考资料：\" aria-hidden=\"true\">#</a> 参考资料：</h3>\\n<p><a href=\"https://cn.vuejs.org/v2/guide/components.html#%E4%BD%BF%E7%94%A8%E6%8F%92%E6%A7%BD%E5%88%86%E5%8F%91%E5%86%85%E5%AE%B9\" target=\"_blank\" rel=\"noopener noreferrer\">Vue文档-插槽<OutboundLink/></a>\\n\\x3c!-- 特殊字符串：用于修改/删除markdown的结尾提示语-OBKoro1 --\\x3e</p>\\n<h3 id=\"点个star支持我一下\"><a class=\"header-anchor\" href=\"#点个star支持我一下\" aria-hidden=\"true\">#</a> 点个<a href=\"https://github.com/OBKoro1/web_accumulate\" target=\"_blank\" rel=\"noopener noreferrer\">Star<OutboundLink/></a>支持我一下~</h3>\\n\\x3c!-- \\'特殊字符串：用于删除编译后的issue组件-OBKoro1 --\\x3e\\n'},{key:\"v-658bb900cd365\",path:\"/accumulate/Vue/%E6%9E%81%E7%AE%80%E5%8F%8C%E5%90%91%E7%BB%91%E5%AE%9A.html\",lastUpdated:1564720698e3,title:\"仿Vue极简双向绑定\",headers:[{level:2,title:\"仿Vue极简双向绑定\",slug:\"仿vue极简双向绑定\"},{level:2,title:\"效果GIF：\",slug:\"效果gif：\"},{level:2,title:\"demo地址：\",slug:\"demo地址：\"},{level:2,title:\"了解Object.defineProperty()：\",slug:\"了解object-defineproperty-：\"},{level:3,title:\"使用方式：\",slug:\"使用方式：\"},{level:3,title:\"示例demo：\",slug:\"示例demo：\"},{level:3,title:\"画一下重点：\",slug:\"画一下重点：\"},{level:2,title:\"实现思路：\",slug:\"实现思路：\"},{level:3,title:\"mvvm系列的双向绑定，关键步骤：\",slug:\"mvvm系列的双向绑定，关键步骤：\"},{level:3,title:\"流程图：\",slug:\"流程图：\"},{level:2,title:\"具体代码实现：\",slug:\"具体代码实现：\"},{level:3,title:\"html结构：\",slug:\"html结构：\"},{level:3,title:\"调用方法：\",slug:\"调用方法：\"},{level:3,title:\"创建myVue函数：\",slug:\"创建myvue函数：\"},{level:3,title:\"Watcher函数:\",slug:\"watcher函数\"},{level:3,title:\"实现数据监听器_observer()：\",slug:\"实现数据监听器-observer-：\"},{level:3,title:\"实现Compile 模板编译\",slug:\"实现compile-模板编译\"},{level:2,title:\"完整代码&demo地址\",slug:\"完整代码-demo地址\"},{level:2,title:\"小结\",slug:\"小结\"},{level:3,title:\"参考资料：\",slug:\"参考资料：\"},{level:3,title:\"点个Star支持我一下~\",slug:\"点个star支持我一下\"}],excerpt:'<h2 id=\"仿vue极简双向绑定\"><a class=\"header-anchor\" href=\"#仿vue极简双向绑定\" aria-hidden=\"true\">#</a> 仿Vue极简双向绑定</h2>\\n<p>现在的前端面试不管你用的什么框架，总会问你这个框架的双向绑定机制，有的甚至要求你现场实现一个双向绑定出来，那对于没有好好研究过这方面知识的同学来说，当然是很难的，<strong>接下来本文用160行代码带你实现一个极简的双向绑定机制</strong>。如果喜欢的话可以点波赞/关注，支持一下，希望大家看完本文可以有所收获。</p>\\n<h2 id=\"效果gif：\"><a class=\"header-anchor\" href=\"#效果gif：\" aria-hidden=\"true\">#</a> 效果GIF：</h2>\\n<p><img src=\"https://github.com/OBKoro1/articleImg_src/blob/master/weibo_img_move/005Y4rCogy1fsl70vrkj3g30aw09iq3y.gif?raw=true\" alt=\"\"></p>\\n<h2 id=\"demo地址：\"><a class=\"header-anchor\" href=\"#demo地址：\" aria-hidden=\"true\">#</a> demo地址：</h2>\\n<p><strong>codepen:</strong><a href=\"https://codepen.io/OBKoro1/pen/qKKqQe?editors=0010\" target=\"_blank\" rel=\"noopener noreferrer\">仿Vue极简双向绑定<OutboundLink/></a></p>\\n<p><strong>Github:</strong><a href=\"http://obkoro1.com/simpleDemo/simpleDemo/myVue/index.html\" target=\"_blank\" rel=\"noopener noreferrer\">仿Vue极简双向绑定<OutboundLink/></a></p>\\n<hr>\\n<h2 id=\"了解object-defineproperty-：\"><a class=\"header-anchor\" href=\"#了解object-defineproperty-：\" aria-hidden=\"true\">#</a> 了解Object.defineProperty()：</h2>\\n<p>这个API是实现双向绑定的核心，最主要的作用是重写数据的<code>get</code>、<code>set</code>方法</p>\\n<h3 id=\"使用方式：\"><a class=\"header-anchor\" href=\"#使用方式：\" aria-hidden=\"true\">#</a> 使用方式：</h3>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code><span class=\"token keyword\">let</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\\n    singer<span class=\"token punctuation\">:</span> <span class=\"token string\">\"周杰伦\"</span>\\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\\n<span class=\"token keyword\">let</span> default_value <span class=\"token operator\">=</span> <span class=\"token string\">\"青花瓷\"</span><span class=\"token punctuation\">;</span>\\nObject<span class=\"token punctuation\">.</span><span class=\"token function\">defineProperty</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">,</span> <span class=\"token string\">\"music\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\\n    <span class=\"token comment\">// value: \\'七里香\\', // 设置属性的值 下面设置了get set函数 所以这里不能设置</span>\\n    configurable<span class=\"token punctuation\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 是否可以删除属性 默认不能删除</span>\\n    <span class=\"token comment\">// writable: true,  // 是否可以修改对象 下面设置了get set函数 所以这里不能设置</span>\\n    enumerable<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// music是否可以被枚举 默认是不能被枚举(遍历)</span>\\n    <span class=\"token comment\">// ☆ get,set设置时不能设置writable和value，要一对一对设置，交叉设置/同时存在 就会报错</span>\\n    <span class=\"token keyword\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n    <span class=\"token comment\">// 获取obj.music的时候就会调用get方法</span>\\n    <span class=\"token comment\">// let default_value = \"强行设置get的返回值\"; // 打开注释 读取属性永远都是‘强行设置get的返回值’</span>\\n    <span class=\"token keyword\">return</span> default_value<span class=\"token punctuation\">;</span>\\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\\n    <span class=\"token keyword\">set</span><span class=\"token punctuation\">(</span>val<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n    <span class=\"token comment\">// 将修改的值重新赋给song</span>\\n    default_value <span class=\"token operator\">=</span> val<span class=\"token punctuation\">;</span>\\n    <span class=\"token punctuation\">}</span>\\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">.</span>music<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 青花瓷</span>\\n<span class=\"token keyword\">delete</span> obj<span class=\"token punctuation\">.</span>music<span class=\"token punctuation\">;</span> <span class=\"token comment\">// configurable设为false 删除无效</span>\\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">.</span>music<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 青花瓷</span>\\nobj<span class=\"token punctuation\">.</span>music <span class=\"token operator\">=</span> <span class=\"token string\">\"听妈妈的话\"</span><span class=\"token punctuation\">;</span> \\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">.</span>music<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 听妈妈的话</span>\\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> key <span class=\"token keyword\">in</span> obj<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n    <span class=\"token comment\">// 默认情况下通过defineProperty定义的属性是不能被枚举(遍历)的</span>\\n    <span class=\"token comment\">// 需要设置enumerable为true才可以 否则只能拿到singer 属性</span>\\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// singer, music</span>\\n<span class=\"token punctuation\">}</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br><span class=\"line-number\">11</span><br><span class=\"line-number\">12</span><br><span class=\"line-number\">13</span><br><span class=\"line-number\">14</span><br><span class=\"line-number\">15</span><br><span class=\"line-number\">16</span><br><span class=\"line-number\">17</span><br><span class=\"line-number\">18</span><br><span class=\"line-number\">19</span><br><span class=\"line-number\">20</span><br><span class=\"line-number\">21</span><br><span class=\"line-number\">22</span><br><span class=\"line-number\">23</span><br><span class=\"line-number\">24</span><br><span class=\"line-number\">25</span><br><span class=\"line-number\">26</span><br><span class=\"line-number\">27</span><br><span class=\"line-number\">28</span><br><span class=\"line-number\">29</span><br><span class=\"line-number\">30</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<h3 id=\"示例demo：\"><a class=\"header-anchor\" href=\"#示例demo：\" aria-hidden=\"true\">#</a> 示例demo：</h3>\\n<p>对，这里有个<a href=\"https://codepen.io/OBKoro1/pen/XYYMMp?editors=0010\" target=\"_blank\" rel=\"noopener noreferrer\">demo<OutboundLink/></a>。</p>\\n<h3 id=\"画一下重点：\"><a class=\"header-anchor\" href=\"#画一下重点：\" aria-hidden=\"true\">#</a> 画一下重点：</h3>\\n<ul>\\n<li>get,set设置时不能设置writable和value, 他们是一对情侣的存在，<strong>交叉设置或同时存在,会报错</strong></li>\\n<li>通过<code>defineProperty</code>设置的属性，<strong>默认不能删除，不能遍历</strong>，当然你可以通过设置更改他们。</li>\\n<li><strong>get、set 是函数，可以做的事情很多</strong>。</li>\\n</ul>\\n<p><strong>兼容性</strong>：IE 9,Firefox 4, Chorme 5,Opera 11.6,Safari 5.1</p>\\n<p>更详细的可以看一下<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty\" target=\"_blank\" rel=\"noopener noreferrer\">MDN<OutboundLink/></a></p>\\n<hr>\\n<h2 id=\"实现思路：\"><a class=\"header-anchor\" href=\"#实现思路：\" aria-hidden=\"true\">#</a> 实现思路：</h2>\\n<h3 id=\"mvvm系列的双向绑定，关键步骤：\"><a class=\"header-anchor\" href=\"#mvvm系列的双向绑定，关键步骤：\" aria-hidden=\"true\">#</a> mvvm系列的双向绑定，关键步骤：</h3>\\n<ol>\\n<li>实现数据监听器Observer，用<code>Object.defineProperty()</code><strong>重写数据的get、set，值更新就在set中通知订阅者更新数据</strong>。</li>\\n<li>实现模板编译Compile，深度遍历dom树，对每个元素节点的指令模板进行<strong>替换数据以及订阅数据</strong>。</li>\\n<li>实现Watch用于连接Observer和Compile，<strong>能够订阅并收到每个属性变动的通知，执行指令绑定的相应回调函数，从而更新视图</strong>。</li>\\n<li>mvvm入口函数，整合以上三者。</li>\\n</ol>\\n<h3 id=\"流程图：\"><a class=\"header-anchor\" href=\"#流程图：\" aria-hidden=\"true\">#</a> 流程图：</h3>\\n<p><img src=\"https://github.com/OBKoro1/articleImg_src/blob/master/weibo_img_move/005Y4rCogy1fsl7dygfovj30ka0augpd.jpg?raw=true\" alt=\"\"></p>\\n<p>这部分讲的很清楚，现在有点懵逼也没关系，看完代码，自己copy下来玩一玩之后，回头再看实现思路，相信会有收获的。</p>\\n<hr>\\n<h2 id=\"具体代码实现：\"><a class=\"header-anchor\" href=\"#具体代码实现：\" aria-hidden=\"true\">#</a> 具体代码实现：</h2>\\n<h3 id=\"html结构：\"><a class=\"header-anchor\" href=\"#html结构：\" aria-hidden=\"true\">#</a> html结构：</h3>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-html line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-html\"><code><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>app<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>text<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">v-model</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>name<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h3</span> <span class=\"token attr-name\">v-bind</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>name<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h3</span><span class=\"token punctuation\">></span></span>\\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>text<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">v-model</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>testData1<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h3</span><span class=\"token punctuation\">></span></span>{{ testData1 }}<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h3</span><span class=\"token punctuation\">></span></span>\\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>text<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">v-model</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>testData2<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h3</span><span class=\"token punctuation\">></span></span>{{ testData2 }}<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h3</span><span class=\"token punctuation\">></span></span>\\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<p>看到这个模板，相信用过Vue的同学都不会陌生。</p>\\n<h3 id=\"调用方法：\"><a class=\"header-anchor\" href=\"#调用方法：\" aria-hidden=\"true\">#</a> 调用方法：</h3>\\n<p>采用类Vue方式来使用双向绑定：</p>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code>window<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onload</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n    <span class=\"token keyword\">var</span> app <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">myVue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\\n        el<span class=\"token punctuation\">:</span> <span class=\"token string\">\\'#app\\'</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// dom</span>\\n        data<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// 数据</span>\\n            testData1<span class=\"token punctuation\">:</span> <span class=\"token string\">\\'仿Vue\\'</span><span class=\"token punctuation\">,</span>\\n            testData2<span class=\"token punctuation\">:</span> <span class=\"token string\">\\'极简双向绑定\\'</span><span class=\"token punctuation\">,</span>\\n            name<span class=\"token punctuation\">:</span> <span class=\"token string\">\\'OBKoro1\\'</span>\\n        <span class=\"token punctuation\">}</span>\\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\\n<span class=\"token punctuation\">}</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<h3 id=\"创建myvue函数：\"><a class=\"header-anchor\" href=\"#创建myvue函数：\" aria-hidden=\"true\">#</a> 创建myVue函数：</h3>\\n<p>实际上这里是我们实现思路中的第四步，用于整合数据监听器<code>this._observer()</code>、指令解析器<code>this._compile()</code>以及连接Observer和Compile的_watcherTpl的watch池。</p>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">myVue</span><span class=\"token punctuation\">(</span>options <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  <span class=\"token comment\">// 防止没传，设一个默认值</span>\\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$options <span class=\"token operator\">=</span> options<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 配置挂载</span>\\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$el <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span>options<span class=\"token punctuation\">.</span>el<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 获取dom</span>\\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_data <span class=\"token operator\">=</span> options<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 数据挂载</span>\\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_watcherTpl <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// watcher池</span>\\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">_observer</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 传入数据，执行函数，重写数据的get set</span>\\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">_compile</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$el<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 传入dom，执行函数，编译模板 发布订阅</span>\\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<hr>\\n<h3 id=\"watcher函数\"><a class=\"header-anchor\" href=\"#watcher函数\" aria-hidden=\"true\">#</a> Watcher函数:</h3>\\n<p>这是实现思路中的第三步，因为下方数据监听器<code>_observer()</code>需要用到Watcher函数，所以这里就先讲了。</p>\\n<p>像实现思路中所说的，这里起到了连接Observer和Compile的作用：</p>\\n<ol>\\n<li><strong>在模板编译_compile()阶段发布订阅</strong></li>\\n<li><strong>在赋值操作的时候，更新视图</strong></li>\\n</ol>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code><span class=\"token comment\">// new Watcher() 为this._compile()发布订阅+ 在this._observer()中set(赋值)的时候更新视图</span>\\n<span class=\"token keyword\">function</span> <span class=\"token function\">Watcher</span><span class=\"token punctuation\">(</span>el<span class=\"token punctuation\">,</span> vm<span class=\"token punctuation\">,</span> val<span class=\"token punctuation\">,</span> attr<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>el <span class=\"token operator\">=</span> el<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 指令对应的DOM元素</span>\\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>vm <span class=\"token operator\">=</span> vm<span class=\"token punctuation\">;</span> <span class=\"token comment\">// myVue实例</span>\\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>val <span class=\"token operator\">=</span> val<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 指令对应的值 </span>\\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>attr <span class=\"token operator\">=</span> attr<span class=\"token punctuation\">;</span> <span class=\"token comment\">// dom获取值，如value获取input的值 / innerHTML获取dom的值</span>\\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">update</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 更新视图</span>\\n<span class=\"token punctuation\">}</span>\\nWatcher<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">update</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> \\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>el<span class=\"token punctuation\">[</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>attr<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>vm<span class=\"token punctuation\">.</span>_data<span class=\"token punctuation\">[</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 获取data的最新值 赋值给dom 更新视图</span>\\n<span class=\"token punctuation\">}</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br><span class=\"line-number\">11</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<p>没有看错，代码量就这么多，可能需要把整个代码连接起来，多看几遍才能够理解。</p>\\n<h3 id=\"实现数据监听器-observer-：\"><a class=\"header-anchor\" href=\"#实现数据监听器-observer-：\" aria-hidden=\"true\">#</a> 实现数据监听器_observer()：</h3>\\n<p>实现思路中的第一步，用<code>Object.defineProperty()</code>遍历data重写所有属性的get set。</p>\\n<p>然后在给对象的某个属性赋值的时候，就会触发set。</p>\\n<p><strong>在set中我们可以监听到数据的变化，然后就可以触发watch更新视图</strong>。</p>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code>myVue<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">_observer</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n    <span class=\"token keyword\">var</span> _this <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\\n    Object<span class=\"token punctuation\">.</span><span class=\"token function\">keys</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span>key <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// 遍历数据</span>\\n        _this<span class=\"token punctuation\">.</span>_watcherTpl<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// 每个数据的订阅池()</span>\\n            _directives<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\\n        <span class=\"token keyword\">var</span> value <span class=\"token operator\">=</span> obj<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 获取属性值</span>\\n        <span class=\"token keyword\">var</span> watcherTpl <span class=\"token operator\">=</span> _this<span class=\"token punctuation\">.</span>_watcherTpl<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 数据的订阅池</span>\\n        Object<span class=\"token punctuation\">.</span><span class=\"token function\">defineProperty</span><span class=\"token punctuation\">(</span>_this<span class=\"token punctuation\">.</span>_data<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// 双向绑定最重要的部分 重写数据的set get</span>\\n            configurable<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>  <span class=\"token comment\">// 可以删除</span>\\n            enumerable<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 可以遍历</span>\\n            <span class=\"token keyword\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n                console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>key<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">获取值：</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>value<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\n                <span class=\"token keyword\">return</span> value<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 获取值的时候 直接返回</span>\\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\\n            <span class=\"token keyword\">set</span><span class=\"token punctuation\">(</span>newVal<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// 改变值的时候 触发set</span>\\n                console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>key<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">更新：</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>newVal<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>value <span class=\"token operator\">!==</span> newVal<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n                    value <span class=\"token operator\">=</span> newVal<span class=\"token punctuation\">;</span>\\n                    watcherTpl<span class=\"token punctuation\">.</span>_directives<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// 遍历订阅池 </span>\\n                        item<span class=\"token punctuation\">.</span><span class=\"token function\">update</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\n                        <span class=\"token comment\">// 遍历所有订阅的地方(v-model+v-bind+{{}}) 触发this._compile()中发布的订阅Watcher 更新视图  </span>\\n                    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\n                <span class=\"token punctuation\">}</span>\\n            <span class=\"token punctuation\">}</span>\\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\n<span class=\"token punctuation\">}</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br><span class=\"line-number\">11</span><br><span class=\"line-number\">12</span><br><span class=\"line-number\">13</span><br><span class=\"line-number\">14</span><br><span class=\"line-number\">15</span><br><span class=\"line-number\">16</span><br><span class=\"line-number\">17</span><br><span class=\"line-number\">18</span><br><span class=\"line-number\">19</span><br><span class=\"line-number\">20</span><br><span class=\"line-number\">21</span><br><span class=\"line-number\">22</span><br><span class=\"line-number\">23</span><br><span class=\"line-number\">24</span><br><span class=\"line-number\">25</span><br><span class=\"line-number\">26</span><br><span class=\"line-number\">27</span><br><span class=\"line-number\">28</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<h3 id=\"实现compile-模板编译\"><a class=\"header-anchor\" href=\"#实现compile-模板编译\" aria-hidden=\"true\">#</a> 实现Compile 模板编译</h3>\\n<p>这里是实现思路中的第三步，让我们来总结一下这里做了哪些事情：</p>\\n<ul>\\n<li>首先是深度遍历dom树，遍历每个节点以及子节点。</li>\\n<li>将模板中的变量替换成数据，初始化渲染页面视图。</li>\\n<li>把指令绑定的属性添加到对应的订阅池中</li>\\n<li>一旦数据有变动，收到通知，更新视图。</li>\\n</ul>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code>myVue<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">_compile</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span>el<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n    <span class=\"token keyword\">var</span> _this <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> nodes <span class=\"token operator\">=</span> el<span class=\"token punctuation\">.</span>children<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 获取app的dom</span>\\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> len <span class=\"token operator\">=</span> nodes<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> len<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// 遍历dom节点</span>\\n        <span class=\"token keyword\">var</span> node <span class=\"token operator\">=</span> nodes<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>children<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n            _this<span class=\"token punctuation\">.</span><span class=\"token function\">_compile</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 递归深度遍历 dom树</span>\\n        <span class=\"token punctuation\">}</span>\\n        <span class=\"token comment\">// 如果有v-model属性，并且元素是INPUT或者TEXTAREA，我们监听它的input事件    </span>\\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span><span class=\"token function\">hasAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">\\'v-model\\'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>tagName <span class=\"token operator\">=</span> <span class=\"token string\">\\'INPUT\\'</span> <span class=\"token operator\">||</span> node<span class=\"token punctuation\">.</span>tagName <span class=\"token operator\">==</span> <span class=\"token string\">\\'TEXTAREA\\'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n            node<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">\\'input\\'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n                <span class=\"token keyword\">var</span> attVal <span class=\"token operator\">=</span> node<span class=\"token punctuation\">.</span><span class=\"token function\">getAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">\\'v-model\\'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 获取v-model绑定的值</span>\\n                _this<span class=\"token punctuation\">.</span>_watcherTpl<span class=\"token punctuation\">[</span>attVal<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>_directives<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Watcher</span><span class=\"token punctuation\">(</span> <span class=\"token comment\">// 将dom替换成属性的数据并发布订阅 在set的时候更新数据</span>\\n                    node<span class=\"token punctuation\">,</span>\\n                    _this<span class=\"token punctuation\">,</span>\\n                    attVal<span class=\"token punctuation\">,</span>\\n                    <span class=\"token string\">\\'value\\'</span>\\n                <span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\n                <span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n                    _this<span class=\"token punctuation\">.</span>_data<span class=\"token punctuation\">[</span>attVal<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> nodes<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// input值改变的时候 将新值赋给数据 触发set=>set触发watch 更新视图</span>\\n                <span class=\"token punctuation\">}</span>\\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\n        <span class=\"token punctuation\">}</span>\\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span><span class=\"token function\">hasAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">\\'v-bind\\'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// v-bind指令 </span>\\n            <span class=\"token keyword\">var</span> attrVal <span class=\"token operator\">=</span> node<span class=\"token punctuation\">.</span><span class=\"token function\">getAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">\\'v-bind\\'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 绑定的data</span>\\n            _this<span class=\"token punctuation\">.</span>_watcherTpl<span class=\"token punctuation\">[</span>attrVal<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>_directives<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Watcher</span><span class=\"token punctuation\">(</span> <span class=\"token comment\">// 将dom替换成属性的数据并发布订阅 在set的时候更新数据</span>\\n                node<span class=\"token punctuation\">,</span>\\n                _this<span class=\"token punctuation\">,</span>\\n                attrVal<span class=\"token punctuation\">,</span>\\n                <span class=\"token string\">\\'innerHTML\\'</span>\\n            <span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\\n        <span class=\"token punctuation\">}</span>\\n            \\n        <span class=\"token keyword\">var</span> reg <span class=\"token operator\">=</span> <span class=\"token regex\">/\\\\{\\\\{\\\\s*([^}]+\\\\S)\\\\s*\\\\}\\\\}/g</span><span class=\"token punctuation\">,</span> txt <span class=\"token operator\">=</span> node<span class=\"token punctuation\">.</span>textContent<span class=\"token punctuation\">;</span>   <span class=\"token comment\">// 正则匹配{{}} </span>\\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>reg<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span>txt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n            node<span class=\"token punctuation\">.</span>textContent <span class=\"token operator\">=</span> txt<span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span>reg<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>matched<span class=\"token punctuation\">,</span> placeholder<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\\n                    <span class=\"token comment\">// matched匹配的文本节点包括双花括号, placeholder 是双花括号中间的属性名</span>\\n                <span class=\"token keyword\">var</span> getName <span class=\"token operator\">=</span> _this<span class=\"token punctuation\">.</span>_watcherTpl<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 所有绑定watch的数据</span>\\n                getName <span class=\"token operator\">=</span> getName<span class=\"token punctuation\">[</span>placeholder<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 获取对应watch 数据的值</span>\\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>getName<span class=\"token punctuation\">.</span>_directives<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// 没有事件池 创建事件池</span>\\n                    getName<span class=\"token punctuation\">.</span>_directives <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\\n                <span class=\"token punctuation\">}</span>\\n                getName<span class=\"token punctuation\">.</span>_directives<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Watcher</span><span class=\"token punctuation\">(</span> <span class=\"token comment\">// 将dom替换成属性的数据并发布订阅 在set的时候更新数据</span>\\n                    node<span class=\"token punctuation\">,</span>\\n                    _this<span class=\"token punctuation\">,</span>\\n                    placeholder<span class=\"token punctuation\">,</span>\\n                    <span class=\"token string\">\\'innerHTML\\'</span>\\n                <span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\n                <span class=\"token keyword\">return</span> placeholder<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">\\'.\\'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>val<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\\n                    <span class=\"token keyword\">return</span> _this<span class=\"token punctuation\">.</span>_data<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 获取数据的值 触发get 返回当前值 </span>\\n                <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> _this<span class=\"token punctuation\">.</span>$el<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\n        <span class=\"token punctuation\">}</span>\\n    <span class=\"token punctuation\">}</span>\\n<span class=\"token punctuation\">}</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br><span class=\"line-number\">11</span><br><span class=\"line-number\">12</span><br><span class=\"line-number\">13</span><br><span class=\"line-number\">14</span><br><span class=\"line-number\">15</span><br><span class=\"line-number\">16</span><br><span class=\"line-number\">17</span><br><span class=\"line-number\">18</span><br><span class=\"line-number\">19</span><br><span class=\"line-number\">20</span><br><span class=\"line-number\">21</span><br><span class=\"line-number\">22</span><br><span class=\"line-number\">23</span><br><span class=\"line-number\">24</span><br><span class=\"line-number\">25</span><br><span class=\"line-number\">26</span><br><span class=\"line-number\">27</span><br><span class=\"line-number\">28</span><br><span class=\"line-number\">29</span><br><span class=\"line-number\">30</span><br><span class=\"line-number\">31</span><br><span class=\"line-number\">32</span><br><span class=\"line-number\">33</span><br><span class=\"line-number\">34</span><br><span class=\"line-number\">35</span><br><span class=\"line-number\">36</span><br><span class=\"line-number\">37</span><br><span class=\"line-number\">38</span><br><span class=\"line-number\">39</span><br><span class=\"line-number\">40</span><br><span class=\"line-number\">41</span><br><span class=\"line-number\">42</span><br><span class=\"line-number\">43</span><br><span class=\"line-number\">44</span><br><span class=\"line-number\">45</span><br><span class=\"line-number\">46</span><br><span class=\"line-number\">47</span><br><span class=\"line-number\">48</span><br><span class=\"line-number\">49</span><br><span class=\"line-number\">50</span><br><span class=\"line-number\">51</span><br><span class=\"line-number\">52</span><br><span class=\"line-number\">53</span><br><span class=\"line-number\">54</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<hr>\\n<h2 id=\"完整代码-demo地址\"><a class=\"header-anchor\" href=\"#完整代码-demo地址\" aria-hidden=\"true\">#</a> 完整代码&amp;demo地址</h2>\\n<p><a href=\"https://github.com/OBKoro1/web_accumulate/blob/d6b599ca22d8656d3f31f80bffa976fac36d2d75/example/myVue/index.html\" target=\"_blank\" rel=\"noopener noreferrer\">GitHub完整代码<OutboundLink/></a></p>\\n<p><strong>codepen:</strong><a href=\"https://codepen.io/OBKoro1/pen/qKKqQe?editors=0010\" target=\"_blank\" rel=\"noopener noreferrer\">仿Vue极简双向绑定<OutboundLink/></a></p>\\n<p><strong>Github:</strong><a href=\"http://obkoro1.com/web_accumulate/example/myVue/index.html\" target=\"_blank\" rel=\"noopener noreferrer\">仿Vue极简双向绑定<OutboundLink/></a></p>\\n<p>如果觉得还不错的话，就给个<a href=\"https://github.com/OBKoro1/simpleDemo\" target=\"_blank\" rel=\"noopener noreferrer\">Star<OutboundLink/></a>⭐️鼓励一下我吧~</p>\\n<hr>\\n<h2 id=\"小结\"><a class=\"header-anchor\" href=\"#小结\" aria-hidden=\"true\">#</a> 小结</h2>\\n<p>本文只是一个简单的实现双向绑定的方法，主要目的是帮助各位同学理解mvvm框架的双向绑定机制，也并没有很完善，这里还是有很多缺陷，比如：没有实现数据的深度对数据进行<code>get</code>、<code>set</code>等。希望看完本文，大家能有所收获。</p>\\n<p>以上2018.6.24</p>\\n<h3 id=\"参考资料：\"><a class=\"header-anchor\" href=\"#参考资料：\" aria-hidden=\"true\">#</a> 参考资料：</h3>\\n<p><a href=\"https://segmentfault.com/a/1190000006599500\" target=\"_blank\" rel=\"noopener noreferrer\">剖析Vue原理&amp;实现双向绑定MVVM<OutboundLink/></a></p>\\n<p><a href=\"https://juejin.im/post/5acc17cb51882555745a03f8\" target=\"_blank\" rel=\"noopener noreferrer\">面试题：你能写一个Vue的双向数据绑定吗？<OutboundLink/></a></p>\\n<p><a href=\"https://juejin.im/post/5abdd6f6f265da23793c4458#heading-8\" target=\"_blank\" rel=\"noopener noreferrer\">不好意思！耽误你的十分钟，让MVVM原理还给你<OutboundLink/></a>\\n\\x3c!-- 特殊字符串：用于修改/删除markdown的结尾提示语-OBKoro1 --\\x3e</p>\\n<h3 id=\"点个star支持我一下\"><a class=\"header-anchor\" href=\"#点个star支持我一下\" aria-hidden=\"true\">#</a> 点个<a href=\"https://github.com/OBKoro1/web_accumulate\" target=\"_blank\" rel=\"noopener noreferrer\">Star<OutboundLink/></a>支持我一下~</h3>\\n\\x3c!-- \\'特殊字符串：用于删除编译后的issue组件-OBKoro1 --\\x3e\\n'},{key:\"v-fb71e664f184d\",path:\"/accumulate/amateur/VuePress%E6%96%87%E6%A1%A3.html\",lastUpdated:1564720698e3,title:\"如何搭建本文档\",headers:[{level:2,title:\"如何搭建本文档\",slug:\"如何搭建本文档\"},{level:3,title:\"VuePress特性：\",slug:\"vuepress特性：\"},{level:3,title:\"效果：\",slug:\"效果：\"},{level:2,title:\"搭建：\",slug:\"搭建：\"},{level:3,title:\"全局安装VuePress\",slug:\"全局安装vuepress\"},{level:3,title:\"新建文件夹\",slug:\"新建文件夹\"},{level:3,title:\"项目初始化\",slug:\"项目初始化\"},{level:3,title:\"在project的根目录下新建docs文件夹：\",slug:\"在project的根目录下新建docs文件夹：\"},{level:3,title:\"在docs文件夹下创建.vuepress文件夹：\",slug:\"在docs文件夹下创建-vuepress文件夹：\"},{level:3,title:\"在.vuepress文件夹下面创建config.js:\",slug:\"在-vuepress文件夹下面创建config-js\"},{level:3,title:\"在.vuepress文件夹下面创建public文件夹:\",slug:\"在-vuepress文件夹下面创建public文件夹\"},{level:3,title:\"首页(像VuePress文档主页一样)\",slug:\"首页-像vuepress文档主页一样\"},{level:3,title:\"我们的项目结构已经搭好了：\",slug:\"我们的项目结构已经搭好了：\"},{level:3,title:\"在 package.json 里添加两个启动命令:\",slug:\"在-package-json-里添加两个启动命令\"},{level:3,title:\"启动你的VuePress：\",slug:\"启动你的vuepress：\"},{level:3,title:\"构建：\",slug:\"构建：\"},{level:2,title:\"基本配置：\",slug:\"基本配置：\"},{level:3,title:\"导航栏配置：\",slug:\"导航栏配置：\"},{level:3,title:\"侧边栏配置：\",slug:\"侧边栏配置：\"},{level:2,title:\"其他：\",slug:\"其他：\"},{level:3,title:\"代码块编译错误：\",slug:\"代码块编译错误：\"},{level:3,title:\"自定义容器了解一下：\",slug:\"自定义容器了解一下：\"},{level:3,title:\"支持Emoji\",slug:\"支持emoji\"},{level:2,title:\"一个命令行发布到github上：\",slug:\"一个命令行发布到github上：\"},{level:3,title:\"在 docs/.vuepress/config.js 中设置正确的 base:\",slug:\"在-docs-vuepress-config-js-中设置正确的-base\"},{level:3,title:\"创建脚步文件:\",slug:\"创建脚步文件\"},{level:3,title:\"设置package.json：\",slug:\"设置package-json：\"},{level:3,title:\"部署：\",slug:\"部署：\"},{level:2,title:\"更多：\",slug:\"更多：\"},{level:2,title:\"小结\",slug:\"小结\"},{level:3,title:\"点个Star支持我一下~\",slug:\"点个star支持我一下\"}],excerpt:'<h2 id=\"如何搭建本文档\"><a class=\"header-anchor\" href=\"#如何搭建本文档\" aria-hidden=\"true\">#</a> 如何搭建本文档</h2>\\n<p>VuePress是尤大为了支持 Vue 及其子项目的文档需求而写的一个项目，VuePress界面十分简洁，并且<strong>非常容易上手，一个小时就可以将项目架构搭好</strong>。现在已经有很多这种类型的文档，如果你有写技术文档/技术博客的需求，VuePress绝对可以成为你的备选项之一。</p>\\n<h3 id=\"vuepress特性：\"><a class=\"header-anchor\" href=\"#vuepress特性：\" aria-hidden=\"true\">#</a> VuePress特性：</h3>\\n<ul>\\n<li>为技术文档而优化的 内置 Markdown 拓展</li>\\n<li>在 Markdown 文件中使用 Vue 组件的能力</li>\\n<li>Vue 驱动的自定义主题系统</li>\\n<li>自动生成 Service Worker</li>\\n<li>Google Analytics 集成</li>\\n<li>基于 Git 的 “最后更新时间”</li>\\n<li>多语言支持</li>\\n<li>默认主题包含：</li>\\n</ul>\\n<p>建议先看一下<a href=\"https://vuepress.vuejs.org/zh/guide/\" target=\"_blank\" rel=\"noopener noreferrer\">官方文档<OutboundLink/></a></p>\\n<h3 id=\"效果：\"><a class=\"header-anchor\" href=\"#效果：\" aria-hidden=\"true\">#</a> 效果：</h3>\\n<p>可能你会搭建出一个类似这样的<a href=\"http://obkoro1.com/web_accumulate/\" target=\"_blank\" rel=\"noopener noreferrer\">文档<OutboundLink/></a>：</p>\\n<p><img src=\"https://github.com/OBKoro1/articleImg_src/blob/master/juejin/165b88bde5ddd420?raw=true\" alt=\"\"></p>\\n<p><img src=\"https://github.com/OBKoro1/articleImg_src/blob/master/juejin/165b88b39960911b?raw=true\" alt=\"\"></p>\\n<hr>\\n<h2 id=\"搭建：\"><a class=\"header-anchor\" href=\"#搭建：\" aria-hidden=\"true\">#</a> 搭建：</h2>\\n<h3 id=\"全局安装vuepress\"><a class=\"header-anchor\" href=\"#全局安装vuepress\" aria-hidden=\"true\">#</a> 全局安装VuePress</h3>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code>    yarn global add vuepress # 或者：npm install <span class=\"token operator\">-</span>g vuepress\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<h3 id=\"新建文件夹\"><a class=\"header-anchor\" href=\"#新建文件夹\" aria-hidden=\"true\">#</a> 新建文件夹</h3>\\n<p>可以手动右键新建，也可以使用下面的命令新建文件夹：</p>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code>    mkdir project\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<h3 id=\"项目初始化\"><a class=\"header-anchor\" href=\"#项目初始化\" aria-hidden=\"true\">#</a> 项目初始化</h3>\\n<p>进入到<code>project</code>文件夹中，使用命令行初始化项目:</p>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code>    yarn init <span class=\"token operator\">-</span>y # 或者 npm init <span class=\"token operator\">-</span>y\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<p>将会创建一个<code>package.json</code>文件，长这样子：</p>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code>    <span class=\"token punctuation\">{</span>\\n      <span class=\"token string\">\"name\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"project\"</span><span class=\"token punctuation\">,</span>\\n      <span class=\"token string\">\"version\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"1.0.0\"</span><span class=\"token punctuation\">,</span>\\n      <span class=\"token string\">\"description\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span>\\n      <span class=\"token string\">\"main\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"index.js\"</span><span class=\"token punctuation\">,</span>\\n      <span class=\"token string\">\"scripts\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\\n        <span class=\"token string\">\"test\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"echo \\\\\"Error: no test specified\\\\\" &amp;&amp; exit 1\"</span>\\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\\n      <span class=\"token string\">\"keywords\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\\n      <span class=\"token string\">\"author\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span>\\n      <span class=\"token string\">\"license\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"ISC\"</span>\\n    <span class=\"token punctuation\">}</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br><span class=\"line-number\">11</span><br><span class=\"line-number\">12</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<h3 id=\"在project的根目录下新建docs文件夹：\"><a class=\"header-anchor\" href=\"#在project的根目录下新建docs文件夹：\" aria-hidden=\"true\">#</a> 在project的根目录下新建docs文件夹：</h3>\\n<p>这个文档将作为项目文档的根目录来使用：</p>\\n\\x3c!--beforebegin--\\x3e<div class=\"language- line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-text\"><code>    mkdir docs\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<h3 id=\"在docs文件夹下创建-vuepress文件夹：\"><a class=\"header-anchor\" href=\"#在docs文件夹下创建-vuepress文件夹：\" aria-hidden=\"true\">#</a> 在docs文件夹下创建<code>.vuepress</code>文件夹：</h3>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code>    mkdir <span class=\"token punctuation\">.</span>vuepress\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<p>所有 VuePress 相关的文件都将会被放在这里</p>\\n<h3 id=\"在-vuepress文件夹下面创建config-js\"><a class=\"header-anchor\" href=\"#在-vuepress文件夹下面创建config-js\" aria-hidden=\"true\">#</a> 在<code>.vuepress</code>文件夹下面创建<code>config.js</code>:</h3>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code>    touch config<span class=\"token punctuation\">.</span>js\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<p>config.js是VuePress必要的配置文件，它导出一个javascript对象。</p>\\n<p>你可以先加入如下配置：</p>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code>    module<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\\n      title<span class=\"token punctuation\">:</span> <span class=\"token string\">\\'Hello VuePress\\'</span><span class=\"token punctuation\">,</span>\\n      description<span class=\"token punctuation\">:</span> <span class=\"token string\">\\'Just playing around\\'</span>\\n    <span class=\"token punctuation\">}</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<h3 id=\"在-vuepress文件夹下面创建public文件夹\"><a class=\"header-anchor\" href=\"#在-vuepress文件夹下面创建public文件夹\" aria-hidden=\"true\">#</a> 在<code>.vuepress</code>文件夹下面创建public文件夹:</h3>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code>    mkdir <span class=\"token keyword\">public</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<p>这个文件夹是用来放置静态资源的，打包出来之后会放在.vuepress/dist/的根目录。</p>\\n<h3 id=\"首页-像vuepress文档主页一样\"><a class=\"header-anchor\" href=\"#首页-像vuepress文档主页一样\" aria-hidden=\"true\">#</a> 首页(像VuePress文档主页一样)</h3>\\n<p>在docs文件夹下面创建一个<code>README.md</code>：</p>\\n<p>默认的主题提供了一个首页，像下面一样设置<code>home:true</code>即可，可以把下面的设置放入<code>README.md</code>中，待会儿你将会看到跟<code>VuePress</code>一样的主页。</p>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-html line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-html\"><code>    ---\\n    home: true\\n    heroImage: /logo.jpg\\n    actionText: 快速上手 →\\n    actionLink: /zh/guide/\\n    features:\\n    - title: 简洁至上\\n      details: 以 Markdown 为中心的项目结构，以最少的配置帮助你专注于写作。\\n    - title: Vue驱动\\n      details: 享受 Vue + webpack 的开发体验，在 Markdown 中使用 Vue 组件，同时可以使用 Vue 来开发自定义主题。\\n    - title: 高性能\\n      details: VuePress 为每个页面预渲染生成静态的 HTML，同时在页面被加载的时候，将作为 SPA 运行。\\n    footer: MIT Licensed | Copyright © 2018-present Evan You\\n    ---\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br><span class=\"line-number\">11</span><br><span class=\"line-number\">12</span><br><span class=\"line-number\">13</span><br><span class=\"line-number\">14</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<p>ps：你需要放一张图片到public文件夹中。</p>\\n<h3 id=\"我们的项目结构已经搭好了：\"><a class=\"header-anchor\" href=\"#我们的项目结构已经搭好了：\" aria-hidden=\"true\">#</a> 我们的项目结构已经搭好了：</h3>\\n\\x3c!--beforebegin--\\x3e<div class=\"language- line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-text\"><code>    project\\n    ├─── docs\\n    │   ├── README.md\\n    │   └── .vuepress\\n    │       ├── public\\n    │       └── config.js\\n    └── package.json\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<h3 id=\"在-package-json-里添加两个启动命令\"><a class=\"header-anchor\" href=\"#在-package-json-里添加两个启动命令\" aria-hidden=\"true\">#</a> 在 <code>package.json</code> 里添加两个启动命令:</h3>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-json line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-json\"><code>    <span class=\"token punctuation\">{</span>\\n      <span class=\"token property\">\"scripts\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\\n        <span class=\"token property\">\"docs:dev\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"vuepress dev docs\"</span><span class=\"token punctuation\">,</span>\\n        <span class=\"token property\">\"docs:build\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"vuepress build docs\"</span>\\n      <span class=\"token punctuation\">}</span>\\n    <span class=\"token punctuation\">}</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<h3 id=\"启动你的vuepress：\"><a class=\"header-anchor\" href=\"#启动你的vuepress：\" aria-hidden=\"true\">#</a> 启动你的VuePress：</h3>\\n<p>默认是<code>localhost:8080</code>端口。</p>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code>    yarn docs<span class=\"token punctuation\">:</span>dev # 或者：npm run docs<span class=\"token punctuation\">:</span>dev\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<h3 id=\"构建：\"><a class=\"header-anchor\" href=\"#构建：\" aria-hidden=\"true\">#</a> 构建：</h3>\\n<p>build生成静态的HTML文件,默认会在 <code>.vuepress/dist</code> 文件夹下</p>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code>    yarn docs<span class=\"token punctuation\">:</span>build # 或者：npm run docs<span class=\"token punctuation\">:</span>build\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<hr>\\n<h2 id=\"基本配置：\"><a class=\"header-anchor\" href=\"#基本配置：\" aria-hidden=\"true\">#</a> 基本配置：</h2>\\n<p>最标准的当然是<a href=\"https://vuepress.vuejs.org/zh/default-theme-config/\" target=\"_blank\" rel=\"noopener noreferrer\">官方文档<OutboundLink/></a>,可以自己的需求来配置<code>config.js</code>。</p>\\n<p>可以参考一下我的<code>config.js</code>的配置：</p>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code>    module<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\\n      title<span class=\"token punctuation\">:</span> <span class=\"token string\">\\'网站标题\\'</span><span class=\"token punctuation\">,</span>\\n      description<span class=\"token punctuation\">:</span> <span class=\"token string\">\\'网站描述\\'</span><span class=\"token punctuation\">,</span>\\n      <span class=\"token comment\">// 注入到当前页面的 HTML &lt;head> 中的标签</span>\\n      head<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>\\n        <span class=\"token punctuation\">[</span><span class=\"token string\">\\'link\\'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> rel<span class=\"token punctuation\">:</span> <span class=\"token string\">\\'icon\\'</span><span class=\"token punctuation\">,</span> href<span class=\"token punctuation\">:</span> <span class=\"token string\">\\'/favicon.ico\\'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 增加一个自定义的 favicon(网页标签的图标)</span>\\n      <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\\n      base<span class=\"token punctuation\">:</span> <span class=\"token string\">\\'/web_accumulate/\\'</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 这是部署到github相关的配置 下面会讲</span>\\n      markdown<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\\n        lineNumbers<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span> <span class=\"token comment\">// 代码块显示行号</span>\\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\\n      themeConfig<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\\n        sidebarDepth<span class=\"token punctuation\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// e\\'b将同时提取markdown中h2 和 h3 标题，显示在侧边栏上。</span>\\n        lastUpdated<span class=\"token punctuation\">:</span> <span class=\"token string\">\\'Last Updated\\'</span> <span class=\"token comment\">// 文档更新时间：每个文件git最后提交的时间</span>\\n      <span class=\"token punctuation\">}</span>\\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br><span class=\"line-number\">11</span><br><span class=\"line-number\">12</span><br><span class=\"line-number\">13</span><br><span class=\"line-number\">14</span><br><span class=\"line-number\">15</span><br><span class=\"line-number\">16</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<h3 id=\"导航栏配置：\"><a class=\"header-anchor\" href=\"#导航栏配置：\" aria-hidden=\"true\">#</a> 导航栏配置：</h3>\\n<p><img src=\"https://github.com/OBKoro1/articleImg_src/blob/master/juejin/165bd71b0c38b87f?raw=true\" alt=\"\"></p>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code>    module<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\\n      themeConfig<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\\n        nav<span class=\"token punctuation\">:</span><span class=\"token punctuation\">[</span>\\n          <span class=\"token punctuation\">{</span> text<span class=\"token punctuation\">:</span> <span class=\"token string\">\\'前端算法\\'</span><span class=\"token punctuation\">,</span> link<span class=\"token punctuation\">:</span> <span class=\"token string\">\\'/algorithm/\\'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 内部链接 以docs为根目录</span>\\n          <span class=\"token punctuation\">{</span> text<span class=\"token punctuation\">:</span> <span class=\"token string\">\\'博客\\'</span><span class=\"token punctuation\">,</span> link<span class=\"token punctuation\">:</span> <span class=\"token string\">\\'http://obkoro1.com/\\'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 外部链接</span>\\n          <span class=\"token comment\">// 下拉列表</span>\\n          <span class=\"token punctuation\">{</span>\\n            text<span class=\"token punctuation\">:</span> <span class=\"token string\">\\'GitHub\\'</span><span class=\"token punctuation\">,</span>\\n            items<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>\\n              <span class=\"token punctuation\">{</span> text<span class=\"token punctuation\">:</span> <span class=\"token string\">\\'GitHub地址\\'</span><span class=\"token punctuation\">,</span> link<span class=\"token punctuation\">:</span> <span class=\"token string\">\\'https://github.com/OBKoro1\\'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\\n              <span class=\"token punctuation\">{</span>\\n                text<span class=\"token punctuation\">:</span> <span class=\"token string\">\\'算法仓库\\'</span><span class=\"token punctuation\">,</span>\\n                link<span class=\"token punctuation\">:</span> <span class=\"token string\">\\'https://github.com/OBKoro1/Brush_algorithm\\'</span>\\n              <span class=\"token punctuation\">}</span>\\n            <span class=\"token punctuation\">]</span>\\n          <span class=\"token punctuation\">}</span>        \\n        <span class=\"token punctuation\">]</span>\\n      <span class=\"token punctuation\">}</span>\\n    <span class=\"token punctuation\">}</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br><span class=\"line-number\">11</span><br><span class=\"line-number\">12</span><br><span class=\"line-number\">13</span><br><span class=\"line-number\">14</span><br><span class=\"line-number\">15</span><br><span class=\"line-number\">16</span><br><span class=\"line-number\">17</span><br><span class=\"line-number\">18</span><br><span class=\"line-number\">19</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<h3 id=\"侧边栏配置：\"><a class=\"header-anchor\" href=\"#侧边栏配置：\" aria-hidden=\"true\">#</a> 侧边栏配置：</h3>\\n<p>侧边栏的配置相对麻烦点，我里面都做了详细的注释，仔细看，自己鼓捣鼓捣 就知道怎么搞了。</p>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code>    module<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\\n      themeConfig<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\\n          sidebar<span class=\"token punctuation\">:</span><span class=\"token punctuation\">{</span>\\n            <span class=\"token comment\">// docs文件夹下面的accumulate文件夹 文档中md文件 书写的位置(命名随意)</span>\\n            <span class=\"token string\">\\'/accumulate/\\'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>\\n                <span class=\"token string\">\\'/accumulate/\\'</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// accumulate文件夹的README.md 不是下拉框形式</span>\\n                <span class=\"token punctuation\">{</span>\\n                  title<span class=\"token punctuation\">:</span> <span class=\"token string\">\\'侧边栏下拉框的标题1\\'</span><span class=\"token punctuation\">,</span>\\n                  children<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>\\n                    <span class=\"token string\">\\'/accumulate/JS/test\\'</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 以docs为根目录来查找文件 </span>\\n                    <span class=\"token comment\">// 上面地址查找的是：docs>accumulate>JS>test.md 文件</span>\\n                    <span class=\"token comment\">// 自动加.md 每个子选项的标题 是该md文件中的第一个h1/h2/h3标题</span>\\n                  <span class=\"token punctuation\">]</span>\\n                <span class=\"token punctuation\">}</span>\\n              <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\\n              <span class=\"token comment\">// docs文件夹下面的algorithm文件夹 这是第二组侧边栏 跟第一组侧边栏没关系</span>\\n              <span class=\"token string\">\\'/algorithm/\\'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>\\n                <span class=\"token string\">\\'/algorithm/\\'</span><span class=\"token punctuation\">,</span> \\n                <span class=\"token punctuation\">{</span>\\n                  title<span class=\"token punctuation\">:</span> <span class=\"token string\">\\'第二组侧边栏下拉框的标题1\\'</span><span class=\"token punctuation\">,</span>\\n                  children<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>\\n                    <span class=\"token string\">\\'/algorithm/simple/test\\'</span> \\n                  <span class=\"token punctuation\">]</span>\\n                <span class=\"token punctuation\">}</span>\\n              <span class=\"token punctuation\">]</span>\\n          <span class=\"token punctuation\">}</span>\\n      <span class=\"token punctuation\">}</span>\\n    <span class=\"token punctuation\">}</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br><span class=\"line-number\">11</span><br><span class=\"line-number\">12</span><br><span class=\"line-number\">13</span><br><span class=\"line-number\">14</span><br><span class=\"line-number\">15</span><br><span class=\"line-number\">16</span><br><span class=\"line-number\">17</span><br><span class=\"line-number\">18</span><br><span class=\"line-number\">19</span><br><span class=\"line-number\">20</span><br><span class=\"line-number\">21</span><br><span class=\"line-number\">22</span><br><span class=\"line-number\">23</span><br><span class=\"line-number\">24</span><br><span class=\"line-number\">25</span><br><span class=\"line-number\">26</span><br><span class=\"line-number\">27</span><br><span class=\"line-number\">28</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<hr>\\n<h2 id=\"其他：\"><a class=\"header-anchor\" href=\"#其他：\" aria-hidden=\"true\">#</a> 其他：</h2>\\n<h3 id=\"代码块编译错误：\"><a class=\"header-anchor\" href=\"#代码块编译错误：\" aria-hidden=\"true\">#</a> 代码块编译错误：</h3>\\n<p>像下面这段代码会导致编译错误，VuePress会去找里面的变量，把它编译成text：</p>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code>    <span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span> 啦 <span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<p>所以我们的代码块要以这种形式书写：</p>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code><span class=\"token comment\">//```js</span>\\n<span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span> 啦 <span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span> <span class=\"token comment\">// 注释需要打开 这样vuepress会把这里面包裹的当成代码块而不是js</span>\\n<span class=\"token comment\">//```</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<p>并且这样也会让我们的代码高亮显示(下图第一个没有高亮，第二个有高亮)，阅读体验更好：</p>\\n<p><img src=\"https://github.com/OBKoro1/articleImg_src/blob/master/juejin/165bd98ebe2f65b3?raw=true\" alt=\"\"></p>\\n<h3 id=\"自定义容器了解一下：\"><a class=\"header-anchor\" href=\"#自定义容器了解一下：\" aria-hidden=\"true\">#</a> 自定义容器了解一下：</h3>\\n<p><img src=\"https://github.com/OBKoro1/articleImg_src/blob/master/juejin/165bda20ddcbd209?raw=true\" alt=\"\"></p>\\n<p><strong>更改标题：</strong></p>\\n\\x3c!--beforebegin--\\x3e<div class=\"language- line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-text\"><code>    ::: tip 替换tip的标题\\n    这里是内容。\\n    :::\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<p>其实<a href=\"https://vuepress.vuejs.org/zh/guide/markdown.html#%E8%87%AA%E5%AE%9A%E4%B9%89%E5%AE%B9%E5%99%A8\" target=\"_blank\" rel=\"noopener noreferrer\">文档<OutboundLink/></a>里有，我这里只是提一下。</p>\\n<h3 id=\"支持emoji\"><a class=\"header-anchor\" href=\"#支持emoji\" aria-hidden=\"true\">#</a> 支持Emoji</h3>\\n<p><img src=\"https://github.com/OBKoro1/articleImg_src/blob/master/juejin/165bdaa634c0839d?raw=true\" alt=\"\"></p>\\n<p>文档中只提了支持Emoji,我在GitHub上找到了Emoji的<a href=\"https://gist.github.com/rxaviers/7360908\" target=\"_blank\" rel=\"noopener noreferrer\">列表<OutboundLink/></a>，分享一下。</p>\\n<h2 id=\"一个命令行发布到github上：\"><a class=\"header-anchor\" href=\"#一个命令行发布到github上：\" aria-hidden=\"true\">#</a> 一个命令行发布到github上：</h2>\\n<h3 id=\"在-docs-vuepress-config-js-中设置正确的-base\"><a class=\"header-anchor\" href=\"#在-docs-vuepress-config-js-中设置正确的-base\" aria-hidden=\"true\">#</a> 在 <code>docs/.vuepress/config.js</code> 中设置正确的 base:</h3>\\n<p>如果你打算发布到 <code>https://&lt;USERNAME&gt;.github.io/</code>，则可以省略这一步，因为 base 默认即是 <code>&quot;/&quot;</code>。</p>\\n<p>如果你打算发布到 <code>https://&lt;USERNAME&gt;.github.io/&lt;REPO&gt;/</code>（也就是说你的仓库在 <code>https://github.com/&lt;USERNAME&gt;/&lt;REPO&gt;</code>），则将 base 设置为 <code>&quot;/&lt;REPO&gt;/&quot;</code>。</p>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code>module<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\\n    base<span class=\"token punctuation\">:</span> <span class=\"token string\">\\'/test/\\'</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 比如你的仓库是test</span>\\n<span class=\"token punctuation\">}</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<h3 id=\"创建脚步文件\"><a class=\"header-anchor\" href=\"#创建脚步文件\" aria-hidden=\"true\">#</a> 创建脚步文件:</h3>\\n<p>在<code>project</code>的根目录下，创建一个<code>deploy.sh</code>文件：</p>\\n\\x3c!--beforebegin--\\x3e<div class=\"language- line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-text\"><code>#!/usr/bin/env sh\\n\\n# 确保脚本抛出遇到的错误\\nset -e\\n\\n# 生成静态文件\\nnpm run docs:build\\n\\n# 进入生成的文件夹\\ncd docs/.vuepress/dist\\n\\n# 如果是发布到自定义域名\\n# echo &#39;www.example.com&#39; &gt; CNAME\\n\\ngit init\\ngit add -A\\ngit commit -m &#39;deploy&#39;\\n\\n# 如果发布到 https://&lt;USERNAME&gt;.github.io  USERNAME=你的用户名 \\n# git push -f git@github.com:&lt;USERNAME&gt;/&lt;USERNAME&gt;.github.io.git master\\n\\n# 如果发布到 https://&lt;USERNAME&gt;.github.io/&lt;REPO&gt;  REPO=github上的项目\\n# git push -f git@github.com:&lt;USERNAME&gt;/&lt;REPO&gt;.git master:gh-pages\\n\\ncd -\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br><span class=\"line-number\">11</span><br><span class=\"line-number\">12</span><br><span class=\"line-number\">13</span><br><span class=\"line-number\">14</span><br><span class=\"line-number\">15</span><br><span class=\"line-number\">16</span><br><span class=\"line-number\">17</span><br><span class=\"line-number\">18</span><br><span class=\"line-number\">19</span><br><span class=\"line-number\">20</span><br><span class=\"line-number\">21</span><br><span class=\"line-number\">22</span><br><span class=\"line-number\">23</span><br><span class=\"line-number\">24</span><br><span class=\"line-number\">25</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<h3 id=\"设置package-json：\"><a class=\"header-anchor\" href=\"#设置package-json：\" aria-hidden=\"true\">#</a> 设置package.json：</h3>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-json line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-json\"><code><span class=\"token punctuation\">{</span>\\n    <span class=\"token property\">\"scripts\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\\n    <span class=\"token property\">\"d\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"bash deploy.sh\"</span>\\n    <span class=\"token punctuation\">}</span>\\n<span class=\"token punctuation\">}</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<h3 id=\"部署：\"><a class=\"header-anchor\" href=\"#部署：\" aria-hidden=\"true\">#</a> 部署：</h3>\\n<p>然后你每次可以运行下面的命令行，来把最新更改推到<code>github</code>上：</p>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code>npm run d\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<p>如果你对运行项目和构建项目的命令行觉得很烦，你也可以像我这么做：</p>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-json line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-json\"><code><span class=\"token property\">\"scripts\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\\n    <span class=\"token property\">\"dev\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"vuepress dev docs\"</span><span class=\"token punctuation\">,</span> // 本地运行项目 npm run dev\\n    <span class=\"token property\">\"build\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"vuepress build docs\"</span><span class=\"token punctuation\">,</span> // 构建项目 nom run build\\n    <span class=\"token property\">\"d\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"bash deploy.sh\"</span> // 部署项目 npm run d\\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<hr>\\n<h2 id=\"更多：\"><a class=\"header-anchor\" href=\"#更多：\" aria-hidden=\"true\">#</a> 更多：</h2>\\n<p>实际上VuePress的配置、用法还有很多，像还可以配置PWA，以及在markdown里面使用Vue组件等，这些功能我也还在摸索，所以大家一定要去看<a href=\"https://vuepress.vuejs.org/zh/\" target=\"_blank\" rel=\"noopener noreferrer\">文档<OutboundLink/></a>!</p>\\n<h2 id=\"小结\"><a class=\"header-anchor\" href=\"#小结\" aria-hidden=\"true\">#</a> 小结</h2>\\n<p>上面已经写得尽可能详细了，我遇到的坑都写上去了。搭建起来确实很简单，心动不如行动，随手花一两个小时搭建一下又不吃亏，何乐而不为？\\n\\x3c!-- 特殊字符串：用于修改/删除markdown的结尾提示语-OBKoro1 --\\x3e</p>\\n<h3 id=\"点个star支持我一下\"><a class=\"header-anchor\" href=\"#点个star支持我一下\" aria-hidden=\"true\">#</a> 点个<a href=\"https://github.com/OBKoro1/web_accumulate\" target=\"_blank\" rel=\"noopener noreferrer\">Star<OutboundLink/></a>支持我一下~</h3>\\n\\x3c!-- \\'特殊字符串：用于删除编译后的issue组件-OBKoro1 --\\x3e\\n'},{key:\"v-b7b27c5290d8e\",path:\"/accumulate/amateur/%E6%8E%A8%E7%AE%B1%E5%AD%90.html\",lastUpdated:1564720698e3,title:\"推箱子\",headers:[{level:2,title:\"推箱子\",slug:\"推箱子\"},{level:3,title:\"demo：推箱子小游戏\",slug:\"demo：推箱子小游戏\"},{level:2,title:\"步骤解析：\",slug:\"步骤解析：\"},{level:3,title:\"1. 渲染地图\",slug:\"_1-渲染地图\"},{level:3,title:\"2. 捕获键盘事件,判断是否可以移动\",slug:\"_2-捕获键盘事件-判断是否可以移动\"},{level:3,title:\"3.胜利判断：\",slug:\"_3-胜利判断：\"},{level:3,title:\"代码地址](https://github.com/OBKoro1/web_accumulate/blob/d6b599ca22d8656d3f31f80bffa976fac36d2d75/example/pushKoro/index.html)、[demo地址\",slug:\"代码地址、demo地址\"},{level:3,title:\"点个Star支持我一下~\",slug:\"点个star支持我一下\"}],excerpt:'<h2 id=\"推箱子\"><a class=\"header-anchor\" href=\"#推箱子\" aria-hidden=\"true\">#</a> 推箱子</h2>\\n<p><img src=\"https://github.com/OBKoro1/articleImg_src/blob/master/juejin/1?raw=true\" alt=\"demo图片\"></p>\\n<h3 id=\"demo：推箱子小游戏\"><a class=\"header-anchor\" href=\"#demo：推箱子小游戏\" aria-hidden=\"true\">#</a> demo：<a href=\"http://obkoro1.com/web_accumulate/example/pushKoro/index.html\" target=\"_blank\" rel=\"noopener noreferrer\">推箱子小游戏<OutboundLink/></a></h3>\\n<h2 id=\"步骤解析：\"><a class=\"header-anchor\" href=\"#步骤解析：\" aria-hidden=\"true\">#</a> 步骤解析：</h2>\\n<p><strong>本文代码已经放在了<a href=\"https://github.com/OBKoro1/web_accumulate/blob/d6b599ca22d8656d3f31f80bffa976fac36d2d75/example/pushKoro/index.html\" target=\"_blank\" rel=\"noopener noreferrer\">github<OutboundLink/></a>上面了,里面也进行了很详细的代码注释，可以copy下来，在本地运行一下看看</strong>。</p>\\n<h3 id=\"_1-渲染地图\"><a class=\"header-anchor\" href=\"#_1-渲染地图\" aria-hidden=\"true\">#</a> 1. 渲染地图</h3>\\n<ol>\\n<li>\\n<p>html结构：\\n<img src=\"https://github.com/OBKoro1/articleImg_src/blob/master/juejin/160d1149856a3714?raw=true\" alt=\"\"></p>\\n<pre><code> html结构十分简单，只要弄一堆div，来放置地图的class就可以了，我这里初始化了12*9个div，地图里最多九行高度。   \\n 这些div都是同样大小，地图渲染出来区别的只是颜色的不同。\\n</code></pre>\\n</li>\\n<li>\\n<p>地图函数：</p>\\n</li>\\n</ol>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code><span class=\"token keyword\">var</span> box<span class=\"token operator\">=</span><span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token string\">\\'.box div\\'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//地图使用的div集合</span>\\n<span class=\"token keyword\">function</span> <span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span> <span class=\"token comment\">//创建地图函数</span>\\nbox<span class=\"token punctuation\">.</span><span class=\"token function\">each</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span> <span class=\"token comment\">//index的数量是固定的，是box div下面div的数量</span>\\n        <span class=\"token comment\">// 每次创建地图初始化div</span>\\n    box<span class=\"token punctuation\">.</span><span class=\"token function\">eq</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">removeClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\nbox<span class=\"token punctuation\">.</span><span class=\"token function\">each</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">,</span>element<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span> <span class=\"token comment\">//循环整个div的数量 二维数组里数量不够的 默认为空白</span>\\n<span class=\"token comment\">//level为关卡数 根据关卡渲染地图 builder为二维数组，为地图关卡</span>\\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>builder<span class=\"token punctuation\">[</span>level<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span> <span class=\"token comment\">//过滤0</span>\\n        box<span class=\"token punctuation\">.</span><span class=\"token function\">eq</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">addClass</span><span class=\"token punctuation\">(</span><span class=\"token string\">\\'type\\'</span><span class=\"token operator\">+</span>builder<span class=\"token punctuation\">[</span>level<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\n    <span class=\"token punctuation\">}</span>\\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\nbox<span class=\"token punctuation\">.</span><span class=\"token function\">eq</span><span class=\"token punctuation\">(</span>origin<span class=\"token punctuation\">[</span>level<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">addClass</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"pusher\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//推箱人 皮卡丘位置</span>\\n<span class=\"token punctuation\">}</span>\\n\\n<span class=\"token comment\">//第一关的地图长这样（下面只是栗子，不是代码），0代表不可抵达区域，1代表目标（要被推到的地方），</span>\\n<span class=\"token comment\">//2代表普通路径（可以走的），3代表墙，4代表箱子</span>\\n<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\\n<span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\\n<span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\\n<span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\\n<span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\\n<span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\\n<span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\\n<span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br><span class=\"line-number\">11</span><br><span class=\"line-number\">12</span><br><span class=\"line-number\">13</span><br><span class=\"line-number\">14</span><br><span class=\"line-number\">15</span><br><span class=\"line-number\">16</span><br><span class=\"line-number\">17</span><br><span class=\"line-number\">18</span><br><span class=\"line-number\">19</span><br><span class=\"line-number\">20</span><br><span class=\"line-number\">21</span><br><span class=\"line-number\">22</span><br><span class=\"line-number\">23</span><br><span class=\"line-number\">24</span><br><span class=\"line-number\">25</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<h3 id=\"_2-捕获键盘事件-判断是否可以移动\"><a class=\"header-anchor\" href=\"#_2-捕获键盘事件-判断是否可以移动\" aria-hidden=\"true\">#</a> 2. 捕获键盘事件,判断是否可以移动</h3>\\n<p>使用<a href=\"http://www.w3school.com.cn/jquery/event_keydown.asp\" target=\"_blank\" rel=\"noopener noreferrer\">$(document).keydown()<OutboundLink/></a>jqery事件，捕获键盘事件。</p>\\n<ol>\\n<li>捕获键盘事件，上下左右以及wsad。</li>\\n</ol>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code><span class=\"token function\">$</span><span class=\"token punctuation\">(</span>document<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">keydown</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n    <span class=\"token keyword\">var</span> key<span class=\"token operator\">=</span>e<span class=\"token punctuation\">.</span>which<span class=\"token punctuation\">;</span>\\n    <span class=\"token keyword\">switch</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\\n        <span class=\"token comment\">//col 的值为12，上下移动要12个div为一个周期</span>\\n        <span class=\"token comment\">//方向键上或者w</span>\\n        <span class=\"token keyword\">case</span> <span class=\"token number\">87</span><span class=\"token punctuation\">:</span>\\n        <span class=\"token keyword\">case</span> <span class=\"token number\">38</span><span class=\"token punctuation\">:</span>\\n            <span class=\"token function\">move</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span>col<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//判断移动函数</span>\\n        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\\n        <span class=\"token comment\">//方向键下或者s</span>\\n        <span class=\"token keyword\">case</span> <span class=\"token number\">83</span><span class=\"token punctuation\">:</span>\\n        <span class=\"token keyword\">case</span> <span class=\"token number\">40</span><span class=\"token punctuation\">:</span>\\n            <span class=\"token function\">move</span><span class=\"token punctuation\">(</span>col<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\n        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\\n        <span class=\"token comment\">//方向键左或者a</span>\\n        <span class=\"token keyword\">case</span> <span class=\"token number\">65</span><span class=\"token punctuation\">:</span>\\n        <span class=\"token keyword\">case</span> <span class=\"token number\">37</span><span class=\"token punctuation\">:</span>\\n            <span class=\"token function\">move</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\n        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\\n        <span class=\"token comment\">//方向键右或者d</span>\\n        <span class=\"token keyword\">case</span> <span class=\"token number\">68</span><span class=\"token punctuation\">:</span>\\n        <span class=\"token keyword\">case</span> <span class=\"token number\">39</span><span class=\"token punctuation\">:</span>\\n            <span class=\"token function\">move</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\n        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\\n    <span class=\"token punctuation\">}</span>\\n    <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span>win<span class=\"token punctuation\">,</span><span class=\"token number\">500</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//按键之后调判断是否过关</span>\\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br><span class=\"line-number\">11</span><br><span class=\"line-number\">12</span><br><span class=\"line-number\">13</span><br><span class=\"line-number\">14</span><br><span class=\"line-number\">15</span><br><span class=\"line-number\">16</span><br><span class=\"line-number\">17</span><br><span class=\"line-number\">18</span><br><span class=\"line-number\">19</span><br><span class=\"line-number\">20</span><br><span class=\"line-number\">21</span><br><span class=\"line-number\">22</span><br><span class=\"line-number\">23</span><br><span class=\"line-number\">24</span><br><span class=\"line-number\">25</span><br><span class=\"line-number\">26</span><br><span class=\"line-number\">27</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<ol start=\"2\">\\n<li>判断是否可以移动。</li>\\n</ol>\\n<p>分为两个判断条件：一个是推箱子，一个是不推箱子 自然移动，否则不移动皮卡丘。</p>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">move</span><span class=\"token punctuation\">(</span>step<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span> <span class=\"token comment\">//是否移动判断</span>\\n        <span class=\"token comment\">// 分为两个判断条件一个是推箱子，一个是不推箱子 自然移动。 否则不移动皮卡丘</span>\\n        <span class=\"token comment\">//step 上下是12个div一个周期，左右是1个div positin是皮卡丘的原来位置</span>\\n    <span class=\"token keyword\">var</span> pikaqiu1<span class=\"token operator\">=</span>box<span class=\"token punctuation\">.</span><span class=\"token function\">eq</span><span class=\"token punctuation\">(</span>position<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//皮卡丘现在的地方</span>\\n    <span class=\"token keyword\">var</span> pikaqiu2<span class=\"token operator\">=</span>box<span class=\"token punctuation\">.</span><span class=\"token function\">eq</span><span class=\"token punctuation\">(</span>position<span class=\"token operator\">+</span>step<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//皮卡丘要去的下一个地方</span>\\n    <span class=\"token keyword\">var</span> pushBox<span class=\"token operator\">=</span>box<span class=\"token punctuation\">.</span><span class=\"token function\">eq</span><span class=\"token punctuation\">(</span>position<span class=\"token operator\">+</span>step<span class=\"token operator\">*</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//箱子要去的下一个地方</span>\\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>pikaqiu2<span class=\"token punctuation\">.</span><span class=\"token function\">hasClass</span><span class=\"token punctuation\">(</span><span class=\"token string\">\\'type4\\'</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;&amp;</span><span class=\"token punctuation\">(</span> pikaqiu2<span class=\"token punctuation\">.</span><span class=\"token function\">hasClass</span><span class=\"token punctuation\">(</span><span class=\"token string\">\\'type1\\'</span><span class=\"token punctuation\">)</span><span class=\"token operator\">||</span>pikaqiu2<span class=\"token punctuation\">.</span><span class=\"token function\">hasClass</span><span class=\"token punctuation\">(</span><span class=\"token string\">\\'type2\\'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span> <span class=\"token comment\">//自然移动</span>\\n        <span class=\"token comment\">//判断：如果下一个div的class不包含type4(箱子)，并且 下一个div含有type1(目标位置)，或者type2(普通路径)</span>\\n        <span class=\"token comment\">//这一步和下一步判断是否有type4的原因是普通路径会变成有type4的路径，这时候就会出现问题</span>\\n        pikaqiu1<span class=\"token punctuation\">.</span><span class=\"token function\">removeClass</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"pusher\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//移除当前皮卡丘</span>\\n        pikaqiu2<span class=\"token punctuation\">.</span><span class=\"token function\">addClass</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"pusher\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//移动皮卡丘到下一个位置</span>\\n        position<span class=\"token operator\">=</span>position<span class=\"token operator\">+</span>step<span class=\"token punctuation\">;</span><span class=\"token comment\">//增加position值</span>\\n    <span class=\"token punctuation\">}</span>\\n    <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>pikaqiu2<span class=\"token punctuation\">.</span><span class=\"token function\">hasClass</span><span class=\"token punctuation\">(</span><span class=\"token string\">\\'type4\\'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;&amp;</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>pushBox<span class=\"token punctuation\">.</span><span class=\"token function\">hasClass</span><span class=\"token punctuation\">(</span><span class=\"token string\">\\'type4\\'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;&amp;</span><span class=\"token punctuation\">(</span>pushBox<span class=\"token punctuation\">.</span><span class=\"token function\">hasClass</span><span class=\"token punctuation\">(</span><span class=\"token string\">\\'type1\\'</span><span class=\"token punctuation\">)</span><span class=\"token operator\">||</span> pushBox<span class=\"token punctuation\">.</span><span class=\"token function\">hasClass</span><span class=\"token punctuation\">(</span><span class=\"token string\">\\'type2\\'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n        <span class=\"token comment\">//推箱子    </span>\\n        <span class=\"token comment\">//如果下一个div的class包含type4(箱子)并且 不包含重叠type4(箱子) 并且 包含class type1（目标位置）或者 包含type2(空路)</span>\\n        pikaqiu2<span class=\"token punctuation\">.</span><span class=\"token function\">removeClass</span><span class=\"token punctuation\">(</span><span class=\"token string\">\\'type4\\'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//移除当前箱子</span>\\n        pikaqiu1<span class=\"token punctuation\">.</span><span class=\"token function\">removeClass</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"pusher\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//移除当前皮卡丘</span>\\n        pushBox<span class=\"token punctuation\">.</span><span class=\"token function\">addClass</span><span class=\"token punctuation\">(</span><span class=\"token string\">\\'type4\\'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//移动箱子到下一个位置</span>\\n        pikaqiu2<span class=\"token punctuation\">.</span><span class=\"token function\">addClass</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"pusher\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">addClass</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"type2\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//</span>\\n        <span class=\"token comment\">//本来是type4 移除之后，这里没有class了，要变成普通路径</span>\\n        position<span class=\"token operator\">=</span>position<span class=\"token operator\">+</span>step<span class=\"token punctuation\">;</span><span class=\"token comment\">//增加position值 </span>\\n    <span class=\"token punctuation\">}</span>\\n<span class=\"token punctuation\">}</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br><span class=\"line-number\">11</span><br><span class=\"line-number\">12</span><br><span class=\"line-number\">13</span><br><span class=\"line-number\">14</span><br><span class=\"line-number\">15</span><br><span class=\"line-number\">16</span><br><span class=\"line-number\">17</span><br><span class=\"line-number\">18</span><br><span class=\"line-number\">19</span><br><span class=\"line-number\">20</span><br><span class=\"line-number\">21</span><br><span class=\"line-number\">22</span><br><span class=\"line-number\">23</span><br><span class=\"line-number\">24</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<h3 id=\"_3-胜利判断：\"><a class=\"header-anchor\" href=\"#_3-胜利判断：\" aria-hidden=\"true\">#</a> 3.胜利判断：</h3>\\n<p>每次移动都要调用这个胜利判断。</p>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">win</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span> <span class=\"token comment\">//胜利条件判断</span>\\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token string\">\".type1.type4\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>length<span class=\"token operator\">===</span>goal<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span> <span class=\"token comment\">//推的箱子与关卡设置通过箱子的数量对比</span>\\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>level<span class=\"token operator\">&lt;</span><span class=\"token number\">9</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n            <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"666，挑战下一关吧--OBKoro1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\n            level<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//关卡+1</span>\\n            goal <span class=\"token operator\">=</span> goalList<span class=\"token punctuation\">[</span>level<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\\n            position <span class=\"token operator\">=</span> origin<span class=\"token punctuation\">[</span>level<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\\n            <span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\n        <span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\\n            <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"厉害啊 大佬 通关了都\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\n        <span class=\"token punctuation\">}</span>\\n    <span class=\"token punctuation\">}</span>\\n<span class=\"token punctuation\">}</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br><span class=\"line-number\">11</span><br><span class=\"line-number\">12</span><br><span class=\"line-number\">13</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<h3 id=\"代码地址、demo地址\"><a class=\"header-anchor\" href=\"#代码地址、demo地址\" aria-hidden=\"true\">#</a> <a href=\"https://github.com/OBKoro1/web_accumulate/blob/d6b599ca22d8656d3f31f80bffa976fac36d2d75/example/pushKoro/index.html\" target=\"_blank\" rel=\"noopener noreferrer\">代码地址<OutboundLink/></a>、<a href=\"http://obkoro1.com/web_accumulate/example/pushKoro/index.html\" target=\"_blank\" rel=\"noopener noreferrer\">demo地址<OutboundLink/></a></h3>\\n<p>以上2018.1.7\\n\\x3c!-- 特殊字符串：用于修改/删除markdown的结尾提示语-OBKoro1 --\\x3e</p>\\n<h3 id=\"点个star支持我一下\"><a class=\"header-anchor\" href=\"#点个star支持我一下\" aria-hidden=\"true\">#</a> 点个<a href=\"https://github.com/OBKoro1/web_accumulate\" target=\"_blank\" rel=\"noopener noreferrer\">Star<OutboundLink/></a>支持我一下~</h3>\\n\\x3c!-- \\'特殊字符串：用于删除编译后的issue组件-OBKoro1 --\\x3e\\n'},{key:\"v-f220c37dc6fe\",path:\"/accumulate/amateur/%E9%AB%98%E6%80%A7%E8%83%BDjs.html\",lastUpdated:1564720698e3,title:\"[读书笔记]《高性能 JavaScript》\",headers:[{level:2,title:\"[读书笔记]《高性能 JavaScript》\",slug:\"读书笔记-《高性能-javascript》\"},{level:3,title:\"缺陷\",slug:\"缺陷\"},{level:3,title:\"前言\",slug:\"前言\"},{level:3,title:\"第一章-加载和执行\",slug:\"第一章-加载和执行\"},{level:3,title:\"第一章加载和执行小结：\",slug:\"第一章加载和执行小结：\"},{level:3,title:\"第二章-数据存取\",slug:\"第二章-数据存取\"},{level:3,title:\"第二章数据存取小结：\",slug:\"第二章数据存取小结：\"},{level:3,title:\"第三章 DOM 编程小结：\",slug:\"第三章-dom-编程小结：\"},{level:3,title:\"第四章算法和流程控制小结：\",slug:\"第四章算法和流程控制小结：\"},{level:3,title:\"第五章字符串和正则表达式小结：\",slug:\"第五章字符串和正则表达式小结：\"},{level:3,title:\"第六章快速响应的用户界面小结：\",slug:\"第六章快速响应的用户界面小结：\"},{level:3,title:\"第七章 AJAX 小结\",slug:\"第七章-ajax-小结\"},{level:3,title:\"第八章编程实践小结\",slug:\"第八章编程实践小结\"},{level:3,title:\"第九章 构建并部署高性能 js 应用小结\",slug:\"第九章-构建并部署高性能-js-应用小结\"},{level:3,title:\"第十章 工具 小结：\",slug:\"第十章-工具-小结：\"},{level:2,title:\"后话\",slug:\"后话\"},{level:3,title:\"这些东西可以让我们知道什么是更好的实践，什么样的代码可以跑得更快，让我们养成更好的开发习惯。\",slug:\"这些东西可以让我们知道什么是更好的实践，什么样的代码可以跑得更快，让我们养成更好的开发习惯。\"},{level:3,title:\"点个Star支持我一下~\",slug:\"点个star支持我一下\"}],excerpt:'<h2 id=\"读书笔记-《高性能-javascript》\"><a class=\"header-anchor\" href=\"#读书笔记-《高性能-javascript》\" aria-hidden=\"true\">#</a> [读书笔记]《高性能 JavaScript》</h2>\\n<h3 id=\"缺陷\"><a class=\"header-anchor\" href=\"#缺陷\" aria-hidden=\"true\">#</a> 缺陷</h3>\\n<p>这本书是 2010 年出版的，这本书谈性能是有时效性的，现在已经是 2018 年了，这几年前端发展的速度是飞快的，书里面还有一些内容考虑 IE6、7、8 的东西，殊不知现在这些都已经不再考虑了，所以不可避免的有一些知识是比较老的。有些解决方法现在已经不是最好的解决方式，比如工具那一章。</p>\\n<h3 id=\"前言\"><a class=\"header-anchor\" href=\"#前言\" aria-hidden=\"true\">#</a> 前言</h3>\\n<p><strong>总的来说，这本书整体给出的性能优化建议，以及作者耐心的实践，对我们开发优化的启发和帮助还是很大的</strong>，因为它里边的很多知识，都是作者通过实践总结出来的，都是经验的积累，这在一般的教科书上是学不到的。特别是对于 js 基础比较差一点的，里面有很多知识点尽管在现在还是非常有必要的。</p>\\n<p><strong>下面我就将各章节的一些重要的知识点总结写出来，争取将干货都提取出来</strong>。</p>\\n<hr>\\n<h3 id=\"第一章-加载和执行\"><a class=\"header-anchor\" href=\"#第一章-加载和执行\" aria-hidden=\"true\">#</a> 第一章-加载和执行</h3>\\n<ol>\\n<li>js 的阻塞特性：</li>\\n</ol>\\n<p>当浏览器在执行 js 代码的时候，不能同时做其他事情。（界面 ui 线程和 js 线程用的是同一进程，所以 js 执行越久，网页的响应时间越长。）</p>\\n<ol start=\"2\">\\n<li>脚本的位置</li>\\n</ol>\\n<p><strong>如果把脚本<code>&lt;script&gt;</code>放在<code>&lt;head&gt;</code>中，页面会等 js 文件全部下载并执行完成后才开始渲染</strong>，在这些文件下载和执行的过程中：会导致访问网站的时候有明显的延迟，表现为：页面空白。</p>\\n<p>性能提升：<strong>推荐将所有的<code>&lt;script&gt;</code>标签尽可能的放到<code>&lt;body&gt;</code>标签的底部</strong>，优先渲染页面，减少页面空白时间。</p>\\n<ol start=\"3\">\\n<li>组件脚本。</li>\\n</ol>\\n<p>每个<code>&lt;script&gt;</code>标签初始下载的时候都会阻塞页面的渲染。性能提升做法：\\n<strong>减少内嵌脚本：减少内嵌的<code>&lt;script&gt;</code>标签</strong>，将代码写在一个标签中。</p>\\n<p><strong>合并外链的 js 文件</strong>：http 请求会带来额外的性能开销，栗子：下载一个 100KB 的 js 文件比下载 4 个 25kb 的 js 文件更快。具体操作方法自行搜索。</p>\\n<ol start=\"4\">\\n<li>无阻塞脚本的方法</li>\\n</ol>\\n<p><strong>script 标签的 aync 属性</strong>：</p>\\n<p>async 属性规定一旦脚本可用，则会异步执行。async 属性仅适用于外部脚本（只有在使用 src 属性时）。如果 async=&quot;async&quot;：脚本相对于页面的其余部分异步地执行（当页面继续进行解析时，脚本将被执行）</p>\\n<p><strong>script 标签的 defer 属性</strong>：</p>\\n<p>js 文件在页面解析到 script 标签的时候开始下载，但并不会执行，dom 加载完成执行。<strong>这两个属性的区别在于执行时机</strong>。</p>\\n<p><strong>动态脚本元素</strong>。</p>\\n<p>js 操作 dom 创建<code>&lt;script&gt;</code>标签，自定义生成标签的 type、src 属性。文件会在该元素被添加到页面的时候开始下载。ps：如果文件顺序很重要的话，最好按照顺序合成一个文件。然后再添加到页面中。这样：无论何时启动下载。文件的下载和执行过程不会阻塞页面的其他进程。</p>\\n<h5 id=\"_3-xhr-ajax-脚本注入、\"><a class=\"header-anchor\" href=\"#_3-xhr-ajax-脚本注入、\" aria-hidden=\"true\">#</a> 3. XHR ajax 脚本注入、</h5>\\n<p>用 get 请求一个文件，请求好了。然后创建动态脚本，最后添加进去。\\n缺陷：文件要再请求页面的同一个域。不能从 cdn 下载</p>\\n<h3 id=\"第一章加载和执行小结：\"><a class=\"header-anchor\" href=\"#第一章加载和执行小结：\" aria-hidden=\"true\">#</a> 第一章加载和执行小结：</h3>\\n<ol>\\n<li>把文件放在 body 标签签名，</li>\\n<li>合并脚本，减少<code>&lt;script&gt;</code>标签。</li>\\n<li>采用无阻塞下载 js。使用 script 的 defer 和 async 属性 异步下载。动态创建 script 标签和执行代码。</li>\\n</ol>\\n<h3 id=\"第二章-数据存取\"><a class=\"header-anchor\" href=\"#第二章-数据存取\" aria-hidden=\"true\">#</a> 第二章-数据存取</h3>\\n<ol>\\n<li><strong>js 四种基本的数据存取位置</strong>。\\n1、字面量：字符串、数字、布尔、对象、数组、函数、正则、null、undefined，字面量只代表自身，没有存储位置。 2、局部变量。 let var 声明的变量。3、数组元素。4、对象成员。</li>\\n</ol>\\n<p>性能：<strong>访问字面量和局部变量的速度是最快的，访问数组和对象成员相对较慢</strong></p>\\n<ol start=\"2\">\\n<li><strong>变量标识符解析过程</strong>：</li>\\n</ol>\\n<p>搜索执行环境的作用域链，查找同名标识符。搜索过程从作用域链头部开始，也就是当前运行函数的活动对象。如果找到，就使用这个标识符，对应的变量；如果没有找到，继续搜索下面的对象。搜索过程会持续进行，直到找到标识符，若无法搜索到匹配的对象，那么标识符被视为未定义、</p>\\n<p><strong>性能问题：一个标识符所在的位置越深，它的读写速度也就越慢</strong>。因此，函数中读写局部变量总是最快的，而读写全局变量通常是最慢的。</p>\\n<p><strong>建议：将全局变量存储到局部变量，加快读写速度。</strong></p>\\n<ol start=\"2\">\\n<li>闭包，原型，嵌套对象。</li>\\n</ol>\\n<p><strong>优化建议：将常用的跨作用域变量存储到局部变量，然后直接访问局部变量</strong>。理由如上，变量标识符解析过程。</p>\\n<h3 id=\"第二章数据存取小结：\"><a class=\"header-anchor\" href=\"#第二章数据存取小结：\" aria-hidden=\"true\">#</a> 第二章数据存取小结：</h3>\\n<ol>\\n<li>访问字面量和局部变量的速度最快，相反，访问数组元素和对象成员相对较慢。</li>\\n<li>由于局部变量存在于作用域链的起始位置，因为<strong>访问局部变量比访问跨作用域变量更快。这个道理同样适用于数组，对象，跨作用域变量</strong>。</li>\\n<li>把常用的对象，数组，跨域变量保存在局部变量可以改善 js 性能，局部变量访问速度更快。</li>\\n</ol>\\n<h3 id=\"第三章-dom-编程小结：\"><a class=\"header-anchor\" href=\"#第三章-dom-编程小结：\" aria-hidden=\"true\">#</a> 第三章 DOM 编程小结：</h3>\\n<ol>\\n<li><strong>dom 操作天生就慢，尽量减少 dom 操作</strong>，减少访问 dom 的次数。</li>\\n<li>使用 document.querySelect 来做选择器，比其他方式快。</li>\\n<li>需要多次访问某个 dom 节点，使用局部变量存储。</li>\\n<li>html 集合，把集合长度缓存到一个变量中，然后遍历使用这个变量，如果经常操作集合，建议拷到一个数组中。</li>\\n<li>要留意浏览器的重绘和重排；批量修改样式的时候，‘离线’操作 DOM 树，使用缓存，并减少访问布局信息的次数。\\n重绘和重排是 DOM 编程优化的一个相当重要概念：<a href=\"http://web.jobbole.com/83164/\" target=\"_blank\" rel=\"noopener noreferrer\">重绘和重排<OutboundLink/></a>。</li>\\n<li>动画中使用绝对定义，使用拖放处理。</li>\\n<li>使用事件委托来减少事件处理器的数量。</li>\\n</ol>\\n<h3 id=\"第四章算法和流程控制小结：\"><a class=\"header-anchor\" href=\"#第四章算法和流程控制小结：\" aria-hidden=\"true\">#</a> 第四章算法和流程控制小结：</h3>\\n<ol>\\n<li>\\n<p>for、while 和 do-while 循环性能差不多，<strong>for-in 循环速度只有前面几种类型的 1/7</strong>，所以尽量避免使用 for-in 循环，除非你需要遍历一个属性数量未知的对象。</p>\\n<p>forEach 比 for 慢，如果运行速度要求严格，不建议使用。</p>\\n</li>\\n<li>\\n<p>改善循环性能的最佳方式是<strong>减少每次迭代的工作量和减少循环迭代的次数</strong>。</p>\\n</li>\\n</ol>\\n<p>减少迭代工作量：减少属性查找和倒序循环，循环次数越多，性能优化越明显。</p>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code><span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>items<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>代码<span class=\"token punctuation\">}</span><span class=\"token comment\">//正序循环</span>\\n<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i<span class=\"token operator\">=</span>items<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>i<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>代码<span class=\"token punctuation\">}</span><span class=\"token comment\">//倒序循环</span>\\n<span class=\"token comment\">//减少属性查找：查找一次属性，把值存在局部变量，在控制条件里面使用这个变量</span>\\n\\n倒序循环在i<span class=\"token operator\">></span><span class=\"token number\">0</span>的时候会自动转换为<span class=\"token boolean\">true</span>，等于<span class=\"token number\">0</span>的时候为<span class=\"token boolean\">false</span>。\\n<span class=\"token comment\">//倒序循环：控制条件从（迭代数少于总数吗？它是否为true？）变为（它是否为true）</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<p>减少迭代的次数：&quot;Duff\\'s Device&quot;循环体展开技术，有兴趣的可以看一下，迭代工作量大于 1000 的时候适用。</p>\\n<ol start=\"3\">\\n<li>\\n<p>if-else 与 switch：条件数量越大，越倾向于使用 switch。</p>\\n<p>优化 if-else：</p>\\n<ul>\\n<li>把最可能出现的条件放在首位.</li>\\n<li>使用二分法把值域分成一系列的区间。</li>\\n</ul>\\n</li>\\n<li>\\n<p>浏览器的调用栈大小限制了递归算法在 js 中的应用；栈溢出错误会导致其他代码中断运行。</p>\\n<pre><code>小心使用递归，现在es6递归可以尾递归，在es6中只要使用尾递归就不会发生栈溢出，相对节省性能。\\n</code></pre>\\n</li>\\n</ol>\\n<h3 id=\"第五章字符串和正则表达式小结：\"><a class=\"header-anchor\" href=\"#第五章字符串和正则表达式小结：\" aria-hidden=\"true\">#</a> 第五章字符串和正则表达式小结：</h3>\\n<ol>\\n<li>字符串合并的时候使用简单的\\'+\\'和\\'+=\\'操作符。</li>\\n</ol>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code><span class=\"token keyword\">let</span> str<span class=\"token operator\">+=</span><span class=\"token string\">\\'abc\\'</span><span class=\"token operator\">+</span>\\'efg<span class=\"token punctuation\">;</span><span class=\"token comment\">//2个以上的字符串拼接，会产生临时字符串</span>\\n<span class=\"token keyword\">let</span> str<span class=\"token operator\">=</span>str<span class=\"token operator\">+</span><span class=\"token string\">\\'abc\\'</span><span class=\"token operator\">+</span><span class=\"token string\">\\'efg\\'</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//推荐，提速10%~40%</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<ol start=\"2\">\\n<li>\\n<p>书里面讲的<strong>正则原理和回溯原理，这个很重要</strong>，找个篇<a href=\"http://blog.csdn.net/c_kite/article/details/77875328\" target=\"_blank\" rel=\"noopener noreferrer\">博客<OutboundLink/></a>：跟书里面讲的差不多，但还是建议大家可以去找找 PDF 好好看看正则表达式这节。</p>\\n</li>\\n<li>\\n<p>提高正则表达式效率的方法：</p>\\n<ul>\\n<li>最重要的是：具体化正则表达式！具体化正则表达式！具体化正则表达式！</li>\\n<li>关注如何让匹配更快失败，找出一些必需，特殊的字符</li>\\n<li>正则表达式以简单的、必需的字元开始。</li>\\n<li>使用量词模式，使它们后面的字元互斥。</li>\\n<li>较少分支数量，缩小分支范围</li>\\n<li>使用合适的量词</li>\\n<li>把正则表达式赋值给变量并重用</li>\\n<li>将复杂的正则拆分为简单的片段\\n//事实上，书里面讲的方法不止这么几个，而且每一个都有详细的解析 大佬们 还是去看看这一章节吧</li>\\n</ul>\\n</li>\\n<li>\\n<p>正则表达式并不总是最好的解决方案，当你只是搜索字面字符串或者你事先知道字符串的哪一部分将要被查找时：</p>\\n<ul>\\n<li>使用 indexOf()和 lastIndexOf()更适合查找特定字符串的位置或者判断它们是否存在\\n//例如：判断当前浏览器之类。</li>\\n</ul>\\n</li>\\n</ol>\\n<h3 id=\"第六章快速响应的用户界面小结：\"><a class=\"header-anchor\" href=\"#第六章快速响应的用户界面小结：\" aria-hidden=\"true\">#</a> 第六章快速响应的用户界面小结：</h3>\\n<p>js 和用户界面更新在同一个进程中运行，因此一次只能处理一件事情。高效的管理 UI 线程就是要确保 js 不能运行太长时间，以免影响用户体验。</p>\\n<ol>\\n<li>\\n<p>浏览器限制了 js 任务的运行时间，这种限制很有必要，它确保某些恶意代码不能通过永不停止的密集操作锁住用户的浏览器。此限制分为两种：调用栈的大小和长时间运行脚本。</p>\\n</li>\\n<li>\\n<p>任何 js 任务都不应当执行超过 100 毫秒。过长的运行时间会导致 UI 更新出现明显延迟，从而对用户体验造成负面影响。</p>\\n</li>\\n<li>\\n<p>定时器可用来安排代码延迟执行，它使得你可以把长时间运行脚本分解成一系列的小任务。</p>\\n</li>\\n</ol>\\n<h3 id=\"第七章-ajax-小结\"><a class=\"header-anchor\" href=\"#第七章-ajax-小结\" aria-hidden=\"true\">#</a> 第七章 AJAX 小结</h3>\\n<p>这一章节貌似东西都比较老一点。。</p>\\n<ol>\\n<li>\\n<p>post 更适合发送大量数据到服务器。</p>\\n</li>\\n<li>\\n<p>get 请求能够被浏览器缓存，Expires 头信息设置浏览器缓存请求多久。可用于从不改变的图片或者其他静态数据集（js、css 等）</p>\\n</li>\\n<li>\\n<p>JSON 是一种使用 js 对象和数组直接量编写的轻量级且易于解析的数据格式，它不仅传输尺寸小，而且解析速度快。JSON 是高性能 AJAX 的基础，尤其在使用动态脚本注入时。</p>\\n</li>\\n</ol>\\n<p>json 应该是近几年一直在用的。。。</p>\\n<ol start=\"4\">\\n<li>减少请求数，通过合并 js 和 css 文件。</li>\\n<li>缩短页面的加载时间，页面主要内容加载完成后，用 AJAX 获取那些次要的文件。</li>\\n</ol>\\n<h3 id=\"第八章编程实践小结\"><a class=\"header-anchor\" href=\"#第八章编程实践小结\" aria-hidden=\"true\">#</a> 第八章编程实践小结</h3>\\n<ol>\\n<li>避免双重求值：避免使用 eval()和 function()构造器来避免双重求值带来的性能消耗，同样的，给 setTimeout()和 setInterval()传递函数而不是字符串作为参数。</li>\\n</ol>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code><span class=\"token comment\">//双重求值：就是在js代码中执行另一段js代码，不建议使用下面这些方式</span>\\n<span class=\"token function\">eval</span><span class=\"token punctuation\">(</span><span class=\"token string\">\\'代码\\'</span><span class=\"token punctuation\">)</span>\\n<span class=\"token keyword\">function</span>构造函数<span class=\"token operator\">--</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">function</span><span class=\"token punctuation\">(</span><span class=\"token string\">\\'代码\\'</span><span class=\"token punctuation\">)</span>\\n<span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span>‘代码’<span class=\"token punctuation\">,</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token function\">和setInterval</span><span class=\"token punctuation\">(</span>‘代码’<span class=\"token punctuation\">,</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<ol start=\"2\">\\n<li>尽量使用直接量创建对象和数组。直接量的创建和初始化都比非直接量形式要快。</li>\\n<li>避免做重复工作，能节省的步骤就节省。</li>\\n<li>js 原生方法总会比你写的任何代码都要快。</li>\\n</ol>\\n<h3 id=\"第九章-构建并部署高性能-js-应用小结\"><a class=\"header-anchor\" href=\"#第九章-构建并部署高性能-js-应用小结\" aria-hidden=\"true\">#</a> 第九章 构建并部署高性能 js 应用小结</h3>\\n<p>构建和部署的过程对基于 js 的 web 应用的性能有着巨大影响。这个过程中最重要的步骤有：</p>\\n<ol>\\n<li>合并、压缩 js 文件。<strong>可使用 Gzip 压缩，能够减少约 70%的体积</strong>！</li>\\n</ol>\\n<p>这些都是在构建过程中完成的工作，不要等到运行时去做，webpack 也是在构建过程中，完成的工作。</p>\\n<ol start=\"2\">\\n<li>通过正确设置 HTTP 响应头来缓存 js 文件，通过向文件名增加时间戳来避免缓存问题。</li>\\n<li>使用 CDN 提供 js 文件；CDN 不仅可以提升性能，它也为你管理文件的压缩与缓存，。</li>\\n</ol>\\n<h3 id=\"第十章-工具-小结：\"><a class=\"header-anchor\" href=\"#第十章-工具-小结：\" aria-hidden=\"true\">#</a> 第十章 工具 小结：</h3>\\n<p>当网页变慢时，分析从网络下载的资源以及分析的资源以及分析脚本的运行性能能让你专注于那些最需要优化的地方。</p>\\n<ol>\\n<li>\\n<p>使用网络分析工具找出加载脚本和页面中其他资源的瓶颈，这会帮助你决定那些脚本需要延迟加载，或者需要进一步分析。</p>\\n<ul>\\n<li>检查图片、样式表和脚本的加载过程，以及它们对页面整体加载和渲染的影响。</li>\\n<li>针对性的做出优化</li>\\n</ul>\\n</li>\\n<li>\\n<p>把脚本尽可能延迟加载，这样做可以加快页面渲染速度，给用户带来更好的体验。</p>\\n</li>\\n<li>\\n<p>确认脚本和其他资源文件的加载过程已经被优化</p>\\n<ul>\\n<li>这里主要是说文件从服务器的下载速度，比如服务器那边的配置问题之类的。</li>\\n<li>栗子：我就被后端坑过。一个js文件就200k ，下载下来需要50秒钟！</li>\\n<li>后面发现原来是后端那边nginx没有开启加速配置什么的，导致出现的问题，找问题找半天。</li>\\n</ul>\\n</li>\\n<li>\\n<p>测试脚本的运行时间,用一个 Date 实例减去另一个 Date 实例，得到的时间差就是脚本运行消耗的时间。</p>\\n</li>\\n</ol>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code><span class=\"token keyword\">let</span> start <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\n<span class=\"token comment\">//你的代码</span>\\n<span class=\"token keyword\">let</span> time <span class=\"token operator\">=</span> <span class=\"token function\">newDate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> start<span class=\"token punctuation\">;</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<ol start=\"5\">\\n<li><strong>chrome ,火狐 等主流浏览器的控制面板，已经能够反映很多性能问题</strong>。仔细分析就能找出很多问题。例如：资源加载，断点等</li>\\n</ol>\\n<h2 id=\"后话\"><a class=\"header-anchor\" href=\"#后话\" aria-hidden=\"true\">#</a> 后话</h2>\\n<p>事实上，<strong>自认为这本书最宝贵的就是一些提到的细节</strong>，比如：</p>\\n<p>1、字符串合并的时候使用简单的\\'+\\'和\\'+=\\'操作符。</p>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code><span class=\"token keyword\">let</span> str<span class=\"token operator\">+=</span><span class=\"token string\">\\'abc\\'</span><span class=\"token operator\">+</span><span class=\"token string\">\\'efg\\'</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//2个以上的字符串拼接，会产生临时字符串</span>\\n<span class=\"token keyword\">let</span> str<span class=\"token operator\">=</span>str<span class=\"token operator\">+</span><span class=\"token string\">\\'abc\\'</span><span class=\"token operator\">+</span><span class=\"token string\">\\'efg\\'</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//推荐，提速10%~40%</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<p>2、避免双重求值：避免使用 eval()和 function()构造器来避免双重求值带来的性能消耗，同样的，给 setTimeout()和 setInterval()传递函数而不是字符串作为参数。</p>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code><span class=\"token comment\">//双重求值：就是在js代码中执行另一段js代码，不建议使用下面这些方式</span>\\n<span class=\"token function\">eval</span><span class=\"token punctuation\">(</span><span class=\"token string\">\\'代码\\'</span><span class=\"token punctuation\">)</span>\\n<span class=\"token keyword\">function</span>构造函数<span class=\"token operator\">--</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">function</span><span class=\"token punctuation\">(</span><span class=\"token string\">\\'代码\\'</span><span class=\"token punctuation\">)</span>\\n<span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span>‘代码’<span class=\"token punctuation\">,</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token function\">和setInterval</span><span class=\"token punctuation\">(</span>‘代码’<span class=\"token punctuation\">,</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<h3 id=\"这些东西可以让我们知道什么是更好的实践，什么样的代码可以跑得更快，让我们养成更好的开发习惯。\"><a class=\"header-anchor\" href=\"#这些东西可以让我们知道什么是更好的实践，什么样的代码可以跑得更快，让我们养成更好的开发习惯。\" aria-hidden=\"true\">#</a> 这些东西可以让我们知道什么是更好的实践，什么样的代码可以跑得更快，让我们养成更好的开发习惯。</h3>\\n<p>书不太厚，如果对里面的内容感兴趣，还是建议买一本回家看一看。</p>\\n<p>以上 2018.1.9\\n\\x3c!-- 特殊字符串：用于修改/删除markdown的结尾提示语-OBKoro1 --\\x3e</p>\\n<h3 id=\"点个star支持我一下\"><a class=\"header-anchor\" href=\"#点个star支持我一下\" aria-hidden=\"true\">#</a> 点个<a href=\"https://github.com/OBKoro1/web_accumulate\" target=\"_blank\" rel=\"noopener noreferrer\">Star<OutboundLink/></a>支持我一下~</h3>\\n\\x3c!-- \\'特殊字符串：用于删除编译后的issue组件-OBKoro1 --\\x3e\\n'},{key:\"v-746f6063fbfb7\",path:\"/accumulate/effect/input%E7%9A%84%E4%B8%80%E4%BA%9B%E5%9D%91%E7%82%B9%E5%88%86%E4%BA%AB.html\",lastUpdated:1564720698e3,title:\"input 的一些坑点分享\",headers:[{level:2,title:\"input 的一些坑点分享\",slug:\"input-的一些坑点分享\"},{level:2,title:\"本文内容包括：\",slug:\"本文内容包括：\"},{level:3,title:\"移动端底部 input 被弹出的键盘遮挡\",slug:\"移动端底部-input-被弹出的键盘遮挡\"},{level:3,title:\"控制 input 显/隐密码\",slug:\"控制-input-显-隐密码\"},{level:3,title:\"在 input 中输入 emoji 表情导致请求失败\",slug:\"在-input-中输入-emoji-表情导致请求失败\"},{level:3,title:\"textarea 多行回车换行，显示的时候换行设置：\",slug:\"textarea-多行回车换行，显示的时候换行设置：\"},{level:3,title:\"输入框首尾清除空格-trim()\",slug:\"输入框首尾清除空格-trim\"},{level:3,title:\"在 input 中监听键盘事件\",slug:\"在-input-中监听键盘事件\"},{level:3,title:\"点个Star支持我一下~\",slug:\"点个star支持我一下\"}],excerpt:'<h2 id=\"input-的一些坑点分享\"><a class=\"header-anchor\" href=\"#input-的一些坑点分享\" aria-hidden=\"true\">#</a> input 的一些坑点分享</h2>\\n<h2 id=\"本文内容包括：\"><a class=\"header-anchor\" href=\"#本文内容包括：\" aria-hidden=\"true\">#</a> 本文内容包括：</h2>\\n<ol>\\n<li>移动端底部 input 被弹出的键盘遮挡。</li>\\n<li>控制 input 显/隐密码。</li>\\n<li>在 input 中输入 emoji 表情导致请求失败。</li>\\n<li>input 多行输入显示换行。</li>\\n<li>输入框首尾清除空格-trim()</li>\\n<li>在 input 中监听键盘事件</li>\\n</ol>\\n<hr>\\n<h3 id=\"移动端底部-input-被弹出的键盘遮挡\"><a class=\"header-anchor\" href=\"#移动端底部-input-被弹出的键盘遮挡\" aria-hidden=\"true\">#</a> 移动端底部 input 被弹出的键盘遮挡</h3>\\n<p>input 输入框是通过<code>position:fixed</code>一直放在页面底部，当点击 input 进行输入的时候，就会出现如下图片情况（有的机型会遮挡一些）。</p>\\n<p>当时这个问题是去年在 ios 中遇到的，在最新版的 ios 系统中，貌似解决了这个 bug，但是为了向下兼容以及防止其他其他机型也出现这个问题，大家可以稍微记一下这个解决方法。</p>\\n<p><img src=\"https://github.com/OBKoro1/articleImg_src/blob/master/juejin/16353072dcc21218?raw=true\" alt=\"\"></p>\\n<p>在解决这个问题的时候，有试过下面这种方法:</p>\\n<p><s>在 input 的 focus 事件中，开启一个定时器，然后每隔 300 毫秒进行一次 document.body.scrollTop=document.body.scrollHeight 的调整，运行 3 次即可。</s></p>\\n<p>当时还以为解决了，但是当你底部评论区还有很多内容，你每次点击 input，想要输入的时候，整个页面通过<code>scrollTop</code>就会不断的向下滚动，这个体验不用说自己也知道是相当失败的，然后就再去找解决方法，结果就有了下面这个。</p>\\n<h4 id=\"element-scrollintoview\"><a class=\"header-anchor\" href=\"#element-scrollintoview\" aria-hidden=\"true\">#</a> Element.scrollIntoView()</h4>\\n<p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Element/scrollIntoView\" target=\"_blank\" rel=\"noopener noreferrer\">Element.scrollIntoView()<OutboundLink/></a>:方法<strong>让当前的元素滚动到浏览器窗口的可视区域内</strong>。</p>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code>document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">\\'#inputId\\'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">scrollIntoView</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\n<span class=\"token comment\">//只要在input的点击事件，或者获取焦点的事件中，加入这个api就好了</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<p>这个 api 还可以设置对齐方法，选择将 input 放在屏幕的上方/下方，类似的 api 还有:<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Element/scrollIntoViewIfNeeded\" target=\"_blank\" rel=\"noopener noreferrer\">Element.scrollIntoViewIfNeeded()<OutboundLink/></a>，这两个是解决同一个问题的，选择一个用就可以了。</p>\\n<hr>\\n<h3 id=\"控制-input-显-隐密码\"><a class=\"header-anchor\" href=\"#控制-input-显-隐密码\" aria-hidden=\"true\">#</a> 控制 input 显/隐密码</h3>\\n<p>这个就很简单了，只需更改 input 的 type 属性值就可以了。可以看一下 codepen 的<a href=\"https://codepen.io/OBKoro1/pen/VxxgyG\" target=\"_blank\" rel=\"noopener noreferrer\">demo<OutboundLink/></a></p>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code><span class=\"token comment\">//点击函数，获取dom，判断更改属性。</span>\\n<span class=\"token function\">show</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\\n    <span class=\"token keyword\">let</span> input<span class=\"token operator\">=</span>document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"inputId\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>input<span class=\"token punctuation\">.</span>type<span class=\"token operator\">==</span><span class=\"token string\">\"password\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\\n        input<span class=\"token punctuation\">.</span>type<span class=\"token operator\">=</span><span class=\"token string\">\\'text\\'</span><span class=\"token punctuation\">;</span>\\n    <span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span>\\n        input<span class=\"token punctuation\">.</span>type<span class=\"token operator\">=</span><span class=\"token string\">\\'password\\'</span><span class=\"token punctuation\">;</span>\\n    <span class=\"token punctuation\">}</span>\\n<span class=\"token punctuation\">}</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<hr>\\n<h3 id=\"在-input-中输入-emoji-表情导致请求失败\"><a class=\"header-anchor\" href=\"#在-input-中输入-emoji-表情导致请求失败\" aria-hidden=\"true\">#</a> 在 input 中输入 emoji 表情导致请求失败</h3>\\n<p>现在用户输入 emoji 简直已经成为了习惯，如果前后端没有对 emoji 表情进行处理，那么用户在上传的时候，就会请求失败。</p>\\n<p><strong>通常这个问题是后端那边处理比较合适的</strong>，前端是做不了这件事的，或者说很难做这件事。</p>\\n<p>之前看过一篇<a href=\"https://www.bbsmax.com/A/nAJvkxjY5r/\" target=\"_blank\" rel=\"noopener noreferrer\">文章<OutboundLink/></a>，这个文章里面讲了怎么在上传和拿数据下来的时候不会报错，但是不能在显示的时候转换为表情。</p>\\n<p>ps:之前拿微信用户名的时候，有些人可能在微信昵称上面就会包含表情，<strong>如果后端没对表情处理转换，那么普通请求也会出错</strong>。</p>\\n<p>之所以说这个，当表单请求错误的时候各位如果实在找不到问题可以往这方面考虑一下，我真的被坑过的 o(╥﹏╥)o。</p>\\n<hr>\\n<h3 id=\"textarea-多行回车换行，显示的时候换行设置：\"><a class=\"header-anchor\" href=\"#textarea-多行回车换行，显示的时候换行设置：\" aria-hidden=\"true\">#</a> textarea 多行回车换行，显示的时候换行设置：</h3>\\n<p>在使用<code>textarea</code>标签输入多行文本的时候，如果没有对多行文本显示处理，会导致没有换行的情况,就比如下面这种情况，用户在<code>textarea</code>是有换行的。</p>\\n<p><img src=\"https://github.com/OBKoro1/articleImg_src/blob/master/juejin/1635388bf4dca899?raw=true\" alt=\"\"></p>\\n<h4 id=\"css-属性-white-space\"><a class=\"header-anchor\" href=\"#css-属性-white-space\" aria-hidden=\"true\">#</a> Css 属性:<a href=\"http://www.w3school.com.cn/cssref/pr_text_white-space.asp\" target=\"_blank\" rel=\"noopener noreferrer\">white-space<OutboundLink/></a></h4>\\n<p>white-space 属性用于设置如何处理元素内的空白，其中包括空白符和换行符。</p>\\n<p><img src=\"https://github.com/OBKoro1/articleImg_src/blob/master/juejin/16353927aec80539?raw=true\" alt=\"\"></p>\\n<p>只要在<strong>显示内容的地方将该属性设置为<code>white-space: pre-line</code>或者<code>white-space:pre-wrap</code>，多行文本就可以换行了</strong>。</p>\\n<h4 id=\"设置之后，显示效果：\"><a class=\"header-anchor\" href=\"#设置之后，显示效果：\" aria-hidden=\"true\">#</a> 设置之后，显示效果：</h4>\\n<p><img src=\"https://github.com/OBKoro1/articleImg_src/blob/master/juejin/1635d9d75136f6d8?raw=true\" alt=\"\"></p>\\n<hr>\\n<h3 id=\"输入框首尾清除空格-trim\"><a class=\"header-anchor\" href=\"#输入框首尾清除空格-trim\" aria-hidden=\"true\">#</a> 输入框首尾清除空格-trim()</h3>\\n<p>输入框清除首尾空格是 input 较为常见的需求，通常在上传的时候将首尾空格去除掉。一般使用:字符串的原生方法<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/Trim\" target=\"_blank\" rel=\"noopener noreferrer\">trim()<OutboundLink/></a> 从一个字符串的两端删除空白字符。</p>\\n<p>trim() 方法并不影响原字符串本身，它返回的是一个新的字符串。</p>\\n<h4 id=\"原生清除方法\"><a class=\"header-anchor\" href=\"#原生清除方法\" aria-hidden=\"true\">#</a> 原生清除方法:</h4>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code><span class=\"token comment\">//原生方法获取值，清除首尾空格上传str2</span>\\n<span class=\"token keyword\">let</span> str2 <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\\'inputId\\'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">trim</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<h4 id=\"vue-清除方法：\"><a class=\"header-anchor\" href=\"#vue-清除方法：\" aria-hidden=\"true\">#</a> Vue 清除方法：</h4>\\n<p>Vue 提供了<a href=\"https://cn.vuejs.org/v2/guide/forms.html#trim\" target=\"_blank\" rel=\"noopener noreferrer\">修饰符<OutboundLink/></a>删除首尾空格， 加了修饰符<code>.trim</code>会自动过滤用户输入的首尾空白字符</p>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-html line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-html\"><code><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">v-model.trim</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>msg<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<p>貌似 angular 也提供了类似过滤的方法，感兴趣的可以自己去查一下。</p>\\n<hr>\\n<h3 id=\"在-input-中监听键盘事件\"><a class=\"header-anchor\" href=\"#在-input-中监听键盘事件\" aria-hidden=\"true\">#</a> 在 input 中监听键盘事件</h3>\\n<p>在用户登录或者搜索框的时候，一般都会监听键盘事件绑定回车按键，来执行登录/搜索 等操作。</p>\\n<h4 id=\"原生绑定\"><a class=\"header-anchor\" href=\"#原生绑定\" aria-hidden=\"true\">#</a> 原生绑定:</h4>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code><span class=\"token operator\">&lt;</span>input onkeydown<span class=\"token operator\">=</span><span class=\"token string\">\"keydownMsg(event)\"</span> type<span class=\"token operator\">=</span><span class=\"token string\">\"text\"</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\\n<span class=\"token keyword\">function</span> <span class=\"token function\">keydownMsg</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n  keyCode <span class=\"token operator\">=</span> key<span class=\"token punctuation\">.</span>keyCode<span class=\"token punctuation\">;</span> <span class=\"token comment\">//获取按键代码</span>\\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>keyCode <span class=\"token operator\">==</span> <span class=\"token number\">13</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n    <span class=\"token comment\">//判断按下的是否为回车键</span>\\n    <span class=\"token comment\">// 在input上监听到回车 do something</span>\\n  <span class=\"token punctuation\">}</span>\\n<span class=\"token punctuation\">}</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<h4 id=\"vue-按键修饰符\"><a class=\"header-anchor\" href=\"#vue-按键修饰符\" aria-hidden=\"true\">#</a> Vue 按键修饰符</h4>\\n<p>Vue 为监听键盘事件，提供了<a href=\"https://cn.vuejs.org/v2/guide/events.html#%E6%8C%89%E9%94%AE%E4%BF%AE%E9%A5%B0%E7%AC%A6\" target=\"_blank\" rel=\"noopener noreferrer\">按键修饰符<OutboundLink/></a>，并且为常用的按键提供了别名，使用方法如下:当回车按键在 input 中被按下的时候，会触发里面的函数。</p>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-html line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-html\"><code><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">@keyup.enter</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>enterActive<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e\\x3c!-- 特殊字符串：用于修改/删除markdown的结尾提示语-OBKoro1 --\\x3e\\n<h3 id=\"点个star支持我一下\"><a class=\"header-anchor\" href=\"#点个star支持我一下\" aria-hidden=\"true\">#</a> 点个<a href=\"https://github.com/OBKoro1/web_accumulate\" target=\"_blank\" rel=\"noopener noreferrer\">Star<OutboundLink/></a>支持我一下~</h3>\\n\\x3c!-- \\'特殊字符串：用于删除编译后的issue组件-OBKoro1 --\\x3e\\n'},{key:\"v-57bdc7a3e44f\",path:\"/accumulate/effect/%E5%89%8D%E7%AB%AF%E5%BC%B9%E5%B9%95%E6%95%88%E6%9E%9C%E5%AE%9E%E7%8E%B0%E6%80%9D%E8%B7%AF.html\",lastUpdated:1564720698e3,title:\"前端弹幕效果实现思路\",headers:[{level:2,title:\"前端弹幕效果实现思路\",slug:\"前端弹幕效果实现思路\"},{level:2,title:\"实现效果：\",slug:\"实现效果：\"},{level:2,title:\"实现原理：\",slug:\"实现原理：\"},{level:2,title:\"实现步骤：\",slug:\"实现步骤：\"},{level:3,title:\"1. 首先看一下html的结构。\",slug:\"_1-首先看一下html的结构。\"},{level:3,title:\"2.获取弹幕所需要的数据。\",slug:\"_2-获取弹幕所需要的数据。\"},{level:3,title:\"3.执行弹幕的函数。\",slug:\"_3-执行弹幕的函数。\"},{level:3,title:\"点个Star支持我一下~\",slug:\"点个star支持我一下\"}],excerpt:'<h2 id=\"前端弹幕效果实现思路\"><a class=\"header-anchor\" href=\"#前端弹幕效果实现思路\" aria-hidden=\"true\">#</a> 前端弹幕效果实现思路</h2>\\n<p>这是几个月前写的<a href=\"https://juejin.im/post/5ae56927f265da0b7e0c0968\" target=\"_blank\" rel=\"noopener noreferrer\">文章<OutboundLink/></a>，文章下面有很多精彩的讨论，或许能给你一点启发</p>\\n<div class=\"tip custom-block\"><p class=\"custom-block-title\">更好的方式</p>\\n<p>可以利用<code>canvas</code>或者 CSS 动画来实现弹幕需求，不过文章中的思路，可以参考一下。</p>\\n</div>\\n<hr>\\n<h2 id=\"实现效果：\"><a class=\"header-anchor\" href=\"#实现效果：\" aria-hidden=\"true\">#</a> 实现效果：</h2>\\n<p><img src=\"https://github.com/OBKoro1/articleImg_src/blob/master/juejin/1631066f5f7cbcd4?raw=true\" alt=\"\"></p>\\n<h2 id=\"实现原理：\"><a class=\"header-anchor\" href=\"#实现原理：\" aria-hidden=\"true\">#</a> 实现原理：</h2>\\n<p>实现弹幕的原理，并不算太复杂，耗费一些时间，怼一怼应该都可以做出来。</p>\\n<ol>\\n<li>获取弹幕数据。</li>\\n<li>将弹幕设置为四个通道，每个通道最多只能出现两条弹幕。</li>\\n<li>使用<code>setInterval</code>动态设置<code>dom</code>的<code>left</code>属性。</li>\\n<li>使用 dom 的<code>offsetWidth</code>和屏幕的宽度判断元素是否滚动超出屏幕，然后移除 dom。</li>\\n</ol>\\n<hr>\\n<h2 id=\"实现步骤：\"><a class=\"header-anchor\" href=\"#实现步骤：\" aria-hidden=\"true\">#</a> 实现步骤：</h2>\\n<h3 id=\"_1-首先看一下html的结构。\"><a class=\"header-anchor\" href=\"#_1-首先看一下html的结构。\" aria-hidden=\"true\">#</a> 1. 首先看一下<code>html</code>的结构。</h3>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-html line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-html\"><code><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>detailImg<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>img</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>url<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span>\\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>barrageDiv<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>barrageLayer1<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>barrageLayer2<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>barrageLayer3<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>barrageLayer4<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\\n<span class=\"token comment\">&lt;!--detailImg 设置relative， barrageDiv设置z-index在图片上面，以及图片的位置--\\x3e</span>\\n<span class=\"token comment\">&lt;!-- barrageLayer1~4 主要设置了一个top属性让四个div在各自的水平线上，形成四个通道--\\x3e</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br><span class=\"line-number\">11</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<p>关于这里的 css 样式，关键点都在上面说了，就注意一下上面通道是怎样形成的，就可以了。具体的样式也就不贴出来了，就根据各自的需求来吧。</p>\\n<h3 id=\"_2-获取弹幕所需要的数据。\"><a class=\"header-anchor\" href=\"#_2-获取弹幕所需要的数据。\" aria-hidden=\"true\">#</a> 2.获取弹幕所需要的数据。</h3>\\n<p>要实现弹幕效果肯定需要有数据，这里就是发请求了。</p>\\n<p>获取数据时，<strong>要考虑数据量，一次不可能全部都获取</strong>，可以一次获取一部分，当数据要加载完的时候，再次请求数据。</p>\\n<p>这里要<strong>记录数据数据是否全部请求完成</strong>，如果请求完成，就可以不再发送数据，直接用之前获取的全部数据就可以了。</p>\\n<h3 id=\"_3-执行弹幕的函数。\"><a class=\"header-anchor\" href=\"#_3-执行弹幕的函数。\" aria-hidden=\"true\">#</a> 3.执行弹幕的函数。</h3>\\n<p>弹幕数据获取后，就执行弹幕运行的函数，因为我在写弹幕函数的时候，设置了很多数据状态，这里就大概讲一下实现思路和关键部分代码。</p>\\n<h4 id=\"弹幕函数包括的功能：\"><a class=\"header-anchor\" href=\"#弹幕函数包括的功能：\" aria-hidden=\"true\">#</a> 弹幕函数包括的功能：</h4>\\n<ol>\\n<li>定时获取数据(判断数据是否加载完毕)</li>\\n<li>定时发射弹幕(判断通道是否闲置),传入弹幕所需要的内容，用户头像等。</li>\\n<li>创建 dom 内容，根据传参生成弹幕 div，设置 style 属性，根据控制弹幕数据数组的下标将 div 插入对应的 dom 中。</li>\\n<li>采用定时器移动 dom，这里是根据内容长度定义弹幕的移动速度。</li>\\n<li>移动弹幕的过程中判断四个通道是否处于闲置状态，当 dom 移动出了屏幕，移动 dom 并且清除定时器。</li>\\n</ol>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">barrage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\\n    <span class=\"token comment\">//第一部分先判断数据是否加载完成 这里是一个定时器，设置为15秒。</span>\\n    <span class=\"token comment\">//如果数据还未加载完毕，就再次运行请求数据的接口，请求的页数可以 数组/每次请求的条数+1</span>\\n    <span class=\"token comment\">//数据加载完毕就清除定时器。（我将定时器都保存在vue 组件的data里面） 清除的时候clearInterval(this.data);</span>\\n\\n    <span class=\"token comment\">//定时发射</span>\\n        _this<span class=\"token punctuation\">.</span>barrageStatus<span class=\"token punctuation\">.</span>divStatus<span class=\"token punctuation\">.</span>intervalid<span class=\"token operator\">=</span><span class=\"token function\">setInterval</span><span class=\"token punctuation\">(</span> selfTime<span class=\"token punctuation\">,</span><span class=\"token number\">1100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\n        <span class=\"token keyword\">function</span> <span class=\"token function\">selfTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>_this<span class=\"token punctuation\">.</span>dataNum<span class=\"token operator\">>=</span>_this<span class=\"token punctuation\">.</span>barrageStatus<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\\n        <span class=\"token comment\">//当dataNum大于等于数组的数量时，弹幕从头再来一遍</span>\\n            _this<span class=\"token punctuation\">.</span>dataNum<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\\n        <span class=\"token punctuation\">}</span>\\n    <span class=\"token comment\">//设置四个通道的变量，当这几个变量为false的时候，才可发射</span>\\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>divStatus<span class=\"token punctuation\">.</span>div1<span class=\"token operator\">===</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\\n        <span class=\"token comment\">//这里只演示其中一个变量</span>\\n        divStatus<span class=\"token punctuation\">.</span>div1<span class=\"token operator\">=</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\\n        _this<span class=\"token punctuation\">.</span>dataNum<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\\n        <span class=\"token keyword\">return</span> <span class=\"token function\">barrageOut</span><span class=\"token punctuation\">(</span>_this<span class=\"token punctuation\">.</span>barrageStatus<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">[</span>_this<span class=\"token punctuation\">.</span>dataNum<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>content<span class=\"token punctuation\">,</span>_this<span class=\"token punctuation\">.</span>barrageStatus<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">[</span>_this<span class=\"token punctuation\">.</span>dataNum<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>commentator<span class=\"token punctuation\">.</span>headImgUrl<span class=\"token punctuation\">,</span>_this<span class=\"token punctuation\">.</span>dataNum<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\n        <span class=\"token punctuation\">}</span>\\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\\n\\n    <span class=\"token comment\">// 创建弹幕内容，自定义弹幕移动速度</span>\\n    <span class=\"token keyword\">function</span> <span class=\"token function\">barrageOut</span><span class=\"token punctuation\">(</span>text<span class=\"token punctuation\">,</span>imgUrl<span class=\"token punctuation\">,</span>num<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n    <span class=\"token comment\">//text：弹幕的内容,imgUrl:用户的头像,num:数组的第几个</span>\\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>num<span class=\"token operator\">%</span><span class=\"token number\">4</span><span class=\"token operator\">==</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\\n    <span class=\"token comment\">//根据数组下标 创建对应通道的节点 这里也演示其中一个</span>\\n        barrageLayer<span class=\"token operator\">=</span>document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\\'barrageLayer1\\'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\n    <span class=\"token punctuation\">}</span>\\n\\n    <span class=\"token comment\">// 创建dom内容 定义dom style样式</span>\\n    <span class=\"token keyword\">let</span> divBox <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">\\'div\\'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\n    <span class=\"token keyword\">let</span> divBoxImg<span class=\"token operator\">=</span>document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">\\'span\\'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\n    <span class=\"token keyword\">let</span> divBoxText<span class=\"token operator\">=</span>document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">\\'span\\'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\n    divBox<span class=\"token punctuation\">.</span><span class=\"token function\">setAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">\\'class\\'</span><span class=\"token punctuation\">,</span><span class=\"token string\">\\'barrageDivClass\\'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\n    divBoxText<span class=\"token punctuation\">.</span>innerHTML<span class=\"token operator\">=</span>text<span class=\"token punctuation\">;</span>\\n    divBox<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>divBoxImg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\n    divBoxImg<span class=\"token punctuation\">.</span><span class=\"token function\">setAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">\\'class\\'</span><span class=\"token punctuation\">,</span><span class=\"token string\">\\'barrageDivClass_img\\'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\n    divBoxImg<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>backgroundImage<span class=\"token operator\">=</span><span class=\"token template-string\"><span class=\"token string\">`url(</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>imgUrl<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">)`</span></span><span class=\"token punctuation\">;</span>\\n    divBox<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>divBoxText<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\n    divBox<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>left<span class=\"token operator\">=</span>document<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">.</span>clientWidth<span class=\"token operator\">+</span><span class=\"token number\">2000</span><span class=\"token operator\">+</span><span class=\"token string\">\\'px\\'</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 初始化left位置,一开始在屏幕的右侧</span>\\n    barrageLayer<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>divBox<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\n\\n    <span class=\"token comment\">// 定时器移动dom，形成弹幕</span>\\n    <span class=\"token keyword\">let</span> time<span class=\"token punctuation\">,</span>l<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\\n    time<span class=\"token operator\">=</span> <span class=\"token function\">setInterval</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>text<span class=\"token punctuation\">.</span>length<span class=\"token operator\">&lt;</span><span class=\"token number\">15</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\\n        <span class=\"token comment\">// 这里可以根据需求自定义弹幕加载的速度</span>\\n        l<span class=\"token operator\">=</span>l<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\\n        <span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span>\\n        l<span class=\"token operator\">=</span>l<span class=\"token operator\">-</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\\n        <span class=\"token punctuation\">}</span>\\n\\n        <span class=\"token comment\">//通过减少left属性移动这个div 从右往左移动</span>\\n        divBox<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">.</span>clientWidth<span class=\"token operator\">+</span>l<span class=\"token operator\">+</span><span class=\"token string\">\\'px\\'</span><span class=\"token punctuation\">;</span>\\n        <span class=\"token keyword\">let</span> <span class=\"token function-variable function\">delDiv</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">{</span>\\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>num<span class=\"token operator\">%</span><span class=\"token number\">4</span><span class=\"token operator\">==</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\\n                <span class=\"token comment\">//在移动弹幕的过程中判断四个通道是否处于闲置状态 这里只演示其中一个</span>\\n                barrageLayer<span class=\"token operator\">=</span>document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\\'barrageLayer1\\'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\n                <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>barrageLayer<span class=\"token punctuation\">.</span>childNodes<span class=\"token punctuation\">.</span>length<span class=\"token operator\">&lt;</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\\n                <span class=\"token comment\">//判断弹幕数量，如果小于2，设为false，上面的定时器可以继续发射弹幕</span>\\n                divStatus<span class=\"token punctuation\">.</span>div1<span class=\"token operator\">=</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\\n                <span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span>\\n                divStatus<span class=\"token punctuation\">.</span>div1<span class=\"token operator\">=</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\\n                <span class=\"token punctuation\">}</span>\\n            <span class=\"token punctuation\">}</span>\\n        <span class=\"token punctuation\">}</span>\\n        <span class=\"token punctuation\">}</span>\\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> l <span class=\"token operator\">&lt;=</span> <span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token operator\">-</span>divBox<span class=\"token punctuation\">.</span>offsetWidth<span class=\"token operator\">-</span><span class=\"token number\">120</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>_this<span class=\"token punctuation\">.</span>barrageStatus<span class=\"token punctuation\">.</span>divStatus<span class=\"token punctuation\">.</span><span class=\"token keyword\">switch</span><span class=\"token operator\">==</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span> <span class=\"token comment\">//弹幕开关</span>\\n            <span class=\"token function\">delDiv</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>l <span class=\"token operator\">&lt;=</span> <span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token operator\">-</span>divBox<span class=\"token punctuation\">.</span>offsetWidth<span class=\"token operator\">-</span>document<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">.</span>clientWidth<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\\n            <span class=\"token comment\">//不断减少left属性，当小于这个内容的宽度,并且滚了120的时候</span>\\n                barrageLayer<span class=\"token punctuation\">.</span><span class=\"token function\">removeChild</span><span class=\"token punctuation\">(</span>divBox<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//移除dom</span>\\n                <span class=\"token function\">clearInterval</span><span class=\"token punctuation\">(</span>time<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//清除这个div的定时器</span>\\n            <span class=\"token punctuation\">}</span>\\n        <span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span>\\n            <span class=\"token function\">clearInterval</span><span class=\"token punctuation\">(</span>time<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//清除这个div的定时器</span>\\n        <span class=\"token punctuation\">}</span>\\n        <span class=\"token punctuation\">}</span>\\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span>\\n    <span class=\"token punctuation\">}</span>\\n<span class=\"token punctuation\">}</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br><span class=\"line-number\">11</span><br><span class=\"line-number\">12</span><br><span class=\"line-number\">13</span><br><span class=\"line-number\">14</span><br><span class=\"line-number\">15</span><br><span class=\"line-number\">16</span><br><span class=\"line-number\">17</span><br><span class=\"line-number\">18</span><br><span class=\"line-number\">19</span><br><span class=\"line-number\">20</span><br><span class=\"line-number\">21</span><br><span class=\"line-number\">22</span><br><span class=\"line-number\">23</span><br><span class=\"line-number\">24</span><br><span class=\"line-number\">25</span><br><span class=\"line-number\">26</span><br><span class=\"line-number\">27</span><br><span class=\"line-number\">28</span><br><span class=\"line-number\">29</span><br><span class=\"line-number\">30</span><br><span class=\"line-number\">31</span><br><span class=\"line-number\">32</span><br><span class=\"line-number\">33</span><br><span class=\"line-number\">34</span><br><span class=\"line-number\">35</span><br><span class=\"line-number\">36</span><br><span class=\"line-number\">37</span><br><span class=\"line-number\">38</span><br><span class=\"line-number\">39</span><br><span class=\"line-number\">40</span><br><span class=\"line-number\">41</span><br><span class=\"line-number\">42</span><br><span class=\"line-number\">43</span><br><span class=\"line-number\">44</span><br><span class=\"line-number\">45</span><br><span class=\"line-number\">46</span><br><span class=\"line-number\">47</span><br><span class=\"line-number\">48</span><br><span class=\"line-number\">49</span><br><span class=\"line-number\">50</span><br><span class=\"line-number\">51</span><br><span class=\"line-number\">52</span><br><span class=\"line-number\">53</span><br><span class=\"line-number\">54</span><br><span class=\"line-number\">55</span><br><span class=\"line-number\">56</span><br><span class=\"line-number\">57</span><br><span class=\"line-number\">58</span><br><span class=\"line-number\">59</span><br><span class=\"line-number\">60</span><br><span class=\"line-number\">61</span><br><span class=\"line-number\">62</span><br><span class=\"line-number\">63</span><br><span class=\"line-number\">64</span><br><span class=\"line-number\">65</span><br><span class=\"line-number\">66</span><br><span class=\"line-number\">67</span><br><span class=\"line-number\">68</span><br><span class=\"line-number\">69</span><br><span class=\"line-number\">70</span><br><span class=\"line-number\">71</span><br><span class=\"line-number\">72</span><br><span class=\"line-number\">73</span><br><span class=\"line-number\">74</span><br><span class=\"line-number\">75</span><br><span class=\"line-number\">76</span><br><span class=\"line-number\">77</span><br><span class=\"line-number\">78</span><br><span class=\"line-number\">79</span><br><span class=\"line-number\">80</span><br><span class=\"line-number\">81</span><br><span class=\"line-number\">82</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e\\x3c!-- 特殊字符串：用于修改/删除markdown的结尾提示语-OBKoro1 --\\x3e\\n<h3 id=\"点个star支持我一下\"><a class=\"header-anchor\" href=\"#点个star支持我一下\" aria-hidden=\"true\">#</a> 点个<a href=\"https://github.com/OBKoro1/web_accumulate\" target=\"_blank\" rel=\"noopener noreferrer\">Star<OutboundLink/></a>支持我一下~</h3>\\n\\x3c!-- \\'特殊字符串：用于删除编译后的issue组件-OBKoro1 --\\x3e\\n'},{key:\"v-cdee9bdc785bc\",path:\"/accumulate/effect/%E5%A4%8D%E5%88%B6%E7%B2%98%E8%B4%B4%E7%B3%BB%E5%88%97.html\",lastUpdated:1564720698e3,title:\"前端er怎样操作复制粘贴\",headers:[{level:2,title:\"API 介绍:\",slug:\"api-介绍\"},{level:2,title:\"应用:\",slug:\"应用\"},{level:3,title:\"实现类知乎/掘金复制大段文本添加版权信息:\",slug:\"实现类知乎-掘金复制大段文本添加版权信息\"},{level:3,title:\"实现类起点网的防复制功能:\",slug:\"实现类起点网的防复制功能\"},{level:3,title:\"点击复制功能：\",slug:\"点击复制功能：\"},{level:3,title:\"点个Star支持我一下~\",slug:\"点个star支持我一下\"}],excerpt:'<h1 id=\"前端er怎样操作复制粘贴\"><a class=\"header-anchor\" href=\"#前端er怎样操作复制粘贴\" aria-hidden=\"true\">#</a> 前端er怎样操作复制粘贴</h1>\\n<h2 id=\"api-介绍\"><a class=\"header-anchor\" href=\"#api-介绍\" aria-hidden=\"true\">#</a> API 介绍:</h2>\\n<h4 id=\"复制、剪切、粘贴事件：\"><a class=\"header-anchor\" href=\"#复制、剪切、粘贴事件：\" aria-hidden=\"true\">#</a> 复制、剪切、粘贴事件：</h4>\\n<ol>\\n<li><code>copy</code> 发生复制操作时触发;</li>\\n<li><code>cut</code> 发生剪切操作时触发;</li>\\n<li><code>paste</code> 发生粘贴操作时触发;</li>\\n<li>每个事件都有一个 before 事件对应：<code>beforecopy</code>、<code>beforecut</code>、<code>beforepaste</code>;</li>\\n</ol>\\n<p>这几个 before 一般不怎么用，所以我们把注意力放在另外三个事件就可以了。</p>\\n<p><strong>触发条件:</strong></p>\\n<ol>\\n<li>\\n<p>鼠标右键菜单的<code>复制</code>、<code>粘贴</code>、<code>剪切</code>;</p>\\n</li>\\n<li>\\n<p>使用了相应的键盘组合键，比如:<code>command+c</code>、<code>command+v</code>;</p>\\n<p><strong>就算你是随便按的，也会触发事件</strong>。高程中介绍在<code>Chorme</code>、<code>Firefox</code>和<code>Safari</code>中，这几个 before 事件只会在真实会发生剪贴板事件的情况下触发，IE 上则可以触发 before。我实际测试的时候最新版<code>chorme</code>也会乱按也会触发，所以限制应该是在早一点的版本上。</p>\\n<p>so 想说的是：before 这几个事件最好不要用,有关于剪切板的处理最好放在<code>copy</code>、<code>cut</code>、<code>paste</code>上面。</p>\\n</li>\\n</ol>\\n<p><strong>使用姿势：</strong></p>\\n<p>以 copy 为例:</p>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code>document<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">oncopy</span> <span class=\"token operator\">=</span> e <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\\n  <span class=\"token comment\">// 监听全局复制 做点什么</span>\\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\\n<span class=\"token comment\">// 还有这种写法：</span>\\ndocument<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">\\'copy\\'</span><span class=\"token punctuation\">,</span> e <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\\n  <span class=\"token comment\">// 监听全局复制 做点什么</span>\\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<p>上面是在<code>document.body</code>上全局监听的，然而很多人不知道的是，我们还可以为某些 dom 单独添加剪切板事件：</p>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code><span class=\"token comment\">// html结构</span>\\n<span class=\"token operator\">&lt;</span>div id<span class=\"token operator\">=</span><span class=\"token string\">\"test1\"</span><span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\\n<span class=\"token operator\">&lt;</span>div id<span class=\"token operator\">=</span><span class=\"token string\">\"test2\"</span><span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\\n<span class=\"token comment\">// 写法一样：</span>\\n<span class=\"token keyword\">let</span> test1 <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">\\'#test1\\'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\ntest1<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">oncopy</span> <span class=\"token operator\">=</span> e <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\\n    <span class=\"token comment\">// 监听test1发生的复制事件 做点什么</span>\\n    <span class=\"token comment\">// test1发生的复制事件会触发回调，其他地方不会触发回调</span>\\n<span class=\"token punctuation\">}</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<p>其他事件也是一样的，这里就不赘述了。</p>\\n<h4 id=\"clipboarddata-对象-用于访问以及修改剪贴板中的数据\"><a class=\"header-anchor\" href=\"#clipboarddata-对象-用于访问以及修改剪贴板中的数据\" aria-hidden=\"true\">#</a> clipboardData 对象:用于访问以及修改剪贴板中的数据</h4>\\n<p><strong>兼容：</strong></p>\\n<p><strong>不同浏览器，所属的对象不同</strong>：在 IE 中这个对象是<code>window</code>对象的属性，在<code>Chrome</code>、<code>Safari</code>和<code>Firefox</code>中，这个对象是相应的<code>event</code>对象的属性。所以我们在使用的时候，需要做一下如下兼容:</p>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code>document<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">oncopy</span> <span class=\"token operator\">=</span> e <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\\n  <span class=\"token keyword\">let</span> clipboardData <span class=\"token operator\">=</span> e<span class=\"token punctuation\">.</span>clipboardData <span class=\"token operator\">||</span> window<span class=\"token punctuation\">.</span>clipboardData<span class=\"token punctuation\">;</span>\\n  <span class=\"token comment\">// 获取clipboardData对象 + do something</span>\\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<p><strong>对象方法：</strong></p>\\n<p>对象有三个方法: <code>getData()</code>、<code>setData()</code>、<code>clearData()</code></p>\\n<ul>\\n<li>\\n<p><code>getData()</code> 访问剪切板中的数据</p>\\n<p>参数： <code>getData()</code>接受一个<code>\\'text\\'</code>参数，即要取得的数据的格式。</p>\\n<p><strong>在复制、剪切、粘贴触发的事件的数据：</strong></p>\\n<p>实际上在 chorme 上测试只有<code>paste</code>粘贴的时候才能用<code>getData()</code>访问到数据，用法如下：</p>\\n<p><strong>要粘贴的数据：</strong></p>\\n</li>\\n</ul>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code>document<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onpaste</span> <span class=\"token operator\">=</span> e <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\\n  <span class=\"token keyword\">let</span> clipboardData <span class=\"token operator\">=</span> e<span class=\"token punctuation\">.</span>clipboardData <span class=\"token operator\">||</span> window<span class=\"token punctuation\">.</span>clipboardData<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 兼容处理</span>\\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\\'要粘贴的数据\\'</span><span class=\"token punctuation\">,</span> clipboardData<span class=\"token punctuation\">.</span><span class=\"token function\">getData</span><span class=\"token punctuation\">(</span><span class=\"token string\">\\'text\\'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<p><strong>被复制/剪切的数据：</strong></p>\\n<p>在复制和剪切中的数据，需要通过<code>window.getSelection(0).toString()</code>来访问:</p>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code>document<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">oncopy</span> <span class=\"token operator\">=</span> e <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\\'被复制的数据:\\'</span><span class=\"token punctuation\">,</span> window<span class=\"token punctuation\">.</span><span class=\"token function\">getSelection</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<ul>\\n<li>\\n<p><code>setData():</code> 修改剪切板中的数据</p>\\n<p>参数：第一个参数也是<code>\\'text\\'</code>，第二个参数是要放在剪切板中的文本。</p>\\n<p>剩下的留在下面仿知乎/掘金复制大段文本添加版权信息那里再说。</p>\\n</li>\\n<li>\\n<p><code>clearData()</code> :</p>\\n<p>这个方法就不太知道了，试了好久不知道怎么用(如果有大佬知道，可以在评论区指点一下)。</p>\\n<p>如果只是为了禁止复制，或者禁止粘贴，在下面还有另外的方法可以做到，并且可以细粒化操作。</p>\\n</li>\\n</ul>\\n<hr>\\n<h2 id=\"应用\"><a class=\"header-anchor\" href=\"#应用\" aria-hidden=\"true\">#</a> 应用:</h2>\\n<p>如果学习不是为了装 X，那么一切将毫无意义，来看这个东西可以在哪些场景使用：</p>\\n<h3 id=\"实现类知乎-掘金复制大段文本添加版权信息\"><a class=\"header-anchor\" href=\"#实现类知乎-掘金复制大段文本添加版权信息\" aria-hidden=\"true\">#</a> 实现类知乎/掘金复制大段文本添加版权信息:</h3>\\n<p>实现很简单：取消默认复制之后，主要是在被复制的内容后面添加信息，然后根据 clipboardData 的 setData()方法将信息写入剪贴板。</p>\\n<p>可以直接复制这段代码到本地去试试。</p>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code><span class=\"token comment\">// 掘金这里不是全局监听，应该只是监听文章的dom范围内。</span>\\ndocument<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">oncopy</span> <span class=\"token operator\">=</span> event <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\\n  event<span class=\"token punctuation\">.</span><span class=\"token function\">preventDefault</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 取消默认的复制事件</span>\\n  <span class=\"token keyword\">let</span> textFont<span class=\"token punctuation\">,</span>\\n    copyFont <span class=\"token operator\">=</span> window<span class=\"token punctuation\">.</span><span class=\"token function\">getSelection</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 被复制的文字 等下插入</span>\\n  <span class=\"token comment\">// 防知乎掘金 复制一两个字则不添加版权信息 超过一定长度的文字 就添加版权信息</span>\\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>copyFont<span class=\"token punctuation\">.</span>length <span class=\"token operator\">></span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n    textFont <span class=\"token operator\">=</span>\\n      copyFont <span class=\"token operator\">+</span>\\n      <span class=\"token string\">\\'\\\\n\\'</span> <span class=\"token operator\">+</span>\\n      <span class=\"token string\">\\'作者：OBKoro1\\\\n\\'</span> <span class=\"token operator\">+</span>\\n      <span class=\"token string\">\\'链接：https://juejin.im/user/58714f0eb123db4a2eb95372/posts\\\\n\\'</span> <span class=\"token operator\">+</span>\\n      <span class=\"token string\">\\'来源：掘金\\\\n\\'</span> <span class=\"token operator\">+</span>\\n      <span class=\"token string\">\\'著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。\\'</span><span class=\"token punctuation\">;</span>\\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\\n    textFont <span class=\"token operator\">=</span> copyFont<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 没超过十个字 则采用被复制的内容。</span>\\n  <span class=\"token punctuation\">}</span>\\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">.</span>clipboardData<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n    <span class=\"token keyword\">return</span> event<span class=\"token punctuation\">.</span>clipboardData<span class=\"token punctuation\">.</span><span class=\"token function\">setData</span><span class=\"token punctuation\">(</span><span class=\"token string\">\\'text\\'</span><span class=\"token punctuation\">,</span> textFont<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 将信息写入粘贴板</span>\\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\\n    <span class=\"token comment\">// 兼容IE</span>\\n    <span class=\"token keyword\">return</span> window<span class=\"token punctuation\">.</span>clipboardData<span class=\"token punctuation\">.</span><span class=\"token function\">setData</span><span class=\"token punctuation\">(</span><span class=\"token string\">\\'text\\'</span><span class=\"token punctuation\">,</span> textFont<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\n  <span class=\"token punctuation\">}</span>\\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br><span class=\"line-number\">11</span><br><span class=\"line-number\">12</span><br><span class=\"line-number\">13</span><br><span class=\"line-number\">14</span><br><span class=\"line-number\">15</span><br><span class=\"line-number\">16</span><br><span class=\"line-number\">17</span><br><span class=\"line-number\">18</span><br><span class=\"line-number\">19</span><br><span class=\"line-number\">20</span><br><span class=\"line-number\">21</span><br><span class=\"line-number\">22</span><br><span class=\"line-number\">23</span><br><span class=\"line-number\">24</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<p>然后 command+c、command+v，输出:</p>\\n<pre><code>你复制的内容\\n作者：OBKoro1\\n链接：https://juejin.im/user/58714f0eb123db4a2eb95372/posts\\n来源：掘金\\n著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。\\n</code></pre>\\n<h3 id=\"实现类起点网的防复制功能\"><a class=\"header-anchor\" href=\"#实现类起点网的防复制功能\" aria-hidden=\"true\">#</a> 实现类起点网的防复制功能:</h3>\\n<ul>\\n<li>禁止复制+剪切</li>\\n<li>禁止右键，右键某些选项:全选，复制，粘贴等。</li>\\n<li>禁用文字选择，能选择却不能复制，体验很差。</li>\\n<li>user-select 用 css 禁止选择文本。</li>\\n</ul>\\n<p>可以把代码拷到本地玩一玩：</p>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code><span class=\"token comment\">// 禁止右键菜单</span>\\ndocument<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">oncontextmenu</span> <span class=\"token operator\">=</span> e <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">,</span> <span class=\"token string\">\\'右键\\'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\n    <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\\n    <span class=\"token comment\">// e.preventDefault();</span>\\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\\n<span class=\"token comment\">// 禁止文字选择。</span>\\ndocument<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onselectstart</span> <span class=\"token operator\">=</span> e <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">,</span> <span class=\"token string\">\\'文字选择\\'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\n    <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\\n    <span class=\"token comment\">// e.preventDefault();</span>\\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\\n<span class=\"token comment\">// 禁止复制</span>\\ndocument<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">oncopy</span> <span class=\"token operator\">=</span> e <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">,</span> <span class=\"token string\">\\'copy\\'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\n    <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\\n    <span class=\"token comment\">// e.preventDefault();</span>\\n<span class=\"token punctuation\">}</span>\\n<span class=\"token comment\">// 禁止剪切</span>\\ndocument<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">oncut</span> <span class=\"token operator\">=</span> e <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">,</span> <span class=\"token string\">\\'cut\\'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\n    <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\\n    <span class=\"token comment\">// e.preventDefault();</span>\\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\\n<span class=\"token comment\">// 禁止粘贴</span>\\ndocument<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onpaste</span> <span class=\"token operator\">=</span> e <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">,</span> <span class=\"token string\">\\'paste\\'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\n    <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\\n    <span class=\"token comment\">// e.preventDefault();</span>\\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\\n<span class=\"token comment\">// css 禁止文本选择 这样不会触发js</span>\\nbody <span class=\"token punctuation\">{</span>\\n    user<span class=\"token operator\">-</span>select<span class=\"token punctuation\">:</span> none<span class=\"token punctuation\">;</span>\\n    <span class=\"token operator\">-</span>moz<span class=\"token operator\">-</span>user<span class=\"token operator\">-</span>select<span class=\"token punctuation\">:</span> none<span class=\"token punctuation\">;</span>\\n    <span class=\"token operator\">-</span>webkit<span class=\"token operator\">-</span>user<span class=\"token operator\">-</span>select<span class=\"token punctuation\">:</span> none<span class=\"token punctuation\">;</span>\\n    <span class=\"token operator\">-</span>ms<span class=\"token operator\">-</span>user<span class=\"token operator\">-</span>select<span class=\"token punctuation\">:</span> none<span class=\"token punctuation\">;</span>\\n<span class=\"token punctuation\">}</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br><span class=\"line-number\">11</span><br><span class=\"line-number\">12</span><br><span class=\"line-number\">13</span><br><span class=\"line-number\">14</span><br><span class=\"line-number\">15</span><br><span class=\"line-number\">16</span><br><span class=\"line-number\">17</span><br><span class=\"line-number\">18</span><br><span class=\"line-number\">19</span><br><span class=\"line-number\">20</span><br><span class=\"line-number\">21</span><br><span class=\"line-number\">22</span><br><span class=\"line-number\">23</span><br><span class=\"line-number\">24</span><br><span class=\"line-number\">25</span><br><span class=\"line-number\">26</span><br><span class=\"line-number\">27</span><br><span class=\"line-number\">28</span><br><span class=\"line-number\">29</span><br><span class=\"line-number\">30</span><br><span class=\"line-number\">31</span><br><span class=\"line-number\">32</span><br><span class=\"line-number\">33</span><br><span class=\"line-number\">34</span><br><span class=\"line-number\">35</span><br><span class=\"line-number\">36</span><br><span class=\"line-number\">37</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<p>PS：</p>\\n<ul>\\n<li>使用<code>e.preventDefault()</code>也可以禁用，但建议使用<code>return false</code>这样就不用去访问<code>e</code>和<code>e</code>的方法了。</li>\\n<li>示例中<code>document.body</code>全局都禁用了，也可以对 dom(某些区域)进行禁用。</li>\\n</ul>\\n<p><strong>破解防复制</strong>：</p>\\n<p>上面的防复制方法通过<code>js</code>+<code>css</code>实现的，所以<strong>思路就是</strong>：禁用<code>js</code>+取消<code>user-select</code>样式。</p>\\n<p><code>Chrome</code>浏览器的话：打开浏览器控制台，按<code>F1</code>进入<code>Setting</code>，勾选<code>Disable JavaScript</code>(禁止 js)。</p>\\n<p><img src=\"https://github.com/OBKoro1/articleImg_src/blob/master/juejin/16518cf40dd44b7c?raw=true\" alt=\"\"></p>\\n<p>此时如果还不能复制的话，就要去找<code>user-select</code>样式,取消这个样式就可以了。</p>\\n<p><img src=\"https://github.com/OBKoro1/articleImg_src/blob/master/juejin/16518d4625634931?raw=true\" alt=\"\"></p>\\n<p>所以那些盗版小说手打的，我真的不太能理解，Excuse me？？？</p>\\n<h3 id=\"点击复制功能：\"><a class=\"header-anchor\" href=\"#点击复制功能：\" aria-hidden=\"true\">#</a> 点击复制功能：</h3>\\n<p><strong>不能使用 clipboardData：</strong></p>\\n<p>在 IE 中可以用<code>window.clipboardData.setData(\\'text\\',\\'内容\\')</code>实现。</p>\\n<p>上文提到过，在 IE 中<code>clipboardData</code>是<code>window</code>的属性。</p>\\n<p>而其他浏览器则是相应的<code>event</code>对象的属性，这实际上是一种安全措施，防止未经授权的访问,为了兼容其他浏览器，所以我们不能通过<code>clipboardData</code>来实现这种操作。</p>\\n<p><strong>具体做法：</strong></p>\\n<ul>\\n<li>\\n<p>创建一个隐藏的<code>input</code>框</p>\\n</li>\\n<li>\\n<p>点击的时候，将要复制的内容放进<code>input</code>框中</p>\\n</li>\\n<li>\\n<p>选择文本内容<code>input.select()</code></p>\\n<p>这里只能用<code>input</code>或者<code>textarea</code>才能选择文本。</p>\\n</li>\\n<li>\\n<p>document.execCommand(&quot;copy&quot;)，执行浏览器的复制命令。</p>\\n</li>\\n</ul>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">copyText</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n  <span class=\"token keyword\">var</span> text <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\\'text\\'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>innerText<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 获取要复制的内容也可以传进来</span>\\n  <span class=\"token keyword\">var</span> input <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\\'input\\'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 获取隐藏input的dom</span>\\n  input<span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> text<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 修改文本框的内容</span>\\n  input<span class=\"token punctuation\">.</span><span class=\"token function\">select</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 选中文本</span>\\n  document<span class=\"token punctuation\">.</span><span class=\"token function\">execCommand</span><span class=\"token punctuation\">(</span><span class=\"token string\">\\'copy\\'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 执行浏览器复制命令</span>\\n  <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">\\'复制成功\\'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\n<span class=\"token punctuation\">}</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<p><a href=\"https://codepen.io/OBKoro1/pen/mjjEGa\" target=\"_blank\" rel=\"noopener noreferrer\">点击复制内容<OutboundLink/></a>的 demo 在这里，可以点进去看看。\\n\\x3c!-- 特殊字符串：用于修改/删除markdown的结尾提示语-OBKoro1 --\\x3e</p>\\n<h3 id=\"点个star支持我一下\"><a class=\"header-anchor\" href=\"#点个star支持我一下\" aria-hidden=\"true\">#</a> 点个<a href=\"https://github.com/OBKoro1/web_accumulate\" target=\"_blank\" rel=\"noopener noreferrer\">Star<OutboundLink/></a>支持我一下~</h3>\\n\\x3c!-- \\'特殊字符串：用于删除编译后的issue组件-OBKoro1 --\\x3e\\n'},{key:\"v-0b339122c1008\",path:\"/accumulate/effect/%E6%97%B6%E9%97%B4%E5%B7%AE%E4%B8%8E%E6%97%B6%E5%8C%BA%E8%BD%AC%E6%8D%A2.html\",lastUpdated:1564720698e3,title:\"计算两个时间的时间差&时区转换\",headers:[{level:2,title:\"计算两个时间的时间差&时区转换\",slug:\"计算两个时间的时间差-时区转换\"},{level:3,title:\"计算两个时间的时间差：\",slug:\"计算两个时间的时间差：\"},{level:3,title:\"时区转换\",slug:\"时区转换\"},{level:3,title:\"点个Star支持我一下~\",slug:\"点个star支持我一下\"}],excerpt:'<h2 id=\"计算两个时间的时间差-时区转换\"><a class=\"header-anchor\" href=\"#计算两个时间的时间差-时区转换\" aria-hidden=\"true\">#</a> 计算两个时间的时间差&amp;时区转换</h2>\\n<h3 id=\"计算两个时间的时间差：\"><a class=\"header-anchor\" href=\"#计算两个时间的时间差：\" aria-hidden=\"true\">#</a> 计算两个时间的时间差：</h3>\\n<ol>\\n<li>\\n<p>获取两个时间数据，通常这两个时间是：后端给的时间数据和当前时间</p>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code><span class=\"token keyword\">let</span> dateBegin <span class=\"token operator\">=</span> <span class=\"token string\">\\'2018/08/28 04:56:38\\'</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 初始时间</span>\\ndateBegin <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span>dateBegin<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\n<span class=\"token comment\">// Mon Aug 28 2017 04:56:38 GMT+0800 (中国标准时间)</span>\\n<span class=\"token comment\">// 上面是Date对象的数据形式</span>\\n<span class=\"token keyword\">let</span> dateEnd <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 第二个数据通常是当前时间</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e</li>\\n<li>\\n<p>使用<code>getTime()</code>返回与固定的 1970 年 1 月 1 日的时间差，再用大的时间减去短的时间即可得出双方相差的毫秒数。</p>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code><span class=\"token keyword\">let</span> dateDiff <span class=\"token operator\">=</span> dateEnd<span class=\"token punctuation\">.</span><span class=\"token function\">getTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> dateBegin<span class=\"token punctuation\">.</span><span class=\"token function\">getTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e</li>\\n<li>\\n<p>换算成你想要的时间单位，得出两个时间的时间差。</p>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code><span class=\"token comment\">// 计算出相差天数</span>\\n<span class=\"token keyword\">let</span> dayDiff <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">floor</span><span class=\"token punctuation\">(</span>dateDiff <span class=\"token operator\">/</span> <span class=\"token punctuation\">(</span><span class=\"token number\">24</span> <span class=\"token operator\">*</span> <span class=\"token number\">3600</span> <span class=\"token operator\">*</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\n\\n<span class=\"token comment\">// 计算天数后剩余的毫秒数 利用这个时间去计算小时</span>\\n<span class=\"token keyword\">let</span> leave1 <span class=\"token operator\">=</span> dateDiff <span class=\"token operator\">%</span> <span class=\"token punctuation\">(</span><span class=\"token number\">24</span> <span class=\"token operator\">*</span> <span class=\"token number\">3600</span> <span class=\"token operator\">*</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\n<span class=\"token comment\">// 计算出小时数</span>\\n<span class=\"token keyword\">let</span> hours <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">floor</span><span class=\"token punctuation\">(</span>leave1 <span class=\"token operator\">/</span> <span class=\"token punctuation\">(</span><span class=\"token number\">3600</span> <span class=\"token operator\">*</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\n<span class=\"token comment\">// 计算相差分钟数</span>\\n<span class=\"token keyword\">let</span> leave2 <span class=\"token operator\">=</span> leave1 <span class=\"token operator\">%</span> <span class=\"token punctuation\">(</span><span class=\"token number\">3600</span> <span class=\"token operator\">*</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 计算小时数后剩余的毫秒数</span>\\n<span class=\"token keyword\">let</span> minutes <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">floor</span><span class=\"token punctuation\">(</span>leave2 <span class=\"token operator\">/</span> <span class=\"token punctuation\">(</span><span class=\"token number\">60</span> <span class=\"token operator\">*</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 计算相差分钟数</span>\\n<span class=\"token comment\">// 计算相差秒数</span>\\n<span class=\"token keyword\">let</span> leave3 <span class=\"token operator\">=</span> leave2 <span class=\"token operator\">%</span> <span class=\"token punctuation\">(</span><span class=\"token number\">60</span> <span class=\"token operator\">*</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 计算分钟数后剩余的毫秒数</span>\\n<span class=\"token keyword\">let</span> seconds <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">round</span><span class=\"token punctuation\">(</span>leave3 <span class=\"token operator\">/</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\n\\n<span class=\"token comment\">// 结果</span>\\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token string\">`相差</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>dayDiff<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">天</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>hours<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">小时</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>minutes<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">分钟</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>seconds<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">秒`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br><span class=\"line-number\">11</span><br><span class=\"line-number\">12</span><br><span class=\"line-number\">13</span><br><span class=\"line-number\">14</span><br><span class=\"line-number\">15</span><br><span class=\"line-number\">16</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e</li>\\n</ol>\\n<p>如果你只想计算相差的小时数，不想管天数：</p>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code><span class=\"token keyword\">let</span> dayDiff <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">floor</span><span class=\"token punctuation\">(</span>dateDiff <span class=\"token operator\">/</span> <span class=\"token punctuation\">(</span><span class=\"token number\">3600</span> <span class=\"token operator\">*</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 其他的同理，倍数正确即可</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<h3 id=\"时区转换\"><a class=\"header-anchor\" href=\"#时区转换\" aria-hidden=\"true\">#</a> 时区转换</h3>\\n<p><strong>需求</strong>：</p>\\n<p>拿到这么一串字符串：<code>2018-09-17</code>，要与当前的日期比较，求出日期差。</p>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code><span class=\"token keyword\">let</span> time <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token string\">`2018-09-17`</span></span><span class=\"token punctuation\">;</span>\\n<span class=\"token keyword\">let</span> dateBegin <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span>time<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\n<span class=\"token keyword\">let</span> dateEnd <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 这一秒的时间 需重新设置</span>\\ndateEnd<span class=\"token punctuation\">.</span><span class=\"token function\">setHours</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\n<span class=\"token comment\">// 计算时间差 参照上文</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<p><strong>东八区的时间</strong>：</p>\\n<p>上面<code>new Date(time)</code>之后拿到的是零时区 0 点的时间，在东八区也就是北京时间<code>08:00:00</code>。</p>\\n<p>而我们第二个时间设置的是北京时间<code>00:00:00</code>，这里面就出现了八个小时的误差。</p>\\n<p><strong>转换时区的三种方法</strong>：</p>\\n<ol>\\n<li>\\n<p>设置世界时为当前时区的时间：</p>\\n<p>设置具体的时间，传进<code>new Date()</code>的时候会自动转成北京时间<code>00:00:00</code>，然后两个时间就可以同步了。</p>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code><span class=\"token keyword\">let</span> time <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token string\">`2018-09-17`</span></span><span class=\"token punctuation\">;</span>\\ntime <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>time<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> 00:00:00`</span></span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 后面加上具体时间</span>\\n<span class=\"token keyword\">let</span> dateBegin <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span>time<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\n<span class=\"token keyword\">let</span> dateEnd <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 这一秒的时间 需重新设置</span>\\ndateEnd<span class=\"token punctuation\">.</span><span class=\"token function\">setHours</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\n<span class=\"token comment\">// 计算时间差 参照上文</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<p>也可以使用<code>setHours</code>：</p>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code><span class=\"token keyword\">let</span> time <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token string\">`2018-09-17`</span></span><span class=\"token punctuation\">;</span>\\n<span class=\"token keyword\">let</span> dateBegin <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span>time<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\ndateBegin<span class=\"token punctuation\">.</span><span class=\"token function\">setHours</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// new Date()之后 设为0点 两个时间同步</span>\\n<span class=\"token keyword\">let</span> dateEnd <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 这一秒的时间 需重新设置</span>\\ndateEnd<span class=\"token punctuation\">.</span><span class=\"token function\">setHours</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\n<span class=\"token comment\">// 计算时间差 参照上文</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e</li>\\n<li>\\n<p>当前时区与世界时同步：</p>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code><span class=\"token keyword\">let</span> time <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token string\">`2018-09-17`</span></span><span class=\"token punctuation\">;</span>\\n<span class=\"token keyword\">let</span> dateBegin <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span>time<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\n<span class=\"token keyword\">let</span> dateEnd <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 这一秒的时间 需重新设置</span>\\ndateEnd<span class=\"token punctuation\">.</span><span class=\"token function\">setHours</span><span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 设置为八点与世界时一致</span>\\n<span class=\"token comment\">// 计算时间差 参照上文</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e</li>\\n<li>\\n<p>你可能不知道当前时区与世界时相差多少</p>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code><span class=\"token keyword\">let</span> time <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token string\">`2018-09-17`</span></span><span class=\"token punctuation\">;</span>\\n<span class=\"token keyword\">let</span> dateBegin <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span>time<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\n<span class=\"token keyword\">let</span> dateEnd <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 这一秒的时间 需重新设置</span>\\ndateEnd<span class=\"token punctuation\">.</span><span class=\"token function\">setUTCHours</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 设置为世界时的0点 也就是北京时间八点</span>\\n<span class=\"token comment\">// 计算时间差 参照上文</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e</li>\\n</ol>\\n<p>以上：2018.09.21\\n\\x3c!-- 特殊字符串：用于修改/删除markdown的结尾提示语-OBKoro1 --\\x3e</p>\\n<h3 id=\"点个star支持我一下\"><a class=\"header-anchor\" href=\"#点个star支持我一下\" aria-hidden=\"true\">#</a> 点个<a href=\"https://github.com/OBKoro1/web_accumulate\" target=\"_blank\" rel=\"noopener noreferrer\">Star<OutboundLink/></a>支持我一下~</h3>\\n\\x3c!-- \\'特殊字符串：用于删除编译后的issue组件-OBKoro1 --\\x3e\\n'},{key:\"v-9601d2a1b9766\",path:\"/accumulate/effect/%E6%B5%8F%E8%A7%88%E5%99%A8%E6%A1%8C%E9%9D%A2%E9%80%9A%E7%9F%A5.html\",lastUpdated:1564720698e3,title:\"H5 notification浏览器桌面通知\",headers:[{level:2,title:\"H5 notification浏览器桌面通知\",slug:\"h5-notification浏览器桌面通知\"},{level:3,title:\"npm包：\",slug:\"npm包：\"},{level:3,title:\"chrome下Notification的表现：\",slug:\"chrome下notification的表现：\"},{level:3,title:\"Notification特性\",slug:\"notification特性\"},{level:3,title:\"栗子：去各个网站里面的控制台去运行\",slug:\"栗子：去各个网站里面的控制台去运行\"},{level:3,title:\"浏览器支持：\",slug:\"浏览器支持：\"},{level:3,title:\"通知权限：\",slug:\"通知权限：\"},{level:3,title:\"检测权限：\",slug:\"检测权限：\"},{level:3,title:\"请求权限\",slug:\"请求权限\"},{level:3,title:\"推送通知\",slug:\"推送通知\"},{level:3,title:\"Notification的参数：\",slug:\"notification的参数：\"},{level:2,title:\"Notification的实例：\",slug:\"notification的实例：\"},{level:3,title:\"通知的配置：\",slug:\"通知的配置：\"},{level:3,title:\"事件处理：\",slug:\"事件处理：\"},{level:3,title:\"关闭通知\",slug:\"关闭通知\"},{level:3,title:\"应用场景\",slug:\"应用场景\"},{level:2,title:\"notification其他\",slug:\"notification其他\"},{level:3,title:\"用户拒绝显示通知：\",slug:\"用户拒绝显示通知：\"},{level:3,title:\"关闭请求权限：\",slug:\"关闭请求权限：\"},{level:3,title:\"icon不显示问题：\",slug:\"icon不显示问题：\"},{level:3,title:\"tag：\",slug:\"tag：\"},{level:3,title:\"safari下面不能显示icon\",slug:\"safari下面不能显示icon\"},{level:3,title:\"连续触发\",slug:\"连续触发\"},{level:3,title:\"notification-Koro1：\",slug:\"notification-koro1：\"},{level:2,title:\"结语\",slug:\"结语\"},{level:3,title:\"点个Star支持我一下~\",slug:\"点个star支持我一下\"}],excerpt:'<h2 id=\"h5-notification浏览器桌面通知\"><a class=\"header-anchor\" href=\"#h5-notification浏览器桌面通知\" aria-hidden=\"true\">#</a> H5 notification浏览器桌面通知</h2>\\n<p><img src=\"https://github.com/OBKoro1/articleImg_src/blob/master/weibo_img_move/005Y4rCogy1g0brdnk332j30xc0dwjtz.jpg?raw=true\" alt=\"\"></p>\\n<p><code>Notification</code>是HTML5新增的API，用于向用户配置和显示桌面通知。上次在别的网站上看到别人的通知弹窗，好奇之余也想知道如何实现的。实际去查一下发现并不复杂，且可以说比较简单，故写篇博客分享给大家,希望能帮你们了解这个API。</p>\\n<h3 id=\"npm包：\"><a class=\"header-anchor\" href=\"#npm包：\" aria-hidden=\"true\">#</a> npm包：</h3>\\n<p>我还发了一个npm包:<a href=\"https://github.com/OBKoro1/notification-Koro1\" target=\"_blank\" rel=\"noopener noreferrer\">notification-Koro1<OutboundLink/></a>，非常轻量简洁，觉得不错的话，点个Star吧~</p>\\n<h3 id=\"chrome下notification的表现：\"><a class=\"header-anchor\" href=\"#chrome下notification的表现：\" aria-hidden=\"true\">#</a> chrome下<code>Notification</code>的表现：</h3>\\n<ol>\\n<li>以谷歌为例，一开始需要用户允许通知：</li>\\n</ol>\\n<p><img src=\"https://github.com/OBKoro1/articleImg_src/blob/master/weibo_img_move/005Y4rCogy1fzskpfbfmbj30hs078q36.jpg?raw=true\" alt=\"\"></p>\\n<ol start=\"2\">\\n<li>允许通知之后，显示的通知长这样：</li>\\n</ol>\\n<p><img src=\"https://github.com/OBKoro1/articleImg_src/blob/master/weibo_img_move/005Y4rCogy1fzyaxnnc25j30kg03wjrs.jpg?raw=true\" alt=\"\"></p>\\n<h3 id=\"notification特性\"><a class=\"header-anchor\" href=\"#notification特性\" aria-hidden=\"true\">#</a> <code>Notification</code>特性</h3>\\n<ol>\\n<li>\\n<p><strong>该通知是脱离浏览器的，即使用户没有停留在当前标签页，甚至最小化了浏览器，也会在主屏幕的右上角显示通知，然后在一段时间后消失</strong>。</p>\\n</li>\\n<li>\\n<p><strong>我们可以监听通知的显示，点击，关闭等事件</strong>,比如点击通知打开一个页面。</p>\\n</li>\\n</ol>\\n<blockquote>\\n<p><a href=\"http://obkoro1.com/\" target=\"_blank\" rel=\"noopener noreferrer\">博客<OutboundLink/></a>、<a href=\"http://obkoro1.com/web_accumulate/accumulate/\" target=\"_blank\" rel=\"noopener noreferrer\">前端积累文档<OutboundLink/></a>、<a href=\"https://github.com/OBKoro1/articleImg_src/blob/master/juejin/1631b6f52f7e7015.jpeg?raw=true\" target=\"_blank\" rel=\"noopener noreferrer\">公众号<OutboundLink/></a>、<a href=\"https://github.com/OBKoro1\" target=\"_blank\" rel=\"noopener noreferrer\">GitHub<OutboundLink/></a></p>\\n</blockquote>\\n<h3 id=\"栗子：去各个网站里面的控制台去运行\"><a class=\"header-anchor\" href=\"#栗子：去各个网站里面的控制台去运行\" aria-hidden=\"true\">#</a> 栗子：去各个网站里面的控制台去运行</h3>\\n<p>API的具体细节，等下再说，先试试这个API~</p>\\n<p>下面是一个简单的栗子，大家<strong>可以先在各个网站的控制台里面运行查看<code>Notification</code>的效果</strong>：</p>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code><span class=\"token keyword\">var</span> options <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\\n  dir<span class=\"token punctuation\">:</span> <span class=\"token string\">\"auto\"</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 文字方向</span>\\n  body<span class=\"token punctuation\">:</span> <span class=\"token string\">\"通知：OBKoro1评论了你的朋友圈\"</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 通知主体</span>\\n  requireInteraction<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 不自动关闭通知</span>\\n  <span class=\"token comment\">// 通知图标 </span>\\n  icon<span class=\"token punctuation\">:</span> <span class=\"token string\">\"https://upload-images.jianshu.io/upload_images/5245297-818e624b75271127.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"</span>\\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\\n<span class=\"token function\">notifyMe</span><span class=\"token punctuation\">(</span><span class=\"token string\">\\'这是通知的标题\\'</span><span class=\"token punctuation\">,</span> options<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\n<span class=\"token keyword\">function</span> <span class=\"token function\">notifyMe</span><span class=\"token punctuation\">(</span>title<span class=\"token punctuation\">,</span> options<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n  <span class=\"token comment\">// 先检查浏览器是否支持</span>\\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>window<span class=\"token punctuation\">.</span>Notification<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\\'浏览器不支持通知\\'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\\n    <span class=\"token comment\">// 检查用户曾经是否同意接受通知</span>\\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>Notification<span class=\"token punctuation\">.</span>permission <span class=\"token operator\">===</span> <span class=\"token string\">\\'granted\\'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n      <span class=\"token keyword\">var</span> notification <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Notification</span><span class=\"token punctuation\">(</span>title<span class=\"token punctuation\">,</span> options<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 显示通知</span>\\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>Notification<span class=\"token punctuation\">.</span>permission <span class=\"token operator\">===</span> <span class=\"token string\">\\'default\\'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n      <span class=\"token comment\">// 用户还未选择，可以询问用户是否同意发送通知</span>\\n      Notification<span class=\"token punctuation\">.</span><span class=\"token function\">requestPermission</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span>permission <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>permission <span class=\"token operator\">===</span> <span class=\"token string\">\\'granted\\'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n          console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\\'用户同意授权\\'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\n          <span class=\"token keyword\">var</span> notification <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Notification</span><span class=\"token punctuation\">(</span>title<span class=\"token punctuation\">,</span> options<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 显示通知</span>\\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>permission <span class=\"token operator\">===</span> <span class=\"token string\">\\'default\\'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n          console<span class=\"token punctuation\">.</span><span class=\"token function\">warn</span><span class=\"token punctuation\">(</span><span class=\"token string\">\\'用户关闭授权 未刷新页面之前 可以再次请求授权\\'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\\n          <span class=\"token comment\">// denied</span>\\n          console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\\'用户拒绝授权 不能显示通知\\'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\n        <span class=\"token punctuation\">}</span>\\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\\n      <span class=\"token comment\">// denied 用户拒绝</span>\\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\\'用户曾经拒绝显示通知\\'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\n    <span class=\"token punctuation\">}</span>\\n  <span class=\"token punctuation\">}</span>\\n<span class=\"token punctuation\">}</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br><span class=\"line-number\">11</span><br><span class=\"line-number\">12</span><br><span class=\"line-number\">13</span><br><span class=\"line-number\">14</span><br><span class=\"line-number\">15</span><br><span class=\"line-number\">16</span><br><span class=\"line-number\">17</span><br><span class=\"line-number\">18</span><br><span class=\"line-number\">19</span><br><span class=\"line-number\">20</span><br><span class=\"line-number\">21</span><br><span class=\"line-number\">22</span><br><span class=\"line-number\">23</span><br><span class=\"line-number\">24</span><br><span class=\"line-number\">25</span><br><span class=\"line-number\">26</span><br><span class=\"line-number\">27</span><br><span class=\"line-number\">28</span><br><span class=\"line-number\">29</span><br><span class=\"line-number\">30</span><br><span class=\"line-number\">31</span><br><span class=\"line-number\">32</span><br><span class=\"line-number\">33</span><br><span class=\"line-number\">34</span><br><span class=\"line-number\">35</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<hr>\\n<h3 id=\"浏览器支持：\"><a class=\"header-anchor\" href=\"#浏览器支持：\" aria-hidden=\"true\">#</a> 浏览器支持：</h3>\\n<p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/notification#%E6%B5%8F%E8%A7%88%E5%99%A8%E5%85%BC%E5%AE%B9%E6%80%A7\" target=\"_blank\" rel=\"noopener noreferrer\">MDN<OutboundLink/></a>：目前<code>Notification</code>除了IE浏览器不支持外, 其他浏览器都已支持桌面通知，移动端浏览器基本都未支持。</p>\\n<p>因为兼容性问题，所以在使用<code>Notification</code>之前，我们需要查看浏览器是否支持<code>Notification</code>这个API：</p>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code><span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>window<span class=\"token punctuation\">.</span>Notification<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\\n  <span class=\"token comment\">// 桌面通知的逻辑</span>\\n<span class=\"token punctuation\">}</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<h3 id=\"通知权限：\"><a class=\"header-anchor\" href=\"#通知权限：\" aria-hidden=\"true\">#</a> 通知权限：</h3>\\n<p>为了避免网站滥用通知扰民，在向用户显示通知之前，需要经过用户同意。</p>\\n<p><code>Notification.permission</code> <strong>用于表明当前通知显示的授权状态</strong>,它有三个值：</p>\\n<ol>\\n<li><code>default</code>: 默认值，用户还未选择</li>\\n<li><code>granted</code>: 用户允许该网站发送通知</li>\\n<li><code>denied</code>: 用户拒绝该网站发送通知</li>\\n</ol>\\n<h3 id=\"检测权限：\"><a class=\"header-anchor\" href=\"#检测权限：\" aria-hidden=\"true\">#</a> 检测权限：</h3>\\n<p>检测浏览器是否支持<code>Notification</code>之后，需要检测一下用户通知权限。</p>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>Notification<span class=\"token punctuation\">.</span>permission <span class=\"token operator\">===</span> <span class=\"token string\">\\'granted\\'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\\'用户曾经同意授权\\'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\n     <span class=\"token comment\">// 随时可以显示通知</span>\\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>Notification<span class=\"token punctuation\">.</span>permission <span class=\"token operator\">===</span> <span class=\"token string\">\\'default\\'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\\'用户还未选择同意/拒绝\\'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\n    <span class=\"token comment\">// 下一步请求用户授权</span>\\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\\'用户曾经拒绝授权 不能显示通知\\'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\n  <span class=\"token punctuation\">}</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<h3 id=\"请求权限\"><a class=\"header-anchor\" href=\"#请求权限\" aria-hidden=\"true\">#</a> 请求权限</h3>\\n<p>当<code>Notification.permission</code>为<code>default</code>的时候，我们需要使用<code>Notification.requestPermission()</code>来请求用户权限。</p>\\n<p><code>Notification.requestPermission()</code>基于promise语法，then的回调函数参数是用户权限的状态<code>Notification.permission</code>的值。</p>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code>Notification<span class=\"token punctuation\">.</span><span class=\"token function\">requestPermission</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span>permission <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>permission <span class=\"token operator\">===</span> <span class=\"token string\">\\'granted\\'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\\'用户同意授权\\'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\n     <span class=\"token comment\">// 随时可以显示通知</span>\\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>permission <span class=\"token operator\">===</span> <span class=\"token string\">\\'default\\'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\\'用户关闭授权 可以再次请求授权\\'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\\'用户拒绝授权 不能显示通知\\'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\n  <span class=\"token punctuation\">}</span>\\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\n<span class=\"token comment\">// 老版本使用的是回调函数机制：Notification.requestPermission(callback); 参数一样</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br><span class=\"line-number\">11</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<h3 id=\"推送通知\"><a class=\"header-anchor\" href=\"#推送通知\" aria-hidden=\"true\">#</a> 推送通知</h3>\\n<p>当<code>Notification.permission</code>为<code>granted</code>时，请求到用户权限之后，不必立即发送通知，可以在任意时刻，以任意形式来发送通知。</p>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code><span class=\"token keyword\">const</span> options <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 传空配置</span>\\n<span class=\"token keyword\">const</span> title <span class=\"token operator\">=</span> <span class=\"token string\">\\'这里是标题\\'</span><span class=\"token punctuation\">;</span>\\n<span class=\"token keyword\">const</span> notification <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Notification</span><span class=\"token punctuation\">(</span>title<span class=\"token punctuation\">,</span> options<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 显示通知</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<blockquote>\\n<p>上面这段代码就可以显示一个简单的通知了，只要用户允许你弹窗。</p>\\n</blockquote>\\n<h3 id=\"notification的参数：\"><a class=\"header-anchor\" href=\"#notification的参数：\" aria-hidden=\"true\">#</a> <code>Notification</code>的参数：</h3>\\n<ul>\\n<li>title：通知的标题</li>\\n<li>options：通知的设置选项（可选）。\\n<ul>\\n<li>body：字符串。通知的body内容。</li>\\n<li>tag：代表通知的一个识别标签，<strong>相同tag时只会打开一个通知窗口</strong>。</li>\\n<li>icon：字符串。要在通知中显示的图标的URL。</li>\\n<li>data：想要和通知关联的数据,可以在<code>new Notification</code>返回的实例中找到。</li>\\n<li>renotify: 布尔值。相同tag，新通知出现的时候是否替换之前的(开启此项，tag必须设置)。</li>\\n<li>requireInteraction：布尔值。通知不自动关闭，默认为false(自动关闭)。</li>\\n<li>还有一些不太重要的配置可以看<a href=\"https://www.zhangxinxu.com/wordpress/2016/07/know-html5-web-notification/\" target=\"_blank\" rel=\"noopener noreferrer\">张鑫旭老师的博客<OutboundLink/></a>和<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/notification\" target=\"_blank\" rel=\"noopener noreferrer\">MDN<OutboundLink/></a>的介绍</li>\\n</ul>\\n</li>\\n</ul>\\n<p><strong>requireInteraction</strong>: 保持通知不自动关闭</p>\\n<p>默认值为false，通知会在三四秒之后自动关闭。</p>\\n<p>当设置为<code>true</code>,并且当有超过两个通知(<code>new Notification(title, options)</code>)时，会出现如下图的通知叠加状态。</p>\\n<p><img src=\"https://github.com/OBKoro1/articleImg_src/blob/master/weibo_img_move/005Y4rCogy1fzyy3ykl2gj30jy0kc772.jpg?raw=true\" alt=\"\"></p>\\n<p>这种情况显然，我们只能默认操作最后一个通知，除非你把每个通知返回的实例都保存下来。</p>\\n<p>我发布的npm包：<a href=\"https://github.com/OBKoro1/notification-Koro1\" target=\"_blank\" rel=\"noopener noreferrer\">notification-koro1<OutboundLink/></a>，可以<strong>自定义一定的时间间隔自动关闭不自动关闭的通知，也可以一次性关闭所有通知</strong></p>\\n<p>PS：如果没有触发叠加，很可能是因为你两次通知的tag配置项是相同的(相同tag只能出现一个弹窗)。</p>\\n<p>PS:  safari下不支持该选项,默认自动关闭</p>\\n<p><strong>renotify</strong>：相同</p>\\n<p>默认值为false，chorme下相同tag的通知不替换，还是老的通知</p>\\n<p>设置为<code>true</code>, 两个相同tag的通知，新通知替换之前旧的通知。</p>\\n<p><strong>注意</strong>：使用<code>renotify</code>，<strong>必须要同时设置<code>tag</code>选项，否则将会报错</strong>。</p>\\n<p>PS： safari下不支持该选项，默认两个相同tag的通知，新通知替换之前旧的通知。</p>\\n<h2 id=\"notification的实例：\"><a class=\"header-anchor\" href=\"#notification的实例：\" aria-hidden=\"true\">#</a> <code>Notification</code>的实例：</h2>\\n<p>生成通知，会返回一个实例，如下：</p>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code><span class=\"token keyword\">const</span> instanceNotification <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Notification</span><span class=\"token punctuation\">(</span>title<span class=\"token punctuation\">,</span> options<span class=\"token punctuation\">)</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<p><code>instanceNotification</code>就是当前通知的实例，在该实例上，我们可以<strong>查询该通知的配置，监听事件，调用实例方法</strong>。</p>\\n<p>下文都以<code>instanceNotification</code>指代通知返回的实例。</p>\\n<h3 id=\"通知的配置：\"><a class=\"header-anchor\" href=\"#通知的配置：\" aria-hidden=\"true\">#</a> 通知的配置：</h3>\\n<p><strong>在通知实例上可以读取到设置通知时的所有配置</strong>，比如：</p>\\n<p>通知标题：<code>instanceNotification. title</code>、通知内容：<code>instanceNotification. body</code>、通知图标：<code>instanceNotification. icon</code>等。</p>\\n<p>PS： 这些属性都是只读的，不能删除，不能修改，不能遍历。</p>\\n<h3 id=\"事件处理：\"><a class=\"header-anchor\" href=\"#事件处理：\" aria-hidden=\"true\">#</a> 事件处理：</h3>\\n<p>我们可以使用通知的实例来监听通知的事件：</p>\\n<ul>\\n<li><code>click</code>: 用户点击通知时被触发</li>\\n<li><code>show</code>: 通知显示的时候被触发</li>\\n<li><code>error</code>: 通知遇到错误时被触发</li>\\n<li><code>close</code>: 用户关闭通知时被触发</li>\\n</ul>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code>instanceNotification<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onclick</span> <span class=\"token operator\">=</span> e <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\\n  <span class=\"token comment\">// do something 可以是：打开网址，发请求，关闭通知等</span>\\n<span class=\"token punctuation\">}</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<p><strong>注意</strong>：最好是一发出通知就立即监听事件，否则有些事件可能一开始没被触发或永远不会触发。</p>\\n<p>例如：用定时器5秒后才监听通知的点击和显示事件，则永远不会触发通知显示的回调，点击事件在5秒后才可以正常起作用但会错误五秒之前用户的点击。</p>\\n<h3 id=\"关闭通知\"><a class=\"header-anchor\" href=\"#关闭通知\" aria-hidden=\"true\">#</a> 关闭通知</h3>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code>instanceNotification<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<p>没有设置不自动关闭的话，chrome通知将会在4.5秒左右自动关闭通知，safari则是5秒钟(无法设置不自动关闭)。</p>\\n<p>notification没有定时控制通知多久后消失的功能，当出现多个通知，也无法统一关闭。</p>\\n<p>这两个问题，在我发布的NPM包：<a href=\"https://github.com/OBKoro1/notification-Koro1\" target=\"_blank\" rel=\"noopener noreferrer\">notification-koro1<OutboundLink/></a>中，都解决掉了，并提供更清晰的回调</p>\\n<h3 id=\"应用场景\"><a class=\"header-anchor\" href=\"#应用场景\" aria-hidden=\"true\">#</a> 应用场景</h3>\\n<ul>\\n<li>即时通讯软件(邮件、聊天室)</li>\\n<li>体育赛事结果彩票/抽奖结果</li>\\n<li>新闻网站重大新闻通知</li>\\n<li>网站的重大更新，重大新闻等。</li>\\n</ul>\\n<h2 id=\"notification其他\"><a class=\"header-anchor\" href=\"#notification其他\" aria-hidden=\"true\">#</a> notification其他</h2>\\n<p>这里是一些API/浏览器细节，以及可能会遇到的问题，可以先不看，等真正遇到了，回头再来看。</p>\\n<h3 id=\"用户拒绝显示通知：\"><a class=\"header-anchor\" href=\"#用户拒绝显示通知：\" aria-hidden=\"true\">#</a> 用户拒绝显示通知：</h3>\\n<p>一旦用户禁止网站显示通知，网站就不能再请求用户授权显示通知，需要用户去设置中更改。</p>\\n<p>chrome浏览器的通知设置位置：设置&gt;高级&gt;内容设置&gt;通知</p>\\n<p>saafari浏览器：偏好设置&gt;网站&gt;通知&gt;找到网站&gt;修改权限/恢复默认</p>\\n<h3 id=\"关闭请求权限：\"><a class=\"header-anchor\" href=\"#关闭请求权限：\" aria-hidden=\"true\">#</a> 关闭请求权限：</h3>\\n<p>在chorme浏览器中：当用户关闭请求权限的弹窗(右上角的叉叉)，页面还没刷新，我们可以再次向用户请求权限。<strong>页面刷新过后，浏览器默认用户拒绝</strong>。</p>\\n<p>在safari浏览器下，没有关闭请求权限的选项，用户必须选择同意/拒绝。</p>\\n<h3 id=\"icon不显示问题：\"><a class=\"header-anchor\" href=\"#icon不显示问题：\" aria-hidden=\"true\">#</a> icon不显示问题：</h3>\\n<p>可能是网站进行了同源限制(比如github)，不是域名下面的图片，会报错，不能调用。</p>\\n<h3 id=\"tag：\"><a class=\"header-anchor\" href=\"#tag：\" aria-hidden=\"true\">#</a> tag：</h3>\\n<ol>\\n<li><code>tag</code>相同的通知，同时只能出现一个，老通知是否会被覆盖取决于：<code>renotify</code>配置和浏览器。</li>\\n<li>chrome下：当通知关闭之后，<strong>上次出现过的tag在一段时间内，不能再出现</strong>，比如刷新页面再请求相同tag的通知。（在safari下正常出现）</li>\\n</ol>\\n<h3 id=\"safari下面不能显示icon\"><a class=\"header-anchor\" href=\"#safari下面不能显示icon\" aria-hidden=\"true\">#</a> safari下面不能显示icon</h3>\\n<p>在safari下面，同一个网站(比如谷歌)，同样的代码，chorme可以正常显示icon，safari却没有icon，也没有报错。</p>\\n<p>谷歌之后发现,在<a href=\"https://stackoverflow.com/questions/20949203/i-dont-see-the-icon-in-my-web-notification-in-safari\" target=\"_blank\" rel=\"noopener noreferrer\">stack overflow<OutboundLink/></a>里面看到<strong>safari只支持body和tag选项,并不支持icon选项</strong>。</p>\\n<h3 id=\"连续触发\"><a class=\"header-anchor\" href=\"#连续触发\" aria-hidden=\"true\">#</a> 连续触发</h3>\\n<p>在safari和chrome下短时间内连续触发通知(不设<code>tag</code>，不设<code>requireInteraction</code>)，会出现如下表现：</p>\\n<p><img src=\"https://github.com/OBKoro1/articleImg_src/blob/master/weibo_img_move/005Y4rCogy1g05d2z0zxej30je03wwep.jpg?raw=true\" alt=\"notification 连续触发\"></p>\\n<p>这个表现，<strong>通知没有icon、标题、内容，就显得没有意义了</strong>，浏览器以这种形式，限制开发者不要频繁打扰用户。</p>\\n<h3 id=\"notification-koro1：\"><a class=\"header-anchor\" href=\"#notification-koro1：\" aria-hidden=\"true\">#</a> notification-Koro1：</h3>\\n<p>试一下<a href=\"https://github.com/OBKoro1/notification-Koro1\" target=\"_blank\" rel=\"noopener noreferrer\">notification-Koro1<OutboundLink/></a>啦, 持续维护，简单方便~</p>\\n<hr>\\n<h2 id=\"结语\"><a class=\"header-anchor\" href=\"#结语\" aria-hidden=\"true\">#</a> 结语</h2>\\n<p>本文写的比较细，可以先mark一下，然后以后真正用到这个API了，可以先通过文中的栗子，然后再查找对应的内容。</p>\\n<p>还有就是注意浏览器间的差异，我自己就试了chrome和safari，然后这两个浏览器在实现细节上有很多不一样的地方，开发的时候注意一下。</p>\\n<p><a href=\"http://obkoro1.com/\" target=\"_blank\" rel=\"noopener noreferrer\">博客<OutboundLink/></a>、<a href=\"http://obkoro1.com/web_accumulate/accumulate/\" target=\"_blank\" rel=\"noopener noreferrer\">前端积累文档<OutboundLink/></a>、<a href=\"https://github.com/OBKoro1/articleImg_src/blob/master/juejin/1631b6f52f7e7015.jpeg?raw=true\" target=\"_blank\" rel=\"noopener noreferrer\">公众号<OutboundLink/></a>、<a href=\"https://github.com/OBKoro1\" target=\"_blank\" rel=\"noopener noreferrer\">GitHub<OutboundLink/></a></p>\\n<p>参考资料：</p>\\n<p><a href=\"https://github.com/OBKoro1/notification-Koro1\" target=\"_blank\" rel=\"noopener noreferrer\">notification-Koro1<OutboundLink/></a></p>\\n<p><a href=\"https://www.zhangxinxu.com/wordpress/2016/07/know-html5-web-notification/\" target=\"_blank\" rel=\"noopener noreferrer\">简单了解HTML5中的Web Notification桌面通知<OutboundLink/></a></p>\\n<p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/notification\" target=\"_blank\" rel=\"noopener noreferrer\">Notification MDN<OutboundLink/></a></p>\\n<p><a href=\"https://juejin.im/post/59ed37f5f265da431e15eaac\" target=\"_blank\" rel=\"noopener noreferrer\">HTML5 桌面通知：Notification API<OutboundLink/></a>\\n\\x3c!-- 特殊字符串：用于修改/删除markdown的结尾提示语-OBKoro1 --\\x3e</p>\\n<h3 id=\"点个star支持我一下\"><a class=\"header-anchor\" href=\"#点个star支持我一下\" aria-hidden=\"true\">#</a> 点个<a href=\"https://github.com/OBKoro1/web_accumulate\" target=\"_blank\" rel=\"noopener noreferrer\">Star<OutboundLink/></a>支持我一下~</h3>\\n\\x3c!-- \\'特殊字符串：用于删除编译后的issue组件-OBKoro1 --\\x3e\\n'},{key:\"v-6d6e43e0b89db\",path:\"/accumulate/effect/%E7%BD%91%E9%A1%B5%E5%85%A8%E5%B1%8F.html\",lastUpdated:1564720698e3,title:\"全屏模式轻松掌握[局部元素全屏展示]\",headers:[{level:2,title:\"全屏模式轻松掌握[局部元素全屏展示]\",slug:\"全屏模式轻松掌握-局部元素全屏展示\"},{level:3,title:\"CodePen Demo\",slug:\"codepen-demo\"},{level:3,title:\"全屏功能封装在一个类里面：\",slug:\"全屏功能封装在一个类里面：\"},{level:3,title:\"何谓全屏？\",slug:\"何谓全屏？\"},{level:2,title:\"全屏API：\",slug:\"全屏api：\"},{level:3,title:\"浏览器前缀：\",slug:\"浏览器前缀：\"},{level:3,title:\"1. 浏览器是否支持全屏模式：document.fullscreenEnabled\",slug:\"_1-浏览器是否支持全屏模式：document-fullscreenenabled\"},{level:3,title:\"2. 使元素进入全屏模式：Element.requestFullscreen()\",slug:\"_2-使元素进入全屏模式：element-requestfullscreen\"},{level:3,title:\"3. 退出全屏：document.exitFullscreen()\",slug:\"_3-退出全屏：document-exitfullscreen\"},{level:3,title:\"4. 检查当前是否有节点处于全屏状态：document.fullscreenElement\",slug:\"_4-检查当前是否有节点处于全屏状态：document-fullscreenelement\"},{level:3,title:\"5. 进入全屏/离开全屏，触发事件：document.fullscreenchange\",slug:\"_5-进入全屏-离开全屏，触发事件：document-fullscreenchange\"},{level:3,title:\"6. 无法进入全屏时触发: document.fullscreenerror\",slug:\"_6-无法进入全屏时触发-document-fullscreenerror\"},{level:3,title:\"Css： 全屏模式下的样式\",slug:\"css：-全屏模式下的样式\"},{level:2,title:\"结语\",slug:\"结语\"},{level:3,title:\"点个Star支持我一下~\",slug:\"点个star支持我一下\"}],excerpt:'<h2 id=\"全屏模式轻松掌握-局部元素全屏展示\"><a class=\"header-anchor\" href=\"#全屏模式轻松掌握-局部元素全屏展示\" aria-hidden=\"true\">#</a> 全屏模式轻松掌握[局部元素全屏展示]</h2>\\n<p>我第一次对网页全屏模式有概念，是那种网页播放视频的全屏播 放的那种。感觉很强，前几个星期有个需求也是关于全屏模式的，接触之后才知道全屏模式并不神秘，是个很容易掌握的技能...</p>\\n<blockquote>\\n<p><a href=\"http://obkoro1.com/\" target=\"_blank\" rel=\"noopener noreferrer\">博客<OutboundLink/></a>、<a href=\"http://obkoro1.com/web_accumulate/accumulate/\" target=\"_blank\" rel=\"noopener noreferrer\">前端积累文档<OutboundLink/></a>、<a href=\"https://github.com/OBKoro1/articleImg_src/blob/master/juejin/1631b6f52f7e7015.jpeg?raw=true\" target=\"_blank\" rel=\"noopener noreferrer\">公众号<OutboundLink/></a>、<a href=\"https://github.com/OBKoro1\" target=\"_blank\" rel=\"noopener noreferrer\">GitHub<OutboundLink/></a></p>\\n</blockquote>\\n<h3 id=\"codepen-demo\"><a class=\"header-anchor\" href=\"#codepen-demo\" aria-hidden=\"true\">#</a> CodePen Demo</h3>\\n<p>地址：<a href=\"https://codepen.io/OBKoro1/full/wQmOzG/\" target=\"_blank\" rel=\"noopener noreferrer\">演示<OutboundLink/></a>、<a href=\"https://codepen.io/OBKoro1/pen/wQmOzG\" target=\"_blank\" rel=\"noopener noreferrer\">code<OutboundLink/></a></p>\\n<p>进去看看，玩一下，本文将结合这个demo一起进行讲解。</p>\\n<p><img src=\"https://github.com/OBKoro1/articleImg_src/blob/master/juejin/167690a2a5a9ba2c?raw=true\" alt=\"\"></p>\\n<h3 id=\"全屏功能封装在一个类里面：\"><a class=\"header-anchor\" href=\"#全屏功能封装在一个类里面：\" aria-hidden=\"true\">#</a> 全屏功能封装在一个类里面：</h3>\\n<p>我把全屏模式封装在一个类里面，在代码中有详细的注释，如果有需要的话，直接把类拿出来，根据栗子和注释使用即可。</p>\\n<p>代码在<a href=\"https://codepen.io/OBKoro1/pen/wQmOzG\" target=\"_blank\" rel=\"noopener noreferrer\">codepen<OutboundLink/></a>的demo里。</p>\\n<h3 id=\"何谓全屏？\"><a class=\"header-anchor\" href=\"#何谓全屏？\" aria-hidden=\"true\">#</a> 何谓全屏？</h3>\\n<p><strong>MDN介绍</strong>：</p>\\n<p>使用提供的API，让一个元素与其子元素，可以占据整个屏幕，并在此期间，从屏幕上隐藏所有的浏览器用户界面以及其他应用。</p>\\n<p><strong>chrome下的全屏表现</strong>：</p>\\n<ol>\\n<li>\\n<p><strong>全屏会隐藏标签栏,书签栏</strong></p>\\n</li>\\n<li>\\n<p>如果网页一开始不是全部撑开的形式，全屏下，也会<strong>将要全屏的元素充满整个屏幕</strong></p>\\n</li>\\n<li>\\n<p><strong>可以多层全屏</strong>，如栗子中一样，可以先左边全屏，然后红色全屏。</p>\\n<p>在这种情况下退出全屏，只会退出红色全屏，退回到左边全屏的形式，所以页面依然是全屏模式。</p>\\n</li>\\n<li>\\n<p>进入全屏时，有一个<strong>默认的提示</strong>：\\'按esc即可退出全屏模式\\'，如下图显示：</p>\\n<p><img src=\"https://github.com/OBKoro1/articleImg_src/blob/master/juejin/167694f2253893bf?raw=true\" alt=\"\"></p>\\n</li>\\n<li>\\n<p>当按<code>Esc</code>或调用退出全屏方法，退出全屏。<strong>标签栏和书签栏依然是隐藏的，网页上的元素恢复成原本的尺寸</strong>。</p>\\n<p>要显示书签栏和标签栏，需要刷新一下页面。</p>\\n</li>\\n</ol>\\n<hr>\\n<h2 id=\"全屏api：\"><a class=\"header-anchor\" href=\"#全屏api：\" aria-hidden=\"true\">#</a> 全屏API：</h2>\\n<p><strong>总共用到6个API</strong>：</p>\\n<ol>\\n<li>浏览器是否支持全屏模式：<code>document.fullscreenEnabled</code></li>\\n<li>使元素进入全屏模式：<code>Element.requestFullscreen()</code></li>\\n<li>退出全屏：<code>document.exitFullscreen()</code></li>\\n<li>检查当前是否有节点处于全屏状态：<code>document.fullscreenElement</code></li>\\n<li>进入全屏/离开全屏，触发事件：<code>document.fullscreenchange</code></li>\\n<li>无法进入全屏时触发: <code>document.fullscreenerror</code></li>\\n</ol>\\n<h3 id=\"浏览器前缀：\"><a class=\"header-anchor\" href=\"#浏览器前缀：\" aria-hidden=\"true\">#</a> 浏览器前缀：</h3>\\n<p>目前并不是所有的浏览器都实现了API的无前缀版本，所以我们需要针对不同浏览器，做一下API的兼容:</p>\\n<p>这是我在<a href=\"https://codepen.io/OBKoro1/pen/wQmOzG\" target=\"_blank\" rel=\"noopener noreferrer\">demo<OutboundLink/></a>中做的浏览器兼容：</p>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code><span class=\"token comment\">/**\\n * @description: 是否支持全屏+判断浏览器前缀\\n * @param {Function} fn 不支持全屏的回调函数 这里设了一个默认值\\n */</span>\\n<span class=\"token function\">isFullscreen</span><span class=\"token punctuation\">(</span>fn<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n  <span class=\"token keyword\">let</span> fullscreenEnabled<span class=\"token punctuation\">;</span>\\n  <span class=\"token comment\">// 判断浏览器前缀</span>\\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>document<span class=\"token punctuation\">.</span>fullscreenEnabled<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n    fullscreenEnabled <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span>fullscreenEnabled<span class=\"token punctuation\">;</span>\\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>document<span class=\"token punctuation\">.</span>webkitFullscreenEnabled<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n    fullscreenEnabled <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span>webkitFullscreenEnabled<span class=\"token punctuation\">;</span>\\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>prefixName <span class=\"token operator\">=</span> <span class=\"token string\">\\'webkit\\'</span><span class=\"token punctuation\">;</span>\\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>document<span class=\"token punctuation\">.</span>mozFullScreenEnabled<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n    fullscreenEnabled <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span>mozFullScreenEnabled<span class=\"token punctuation\">;</span>\\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>prefixName <span class=\"token operator\">=</span> <span class=\"token string\">\\'moz\\'</span><span class=\"token punctuation\">;</span>\\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>document<span class=\"token punctuation\">.</span>msFullscreenEnabled<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n    fullscreenEnabled <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span>msFullscreenEnabled<span class=\"token punctuation\">;</span>\\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>prefixName <span class=\"token operator\">=</span> <span class=\"token string\">\\'ms\\'</span><span class=\"token punctuation\">;</span>\\n  <span class=\"token punctuation\">}</span>\\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>fullscreenEnabled<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>fn <span class=\"token operator\">!==</span> undefined<span class=\"token punctuation\">)</span> <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 执行不支持全屏的回调</span>\\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>isFullscreenData <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\\n  <span class=\"token punctuation\">}</span>\\n<span class=\"token punctuation\">}</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br><span class=\"line-number\">11</span><br><span class=\"line-number\">12</span><br><span class=\"line-number\">13</span><br><span class=\"line-number\">14</span><br><span class=\"line-number\">15</span><br><span class=\"line-number\">16</span><br><span class=\"line-number\">17</span><br><span class=\"line-number\">18</span><br><span class=\"line-number\">19</span><br><span class=\"line-number\">20</span><br><span class=\"line-number\">21</span><br><span class=\"line-number\">22</span><br><span class=\"line-number\">23</span><br><span class=\"line-number\">24</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<p>我在实例化的时候进行一次判断浏览器是否支持全屏，然后<strong>保存浏览器前缀</strong>。</p>\\n<p>推荐这么做，因为如果每个API都要这样重复的判断浏览器前缀，那也太恶心了！</p>\\n<h3 id=\"_1-浏览器是否支持全屏模式：document-fullscreenenabled\"><a class=\"header-anchor\" href=\"#_1-浏览器是否支持全屏模式：document-fullscreenenabled\" aria-hidden=\"true\">#</a> 1. 浏览器是否支持全屏模式：document.fullscreenEnabled</h3>\\n<p><code>document.fullscreenEnabled</code>属性返回一个布尔值，表示当前文档是否可以切换到全屏状态。</p>\\n<p>代码在上方浏览器前缀代码中给出了。</p>\\n<p><strong>如果没有保存浏览器前缀的话，注意做一下不同浏览器前缀的兼容！下面不再强调</strong>。</p>\\n<h3 id=\"_2-使元素进入全屏模式：element-requestfullscreen\"><a class=\"header-anchor\" href=\"#_2-使元素进入全屏模式：element-requestfullscreen\" aria-hidden=\"true\">#</a> 2. 使元素进入全屏模式：Element.requestFullscreen()</h3>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code><span class=\"token comment\">/**\\n * @description: 将传进来的元素全屏\\n * @param {String} domName 要全屏的dom名称\\n */</span>\\n<span class=\"token function\">Fullscreen</span><span class=\"token punctuation\">(</span>domName<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n  <span class=\"token keyword\">const</span> element <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span>domName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 获取dom</span>\\n  <span class=\"token keyword\">const</span> methodName <span class=\"token operator\">=</span>\\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>prefixName <span class=\"token operator\">===</span> <span class=\"token string\">\\'\\'</span>\\n      <span class=\"token operator\">?</span> <span class=\"token string\">\\'requestFullscreen\\'</span>\\n      <span class=\"token punctuation\">:</span> <span class=\"token template-string\"><span class=\"token string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>prefixName<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">RequestFullScreen`</span></span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// API前缀</span>\\n  element<span class=\"token punctuation\">[</span>methodName<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 调用全屏</span>\\n<span class=\"token punctuation\">}</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br><span class=\"line-number\">11</span><br><span class=\"line-number\">12</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<p>这就是我们<strong>实现全屏的API</strong>，是不是超简单？</p>\\n<p>值得注意的是：<strong>调用此API并不能保证元素一定能够进入全屏模式</strong></p>\\n<ol>\\n<li>\\n<p>MDN：例如<code>&lt;iframe&gt;</code> 元素具有 allowfullscreen 属性，可选择是否将其内容以全屏模式显示</p>\\n<p>这种不被允许全屏的元素属于极少数情况，我试过可以将<code>button</code>全屏。</p>\\n</li>\\n<li>\\n<p>全屏请求必须在事件处理函数(<code>点击事件等</code>)中调用，否则将会被拒绝。</p>\\n<p>在<a href=\"https://codepen.io/OBKoro1/pen/wQmOzG\" target=\"_blank\" rel=\"noopener noreferrer\">demo<OutboundLink/></a>中有演示,初始化直接全屏，会触发进入全屏失败回调。</p>\\n</li>\\n</ol>\\n<h3 id=\"_3-退出全屏：document-exitfullscreen\"><a class=\"header-anchor\" href=\"#_3-退出全屏：document-exitfullscreen\" aria-hidden=\"true\">#</a> 3. 退出全屏：document.exitFullscreen()</h3>\\n<p><strong>介绍</strong>：</p>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code><span class=\"token function\">exitFullscreen</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n  <span class=\"token keyword\">const</span> methodName <span class=\"token operator\">=</span>\\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>prefixName <span class=\"token operator\">===</span> <span class=\"token string\">\\'\\'</span>\\n      <span class=\"token operator\">?</span> <span class=\"token string\">\\'exitFullscreen\\'</span>\\n      <span class=\"token punctuation\">:</span> <span class=\"token template-string\"><span class=\"token string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>prefixName<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">ExitFullscreen`</span></span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// API 前缀</span>\\n  document<span class=\"token punctuation\">[</span>methodName<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 调用</span>\\n<span class=\"token punctuation\">}</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<p>调用这个方法会让文档回退到上一个调用Element.requestFullscreen()方法进入全屏模式之前的状态。</p>\\n<p><strong>多层全屏</strong></p>\\n<p>像<a href=\"https://codepen.io/OBKoro1/pen/wQmOzG\" target=\"_blank\" rel=\"noopener noreferrer\">demo<OutboundLink/></a>中，先进入左边全屏，再进入红色全屏，即为：多层全屏的情况(虽然这种情况并不多)。</p>\\n<p><strong>当出现多层全屏的情况，需要一层层的退出到页面最初始的情况</strong>，并不是调用一次<code>document.exitFullscreen()</code>就恢复到页面最初始的样子。</p>\\n<h3 id=\"_4-检查当前是否有节点处于全屏状态：document-fullscreenelement\"><a class=\"header-anchor\" href=\"#_4-检查当前是否有节点处于全屏状态：document-fullscreenelement\" aria-hidden=\"true\">#</a> 4. 检查当前是否有节点处于全屏状态：document.fullscreenElement</h3>\\n<p>fullscreenElement属性返回正处于全屏状态的Element节点，如果当前没有节点处于全屏状态，则返回null</p>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code><span class=\"token comment\">/**\\n * @description: 检测有没有元素处于全屏状态\\n * @return 布尔值\\n */</span>\\n<span class=\"token function\">isElementFullScreen</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n  <span class=\"token keyword\">const</span> fullscreenElement <span class=\"token operator\">=</span>\\n    document<span class=\"token punctuation\">.</span>fullscreenElement <span class=\"token operator\">||</span>\\n    document<span class=\"token punctuation\">.</span>msFullscreenElement <span class=\"token operator\">||</span>\\n    document<span class=\"token punctuation\">.</span>mozFullScreenElement <span class=\"token operator\">||</span>\\n    document<span class=\"token punctuation\">.</span>webkitFullscreenElement<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 有前缀的f是大写，没前缀是小写</span>\\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>fullscreenElement <span class=\"token operator\">===</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n    <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 当前没有元素在全屏状态</span>\\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\\n    <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 有元素在全屏状态</span>\\n  <span class=\"token punctuation\">}</span>\\n<span class=\"token punctuation\">}</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br><span class=\"line-number\">11</span><br><span class=\"line-number\">12</span><br><span class=\"line-number\">13</span><br><span class=\"line-number\">14</span><br><span class=\"line-number\">15</span><br><span class=\"line-number\">16</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<p>事实上，还有一个属性<code>document.fullscreen</code>，返回一个布尔值，表示文档是否处于全屏模式。</p>\\n<p>两个方法效果是一样，但因为IE不支持这个属性，所以这里用的是<code>document.fullscreenElement</code></p>\\n<h3 id=\"_5-进入全屏-离开全屏，触发事件：document-fullscreenchange\"><a class=\"header-anchor\" href=\"#_5-进入全屏-离开全屏，触发事件：document-fullscreenchange\" aria-hidden=\"true\">#</a> 5. 进入全屏/离开全屏，触发事件：document.fullscreenchange</h3>\\n<p>当我们进入全屏和离开全屏的时候，都会触发一个<code>fullscreenchange</code>事件。</p>\\n<p><strong><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Fullscreen_API#%E9%80%9A%E7%9F%A5\" target=\"_blank\" rel=\"noopener noreferrer\">MDN注意<OutboundLink/></a>：此事件不会提供任何信息，表明是进入全屏或退出全屏</strong>。</p>\\n<p>看了好久事件返回的信息，确实找不到一个值，表明这是在进入全屏，或者离开全屏！</p>\\n<p>可以说相当不人性化了！但我们可以通过检查当前是否有节点处于全屏状态，判断当前是否处于全屏模式。</p>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code><span class=\"token comment\">/**\\n * @description: 监听进入/离开全屏\\n * @param {Function} enter 进入全屏的回调\\n *  @param {Function} quit 离开全屏的回调\\n */</span>\\n<span class=\"token function\">screenChange</span><span class=\"token punctuation\">(</span>enter<span class=\"token punctuation\">,</span>quit<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>isFullscreenData<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\\n  <span class=\"token keyword\">const</span> methodName <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token string\">`on</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>prefixName<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">fullscreenchange`</span></span><span class=\"token punctuation\">;</span>\\n  document<span class=\"token punctuation\">[</span>methodName<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> e <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">isElementFullScreen</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n      enter <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">enter</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 进入全屏回调</span>\\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\\n      quit <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">quit</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 离开全屏的回调</span>\\n    <span class=\"token punctuation\">}</span>\\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\\n<span class=\"token punctuation\">}</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br><span class=\"line-number\">11</span><br><span class=\"line-number\">12</span><br><span class=\"line-number\">13</span><br><span class=\"line-number\">14</span><br><span class=\"line-number\">15</span><br><span class=\"line-number\">16</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<p><strong>注意：多层全屏的情况</strong></p>\\n<ol>\\n<li>先进入左边全屏(进入全屏回调)，再进入红色全屏(进入全屏回调)</li>\\n<li>退出全屏,此时退出红色全屏，左边仍是全屏(触发进入全屏回调)</li>\\n<li>出现这种情况，可以在点击按钮的时候，做一些状态限制。或者根据全屏事件返回的dom信息来进行判断。</li>\\n</ol>\\n<h3 id=\"_6-无法进入全屏时触发-document-fullscreenerror\"><a class=\"header-anchor\" href=\"#_6-无法进入全屏时触发-document-fullscreenerror\" aria-hidden=\"true\">#</a> 6. 无法进入全屏时触发: document.fullscreenerror</h3>\\n<p>进入全屏并不总是成功的，可能是技术原因，也可能是用户拒绝，我们在上文进入全文的API<code>Element.requestFullscreen()</code>部分讲过了。</p>\\n<p>比如全屏请求不是在事件处理函数中调用,会在这里拦截到错误</p>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code><span class=\"token comment\">/**\\n * @description: 浏览器无法进入全屏时触发\\n * @param {Function} enterErrorFn 回调\\n */</span>\\n<span class=\"token function\">screenError</span><span class=\"token punctuation\">(</span>enterErrorFn<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n  <span class=\"token keyword\">const</span> methodName <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token string\">`on</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>prefixName<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">fullscreenerror`</span></span><span class=\"token punctuation\">;</span>\\n  document<span class=\"token punctuation\">[</span>methodName<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> e <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\\n    enterErrorFn <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">enterErrorFn</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span>\\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\\n<span class=\"token punctuation\">}</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<h3 id=\"css：-全屏模式下的样式\"><a class=\"header-anchor\" href=\"#css：-全屏模式下的样式\" aria-hidden=\"true\">#</a> Css： 全屏模式下的样式</h3>\\n<p><strong>chorme 70 下的默认会为正在全屏的dom添加两个class：稍微看一下</strong></p>\\n<ol>\\n<li>默认设置黑色背景</li>\\n</ol>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-css line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-css\"><code><span class=\"token selector\">:not(:root):-webkit-full-screen::backdrop</span> <span class=\"token punctuation\">{</span>\\n  <span class=\"token property\">position</span><span class=\"token punctuation\">:</span> fixed<span class=\"token punctuation\">;</span>\\n  <span class=\"token property\">top</span><span class=\"token punctuation\">:</span> 0px<span class=\"token punctuation\">;</span>\\n  <span class=\"token property\">right</span><span class=\"token punctuation\">:</span> 0px<span class=\"token punctuation\">;</span>\\n  <span class=\"token property\">bottom</span><span class=\"token punctuation\">:</span> 0px<span class=\"token punctuation\">;</span>\\n  <span class=\"token property\">left</span><span class=\"token punctuation\">:</span> 0px<span class=\"token punctuation\">;</span>\\n  <span class=\"token property\">background</span><span class=\"token punctuation\">:</span> black<span class=\"token punctuation\">;</span> // 会将背景设为黑色的 如果你没为你的dom设置背景的话，全屏下会为黑色\\n<span class=\"token punctuation\">}</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<ol start=\"2\">\\n<li>默认样式：</li>\\n</ol>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-css line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-css\"><code><span class=\"token selector\">:not(:root):-webkit-full-screen</span> <span class=\"token punctuation\">{</span>\\n  <span class=\"token property\">object-fit</span><span class=\"token punctuation\">:</span> contain<span class=\"token punctuation\">;</span>\\n  <span class=\"token property\">position</span><span class=\"token punctuation\">:</span> fixed <span class=\"token important\">!important</span><span class=\"token punctuation\">;</span>\\n  <span class=\"token property\">top</span><span class=\"token punctuation\">:</span> 0px <span class=\"token important\">!important</span><span class=\"token punctuation\">;</span>\\n  <span class=\"token property\">right</span><span class=\"token punctuation\">:</span> 0px <span class=\"token important\">!important</span><span class=\"token punctuation\">;</span>\\n  <span class=\"token property\">bottom</span><span class=\"token punctuation\">:</span> 0px <span class=\"token important\">!important</span><span class=\"token punctuation\">;</span>\\n  <span class=\"token property\">left</span><span class=\"token punctuation\">:</span> 0px <span class=\"token important\">!important</span><span class=\"token punctuation\">;</span>\\n  <span class=\"token property\">box-sizing</span><span class=\"token punctuation\">:</span> border-box <span class=\"token important\">!important</span><span class=\"token punctuation\">;</span>\\n  <span class=\"token property\">min-width</span><span class=\"token punctuation\">:</span> 0px <span class=\"token important\">!important</span><span class=\"token punctuation\">;</span>\\n  <span class=\"token property\">max-width</span><span class=\"token punctuation\">:</span> none <span class=\"token important\">!important</span><span class=\"token punctuation\">;</span>\\n  <span class=\"token property\">min-height</span><span class=\"token punctuation\">:</span> 0px <span class=\"token important\">!important</span><span class=\"token punctuation\">;</span>\\n  <span class=\"token property\">max-height</span><span class=\"token punctuation\">:</span> none <span class=\"token important\">!important</span><span class=\"token punctuation\">;</span>\\n  <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 100% <span class=\"token important\">!important</span><span class=\"token punctuation\">;</span>\\n  <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 100% <span class=\"token important\">!important</span><span class=\"token punctuation\">;</span>\\n  <span class=\"token property\">transform</span><span class=\"token punctuation\">:</span> none <span class=\"token important\">!important</span><span class=\"token punctuation\">;</span>\\n  <span class=\"token property\">margin</span><span class=\"token punctuation\">:</span> 0px <span class=\"token important\">!important</span><span class=\"token punctuation\">;</span>\\n<span class=\"token punctuation\">}</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br><span class=\"line-number\">11</span><br><span class=\"line-number\">12</span><br><span class=\"line-number\">13</span><br><span class=\"line-number\">14</span><br><span class=\"line-number\">15</span><br><span class=\"line-number\">16</span><br><span class=\"line-number\">17</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<p><strong>全屏状态的CSS：</strong></p>\\n<p>全屏状态下，大多数浏览器的CSS支持:full-screen伪类，只有IE11支持:fullscreen伪类。使用这个伪类，可以对全屏状态设置单独的CSS属性。</p>\\n<p>以下css摘自阮一峰老师的<a href=\"https://javascript.ruanyifeng.com/htmlapi/fullscreen.html#toc0\" target=\"_blank\" rel=\"noopener noreferrer\">Fullscreen API：全屏操作<OutboundLink/></a></p>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-css line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-css\"><code><span class=\"token comment\">/* 针对dom的全屏设置 */</span>\\n<span class=\"token selector\">.div:-webkit-full-screen</span> <span class=\"token punctuation\">{</span>\\n  <span class=\"token property\">background</span><span class=\"token punctuation\">:</span> #fff<span class=\"token punctuation\">;</span>\\n<span class=\"token punctuation\">}</span>\\n<span class=\"token comment\">/* 全屏属性 */</span>\\n<span class=\"token selector\">:-webkit-full-screen</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\\n<span class=\"token selector\">:-moz-full-screen</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\\n<span class=\"token selector\">:-ms-fullscreen</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\\n<span class=\"token comment\">/* 全屏伪类 当前chrome:70 不支持 */</span>\\n<span class=\"token selector\">:full-screen</span> <span class=\"token punctuation\">{</span>\\n<span class=\"token punctuation\">}</span>\\n<span class=\"token selector\">:fullscreen</span> <span class=\"token punctuation\">{</span>\\n  <span class=\"token comment\">/* IE11支持 */</span>\\n<span class=\"token punctuation\">}</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br><span class=\"line-number\">11</span><br><span class=\"line-number\">12</span><br><span class=\"line-number\">13</span><br><span class=\"line-number\">14</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<hr>\\n<h2 id=\"结语\"><a class=\"header-anchor\" href=\"#结语\" aria-hidden=\"true\">#</a> 结语</h2>\\n<p>我们可以把全屏技术应用在H5游戏、信息流网站、视频等地方，下次再有全屏需求时，记住不要慌，回头看看过本文的<a href=\"https://codepen.io/OBKoro1/pen/wQmOzG\" target=\"_blank\" rel=\"noopener noreferrer\">栗子<OutboundLink/></a>，把我封装的类拿出来直接用就可以啦！</p>\\n<p>以上2018.12.1</p>\\n<p>参考资料：</p>\\n<p><a href=\"https://javascript.ruanyifeng.com/htmlapi/fullscreen.html#toc7\" target=\"_blank\" rel=\"noopener noreferrer\">Fullscreen API：全屏操作<OutboundLink/></a></p>\\n<p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Fullscreen_API\" target=\"_blank\" rel=\"noopener noreferrer\">MDN<OutboundLink/></a>\\n\\x3c!-- 特殊字符串：用于修改/删除markdown的结尾提示语-OBKoro1 --\\x3e</p>\\n<h3 id=\"点个star支持我一下\"><a class=\"header-anchor\" href=\"#点个star支持我一下\" aria-hidden=\"true\">#</a> 点个<a href=\"https://github.com/OBKoro1/web_accumulate\" target=\"_blank\" rel=\"noopener noreferrer\">Star<OutboundLink/></a>支持我一下~</h3>\\n\\x3c!-- \\'特殊字符串：用于删除编译后的issue组件-OBKoro1 --\\x3e\\n'},{key:\"v-f02cea16860df\",path:\"/accumulate/effect/%E9%80%80%E5%87%BA%E9%A1%B5%E9%9D%A2%E5%8F%91%E9%80%81%E8%AF%B7%E6%B1%82.html\",lastUpdated:1564720698e3,title:\"Web sendBeacon 刷新/关闭页面之前发送请求\",headers:[{level:2,title:\"Web sendBeacon 刷新/关闭页面之前发送请求\",slug:\"web-sendbeacon-刷新-关闭页面之前发送请求\"},{level:3,title:\"背景：\",slug:\"背景：\"},{level:3,title:\"退出页面场景：\",slug:\"退出页面场景：\"},{level:3,title:\"还在本网站，跳到其他路由\",slug:\"还在本网站，跳到其他路由\"},{level:2,title:\"beforeunload和unload\",slug:\"beforeunload和unload\"},{level:3,title:\"beforeunload 当浏览器窗口关闭或者刷新时触发:\",slug:\"beforeunload-当浏览器窗口关闭或者刷新时触发\"},{level:3,title:\"unload当页面正在被卸载的时候触发该事件\",slug:\"unload当页面正在被卸载的时候触发该事件\"},{level:2,title:\"缺陷与更好的建议：\",slug:\"缺陷与更好的建议：\"},{level:3,title:\"性能缺陷：\",slug:\"性能缺陷：\"},{level:3,title:\"Beacon API\",slug:\"beacon-api\"},{level:2,title:\"小结\",slug:\"小结\"},{level:3,title:\"点个Star支持我一下~\",slug:\"点个star支持我一下\"}],excerpt:'<h2 id=\"web-sendbeacon-刷新-关闭页面之前发送请求\"><a class=\"header-anchor\" href=\"#web-sendbeacon-刷新-关闭页面之前发送请求\" aria-hidden=\"true\">#</a> Web sendBeacon 刷新/关闭页面之前发送请求</h2>\\n<h3 id=\"背景：\"><a class=\"header-anchor\" href=\"#背景：\" aria-hidden=\"true\">#</a> 背景：</h3>\\n<p><strong>有一个任务非常耗时会消耗后台大量算力，所以在退出页面的时候，要求前端这边发送一个请求来杀死任务</strong>。</p>\\n<p>一开始以为这个需求非常简单，就是在进入其他路由前，发送一下请求，杀死一下任务就好了。</p>\\n<p>然而现实狠狠的打了我的脸，因为退出页面的场景不止切换路由~</p>\\n<h3 id=\"退出页面场景：\"><a class=\"header-anchor\" href=\"#退出页面场景：\" aria-hidden=\"true\">#</a> 退出页面场景：</h3>\\n<ol>\\n<li>还在本网站，跳到其他路由</li>\\n<li><strong>刷新页面/关闭页面</strong>也需要发送请求来杀死任务</li>\\n</ol>\\n<h3 id=\"还在本网站，跳到其他路由\"><a class=\"header-anchor\" href=\"#还在本网站，跳到其他路由\" aria-hidden=\"true\">#</a> 还在本网站，跳到其他路由</h3>\\n<p>这个比较简单，在<code>Vue</code>中可以通过路由离开的钩子<code>beforeRouteLeave</code>来实现：</p>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code> <span class=\"token function\">beforeRouteLeave</span><span class=\"token punctuation\">(</span>to<span class=\"token punctuation\">,</span> <span class=\"token keyword\">from</span><span class=\"token punctuation\">,</span> next<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>任务运行中<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n        <span class=\"token comment\">// 发送请求</span>\\n    <span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span>\\n        <span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 用户离开</span>\\n    <span class=\"token punctuation\">}</span>\\n <span class=\"token punctuation\">}</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<p><strong>刷新页面/关闭页面的情况：</strong></p>\\n<p>然而在刷新页面的时候，<code>beforeRouteLeave</code>并不会执行，接着想到了下面这两个<code>API</code>.</p>\\n<h2 id=\"beforeunload和unload\"><a class=\"header-anchor\" href=\"#beforeunload和unload\" aria-hidden=\"true\">#</a> <code>beforeunload</code>和<code>unload</code></h2>\\n<h3 id=\"beforeunload-当浏览器窗口关闭或者刷新时触发\"><a class=\"header-anchor\" href=\"#beforeunload-当浏览器窗口关闭或者刷新时触发\" aria-hidden=\"true\">#</a> beforeunload 当浏览器窗口关闭或者刷新时触发:</h3>\\n<p><strong>介绍</strong>：</p>\\n<p>使用这个<code>API</code>可以阻止页面直接关闭，用户通过点击确定/取消按钮，来决定是否不关闭/刷新当前页面。</p>\\n<p>在 chrome 下长这个样子，你们肯定都见过：</p>\\n<p><img src=\"https://github.com/OBKoro1/articleImg_src/blob/master/weibo_img_move/005Y4rCogy1g0bvkiozjwj30bt04vglt.jpg?raw=true\" alt=\"\"></p>\\n<p><strong>如何使用</strong></p>\\n<p>这个 API 的使用非常简单，只要在页面加载的时候监听一下此事件，在需要出现弹窗的时候<strong>return 一个可以转化为 true 的值</strong>,就可以了。</p>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code><span class=\"token comment\">// 页面卸载之前</span>\\n<span class=\"token keyword\">let</span> killTask <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 是否杀死任务</span>\\nwindow<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onbeforeunload</span> <span class=\"token operator\">=</span> e <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>任务运行 <span class=\"token operator\">&amp;&amp;</span> 对应页面<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n    killTask <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\\n    <span class=\"token keyword\">return</span> <span class=\"token string\">\\'您可能有数据没有保存\\'</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 在部分浏览器可以修改弹窗标题</span>\\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\\n    killTask <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\\n  <span class=\"token punctuation\">}</span>\\n  <span class=\"token comment\">// 没有return一个可以转化为true的值 就不会出现弹窗</span>\\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br><span class=\"line-number\">11</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<p><strong>出现此弹窗的浏览器行为</strong>：</p>\\n<p>以下行为是基于 chorme：</p>\\n<ol>\\n<li>\\n<p>焦点：你没有点击取消/确定之前，焦点会一直在此弹窗上</p>\\n</li>\\n<li>\\n<p>你无法在出现弹窗的页面上执行任何操作</p>\\n</li>\\n<li>\\n<p>在其他页面也只能执行简单的点击操作，弹窗还是存在页面中间，无法使用键盘，</p>\\n</li>\\n<li>\\n<p>键盘：键盘被绑定在弹窗上，只能通过按键<code>Esc</code>、<code>Enter</code>来执行取消/确定操作</p>\\n</li>\\n<li>\\n<p><strong>弹窗不是页面的 dom，是浏览器的行为</strong></p>\\n</li>\\n<li>\\n<p><strong>用户取消/确定，没有回调 API，无法得知</strong></p>\\n</li>\\n</ol>\\n<p><strong>弹窗标题</strong>：</p>\\n<p>chrome 中刷新页面的标题：<code>重新加载此网站?</code></p>\\n<p>chrome 中关闭页面的标题：<code>离开此网站?</code></p>\\n<p>现在大部分浏览器都不允许修改弹窗的标题，这个是为了安全考虑，来保证用户不受到错误信息的误导，</p>\\n<p><strong>迷茫</strong>：</p>\\n<p>一开始我以为既然可以拦截到用户的刷新/关闭页面的操作，出现了上面那个弹窗，这个需求就已经做完了的时候。</p>\\n<p>然后发现，<strong>浏览器竟然没有提供用户点击确定/取消刷新页面的回调</strong>。</p>\\n<p>到这里我陷入了迷茫，盯着<code>beforeunload</code>这个 API 思考了起了人生的意义(其实是在发呆)，盯着盯着，从<code>beforeunload</code>的<code>before</code>我也就想到了<code>unload</code>这个 API。</p>\\n<p>瞬间又燃起了斗志，何不试试这个<code>unload</code>？</p>\\n<h3 id=\"unload当页面正在被卸载的时候触发该事件\"><a class=\"header-anchor\" href=\"#unload当页面正在被卸载的时候触发该事件\" aria-hidden=\"true\">#</a> <code>unload</code>当页面正在被卸载的时候触发该事件</h3>\\n<p><strong>介绍</strong></p>\\n<p>当页面正在被卸载的时候触发该事件，该事件不可取消，为不可逆操作。</p>\\n<p><strong>使用</strong></p>\\n<p>直接监听该事件就可以了。</p>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code>window<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onunload</span> <span class=\"token operator\">=</span> e <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<p><strong>结合需求</strong>:</p>\\n<p><code>killTask</code>为<code>beforeunload</code>时定义的变量，每次进入回调，都会给<code>killTask</code>赋值，使用这个值就可以判断什么时候可以发送请求杀死任务。</p>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code>window<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onunload</span> <span class=\"token operator\">=</span> e <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>killTask <span class=\"token operator\">&amp;&amp;</span> 对应页面<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n    <span class=\"token comment\">// 发送请求</span>\\n  <span class=\"token punctuation\">}</span>\\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<p>到这里大家肯定以为已经做出来了该需求，事实上，并没有！</p>\\n<p><strong>无法发送异步请求</strong></p>\\n<p>我使用的是<code>axios</code>来发送请求，请求发出去了，但是被取消了，服务器那边根本没有收到请求，如下。</p>\\n<p><img src=\"https://github.com/OBKoro1/articleImg_src/blob/master/weibo_img_move/005Y4rCogy1g0bvl43w8gj31gd06n761.jpg?raw=true\" alt=\"\"></p>\\n<p>经过一顿分析:发现是<code>axios</code>请求是异步的问题，谷歌之后发现axios不支持同步的请求</p>\\n<p><strong>最后使用原生的<a href=\"http://www.w3school.com.cn/xml/xml_http.asp\" target=\"_blank\" rel=\"noopener noreferrer\">XMLHttpRequest<OutboundLink/></a>对象</strong>，让请求同步</p>\\n<p><s>大功告成！</s> 实际上，上面才是我第一次要发的内容，而下面更好的解决方法！</p>\\n<h2 id=\"缺陷与更好的建议：\"><a class=\"header-anchor\" href=\"#缺陷与更好的建议：\" aria-hidden=\"true\">#</a> 缺陷与更好的建议：</h2>\\n<p>当我把这篇文章发布在公众号上，被<a href=\"https://mp.weixin.qq.com/s/3taWHBu0vxRXP7WDax5M-Q\" target=\"_blank\" rel=\"noopener noreferrer\">奇舞周刊<OutboundLink/></a>转载了，上面一些大佬给我提了一些建议。</p>\\n<p>研究了一下，结果...好吧！我承认我是菜鸡。</p>\\n<p>hey~ 不过这正是我写博客的收获之一，分享经验，收获知识！</p>\\n<h3 id=\"性能缺陷：\"><a class=\"header-anchor\" href=\"#性能缺陷：\" aria-hidden=\"true\">#</a> 性能缺陷：</h3>\\n<p>XHR同步请求会阻碍页面卸载，如果是刷新/跳转页面的话，<strong>页面重新展示速度会变慢，导致性能问题</strong>。</p>\\n<p>毕竟<strong>向网络发送请求并获得响应可能会超级慢</strong>，有可能是用户网络环境比较差，又或者是服务器挂了，请求一直没返回回来...</p>\\n<p>基于性能问题，大佬们推荐<strong>使用Beacon代替XHR</strong>，然后经过一番搜索...</p>\\n<h3 id=\"beacon-api\"><a class=\"header-anchor\" href=\"#beacon-api\" aria-hidden=\"true\">#</a> Beacon API</h3>\\n<ol>\\n<li><strong>Beacon API用于将少量数据通过post请求发送到服务器</strong>。</li>\\n<li><strong><code>Beacon</code>是非阻塞请求，不需要响应</strong></li>\\n</ol>\\n<h4 id=\"完美解决性能缺陷问题：\"><a class=\"header-anchor\" href=\"#完美解决性能缺陷问题：\" aria-hidden=\"true\">#</a> 完美解决性能缺陷问题：</h4>\\n<ol>\\n<li><strong>浏览器将 <code>Beacon</code> 请求排队让它在空闲的时候执行并立即返回控制</strong></li>\\n<li>它在<code>unload</code>状态下也可以异步发送，不阻塞页面刷新/跳转等操作。</li>\\n</ol>\\n<p>所以**<code>Beacon</code>可以完美解决上面提到的因XHR同步请求阻塞而引起的性能缺陷问题**。</p>\\n<h4 id=\"使用：navigator-sendbeacon\"><a class=\"header-anchor\" href=\"#使用：navigator-sendbeacon\" aria-hidden=\"true\">#</a> 使用：<code>navigator.sendBeacon()</code></h4>\\n<p><strong>完整API</strong>：</p>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code><span class=\"token keyword\">let</span> result <span class=\"token operator\">=</span> navigator<span class=\"token punctuation\">.</span><span class=\"token function\">sendBeacon</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<p><code>Beacon</code>是挂在<code>navigator</code>下面的，上面就是它的完整API。</p>\\n<p><code>result</code>是一个布尔值，代表这次发送请求的结果:</p>\\n<ul>\\n<li>如果浏览器接受并且把请求排队了则返回 tru</li>\\n<li>如果在这个过程中出现了问题就返回 false</li>\\n</ul>\\n<p><code>navigator.sendBeacon</code>接受两个参数：</p>\\n<ol>\\n<li>url: 请求的 URL。请求是 POST 请求。</li>\\n<li>data: 要发送的数据。 数据类型可以是：ArrayBufferView, Blob,  FormData，Sting。</li>\\n</ol>\\n<p>来看一个用<code>FormData</code>来传递数据的栗子，你就懂了：</p>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code><span class=\"token comment\">// 创建一个新的 FormData 并添加一个键值对</span>\\n<span class=\"token keyword\">let</span> data <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FormData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\ndata<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\\'hello\\'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\\'world\\'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\n<span class=\"token keyword\">let</span> result <span class=\"token operator\">=</span> navigator<span class=\"token punctuation\">.</span><span class=\"token function\">sendBeacon</span><span class=\"token punctuation\">(</span><span class=\"token string\">\\'./src\\'</span><span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> \\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\\'请求成功排队 等待执行\\'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\\'失败\\'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\n<span class=\"token punctuation\">}</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<h4 id=\"浏览器支持：\"><a class=\"header-anchor\" href=\"#浏览器支持：\" aria-hidden=\"true\">#</a> 浏览器支持：</h4>\\n<p>浏览器支持：Edge：14+，Firefox：31+，Chrome：39+，Opera：26+，IE：不支持。</p>\\n<p>虽然现在浏览器对<code>sendBeacon</code>的支持很好，我们对其做一下兼容性处理也是有必要的：</p>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>navigator<span class=\"token punctuation\">.</span>sendBeacon<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n  <span class=\"token comment\">// Beacon 代码</span>\\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\\n <span class=\"token comment\">// 回退到 XHR同步请求或者不做处理</span>\\n<span class=\"token punctuation\">}</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<h4 id=\"web-wroker中使用beacon\"><a class=\"header-anchor\" href=\"#web-wroker中使用beacon\" aria-hidden=\"true\">#</a> web wroker中使用Beacon</h4>\\n<p>因为<code>Beacon</code>是挂在<code>navigator</code>下面，而web worker也有<code>navigator</code>，去找了一下，真的给我找到了。</p>\\n<p>这儿有一个MDN提供的<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Beacon_API/Using_the_Beacon_API#WorkerNavigator.sendBeacon()\" target=\"_blank\" rel=\"noopener noreferrer\">栗子<OutboundLink/></a>，可以点进去看一下。</p>\\n<p>PS：对web worker不熟悉的同学可以看我这篇<a href=\"https://juejin.im/post/5bf8fa045188252f170e0dcb\" target=\"_blank\" rel=\"noopener noreferrer\">文章<OutboundLink/></a></p>\\n<h4 id=\"beacon其他相关\"><a class=\"header-anchor\" href=\"#beacon其他相关\" aria-hidden=\"true\">#</a> Beacon其他相关</h4>\\n<ul>\\n<li><strong>客户端优化：可以将 Beacon 请求合并到其他请求上，一同处理</strong>, 尤其在移动环境下。</li>\\n<li><strong>Beacon更多的情况是用于做前端埋点，监控用户活动</strong>，它的初衷也基于此。</li>\\n</ul>\\n<h2 id=\"小结\"><a class=\"header-anchor\" href=\"#小结\" aria-hidden=\"true\">#</a> 小结</h2>\\n<p>本文总共讲了三个API，<code>beforeunload</code>、<code>unload</code>和<code>Beacon</code>，<code>Beacon</code>这个API估计知道的人比较少，以后遇到前端埋点和页面卸载前发送请求的需求，记得使用这三个API。</p>\\n<p>以上2019.02.19</p>\\n<p><a href=\"http://obkoro1.com/\" target=\"_blank\" rel=\"noopener noreferrer\">博客<OutboundLink/></a>、<a href=\"http://obkoro1.com/web_accumulate/accumulate/\" target=\"_blank\" rel=\"noopener noreferrer\">前端积累文档<OutboundLink/></a>、<a href=\"https://github.com/OBKoro1/articleImg_src/blob/master/juejin/1631b6f52f7e7015.jpeg?raw=true\" target=\"_blank\" rel=\"noopener noreferrer\">公众号<OutboundLink/></a>、<a href=\"https://github.com/OBKoro1\" target=\"_blank\" rel=\"noopener noreferrer\">GitHub<OutboundLink/></a></p>\\n<p>参考资料：</p>\\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Beacon_API/Using_the_Beacon_API\" target=\"_blank\" rel=\"noopener noreferrer\">MDN<OutboundLink/></a></p>\\n<p><a href=\"https://www.barretlee.com/blog/2016/02/20/navigator-beacon-api/\" target=\"_blank\" rel=\"noopener noreferrer\">页面跳转时，统计数据丢失问题探讨<OutboundLink/></a></p>\\n<p><a href=\"https://juejin.im/post/5b694b5de51d4519700fa56a#heading-4\" target=\"_blank\" rel=\"noopener noreferrer\">使用 Web Beacon API 记录活动<OutboundLink/></a>\\n\\x3c!-- 特殊字符串：用于修改/删除markdown的结尾提示语-OBKoro1 --\\x3e</p>\\n<h3 id=\"点个star支持我一下\"><a class=\"header-anchor\" href=\"#点个star支持我一下\" aria-hidden=\"true\">#</a> 点个<a href=\"https://github.com/OBKoro1/web_accumulate\" target=\"_blank\" rel=\"noopener noreferrer\">Star<OutboundLink/></a>支持我一下~</h3>\\n\\x3c!-- \\'特殊字符串：用于删除编译后的issue组件-OBKoro1 --\\x3e\\n'},{key:\"v-f37c68dc7d1f6\",path:\"/accumulate/electron/electron-terminal-demo.html\",lastUpdated:161043936e4,title:\"从零开始带你写一个运行命令行的终端[手把手教学]\",headers:[{level:3,title:\"前言\",slug:\"前言\"},{level:2,title:\"终端效果\",slug:\"终端效果\"},{level:3,title:\"目录\",slug:\"目录\"},{level:3,title:\"初始化项目\",slug:\"初始化项目\"},{level:3,title:\"项目目录结构\",slug:\"项目目录结构\"},{level:3,title:\"Electron启动入口index-创建窗口\",slug:\"electron启动入口index-创建窗口\"},{level:3,title:\"进程通信类-processMessage\",slug:\"进程通信类-processmessage\"},{level:2,title:\"窗口html页面-命令行面板\",slug:\"窗口html页面-命令行面板\"},{level:2,title:\"命令行面板做了哪些事情\",slug:\"命令行面板做了哪些事情\"},{level:3,title:\"核心方法：child_process.spawn-执行命令行监听命令行的输出\",slug:\"核心方法：child-process-spawn-执行命令行监听命令行的输出\"},{level:3,title:\"stderr不能直接识别为命令行执行错误\",slug:\"stderr不能直接识别为命令行执行错误\"},{level:3,title:\"命令行终端执行命令保存输出信息的核心代码\",slug:\"命令行终端执行命令保存输出信息的核心代码\"},{level:2,title:\"下载试玩\",slug:\"下载试玩\"},{level:3,title:\"项目演示\",slug:\"项目演示\"},{level:3,title:\"项目地址\",slug:\"项目地址\"},{level:3,title:\"启动与调试\",slug:\"启动与调试\"},{level:2,title:\"小结\",slug:\"小结\"},{level:3,title:\"点个Star支持我一下~\",slug:\"点个star支持我一下\"}],excerpt:'<h1 id=\"从零开始带你写一个运行命令行的终端-手把手教学\"><a class=\"header-anchor\" href=\"#从零开始带你写一个运行命令行的终端-手把手教学\" aria-hidden=\"true\">#</a> 从零开始带你写一个运行命令行的终端[手把手教学]</h1>\\n<p><img src=\"https://raw.githubusercontent.com/OBKoro1/articleImg_src/master/2021/electron-terminal/electron-terminal-img.jpg\" alt=\"\"></p>\\n<h3 id=\"前言\"><a class=\"header-anchor\" href=\"#前言\" aria-hidden=\"true\">#</a> 前言</h3>\\n<p><code>Electron</code>很出名，很多人可能了解过，知道它是用来开发桌面端的应用，但是一直没有在项目中实践过，缺乏练手的实践项目。</p>\\n<p>很多开源的命令行终端都是使用<code>Electron</code>来开发的，本文将从零开始手把手的教大家用<code>Electron</code>写一个命令行终端。</p>\\n<p>作为一个完整的实战项目示例，该终端demo也将集成到<code>Electron</code>开源学习项目<a href=\"https://github.com/tal-tech/electron-playground\" target=\"_blank\" rel=\"noopener noreferrer\">electron-playground<OutboundLink/></a>中，目前这个项目拥有700+ Star⭐️，它最大的特点是所见即所得的演示<code>Electron</code>的各种特性，帮助大家快速学习、上手<code>Electron</code>。</p>\\n<p>大家跟着本文一起来试试Electron吧~</p>\\n<h2 id=\"终端效果\"><a class=\"header-anchor\" href=\"#终端效果\" aria-hidden=\"true\">#</a> 终端效果</h2>\\n<p>开源地址: <a href=\"https://github.com/OBKoro1/electron-terminal-demo\" target=\"_blank\" rel=\"noopener noreferrer\">electron-terminal-demo<OutboundLink/></a></p>\\n<p><strong>giit提交代码演示</strong></p>\\n<p><img src=\"https://raw.githubusercontent.com/OBKoro1/articleImg_src/master/2021/electron-terminal/electron-terminal-git.gif\" alt=\"\"></p>\\n<h3 id=\"目录\"><a class=\"header-anchor\" href=\"#目录\" aria-hidden=\"true\">#</a> 目录</h3>\\n<ol>\\n<li>\\n<p>初始化项目。</p>\\n</li>\\n<li>\\n<p>项目目录结构</p>\\n</li>\\n<li>\\n<p>Electron启动入口index-创建窗口</p>\\n</li>\\n<li>\\n<p>进程通信类-processMessage。</p>\\n</li>\\n<li>\\n<p>窗口html页面-命令行面板</p>\\n</li>\\n<li>\\n<p>命令行面板做了哪些事情</p>\\n<ul>\\n<li>核心方法：child_process.spawn-执行命令行监听命令行的输出</li>\\n<li>stderr不能直接识别为命令行执行错误</li>\\n<li>命令行终端执行命令保存输出信息的核心代码</li>\\n<li>html完整代码</li>\\n<li>命令行终端的更多细节</li>\\n</ul>\\n</li>\\n<li>\\n<p>下载试玩</p>\\n<ul>\\n<li>项目演示</li>\\n<li>项目地址</li>\\n<li>启动与调试</li>\\n</ul>\\n</li>\\n<li>\\n<p>小结</p>\\n</li>\\n</ol>\\n<h3 id=\"初始化项目\"><a class=\"header-anchor\" href=\"#初始化项目\" aria-hidden=\"true\">#</a> 初始化项目</h3>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code>npm init\\nnpm install electron <span class=\"token operator\">-</span><span class=\"token constant\">D</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<p>如果Electron安装不上去，需要添加一个<code>.npmrc</code>文件,来修改<code>Electron</code>的安装地址,文件内容如下：</p>\\n\\x3c!--beforebegin--\\x3e<div class=\"language- line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-text\"><code>registry=https://registry.npm.taobao.org/\\nelectron_mirror=https://npm.taobao.org/mirrors/electron/\\nchromedriver_cdnurl=https://npm.taobao.org/mirrors/chromedriver\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<p>修改一下<code>package.json</code>的入口<code>main</code>和<code>scripts</code>选项, 现在<code>package.json</code>长这样，很简洁:</p>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code><span class=\"token punctuation\">{</span>\\n  <span class=\"token string\">\"name\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"electron-terminal\"</span><span class=\"token punctuation\">,</span>\\n  <span class=\"token string\">\"version\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"1.0.0\"</span><span class=\"token punctuation\">,</span>\\n  <span class=\"token string\">\"main\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"./src/index.js\"</span><span class=\"token punctuation\">,</span>\\n  <span class=\"token string\">\"scripts\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\\n    <span class=\"token string\">\"start\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"electron .\"</span>\\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\\n  <span class=\"token string\">\"devDependencies\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\\n    <span class=\"token string\">\"electron\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"^11.1.1\"</span>\\n  <span class=\"token punctuation\">}</span>\\n<span class=\"token punctuation\">}</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br><span class=\"line-number\">11</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<h3 id=\"项目目录结构\"><a class=\"header-anchor\" href=\"#项目目录结构\" aria-hidden=\"true\">#</a> 项目目录结构</h3>\\n<p>我们最终实现的项目将是下面这样子的，页面css文件不算的话，我们只需要实现src下面的三个文件即可。</p>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code><span class=\"token punctuation\">.</span>\\n├── <span class=\"token punctuation\">.</span>vscode <span class=\"token comment\">// 使用vscode的调试功能启动项目</span>\\n├── node_dodules\\n├── src\\n│   ├── index<span class=\"token punctuation\">.</span>js <span class=\"token comment\">// Electron启动入口-创建窗口</span>\\n│   └── processMessage<span class=\"token punctuation\">.</span>js <span class=\"token comment\">// 主进程和渲染进程通信类-进程通信、监听时间</span>\\n│   └── index<span class=\"token punctuation\">.</span>html <span class=\"token comment\">// 窗口html页面-命令行面板、执行命令并监听输出</span>\\n│   └── index<span class=\"token punctuation\">.</span>css <span class=\"token comment\">// 窗口html的css样式 这部分不写</span>\\n├── <span class=\"token keyword\">package</span><span class=\"token punctuation\">.</span>json\\n└── <span class=\"token punctuation\">.</span>npmrc <span class=\"token comment\">// 修改npm安装包的地址</span>\\n└── <span class=\"token punctuation\">.</span>gitignore\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br><span class=\"line-number\">11</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<h3 id=\"electron启动入口index-创建窗口\"><a class=\"header-anchor\" href=\"#electron启动入口index-创建窗口\" aria-hidden=\"true\">#</a> Electron启动入口index-创建窗口</h3>\\n<ol>\\n<li>创建窗口, 赋予窗口直接使用node的能力。</li>\\n<li>窗口加载本地html页面</li>\\n<li>加载主线程和渲染进程通信逻辑</li>\\n</ol>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code><span class=\"token comment\">// ./src/index.js</span>\\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> app<span class=\"token punctuation\">,</span> BrowserWindow <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\\'electron\\'</span><span class=\"token punctuation\">)</span>\\n<span class=\"token keyword\">const</span> processMessage <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\\'./processMessage\\'</span><span class=\"token punctuation\">)</span>\\n\\n<span class=\"token comment\">// 创建窗口</span>\\n<span class=\"token keyword\">function</span> <span class=\"token function\">createWindow</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n  <span class=\"token comment\">// 创建窗口</span>\\n  <span class=\"token keyword\">const</span> win <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BrowserWindow</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\\n    width<span class=\"token punctuation\">:</span> <span class=\"token number\">800</span><span class=\"token punctuation\">,</span>\\n    height<span class=\"token punctuation\">:</span> <span class=\"token number\">600</span><span class=\"token punctuation\">,</span>\\n    webPreferences<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\\n      nodeIntegration<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 页面直接使用node的能力 用于引入node模块 执行命令</span>\\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\\n  <span class=\"token comment\">// 加载本地页面</span>\\n  win<span class=\"token punctuation\">.</span><span class=\"token function\">loadFile</span><span class=\"token punctuation\">(</span><span class=\"token string\">\\'./src/index.html\\'</span><span class=\"token punctuation\">)</span>\\n  win<span class=\"token punctuation\">.</span>webContents<span class=\"token punctuation\">.</span><span class=\"token function\">openDevTools</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 打开控制台</span>\\n  <span class=\"token comment\">// 主线程和渲染进程通信</span>\\n  <span class=\"token keyword\">const</span> ProcessMessage <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">processMessage</span><span class=\"token punctuation\">(</span>win<span class=\"token punctuation\">)</span>\\n  ProcessMessage<span class=\"token punctuation\">.</span><span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\\n<span class=\"token punctuation\">}</span>\\n\\n<span class=\"token comment\">// app ready 创建窗口</span>\\napp<span class=\"token punctuation\">.</span><span class=\"token function\">whenReady</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span>createWindow<span class=\"token punctuation\">)</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br><span class=\"line-number\">11</span><br><span class=\"line-number\">12</span><br><span class=\"line-number\">13</span><br><span class=\"line-number\">14</span><br><span class=\"line-number\">15</span><br><span class=\"line-number\">16</span><br><span class=\"line-number\">17</span><br><span class=\"line-number\">18</span><br><span class=\"line-number\">19</span><br><span class=\"line-number\">20</span><br><span class=\"line-number\">21</span><br><span class=\"line-number\">22</span><br><span class=\"line-number\">23</span><br><span class=\"line-number\">24</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<h3 id=\"进程通信类-processmessage\"><a class=\"header-anchor\" href=\"#进程通信类-processmessage\" aria-hidden=\"true\">#</a> 进程通信类-processMessage</h3>\\n<p>electron分为主进程和渲染进程，因为进程不同，在各种事件发生的对应时机需要相互通知来执行一些功能。</p>\\n<p>这个类就是用于它们之间的通信的，electron通信这部分封装的很简洁了，照着用就可以了。</p>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code><span class=\"token comment\">// ./src/processMessage.js</span>\\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> ipcMain <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\\'electron\\'</span><span class=\"token punctuation\">)</span>\\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">ProcessMessage</span> <span class=\"token punctuation\">{</span>\\n  <span class=\"token comment\">/**\\n   * 进程通信\\n   * @param {*} win 创建的窗口\\n   */</span>\\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span>win<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>win <span class=\"token operator\">=</span> win\\n  <span class=\"token punctuation\">}</span>\\n  <span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">watch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\\n  <span class=\"token punctuation\">}</span>\\n  <span class=\"token comment\">// 监听渲染进程事件通信</span>\\n  <span class=\"token function\">watch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n    <span class=\"token comment\">// 页面准备好了</span>\\n    ipcMain<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">\\'page-ready\\'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">sendFocus</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\\n  <span class=\"token punctuation\">}</span>\\n  <span class=\"token comment\">// 监听窗口、app、等模块的事件</span>\\n  <span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n    <span class=\"token comment\">// 监听窗口是否聚焦</span>\\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>win<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">\\'focus\\'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">sendFocus</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span>\\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>win<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">\\'blur\\'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">sendFocus</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span>\\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\\n  <span class=\"token punctuation\">}</span>\\n  <span class=\"token comment\">/**\\n   * 窗口聚焦事件发送\\n   * @param {*} isActive 是否聚焦\\n   */</span>\\n  <span class=\"token function\">sendFocus</span><span class=\"token punctuation\">(</span>isActive<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n    <span class=\"token comment\">// 主线程发送事件给窗口</span>\\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>win<span class=\"token punctuation\">.</span>webContents<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token string\">\\'win-focus\\'</span><span class=\"token punctuation\">,</span> isActive<span class=\"token punctuation\">)</span>\\n  <span class=\"token punctuation\">}</span>\\n<span class=\"token punctuation\">}</span>\\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> ProcessMessage\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br><span class=\"line-number\">11</span><br><span class=\"line-number\">12</span><br><span class=\"line-number\">13</span><br><span class=\"line-number\">14</span><br><span class=\"line-number\">15</span><br><span class=\"line-number\">16</span><br><span class=\"line-number\">17</span><br><span class=\"line-number\">18</span><br><span class=\"line-number\">19</span><br><span class=\"line-number\">20</span><br><span class=\"line-number\">21</span><br><span class=\"line-number\">22</span><br><span class=\"line-number\">23</span><br><span class=\"line-number\">24</span><br><span class=\"line-number\">25</span><br><span class=\"line-number\">26</span><br><span class=\"line-number\">27</span><br><span class=\"line-number\">28</span><br><span class=\"line-number\">29</span><br><span class=\"line-number\">30</span><br><span class=\"line-number\">31</span><br><span class=\"line-number\">32</span><br><span class=\"line-number\">33</span><br><span class=\"line-number\">34</span><br><span class=\"line-number\">35</span><br><span class=\"line-number\">36</span><br><span class=\"line-number\">37</span><br><span class=\"line-number\">38</span><br><span class=\"line-number\">39</span><br><span class=\"line-number\">40</span><br><span class=\"line-number\">41</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<h2 id=\"窗口html页面-命令行面板\"><a class=\"header-anchor\" href=\"#窗口html页面-命令行面板\" aria-hidden=\"true\">#</a> 窗口html页面-命令行面板</h2>\\n<p>在创建窗口的时候，我们赋予了窗口使用node的能力, 可以在html中直接使用node模块。</p>\\n<p>所以我们不需要通过进程通信的方式来执行命令和渲染输出，可以直接在一个文件里面完成。</p>\\n<p><strong>终端的核心在于执行命令，渲染命令行输出，保存命令行的输出</strong>。</p>\\n<p>这些都在这个文件里面实现了，代码行数不到250行。</p>\\n<h2 id=\"命令行面板做了哪些事情\"><a class=\"header-anchor\" href=\"#命令行面板做了哪些事情\" aria-hidden=\"true\">#</a> 命令行面板做了哪些事情</h2>\\n<ul>\\n<li>\\n<p>页面: 引入vue、element,css文件来处理页面</p>\\n</li>\\n<li>\\n<p>template模板-渲染当前命令行执行的输出以及历史命令行的执行输出</p>\\n</li>\\n<li>\\n<p><strong>核心</strong>:执行命令监听命令行输出</p>\\n<ul>\\n<li>执行命令并监听执行命令的输出，同步渲染输出。</li>\\n<li>执行完毕，保存命令行输出的信息。</li>\\n<li>渲染历史命令行输出。</li>\\n<li>对一些命令进行特殊处理，比如下面的细节处理。</li>\\n</ul>\\n</li>\\n<li>\\n<p>围绕执行命令行的细节处理</p>\\n<ul>\\n<li>识别cd，根据系统保存cd路径</li>\\n<li>识别clear清空所有输出。</li>\\n<li>执行成功与失败的箭头图标展示。</li>\\n<li>聚焦窗口，聚焦输入。</li>\\n<li>命令执行完毕滚动底部。</li>\\n<li>等等细节。</li>\\n</ul>\\n</li>\\n</ul>\\n<h3 id=\"核心方法：child-process-spawn-执行命令行监听命令行的输出\"><a class=\"header-anchor\" href=\"#核心方法：child-process-spawn-执行命令行监听命令行的输出\" aria-hidden=\"true\">#</a> 核心方法：child_process.spawn-执行命令行监听命令行的输出</h3>\\n<h4 id=\"child-process-spawn介绍\"><a class=\"header-anchor\" href=\"#child-process-spawn介绍\" aria-hidden=\"true\">#</a> child_process.spawn介绍</h4>\\n<p><code>spawn</code>是node子进程模块<code>child_process</code>提供的一个异步方法。</p>\\n<p><strong>它的作用是执行命令并且可以实时监听命令行执行的输出</strong>。</p>\\n<p>当我第一次知道这个API的时候，我就感觉这个方法简直是为命令行终端量身定做的。</p>\\n<p>终端的核心也是执行命令行，并且实时输出命令行执行期间的信息。</p>\\n<p>下面就来看看它的使用方式。</p>\\n<h4 id=\"使用方式\"><a class=\"header-anchor\" href=\"#使用方式\" aria-hidden=\"true\">#</a> 使用方式</h4>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code><span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> spawn <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\\'child_process\\'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\n<span class=\"token keyword\">const</span> ls <span class=\"token operator\">=</span> <span class=\"token function\">spawn</span><span class=\"token punctuation\">(</span><span class=\"token string\">\\'ls\\'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\\n  encoding<span class=\"token punctuation\">:</span> <span class=\"token string\">\\'utf8\\'</span><span class=\"token punctuation\">,</span>\\n  cwd<span class=\"token punctuation\">:</span> process<span class=\"token punctuation\">.</span><span class=\"token function\">cwd</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 执行命令路径</span>\\n  shell<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 使用shell命令</span>\\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\\n\\n<span class=\"token comment\">// 监听标准输出</span>\\nls<span class=\"token punctuation\">.</span>stdout<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">\\'data\\'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token string\">`stdout: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>data<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\n\\n<span class=\"token comment\">// 监听标准错误</span>\\nls<span class=\"token punctuation\">.</span>stderr<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">\\'data\\'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token string\">`stderr: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>data<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\n\\n<span class=\"token comment\">// 子进程关闭事件</span>\\nls<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">\\'close\\'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>code<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token string\">`子进程退出，退出码 </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>code<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br><span class=\"line-number\">11</span><br><span class=\"line-number\">12</span><br><span class=\"line-number\">13</span><br><span class=\"line-number\">14</span><br><span class=\"line-number\">15</span><br><span class=\"line-number\">16</span><br><span class=\"line-number\">17</span><br><span class=\"line-number\">18</span><br><span class=\"line-number\">19</span><br><span class=\"line-number\">20</span><br><span class=\"line-number\">21</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<p>api的使用很简单，但是终端信息的输出，需要很多细节的处理，比如下面这个。</p>\\n<h3 id=\"stderr不能直接识别为命令行执行错误\"><a class=\"header-anchor\" href=\"#stderr不能直接识别为命令行执行错误\" aria-hidden=\"true\">#</a> stderr不能直接识别为命令行执行错误</h3>\\n<p><code>stderr</code>虽然是标准错误输出，但里面的信息不全是错误的信息，不同的工具会有不同的处理。</p>\\n<p>对于<code>git</code>来说，有很多命令行操作的输出信息都输出在<code>stederr</code>上。</p>\\n<p>比如<code>git clone</code>、<code>git push</code>等，信息输出在<code>stederr</code>中，我们不能将其视为错误。</p>\\n<p><code>git</code>总是将<strong>详细的状态信息和进度报告</strong>，以及只读信息，发送给<code>stederr</code>。</p>\\n<p>具体细节可以查看<a href=\"https://juejin.cn/post/6844903676792815629\" target=\"_blank\" rel=\"noopener noreferrer\">git stderr(错误流)探秘<OutboundLink/></a>等资料。</p>\\n<p>暂时还不清楚其他工具/命令行也有没有类似的操作，但是很明显我们不能将<code>stederr</code>的信息视为错误的信息。</p>\\n<p>PS: 对于git如果想提供更好的支持，需要根据不同的<code>git</code>命令进行特殊处理，比如对下面<code>clear</code>命令和<code>cd</code>命令的特殊处理。</p>\\n<p><strong>根据子进程close事件判断命令行是否执行成功</strong></p>\\n<p>我们应该检测<code>close</code>事件的退出码<code>code</code>, 如果<code>code</code>为0则表示命令行执行成功，否则即为失败。</p>\\n<h3 id=\"命令行终端执行命令保存输出信息的核心代码\"><a class=\"header-anchor\" href=\"#命令行终端执行命令保存输出信息的核心代码\" aria-hidden=\"true\">#</a> 命令行终端执行命令保存输出信息的核心代码</h3>\\n<p>下面这段是命令行面板的核心代码，我贴一下大家重点看一下，</p>\\n<p>其他部分都是一些细节、优化体验、状态处理这样的代码，下面会将完整的html贴上来。</p>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code><span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> spawn <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\\'child_process\\'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 使用node child_process模块</span>\\n<span class=\"token comment\">// 执行命令行</span>\\n<span class=\"token function\">actionCommand</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n  <span class=\"token comment\">// 处理command命令 </span>\\n  <span class=\"token keyword\">const</span> command <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>command<span class=\"token punctuation\">.</span><span class=\"token function\">trim</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">isClear</span><span class=\"token punctuation\">(</span>command<span class=\"token punctuation\">)</span>\\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>command <span class=\"token operator\">===</span> <span class=\"token string\">\\'\\'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span>\\n  <span class=\"token comment\">// 执行命令行</span>\\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>action <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span>\\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleCommand <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">cdCommand</span><span class=\"token punctuation\">(</span>command<span class=\"token punctuation\">)</span>\\n  <span class=\"token keyword\">const</span> ls <span class=\"token operator\">=</span> <span class=\"token function\">spawn</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleCommand<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\\n    encoding<span class=\"token punctuation\">:</span> <span class=\"token string\">\\'utf8\\'</span><span class=\"token punctuation\">,</span>\\n    cwd<span class=\"token punctuation\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">,</span> <span class=\"token comment\">// 执行命令路径</span>\\n    shell<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 使用shell命令</span>\\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\\n  <span class=\"token comment\">// 监听命令行执行过程的输出</span>\\n  ls<span class=\"token punctuation\">.</span>stdout<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">\\'data\\'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\\n    <span class=\"token keyword\">const</span> value <span class=\"token operator\">=</span> data<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">trim</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>commandMsg<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span>\\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token string\">`stdout: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>value<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">`</span></span><span class=\"token punctuation\">)</span>\\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\\n\\n  ls<span class=\"token punctuation\">.</span>stderr<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">\\'data\\'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>stderrMsgHandle<span class=\"token punctuation\">)</span>\\n  ls<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">\\'close\\'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>closeCommandAction<span class=\"token punctuation\">)</span>\\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\\n<span class=\"token comment\">// 错误或详细状态进度报告 比如 git push</span>\\n<span class=\"token function\">stderrMsgHandle</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token string\">`stderr: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>data<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">`</span></span><span class=\"token punctuation\">)</span>\\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>commandMsg<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token string\">`stderr: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>data<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">`</span></span><span class=\"token punctuation\">)</span>\\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\\n<span class=\"token comment\">// 执行完毕 保存信息 更新状态</span>\\n<span class=\"token function\">closeCommandAction</span><span class=\"token punctuation\">(</span>code<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n  <span class=\"token comment\">// 保存执行信息</span>\\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>commandArr<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\\n    code<span class=\"token punctuation\">,</span> <span class=\"token comment\">// 是否执行成功</span>\\n    path<span class=\"token punctuation\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">,</span> <span class=\"token comment\">// 执行路径</span>\\n    command<span class=\"token punctuation\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>command<span class=\"token punctuation\">,</span> <span class=\"token comment\">// 执行命令</span>\\n    commandMsg<span class=\"token punctuation\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>commandMsg<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">\\'\\\\r\\'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 执行信息</span>\\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\\n  <span class=\"token comment\">// 清空</span>\\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">updatePath</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleCommand<span class=\"token punctuation\">,</span> code<span class=\"token punctuation\">)</span>\\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">commandFinish</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>\\n    <span class=\"token template-string\"><span class=\"token string\">`子进程退出，退出码 </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>code<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">, 运行</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>code <span class=\"token operator\">===</span> <span class=\"token number\">0</span> <span class=\"token operator\">?</span> <span class=\"token string\">\\'成功\\'</span> <span class=\"token punctuation\">:</span> <span class=\"token string\">\\'失败\\'</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">`</span></span>\\n  <span class=\"token punctuation\">)</span>\\n<span class=\"token punctuation\">}</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br><span class=\"line-number\">11</span><br><span class=\"line-number\">12</span><br><span class=\"line-number\">13</span><br><span class=\"line-number\">14</span><br><span class=\"line-number\">15</span><br><span class=\"line-number\">16</span><br><span class=\"line-number\">17</span><br><span class=\"line-number\">18</span><br><span class=\"line-number\">19</span><br><span class=\"line-number\">20</span><br><span class=\"line-number\">21</span><br><span class=\"line-number\">22</span><br><span class=\"line-number\">23</span><br><span class=\"line-number\">24</span><br><span class=\"line-number\">25</span><br><span class=\"line-number\">26</span><br><span class=\"line-number\">27</span><br><span class=\"line-number\">28</span><br><span class=\"line-number\">29</span><br><span class=\"line-number\">30</span><br><span class=\"line-number\">31</span><br><span class=\"line-number\">32</span><br><span class=\"line-number\">33</span><br><span class=\"line-number\">34</span><br><span class=\"line-number\">35</span><br><span class=\"line-number\">36</span><br><span class=\"line-number\">37</span><br><span class=\"line-number\">38</span><br><span class=\"line-number\">39</span><br><span class=\"line-number\">40</span><br><span class=\"line-number\">41</span><br><span class=\"line-number\">42</span><br><span class=\"line-number\">43</span><br><span class=\"line-number\">44</span><br><span class=\"line-number\">45</span><br><span class=\"line-number\">46</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<h4 id=\"html完整代码\"><a class=\"header-anchor\" href=\"#html完整代码\" aria-hidden=\"true\">#</a> html完整代码</h4>\\n<p>这里是html的完整代码，代码中有详细注释，建议根据上面的<strong>命令行面板做了哪些事情</strong>，来阅读源码。</p>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-html line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-html\"><code><span class=\"token doctype\">&lt;!DOCTYPE html></span>\\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span><span class=\"token punctuation\">></span></span>\\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>head</span><span class=\"token punctuation\">></span></span>\\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">charset</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>UTF-8<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>viewport<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">content</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>width=device-width, initial-scale=1.0<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>title</span><span class=\"token punctuation\">></span></span>极简electron终端<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>title</span><span class=\"token punctuation\">></span></span>\\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>link</span>\\n      <span class=\"token attr-name\">rel</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>stylesheet<span class=\"token punctuation\">\"</span></span>\\n      <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>https://unpkg.com/element-ui/lib/theme-chalk/index.css<span class=\"token punctuation\">\"</span></span>\\n    <span class=\"token punctuation\">/></span></span>\\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>https://unpkg.com/vue<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token script language-javascript\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span>\\n    <span class=\"token comment\">&lt;!-- 引入element --\\x3e</span>\\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>https://unpkg.com/element-ui/lib/index.js<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token script language-javascript\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span>\\n    <span class=\"token comment\">&lt;!-- css --\\x3e</span>\\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>link</span> <span class=\"token attr-name\">rel</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>stylesheet<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>./index.css<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">></span></span>\\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">></span></span>\\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>app<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>main-class<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\\n        <span class=\"token comment\">&lt;!-- 渲染过往的命令行 --\\x3e</span>\\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">v-for</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>item in commandArr<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\\n          <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>command-action<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\\n            <span class=\"token comment\">&lt;!-- 执行成功或者失败图标切换 --\\x3e</span>\\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>i</span>\\n              <span class=\"token attr-name\">:class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>[<span class=\"token punctuation\">\\'</span>el-icon-right<span class=\"token punctuation\">\\'</span>, <span class=\"token punctuation\">\\'</span>command-action-icon<span class=\"token punctuation\">\\'</span>, { <span class=\"token punctuation\">\\'</span>error-icon<span class=\"token punctuation\">\\'</span>: item.code !== 0  }]<span class=\"token punctuation\">\"</span></span>\\n            <span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>i</span><span class=\"token punctuation\">></span></span>\\n            <span class=\"token comment\">&lt;!-- 过往执行地址和命令行、信息 --\\x3e</span>\\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>command-action-path<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>{{ item.path }} $<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">></span></span>\\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>command-action-contenteditable<span class=\"token punctuation\">\"</span></span>\\n              <span class=\"token punctuation\">></span></span>{{ item.command }}<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span>\\n            <span class=\"token punctuation\">></span></span>\\n          <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\\n          <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>output-command<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>{{ item.commandMsg }}<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\\n        <span class=\"token comment\">&lt;!-- 当前输入的命令行 --\\x3e</span>\\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span>\\n          <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>command-action command-action-editor<span class=\"token punctuation\">\"</span></span>\\n          <span class=\"token attr-name\">@mouseup</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>timeoutFocusInput<span class=\"token punctuation\">\"</span></span>\\n        <span class=\"token punctuation\">></span></span>\\n          <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>i</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>el-icon-right command-action-icon<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>i</span><span class=\"token punctuation\">></span></span>\\n          <span class=\"token comment\">&lt;!-- 执行地址 --\\x3e</span>\\n          <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>command-action-path<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>{{ path }} $<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">></span></span>\\n          <span class=\"token comment\">&lt;!-- 命令行输入 --\\x3e</span>\\n          <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span>\\n            <span class=\"token attr-name\">:contenteditable</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>action ? false : <span class=\"token punctuation\">\\'</span>plaintext-only<span class=\"token punctuation\">\\'</span><span class=\"token punctuation\">\"</span></span>\\n            <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>command-action-contenteditable<span class=\"token punctuation\">\"</span></span>\\n            <span class=\"token attr-name\">@input</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>onDivInput($event)<span class=\"token punctuation\">\"</span></span>\\n            <span class=\"token attr-name\">@keydown</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>keyFn<span class=\"token punctuation\">\"</span></span>\\n          <span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">></span></span>\\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\\n        <span class=\"token comment\">&lt;!-- 当前命令行输出 --\\x3e</span>\\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>output-command<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\\n          <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">v-for</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>item in commandMsg<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>{{item}}<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\\n\\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">></span></span><span class=\"token script language-javascript\">\\n      <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> ipcRenderer <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\\'electron\\'</span><span class=\"token punctuation\">)</span>\\n      <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> spawn <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\\'child_process\\'</span><span class=\"token punctuation\">)</span>\\n      <span class=\"token keyword\">const</span> path <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\\'path\\'</span><span class=\"token punctuation\">)</span>\\n\\n      <span class=\"token keyword\">var</span> app <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Vue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\\n        el<span class=\"token punctuation\">:</span> <span class=\"token string\">\\'#app\\'</span><span class=\"token punctuation\">,</span>\\n        data<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\\n          path<span class=\"token punctuation\">:</span> <span class=\"token string\">\\'\\'</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 命令行目录</span>\\n          command<span class=\"token punctuation\">:</span> <span class=\"token string\">\\'\\'</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 用户输入命令</span>\\n          handleCommand<span class=\"token punctuation\">:</span> <span class=\"token string\">\\'\\'</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 经过处理的用户命令 比如清除首尾空格、添加获取路径的命令</span>\\n          commandMsg<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 当前命令信息</span>\\n          commandArr<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 过往命令行输出保存</span>\\n          isActive<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 终端是否聚焦</span>\\n          action<span class=\"token punctuation\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 是否正在执行命令</span>\\n          inputDom<span class=\"token punctuation\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 输入框dom</span>\\n          addPath<span class=\"token punctuation\">:</span> <span class=\"token string\">\\'\\'</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 不同系统 获取路径的命令 mac是pwd window是chdir</span>\\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\\n        <span class=\"token function\">mounted</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n          <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">addGetPath</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\\n          <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>inputDom <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span>\\n            <span class=\"token string\">\\'.command-action-contenteditable\\'</span>\\n          <span class=\"token punctuation\">)</span>\\n          <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>path <span class=\"token operator\">=</span> process<span class=\"token punctuation\">.</span><span class=\"token function\">cwd</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 初始化路径</span>\\n          <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">watchFocus</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\\n          ipcRenderer<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token string\">\\'page-ready\\'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 告诉主进程页面准备好了</span>\\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\\n        methods<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\\n          <span class=\"token comment\">// 回车执行命令</span>\\n          <span class=\"token function\">keyFn</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>keyCode <span class=\"token operator\">==</span> <span class=\"token number\">13</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n              <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">actionCommand</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\\n              e<span class=\"token punctuation\">.</span><span class=\"token function\">preventDefault</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\\n            <span class=\"token punctuation\">}</span>\\n          <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\\n          <span class=\"token comment\">// 执行命令</span>\\n          <span class=\"token function\">actionCommand</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n            <span class=\"token keyword\">const</span> command <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>command<span class=\"token punctuation\">.</span><span class=\"token function\">trim</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">isClear</span><span class=\"token punctuation\">(</span>command<span class=\"token punctuation\">)</span>\\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>command <span class=\"token operator\">===</span> <span class=\"token string\">\\'\\'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span>\\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>action <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span>\\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleCommand <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">cdCommand</span><span class=\"token punctuation\">(</span>command<span class=\"token punctuation\">)</span>\\n            <span class=\"token keyword\">const</span> ls <span class=\"token operator\">=</span> <span class=\"token function\">spawn</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleCommand<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\\n              encoding<span class=\"token punctuation\">:</span> <span class=\"token string\">\\'utf8\\'</span><span class=\"token punctuation\">,</span>\\n              cwd<span class=\"token punctuation\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">,</span> <span class=\"token comment\">// 执行命令路径</span>\\n              shell<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 使用shell命令</span>\\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\\n            <span class=\"token comment\">// 监听命令行执行过程的输出</span>\\n            ls<span class=\"token punctuation\">.</span>stdout<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">\\'data\\'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\\n              <span class=\"token keyword\">const</span> value <span class=\"token operator\">=</span> data<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">trim</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\\n              <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>commandMsg<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span>\\n              console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token string\">`stdout: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>value<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">`</span></span><span class=\"token punctuation\">)</span>\\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\\n            <span class=\"token comment\">// 错误或详细状态进度报告 比如 git push、 git clone </span>\\n            ls<span class=\"token punctuation\">.</span>stderr<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">\\'data\\'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\\n              <span class=\"token keyword\">const</span> value <span class=\"token operator\">=</span> data<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">trim</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\\n              <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>commandMsg<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token string\">`stderr: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>data<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">`</span></span><span class=\"token punctuation\">)</span>\\n              console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token string\">`stderr: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>data<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">`</span></span><span class=\"token punctuation\">)</span>\\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\\n            <span class=\"token comment\">// 子进程关闭事件 保存信息 更新状态</span>\\n            ls<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">\\'close\\'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>closeCommandAction<span class=\"token punctuation\">)</span> \\n          <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\\n          <span class=\"token comment\">// 执行完毕 保存信息 更新状态</span>\\n          <span class=\"token function\">closeCommandAction</span><span class=\"token punctuation\">(</span>code<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n            <span class=\"token comment\">// 保存执行信息</span>\\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>commandArr<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\\n              code<span class=\"token punctuation\">,</span> <span class=\"token comment\">// 是否执行成功</span>\\n              path<span class=\"token punctuation\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">,</span> <span class=\"token comment\">// 执行路径</span>\\n              command<span class=\"token punctuation\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>command<span class=\"token punctuation\">,</span> <span class=\"token comment\">// 执行命令</span>\\n              commandMsg<span class=\"token punctuation\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>commandMsg<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">\\'\\\\r\\'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 执行信息</span>\\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\\n            <span class=\"token comment\">// 清空</span>\\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">updatePath</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleCommand<span class=\"token punctuation\">,</span> code<span class=\"token punctuation\">)</span>\\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">commandFinish</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\\n            console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>\\n              <span class=\"token template-string\"><span class=\"token string\">`子进程退出，退出码 </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>code<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">, 运行</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>code <span class=\"token operator\">===</span> <span class=\"token number\">0</span> <span class=\"token operator\">?</span> <span class=\"token string\">\\'成功\\'</span> <span class=\"token punctuation\">:</span> <span class=\"token string\">\\'失败\\'</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">`</span></span>\\n            <span class=\"token punctuation\">)</span>\\n          <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\\n          <span class=\"token comment\">// cd命令处理</span>\\n          <span class=\"token function\">cdCommand</span><span class=\"token punctuation\">(</span>command<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n            <span class=\"token keyword\">let</span> pathCommand <span class=\"token operator\">=</span> <span class=\"token string\">\\'\\'</span>\\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>command<span class=\"token punctuation\">.</span><span class=\"token function\">startsWith</span><span class=\"token punctuation\">(</span><span class=\"token string\">\\'cd \\'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n              pathCommand <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>addPath\\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>command<span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\\' cd \\'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n              pathCommand <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>addPath\\n            <span class=\"token punctuation\">}</span>\\n            <span class=\"token keyword\">return</span> command <span class=\"token operator\">+</span> pathCommand\\n            <span class=\"token comment\">// 目录自动联想...等很多细节功能 可以做但没必要2</span>\\n          <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\\n          <span class=\"token comment\">// 清空历史</span>\\n          <span class=\"token function\">isClear</span><span class=\"token punctuation\">(</span>command<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>command <span class=\"token operator\">===</span> <span class=\"token string\">\\'clear\\'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n              <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>commandArr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\\n              <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">commandFinish</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\\n            <span class=\"token punctuation\">}</span>\\n          <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\\n          <span class=\"token comment\">// 获取不同系统下的路径</span>\\n          <span class=\"token function\">addGetPath</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n            <span class=\"token keyword\">const</span> systemName <span class=\"token operator\">=</span> <span class=\"token function\">getOsInfo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>systemName <span class=\"token operator\">===</span> <span class=\"token string\">\\'Mac\\'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n              <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>addPath <span class=\"token operator\">=</span> <span class=\"token string\">\\' &amp;&amp; pwd\\'</span>\\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>systemName <span class=\"token operator\">===</span> <span class=\"token string\">\\'Windows\\'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n              <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>addPath <span class=\"token operator\">=</span> <span class=\"token string\">\\' &amp;&amp; chdir\\'</span>\\n            <span class=\"token punctuation\">}</span>\\n          <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\\n          <span class=\"token comment\">// 命令执行完毕 重置参数</span>\\n          <span class=\"token function\">commandFinish</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>commandMsg <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>command <span class=\"token operator\">=</span> <span class=\"token string\">\\'\\'</span>\\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>inputDom<span class=\"token punctuation\">.</span>textContent <span class=\"token operator\">=</span> <span class=\"token string\">\\'\\'</span>\\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>action <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span>\\n            <span class=\"token comment\">// 激活编辑器</span>\\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">$nextTick</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\\n              <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">focusInput</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\\n              <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">scrollBottom</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\\n          <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\\n          <span class=\"token comment\">// 判断命令是否添加过addPath</span>\\n          <span class=\"token function\">updatePath</span><span class=\"token punctuation\">(</span>command<span class=\"token punctuation\">,</span> code<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>code <span class=\"token operator\">!==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span>\\n            <span class=\"token keyword\">const</span> isPathChange <span class=\"token operator\">=</span> command<span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>addPath<span class=\"token punctuation\">)</span> <span class=\"token operator\">!==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span>\\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>isPathChange<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n              <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>path <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>commandMsg<span class=\"token punctuation\">[</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>commandMsg<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\\n            <span class=\"token punctuation\">}</span>\\n          <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\\n          <span class=\"token comment\">// 保存输入的命令行</span>\\n          <span class=\"token function\">onDivInput</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>command <span class=\"token operator\">=</span> e<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">.</span>textContent\\n          <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\\n          <span class=\"token comment\">// 点击div</span>\\n          <span class=\"token function\">timeoutFocusInput</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n            <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\\n              <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">focusInput</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">200</span><span class=\"token punctuation\">)</span>\\n          <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\\n          <span class=\"token comment\">// 聚焦输入</span>\\n          <span class=\"token function\">focusInput</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>inputDom<span class=\"token punctuation\">.</span><span class=\"token function\">focus</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//解决ff不获取焦点无法定位问题</span>\\n            <span class=\"token keyword\">var</span> range <span class=\"token operator\">=</span> window<span class=\"token punctuation\">.</span><span class=\"token function\">getSelection</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//创建range</span>\\n            range<span class=\"token punctuation\">.</span><span class=\"token function\">selectAllChildren</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>inputDom<span class=\"token punctuation\">)</span> <span class=\"token comment\">//range 选择obj下所有子内容</span>\\n            range<span class=\"token punctuation\">.</span><span class=\"token function\">collapseToEnd</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//光标移至最后</span>\\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>inputDom<span class=\"token punctuation\">.</span><span class=\"token function\">focus</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\\n          <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\\n          <span class=\"token comment\">// 滚动到底部</span>\\n          <span class=\"token function\">scrollBottom</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n            <span class=\"token keyword\">let</span> dom <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">\\'#app\\'</span><span class=\"token punctuation\">)</span>\\n            dom<span class=\"token punctuation\">.</span>scrollTop <span class=\"token operator\">=</span> dom<span class=\"token punctuation\">.</span>scrollHeight <span class=\"token comment\">// 滚动高度</span>\\n            dom <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span>\\n          <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\\n          <span class=\"token comment\">// 监听窗口聚焦、失焦</span>\\n          <span class=\"token function\">watchFocus</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n            ipcRenderer<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">\\'win-focus\\'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">,</span> message<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\\n              <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>isActive <span class=\"token operator\">=</span> message\\n              <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>message<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n                <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">focusInput</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\\n              <span class=\"token punctuation\">}</span>\\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\\n          <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\\n\\n      <span class=\"token comment\">// 获取操作系统信息</span>\\n      <span class=\"token keyword\">function</span> <span class=\"token function\">getOsInfo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n        <span class=\"token keyword\">var</span> userAgent <span class=\"token operator\">=</span> navigator<span class=\"token punctuation\">.</span>userAgent<span class=\"token punctuation\">.</span><span class=\"token function\">toLowerCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\\n        <span class=\"token keyword\">var</span> name <span class=\"token operator\">=</span> <span class=\"token string\">\\'Unknown\\'</span>\\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>userAgent<span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\\'win\\'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n          name <span class=\"token operator\">=</span> <span class=\"token string\">\\'Windows\\'</span>\\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>userAgent<span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\\'iphone\\'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n          name <span class=\"token operator\">=</span> <span class=\"token string\">\\'iPhone\\'</span>\\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>userAgent<span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\\'mac\\'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n          name <span class=\"token operator\">=</span> <span class=\"token string\">\\'Mac\\'</span>\\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>\\n          userAgent<span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\\'x11\\'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token operator\">-</span><span class=\"token number\">1</span> <span class=\"token operator\">||</span>\\n          userAgent<span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\\'unix\\'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token operator\">-</span><span class=\"token number\">1</span> <span class=\"token operator\">||</span>\\n          userAgent<span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\\'sunname\\'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token operator\">-</span><span class=\"token number\">1</span> <span class=\"token operator\">||</span>\\n          userAgent<span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\\'bsd\\'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token operator\">-</span><span class=\"token number\">1</span>\\n        <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n          name <span class=\"token operator\">=</span> <span class=\"token string\">\\'Unix\\'</span>\\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>userAgent<span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\\'linux\\'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n          <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>userAgent<span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\\'android\\'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n            name <span class=\"token operator\">=</span> <span class=\"token string\">\\'Android\\'</span>\\n          <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\\n            name <span class=\"token operator\">=</span> <span class=\"token string\">\\'Linux\\'</span>\\n          <span class=\"token punctuation\">}</span>\\n        <span class=\"token punctuation\">}</span>\\n        <span class=\"token keyword\">return</span> name\\n      <span class=\"token punctuation\">}</span>\\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span>\\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span>\\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">></span></span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br><span class=\"line-number\">11</span><br><span class=\"line-number\">12</span><br><span class=\"line-number\">13</span><br><span class=\"line-number\">14</span><br><span class=\"line-number\">15</span><br><span class=\"line-number\">16</span><br><span class=\"line-number\">17</span><br><span class=\"line-number\">18</span><br><span class=\"line-number\">19</span><br><span class=\"line-number\">20</span><br><span class=\"line-number\">21</span><br><span class=\"line-number\">22</span><br><span class=\"line-number\">23</span><br><span class=\"line-number\">24</span><br><span class=\"line-number\">25</span><br><span class=\"line-number\">26</span><br><span class=\"line-number\">27</span><br><span class=\"line-number\">28</span><br><span class=\"line-number\">29</span><br><span class=\"line-number\">30</span><br><span class=\"line-number\">31</span><br><span class=\"line-number\">32</span><br><span class=\"line-number\">33</span><br><span class=\"line-number\">34</span><br><span class=\"line-number\">35</span><br><span class=\"line-number\">36</span><br><span class=\"line-number\">37</span><br><span class=\"line-number\">38</span><br><span class=\"line-number\">39</span><br><span class=\"line-number\">40</span><br><span class=\"line-number\">41</span><br><span class=\"line-number\">42</span><br><span class=\"line-number\">43</span><br><span class=\"line-number\">44</span><br><span class=\"line-number\">45</span><br><span class=\"line-number\">46</span><br><span class=\"line-number\">47</span><br><span class=\"line-number\">48</span><br><span class=\"line-number\">49</span><br><span class=\"line-number\">50</span><br><span class=\"line-number\">51</span><br><span class=\"line-number\">52</span><br><span class=\"line-number\">53</span><br><span class=\"line-number\">54</span><br><span class=\"line-number\">55</span><br><span class=\"line-number\">56</span><br><span class=\"line-number\">57</span><br><span class=\"line-number\">58</span><br><span class=\"line-number\">59</span><br><span class=\"line-number\">60</span><br><span class=\"line-number\">61</span><br><span class=\"line-number\">62</span><br><span class=\"line-number\">63</span><br><span class=\"line-number\">64</span><br><span class=\"line-number\">65</span><br><span class=\"line-number\">66</span><br><span class=\"line-number\">67</span><br><span class=\"line-number\">68</span><br><span class=\"line-number\">69</span><br><span class=\"line-number\">70</span><br><span class=\"line-number\">71</span><br><span class=\"line-number\">72</span><br><span class=\"line-number\">73</span><br><span class=\"line-number\">74</span><br><span class=\"line-number\">75</span><br><span class=\"line-number\">76</span><br><span class=\"line-number\">77</span><br><span class=\"line-number\">78</span><br><span class=\"line-number\">79</span><br><span class=\"line-number\">80</span><br><span class=\"line-number\">81</span><br><span class=\"line-number\">82</span><br><span class=\"line-number\">83</span><br><span class=\"line-number\">84</span><br><span class=\"line-number\">85</span><br><span class=\"line-number\">86</span><br><span class=\"line-number\">87</span><br><span class=\"line-number\">88</span><br><span class=\"line-number\">89</span><br><span class=\"line-number\">90</span><br><span class=\"line-number\">91</span><br><span class=\"line-number\">92</span><br><span class=\"line-number\">93</span><br><span class=\"line-number\">94</span><br><span class=\"line-number\">95</span><br><span class=\"line-number\">96</span><br><span class=\"line-number\">97</span><br><span class=\"line-number\">98</span><br><span class=\"line-number\">99</span><br><span class=\"line-number\">100</span><br><span class=\"line-number\">101</span><br><span class=\"line-number\">102</span><br><span class=\"line-number\">103</span><br><span class=\"line-number\">104</span><br><span class=\"line-number\">105</span><br><span class=\"line-number\">106</span><br><span class=\"line-number\">107</span><br><span class=\"line-number\">108</span><br><span class=\"line-number\">109</span><br><span class=\"line-number\">110</span><br><span class=\"line-number\">111</span><br><span class=\"line-number\">112</span><br><span class=\"line-number\">113</span><br><span class=\"line-number\">114</span><br><span class=\"line-number\">115</span><br><span class=\"line-number\">116</span><br><span class=\"line-number\">117</span><br><span class=\"line-number\">118</span><br><span class=\"line-number\">119</span><br><span class=\"line-number\">120</span><br><span class=\"line-number\">121</span><br><span class=\"line-number\">122</span><br><span class=\"line-number\">123</span><br><span class=\"line-number\">124</span><br><span class=\"line-number\">125</span><br><span class=\"line-number\">126</span><br><span class=\"line-number\">127</span><br><span class=\"line-number\">128</span><br><span class=\"line-number\">129</span><br><span class=\"line-number\">130</span><br><span class=\"line-number\">131</span><br><span class=\"line-number\">132</span><br><span class=\"line-number\">133</span><br><span class=\"line-number\">134</span><br><span class=\"line-number\">135</span><br><span class=\"line-number\">136</span><br><span class=\"line-number\">137</span><br><span class=\"line-number\">138</span><br><span class=\"line-number\">139</span><br><span class=\"line-number\">140</span><br><span class=\"line-number\">141</span><br><span class=\"line-number\">142</span><br><span class=\"line-number\">143</span><br><span class=\"line-number\">144</span><br><span class=\"line-number\">145</span><br><span class=\"line-number\">146</span><br><span class=\"line-number\">147</span><br><span class=\"line-number\">148</span><br><span class=\"line-number\">149</span><br><span class=\"line-number\">150</span><br><span class=\"line-number\">151</span><br><span class=\"line-number\">152</span><br><span class=\"line-number\">153</span><br><span class=\"line-number\">154</span><br><span class=\"line-number\">155</span><br><span class=\"line-number\">156</span><br><span class=\"line-number\">157</span><br><span class=\"line-number\">158</span><br><span class=\"line-number\">159</span><br><span class=\"line-number\">160</span><br><span class=\"line-number\">161</span><br><span class=\"line-number\">162</span><br><span class=\"line-number\">163</span><br><span class=\"line-number\">164</span><br><span class=\"line-number\">165</span><br><span class=\"line-number\">166</span><br><span class=\"line-number\">167</span><br><span class=\"line-number\">168</span><br><span class=\"line-number\">169</span><br><span class=\"line-number\">170</span><br><span class=\"line-number\">171</span><br><span class=\"line-number\">172</span><br><span class=\"line-number\">173</span><br><span class=\"line-number\">174</span><br><span class=\"line-number\">175</span><br><span class=\"line-number\">176</span><br><span class=\"line-number\">177</span><br><span class=\"line-number\">178</span><br><span class=\"line-number\">179</span><br><span class=\"line-number\">180</span><br><span class=\"line-number\">181</span><br><span class=\"line-number\">182</span><br><span class=\"line-number\">183</span><br><span class=\"line-number\">184</span><br><span class=\"line-number\">185</span><br><span class=\"line-number\">186</span><br><span class=\"line-number\">187</span><br><span class=\"line-number\">188</span><br><span class=\"line-number\">189</span><br><span class=\"line-number\">190</span><br><span class=\"line-number\">191</span><br><span class=\"line-number\">192</span><br><span class=\"line-number\">193</span><br><span class=\"line-number\">194</span><br><span class=\"line-number\">195</span><br><span class=\"line-number\">196</span><br><span class=\"line-number\">197</span><br><span class=\"line-number\">198</span><br><span class=\"line-number\">199</span><br><span class=\"line-number\">200</span><br><span class=\"line-number\">201</span><br><span class=\"line-number\">202</span><br><span class=\"line-number\">203</span><br><span class=\"line-number\">204</span><br><span class=\"line-number\">205</span><br><span class=\"line-number\">206</span><br><span class=\"line-number\">207</span><br><span class=\"line-number\">208</span><br><span class=\"line-number\">209</span><br><span class=\"line-number\">210</span><br><span class=\"line-number\">211</span><br><span class=\"line-number\">212</span><br><span class=\"line-number\">213</span><br><span class=\"line-number\">214</span><br><span class=\"line-number\">215</span><br><span class=\"line-number\">216</span><br><span class=\"line-number\">217</span><br><span class=\"line-number\">218</span><br><span class=\"line-number\">219</span><br><span class=\"line-number\">220</span><br><span class=\"line-number\">221</span><br><span class=\"line-number\">222</span><br><span class=\"line-number\">223</span><br><span class=\"line-number\">224</span><br><span class=\"line-number\">225</span><br><span class=\"line-number\">226</span><br><span class=\"line-number\">227</span><br><span class=\"line-number\">228</span><br><span class=\"line-number\">229</span><br><span class=\"line-number\">230</span><br><span class=\"line-number\">231</span><br><span class=\"line-number\">232</span><br><span class=\"line-number\">233</span><br><span class=\"line-number\">234</span><br><span class=\"line-number\">235</span><br><span class=\"line-number\">236</span><br><span class=\"line-number\">237</span><br><span class=\"line-number\">238</span><br><span class=\"line-number\">239</span><br><span class=\"line-number\">240</span><br><span class=\"line-number\">241</span><br><span class=\"line-number\">242</span><br><span class=\"line-number\">243</span><br><span class=\"line-number\">244</span><br><span class=\"line-number\">245</span><br><span class=\"line-number\">246</span><br><span class=\"line-number\">247</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<p>以上就是整个项目的代码实现，总共只有三个文件。</p>\\n<p><strong>更多细节</strong></p>\\n<p>本项目终究是一个简单的demo，如果想要做成一个完整的开源项目，还需要补充很多细节。</p>\\n<p>还会有各种各样奇奇怪怪的需求和需要定制的地方，比如下面这些：</p>\\n<ul>\\n<li><code>command+c</code>终止命令</li>\\n<li><code>cd</code>目录自动补全</li>\\n<li>命令保存上下键滑动</li>\\n<li>git等常用功能单独特殊处理。</li>\\n<li>输出信息颜色变化</li>\\n<li>等等</li>\\n</ul>\\n<h2 id=\"下载试玩\"><a class=\"header-anchor\" href=\"#下载试玩\" aria-hidden=\"true\">#</a> 下载试玩</h2>\\n<p>即使这个终端demo的代码量很少，注释足够详细，但还是需要上手体验一下一个Electron项目运行的细节。</p>\\n<h3 id=\"项目演示\"><a class=\"header-anchor\" href=\"#项目演示\" aria-hidden=\"true\">#</a> 项目演示</h3>\\n<p><strong>clear命令演示</strong></p>\\n<p>实际上就是将历史命令行输出的数组重置为空数组。</p>\\n<p><img src=\"https://raw.githubusercontent.com/OBKoro1/articleImg_src/master/2021/electron-terminal/electron-terminal-clear.gif\" alt=\"\"></p>\\n<p><strong>执行失败箭头切换</strong></p>\\n<p>根据子进程<code>close</code>事件，判断执行是否成功，切换一下图标。</p>\\n<p><img src=\"https://raw.githubusercontent.com/OBKoro1/articleImg_src/master/2021/electron-terminal/electron-terminal-error.gif\" alt=\"\"></p>\\n<p><strong>cd命令</strong></p>\\n<p>识别<code>cd</code>命令，根据系统添加获取路径(<code>pwd</code>/<code>chdir</code>)的命令，再将获取到的路径，更改为最终路径。</p>\\n<p><img src=\"https://raw.githubusercontent.com/OBKoro1/articleImg_src/master/2021/electron-terminal/electron-terminal-cd.gif\" alt=\"\"></p>\\n<p><strong>giit提交代码演示</strong></p>\\n<p><img src=\"https://raw.githubusercontent.com/OBKoro1/articleImg_src/master/2021/electron-terminal/electron-terminal-git.gif\" alt=\"\"></p>\\n<h3 id=\"项目地址\"><a class=\"header-anchor\" href=\"#项目地址\" aria-hidden=\"true\">#</a> 项目地址</h3>\\n<p>开源地址: <a href=\"https://github.com/OBKoro1/electron-terminal-demo\" target=\"_blank\" rel=\"noopener noreferrer\">electron-terminal-demo<OutboundLink/></a></p>\\n<h3 id=\"启动与调试\"><a class=\"header-anchor\" href=\"#启动与调试\" aria-hidden=\"true\">#</a> 启动与调试</h3>\\n<p><strong>安装</strong></p>\\n\\x3c!--beforebegin--\\x3e<div class=\"language- line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-text\"><code>npm install\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<p><strong>启动</strong></p>\\n<ol>\\n<li>\\n<p>通过vscode的调试运行项目，这种形式可以直接在VSCode中进行debugger调试。</p>\\n<p><img src=\"https://raw.githubusercontent.com/OBKoro1/articleImg_src/master/2021/electron-terminal/electron-terminal-vscode-config.jpg\" alt=\"\"></p>\\n</li>\\n<li>\\n<p>如果不是使用vscode编辑器, 也可以通过使用命令行启动。</p>\\n</li>\\n</ol>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code>npm run start\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<h2 id=\"小结\"><a class=\"header-anchor\" href=\"#小结\" aria-hidden=\"true\">#</a> 小结</h2>\\n<p>命令行终端的实现原理就是这样啦，强烈推荐各位下载体验一下这个项目，最好单步调试一下，这样会更熟悉<code>Electron</code>。</p>\\n<p>文章idea诞生于我们团队开源的另一个开源项目：<a href=\"https://github.com/tal-tech/electron-playground\" target=\"_blank\" rel=\"noopener noreferrer\">electron-playground<OutboundLink/></a>, 目的是为了让小伙伴学习<code>electron</code>实战项目。</p>\\n<p>electron-playground是用来帮助前端小伙伴们更好、更快的学习和理解前端桌面端技术Electron, 尽量少走弯路。</p>\\n<p>它通过如下方式让我们快速学习electron。</p>\\n<ol>\\n<li>带有gif示例和可操作的demo的教程文章。</li>\\n<li>系统性的整理了Electron相关的api和功能。</li>\\n<li>搭配演练场，自己动手尝试electron的各种特性。</li>\\n</ol>\\n<p><a href=\"http://obkoro1.com/web_accumulate/\" target=\"_blank\" rel=\"noopener noreferrer\">前端进阶积累<OutboundLink/></a>、<a href=\"https://user-gold-cdn.xitu.io/2018/5/1/1631b6f52f7e7015?w=344&amp;h=344&amp;f=jpeg&amp;s=8317\" target=\"_blank\" rel=\"noopener noreferrer\">公众号<OutboundLink/></a>、<a href=\"https://github.com/OBKoro1\" target=\"_blank\" rel=\"noopener noreferrer\">GitHub<OutboundLink/></a>、wx:OBkoro1、邮箱：obkoro1@foxmail.com</p>\\n<p>以上2021/01/12\\n\\x3c!-- 特殊字符串：用于修改/删除markdown的结尾提示语-OBKoro1 --\\x3e</p>\\n<h3 id=\"点个star支持我一下\"><a class=\"header-anchor\" href=\"#点个star支持我一下\" aria-hidden=\"true\">#</a> 点个<a href=\"https://github.com/OBKoro1/web_accumulate\" target=\"_blank\" rel=\"noopener noreferrer\">Star<OutboundLink/></a>支持我一下~</h3>\\n\\x3c!-- \\'特殊字符串：用于删除编译后的issue组件-OBKoro1 --\\x3e\\n'},{key:\"v-4b19d09092a79\",path:\"/accumulate/template.html\",lastUpdated:1564309972e3,title:\"标题\",headers:[{level:2,title:\"标题\",slug:\"标题\"},{level:3,title:\"支持一下：\",slug:\"支持一下：\"}]},{key:\"v-20985931fb7ab\",path:\"/accumulate/tool/ESLint%E6%8F%92%E4%BB%B6.html\",lastUpdated:1575791454e3,title:\"手摸手教你写个ESLint插件以及了解ESLint的运行原理\",headers:[{level:2,title:\"手摸手教你写个ESLint插件以及了解ESLint的运行原理\",slug:\"手摸手教你写个eslint插件以及了解eslint的运行原理\"},{level:3,title:\"插件目标\",slug:\"插件目标\"},{level:3,title:\"使用模板初始化项目：\",slug:\"使用模板初始化项目：\"},{level:3,title:\"AST——抽象语法树\",slug:\"ast——抽象语法树\"},{level:3,title:\"ESLint的运行原理\",slug:\"eslint的运行原理\"},{level:3,title:\"1. 将代码解析成AST\",slug:\"_1-将代码解析成ast\"},{level:3,title:\"2. 深度遍历AST，监听匹配过程。\",slug:\"_2-深度遍历ast，监听匹配过程。\"},{level:2,title:\"开发规则\",slug:\"开发规则\"},{level:3,title:\"规则默认模板\",slug:\"规则默认模板\"},{level:3,title:\"create方法-监听选择器\",slug:\"create方法-监听选择器\"},{level:3,title:\"观察AST：\",slug:\"观察ast：\"},{level:3,title:\"rule完整文件\",slug:\"rule完整文件\"},{level:3,title:\"测试用例：\",slug:\"测试用例：\"},{level:3,title:\"在VSCode中调试node文件\",slug:\"在vscode中调试node文件\"},{level:3,title:\"运行测试用例进入断点\",slug:\"运行测试用例进入断点\"},{level:3,title:\"发布插件\",slug:\"发布插件\"},{level:3,title:\"集成到项目:\",slug:\"集成到项目\"},{level:2,title:\"扩展：\",slug:\"扩展：\"},{level:3,title:\"遍历方向：\",slug:\"遍历方向：\"},{level:3,title:\"fix函数：自动修复rule错误\",slug:\"fix函数：自动修复rule错误\"},{level:3,title:\"项目地址:\",slug:\"项目地址\"},{level:3,title:\"点个Star支持我一下~\",slug:\"点个star支持我一下\"}],excerpt:'<h2 id=\"手摸手教你写个eslint插件以及了解eslint的运行原理\"><a class=\"header-anchor\" href=\"#手摸手教你写个eslint插件以及了解eslint的运行原理\" aria-hidden=\"true\">#</a> 手摸手教你写个ESLint插件以及了解ESLint的运行原理</h2>\\n<p>这篇文章目的是介绍如何创建一个ESLint插件和创建一个<code>ESLint</code> <code>rule</code>，用以帮助我们更深入的理解ESLint的运行原理，并且在有必要时可以根据需求创建出一个完美满足自己需求的Lint规则。</p>\\n<h3 id=\"插件目标\"><a class=\"header-anchor\" href=\"#插件目标\" aria-hidden=\"true\">#</a> 插件目标</h3>\\n<p>禁止项目中<code>setTimeout</code>的第二个参数是数字。</p>\\n<p>PS： 如果是数字的话，很容易就成为魔鬼数字，没有人知道为什么是这个数字, 这个数字有什么含义。</p>\\n<h3 id=\"使用模板初始化项目：\"><a class=\"header-anchor\" href=\"#使用模板初始化项目：\" aria-hidden=\"true\">#</a> 使用模板初始化项目：</h3>\\n<h4 id=\"_1-安装npm包\"><a class=\"header-anchor\" href=\"#_1-安装npm包\" aria-hidden=\"true\">#</a> 1. 安装NPM包</h4>\\n<p>ESLint官方为了方便开发者开发插件，提供了使用Yeoman模板(<code>generator-eslint</code>)。</p>\\n<p>对于Yeoman我们只需知道它是一个脚手架工具，用于生成包含指定框架结构的工程化目录结构。</p>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code>npm install <span class=\"token operator\">-</span>g yo generator<span class=\"token operator\">-</span>eslint\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<h4 id=\"_2-创建一个文件夹：\"><a class=\"header-anchor\" href=\"#_2-创建一个文件夹：\" aria-hidden=\"true\">#</a> 2. 创建一个文件夹：</h4>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code>mkdir eslint<span class=\"token operator\">-</span>plugin<span class=\"token operator\">-</span>demo\\ncd eslint<span class=\"token operator\">-</span>plugin<span class=\"token operator\">-</span>demo\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<h4 id=\"_3-命令行初始化eslint插件的项目结构\"><a class=\"header-anchor\" href=\"#_3-命令行初始化eslint插件的项目结构\" aria-hidden=\"true\">#</a> 3. 命令行初始化ESLint插件的项目结构:</h4>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code>yo eslint<span class=\"token punctuation\">:</span>plugin\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<p>下面进入命令行交互流程，流程结束后生成ESLint插件项目框架和文件。</p>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code><span class=\"token operator\">?</span> What is your name<span class=\"token operator\">?</span> OBKoro1\\n<span class=\"token operator\">?</span> What is the plugin <span class=\"token constant\">ID</span><span class=\"token operator\">?</span> korolint   <span class=\"token comment\">// 这个插件的ID是什么</span>\\n<span class=\"token operator\">?</span> Type a short description <span class=\"token keyword\">of</span> <span class=\"token keyword\">this</span> plugin<span class=\"token punctuation\">:</span> <span class=\"token constant\">XX</span>公司的定制ESLint rule <span class=\"token comment\">// 输入这个插件的描述</span>\\n<span class=\"token operator\">?</span> Does <span class=\"token keyword\">this</span> plugin contain custom ESLint rules<span class=\"token operator\">?</span> Yes <span class=\"token comment\">// 这个插件包含自定义ESLint规则吗?</span>\\n<span class=\"token operator\">?</span> Does <span class=\"token keyword\">this</span> plugin contain one or more processors<span class=\"token operator\">?</span> No <span class=\"token comment\">// 这个插件包含一个或多个处理器吗</span>\\n<span class=\"token comment\">// 处理器用于处理js以外的文件 比如.vue文件</span>\\n   create <span class=\"token keyword\">package</span><span class=\"token punctuation\">.</span>json\\n   create lib<span class=\"token operator\">/</span>index<span class=\"token punctuation\">.</span>js\\n   create <span class=\"token constant\">README</span><span class=\"token punctuation\">.</span>md\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<p>现在可以看到在文件夹内生成了一些文件夹和文件，但我们还需要创建规则具体细节的文件。</p>\\n<h4 id=\"_4-创建规则\"><a class=\"header-anchor\" href=\"#_4-创建规则\" aria-hidden=\"true\">#</a> 4. 创建规则</h4>\\n<blockquote>\\n<p>上一个命令行生成的是ESLint插件的项目模板，这个命令行是生成ESLint插件具体规则的文件。</p>\\n</blockquote>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code>yo eslint<span class=\"token punctuation\">:</span>rule <span class=\"token comment\">// 生成 eslint rule的模板文件</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<p>创建规则命令行交互：</p>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code><span class=\"token operator\">?</span> What is your name<span class=\"token operator\">?</span> OBKoro1\\n<span class=\"token operator\">?</span> Where will <span class=\"token keyword\">this</span> rule be published<span class=\"token operator\">?</span> <span class=\"token punctuation\">(</span>Use arrow keys<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 这个规则将在哪里发布？</span>\\n❯ ESLint Core  <span class=\"token comment\">// 官方核心规则 (目前有200多个规则)</span>\\n  ESLint Plugin  <span class=\"token comment\">// 选择ESLint插件</span>\\n<span class=\"token operator\">?</span> What is the rule <span class=\"token constant\">ID</span><span class=\"token operator\">?</span> settimeout<span class=\"token operator\">-</span>no<span class=\"token operator\">-</span>number  <span class=\"token comment\">// 规则的ID</span>\\n<span class=\"token operator\">?</span> Type a short description <span class=\"token keyword\">of</span> <span class=\"token keyword\">this</span> rule<span class=\"token punctuation\">:</span> setTimeout 第二个参数禁止是数字  <span class=\"token comment\">// 输入该规则的描述</span>\\n<span class=\"token operator\">?</span> Type a short example <span class=\"token keyword\">of</span> the code that will fail<span class=\"token punctuation\">:</span>  占位  <span class=\"token comment\">// 输入一个失败例子的代码</span>\\n   create docs<span class=\"token operator\">/</span>rules<span class=\"token operator\">/</span>settimeout<span class=\"token operator\">-</span>no<span class=\"token operator\">-</span>number<span class=\"token punctuation\">.</span>md\\n   create lib<span class=\"token operator\">/</span>rules<span class=\"token operator\">/</span>settimeout<span class=\"token operator\">-</span>no<span class=\"token operator\">-</span>number<span class=\"token punctuation\">.</span>js\\n   create tests<span class=\"token operator\">/</span>lib<span class=\"token operator\">/</span>rules<span class=\"token operator\">/</span>settimeout<span class=\"token operator\">-</span>no<span class=\"token operator\">-</span>number<span class=\"token punctuation\">.</span>js\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<h4 id=\"加了具体规则文件的项目结构\"><a class=\"header-anchor\" href=\"#加了具体规则文件的项目结构\" aria-hidden=\"true\">#</a> 加了具体规则文件的项目结构</h4>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code><span class=\"token punctuation\">.</span>\\n├── <span class=\"token constant\">README</span><span class=\"token punctuation\">.</span>md\\n├── docs <span class=\"token comment\">// 使用文档</span>\\n│   └── rules <span class=\"token comment\">// 所有规则的文档</span>\\n│       └── settimeout<span class=\"token operator\">-</span>no<span class=\"token operator\">-</span>number<span class=\"token punctuation\">.</span>md <span class=\"token comment\">// 具体规则文档</span>\\n├── lib <span class=\"token comment\">// eslint 规则开发</span>\\n│   ├── index<span class=\"token punctuation\">.</span>js 引入<span class=\"token operator\">+</span>导出rules文件夹的规则\\n│   └── rules <span class=\"token comment\">// 此目录下可以构建多个规则</span>\\n│       └── settimeout<span class=\"token operator\">-</span>no<span class=\"token operator\">-</span>number<span class=\"token punctuation\">.</span>js <span class=\"token comment\">// 规则细节</span>\\n├── <span class=\"token keyword\">package</span><span class=\"token punctuation\">.</span>json\\n└── tests <span class=\"token comment\">// 单元测试</span>\\n    └── lib\\n        └── rules\\n            └── settimeout<span class=\"token operator\">-</span>no<span class=\"token operator\">-</span>number<span class=\"token punctuation\">.</span>js <span class=\"token comment\">// 测试该规则的文件</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br><span class=\"line-number\">11</span><br><span class=\"line-number\">12</span><br><span class=\"line-number\">13</span><br><span class=\"line-number\">14</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<h4 id=\"_4-安装项目依赖\"><a class=\"header-anchor\" href=\"#_4-安装项目依赖\" aria-hidden=\"true\">#</a> 4. 安装项目依赖</h4>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code>npm install\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<hr>\\n<p>以上是开发ESLint插件具体规则的准备工作，下面先来看看AST和ESLint原理的相关知识，为我们开发ESLint <code>rule</code> 打一下基础。</p>\\n<h3 id=\"ast——抽象语法树\"><a class=\"header-anchor\" href=\"#ast——抽象语法树\" aria-hidden=\"true\">#</a> AST——抽象语法树</h3>\\n<p>AST是: <code>Abstract Syntax Tree</code>的简称，中文叫做：抽象语法树。</p>\\n<h4 id=\"ast的作用\"><a class=\"header-anchor\" href=\"#ast的作用\" aria-hidden=\"true\">#</a> AST的作用</h4>\\n<p>将代码抽象成树状数据结构，方便后续分析检测代码。</p>\\n<h4 id=\"代码被解析成ast的样子\"><a class=\"header-anchor\" href=\"#代码被解析成ast的样子\" aria-hidden=\"true\">#</a> 代码被解析成AST的样子</h4>\\n<p><a href=\"https://astexplorer.net/\" target=\"_blank\" rel=\"noopener noreferrer\">astexplorer.net<OutboundLink/></a>是一个工具网站：它能查看代码被解析成AST的样子。</p>\\n<p>如下图：<strong>在右侧选中一个值时，左侧对应区域也变成高亮区域，这样可以在AST中很方便的选中对应的代码</strong>。</p>\\n<h4 id=\"ast-选择器：\"><a class=\"header-anchor\" href=\"#ast-选择器：\" aria-hidden=\"true\">#</a> AST 选择器：</h4>\\n<p>下图中被圈起来的部分，称为AST selectors(选择器)。</p>\\n<p><strong>AST 选择器的作用</strong>：使用代码通过选择器来选中特定的代码片段，然后再对代码进行静态分析。</p>\\n<p>AST 选择器很多，ESLint官方专门有一个仓库列出了所有类型的选择器: <a href=\"https://github.com/estree/estree\" target=\"_blank\" rel=\"noopener noreferrer\">estree<OutboundLink/></a></p>\\n<p>下文中开发ESLint <code>rule</code>就需要用到选择器，等下用到了就懂了，现在知道一下就好了。</p>\\n<p><img src=\"https://github.com/OBKoro1/articleImg_src/blob/master/2019/2019_11_19_AST.png?raw=true\" alt=\"将代码解析成AST\"></p>\\n<hr>\\n<h3 id=\"eslint的运行原理\"><a class=\"header-anchor\" href=\"#eslint的运行原理\" aria-hidden=\"true\">#</a> ESLint的运行原理</h3>\\n<p>在开发规则之前，我们需要ESLint是怎么运行的，了解插件为什么需要这么写。</p>\\n<h3 id=\"_1-将代码解析成ast\"><a class=\"header-anchor\" href=\"#_1-将代码解析成ast\" aria-hidden=\"true\">#</a> 1. 将代码解析成AST</h3>\\n<p>ESLint使用JavaScript解析器<a href=\"https://github.com/eslint/espree\" target=\"_blank\" rel=\"noopener noreferrer\">Espree<OutboundLink/></a>把JS代码解析成AST。</p>\\n<p>PS：解析器：是将代码解析成AST的工具，ES6、react、vue都开发了对应的解析器所以ESLint能检测它们的，ESLint也是因此一统前端Lint工具的。</p>\\n<h3 id=\"_2-深度遍历ast，监听匹配过程。\"><a class=\"header-anchor\" href=\"#_2-深度遍历ast，监听匹配过程。\" aria-hidden=\"true\">#</a> 2. 深度遍历AST，监听匹配过程。</h3>\\n<p>在拿到AST之后，ESLint会以&quot;从上至下&quot;再&quot;从下至上&quot;的顺序遍历每个选择器两次。</p>\\n<h4 id=\"_3-触发监听选择器的rule回调\"><a class=\"header-anchor\" href=\"#_3-触发监听选择器的rule回调\" aria-hidden=\"true\">#</a> 3. 触发监听选择器的<code>rule</code>回调</h4>\\n<p>在深度遍历的过程中，生效的每条规则都会对其中的某一个或多个选择器进行监听，每当匹配到选择器，监听该选择器的rule，都会触发对应的回调。</p>\\n<h4 id=\"_4-具体的检测规则等细节内容。\"><a class=\"header-anchor\" href=\"#_4-具体的检测规则等细节内容。\" aria-hidden=\"true\">#</a> 4. 具体的检测规则等细节内容。</h4>\\n<hr>\\n<h2 id=\"开发规则\"><a class=\"header-anchor\" href=\"#开发规则\" aria-hidden=\"true\">#</a> 开发规则</h2>\\n<h3 id=\"规则默认模板\"><a class=\"header-anchor\" href=\"#规则默认模板\" aria-hidden=\"true\">#</a> 规则默认模板</h3>\\n<p>打开<code>rule</code>生成的模板文件<code>lib/rules/settimeout-no-number.js</code>, 清理一下文件，删掉不必要的选项：</p>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code>module<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\\n    meta<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\\n        docs<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\\n            description<span class=\"token punctuation\">:</span> <span class=\"token string\">\"setTimeout 第二个参数禁止是数字\"</span><span class=\"token punctuation\">,</span>\\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\\n        fixable<span class=\"token punctuation\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>  <span class=\"token comment\">// 修复函数</span>\\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\\n   <span class=\"token comment\">// rule 核心</span>\\n    create<span class=\"token punctuation\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n       <span class=\"token comment\">// 公共变量和函数应该在此定义</span>\\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\\n            <span class=\"token comment\">// 返回事件钩子</span>\\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\\n    <span class=\"token punctuation\">}</span>\\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br><span class=\"line-number\">11</span><br><span class=\"line-number\">12</span><br><span class=\"line-number\">13</span><br><span class=\"line-number\">14</span><br><span class=\"line-number\">15</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<p>删掉的配置项，有些是ESLint官方核心规则才是用到的配置项，有些是暂时不必了解的配置，需要用到的时候，可以自行查阅<a href=\"https://cn.eslint.org/docs/developer-guide/working-with-rules\" target=\"_blank\" rel=\"noopener noreferrer\">ESLint 文档<OutboundLink/></a></p>\\n<h3 id=\"create方法-监听选择器\"><a class=\"header-anchor\" href=\"#create方法-监听选择器\" aria-hidden=\"true\">#</a> create方法-监听选择器</h3>\\n<blockquote>\\n<p>上文ESLint原理第三部中提到的：在深度遍历的过程中，生效的每条规则都会对其中的某一个或多个选择器进行监听，每当匹配到选择器，监听该选择器的rule，都会触发对应的回调。</p>\\n</blockquote>\\n<p><code>create</code>返回一个对象，对象的属性设为选择器，ESLint会收集这些选择器，在AST遍历过程中会执行所有监听该选择器的回调。</p>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code><span class=\"token comment\">// rule 核心</span>\\ncreate<span class=\"token punctuation\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n    <span class=\"token comment\">// 公共变量和函数应该在此定义</span>\\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\\n        <span class=\"token comment\">// 返回事件钩子</span>\\n        Identifier<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\\n            <span class=\"token comment\">// node是选中的内容，是我们监听的部分, 它的值参考AST</span>\\n        <span class=\"token punctuation\">}</span>\\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\\n<span class=\"token punctuation\">}</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<h3 id=\"观察ast：\"><a class=\"header-anchor\" href=\"#观察ast：\" aria-hidden=\"true\">#</a> 观察AST：</h3>\\n<p>创建一个ESLint <code>rule</code>需要观察代码解析成AST，选中你要检测的代码，然后进行一些判断。</p>\\n<p>以下代码都是通过<a href=\"https://astexplorer.net/\" target=\"_blank\" rel=\"noopener noreferrer\">astexplorer.net<OutboundLink/></a>在线解析的。</p>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code><span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">{</span>\\n\\tconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\\'settimeout\\'</span><span class=\"token punctuation\">)</span>\\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<p><img src=\"https://github.com/OBKoro1/articleImg_src/blob/master/2019/AST_setTimeout.png?raw=true\" alt=\"setTimeout第二个参数为数字时的AST\"></p>\\n<h3 id=\"rule完整文件\"><a class=\"header-anchor\" href=\"#rule完整文件\" aria-hidden=\"true\">#</a> rule完整文件</h3>\\n<p><code>lib/rules/settimeout-no-number.js</code>:</p>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code>module<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\\n    meta<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\\n        docs<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\\n            description<span class=\"token punctuation\">:</span> <span class=\"token string\">\"setTimeout 第二个参数禁止是数字\"</span><span class=\"token punctuation\">,</span>\\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\\n        fixable<span class=\"token punctuation\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>  <span class=\"token comment\">// 修复函数</span>\\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\\n    <span class=\"token comment\">// rule 核心</span>\\n    create<span class=\"token punctuation\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n        <span class=\"token comment\">// 公共变量和函数应该在此定义</span>\\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\\n            <span class=\"token comment\">// 返回事件钩子</span>\\n            <span class=\"token string\">\\'CallExpression\\'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>callee<span class=\"token punctuation\">.</span>name <span class=\"token operator\">!==</span> <span class=\"token string\">\\'setTimeout\\'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token comment\">// 不是定时器即过滤</span>\\n                <span class=\"token keyword\">const</span> timeNode <span class=\"token operator\">=</span> node<span class=\"token punctuation\">.</span>arguments <span class=\"token operator\">&amp;&amp;</span> node<span class=\"token punctuation\">.</span>arguments<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token comment\">// 获取第二个参数</span>\\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>timeNode<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token comment\">// 没有第二个参数</span>\\n                <span class=\"token comment\">// 检测报错第二个参数是数字 报错</span>\\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>timeNode<span class=\"token punctuation\">.</span>type <span class=\"token operator\">===</span> <span class=\"token string\">\\'Literal\\'</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token keyword\">typeof</span> timeNode<span class=\"token punctuation\">.</span>value <span class=\"token operator\">===</span> <span class=\"token string\">\\'number\\'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n                    context<span class=\"token punctuation\">.</span><span class=\"token function\">report</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\\n                        node<span class=\"token punctuation\">,</span>\\n                        message<span class=\"token punctuation\">:</span> <span class=\"token string\">\\'setTimeout第二个参数禁止是数字\\'</span>\\n                    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\\n                <span class=\"token punctuation\">}</span>\\n            <span class=\"token punctuation\">}</span>\\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\\n    <span class=\"token punctuation\">}</span>\\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br><span class=\"line-number\">11</span><br><span class=\"line-number\">12</span><br><span class=\"line-number\">13</span><br><span class=\"line-number\">14</span><br><span class=\"line-number\">15</span><br><span class=\"line-number\">16</span><br><span class=\"line-number\">17</span><br><span class=\"line-number\">18</span><br><span class=\"line-number\">19</span><br><span class=\"line-number\">20</span><br><span class=\"line-number\">21</span><br><span class=\"line-number\">22</span><br><span class=\"line-number\">23</span><br><span class=\"line-number\">24</span><br><span class=\"line-number\">25</span><br><span class=\"line-number\">26</span><br><span class=\"line-number\">27</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<p>context.report()：这个方法是用来通知ESLint这段代码是警告或错误的，用法如上。在<a href=\"https://cn.eslint.org/docs/developer-guide/working-with-rules#the-context-object\" target=\"_blank\" rel=\"noopener noreferrer\">这里<OutboundLink/></a>查看<code>context</code>和<code>context.report()</code>的文档。</p>\\n<p>规则写完了，<strong>原理就是依据<code>AST</code>解析的结果，做针对性的检测，过滤出我们要选中的代码，然后对代码的值进行逻辑判断</strong>。</p>\\n<p>可能现在会有点懵逼，但是不要紧，我们来写一下测试用例，然后用<code>debugger</code>来看一下代码是怎么运行的。</p>\\n<h3 id=\"测试用例：\"><a class=\"header-anchor\" href=\"#测试用例：\" aria-hidden=\"true\">#</a> 测试用例：</h3>\\n<p>测试文件<code>tests/lib/rules/settimeout-no-number.js</code>:</p>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code><span class=\"token comment\">/**\\n * @fileoverview setTimeout 第二个参数禁止是数字\\n * @author OBKoro1\\n */</span>\\n<span class=\"token string\">\"use strict\"</span><span class=\"token punctuation\">;</span>\\n<span class=\"token keyword\">var</span> rule <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"../../../lib/rules/settimeout-no-number\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 引入rule</span>\\n    RuleTester <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"eslint\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>RuleTester<span class=\"token punctuation\">;</span>\\n\\n<span class=\"token keyword\">var</span> ruleTester <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RuleTester</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\\n    parserOptions<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\\n        ecmaVersion<span class=\"token punctuation\">:</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 默认支持语法为es5 </span>\\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\n<span class=\"token comment\">// 运行测试用例</span>\\nruleTester<span class=\"token punctuation\">.</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"settimeout-no-number\"</span><span class=\"token punctuation\">,</span> rule<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\\n    <span class=\"token comment\">// 正确的测试用例</span>\\n    valid<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>\\n        <span class=\"token punctuation\">{</span>\\n            code<span class=\"token punctuation\">:</span> <span class=\"token string\">\\'let someNumber = 1000; setTimeout(()=>{ console.log(11) },someNumber)\\'</span>\\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\\n        <span class=\"token punctuation\">{</span>\\n            code<span class=\"token punctuation\">:</span> <span class=\"token string\">\\'setTimeout(()=>{ console.log(11) },someNumber)\\'</span>\\n        <span class=\"token punctuation\">}</span>\\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\\n    <span class=\"token comment\">// 错误的测试用例</span>\\n    invalid<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>\\n        <span class=\"token punctuation\">{</span>\\n            code<span class=\"token punctuation\">:</span> <span class=\"token string\">\\'setTimeout(()=>{ console.log(11) },1000)\\'</span><span class=\"token punctuation\">,</span>\\n            errors<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">{</span>\\n                message<span class=\"token punctuation\">:</span> <span class=\"token string\">\"setTimeout第二个参数禁止是数字\"</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 与rule抛出的错误保持一致</span>\\n                type<span class=\"token punctuation\">:</span> <span class=\"token string\">\"CallExpression\"</span> <span class=\"token comment\">// rule监听的对应钩子</span>\\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span>\\n        <span class=\"token punctuation\">}</span>\\n    <span class=\"token punctuation\">]</span>\\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br><span class=\"line-number\">11</span><br><span class=\"line-number\">12</span><br><span class=\"line-number\">13</span><br><span class=\"line-number\">14</span><br><span class=\"line-number\">15</span><br><span class=\"line-number\">16</span><br><span class=\"line-number\">17</span><br><span class=\"line-number\">18</span><br><span class=\"line-number\">19</span><br><span class=\"line-number\">20</span><br><span class=\"line-number\">21</span><br><span class=\"line-number\">22</span><br><span class=\"line-number\">23</span><br><span class=\"line-number\">24</span><br><span class=\"line-number\">25</span><br><span class=\"line-number\">26</span><br><span class=\"line-number\">27</span><br><span class=\"line-number\">28</span><br><span class=\"line-number\">29</span><br><span class=\"line-number\">30</span><br><span class=\"line-number\">31</span><br><span class=\"line-number\">32</span><br><span class=\"line-number\">33</span><br><span class=\"line-number\">34</span><br><span class=\"line-number\">35</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<p>下面来学习一下怎么在VSCode中调试node文件，用于观察<code>rule</code>是怎么运行的。</p>\\n<p>实际上打<code>console</code>的形式，也是可以的，但是在调试的时候打console实在是有点慢，对于node这种节点来说，信息也不全，所以我还是比较推荐通过<code>debugger</code>的方式来调试<code>rule</code>。</p>\\n<h3 id=\"在vscode中调试node文件\"><a class=\"header-anchor\" href=\"#在vscode中调试node文件\" aria-hidden=\"true\">#</a> 在VSCode中调试node文件</h3>\\n<ol>\\n<li>点击下图中的设置按钮, 将会打开一个文件<code>launch.json</code></li>\\n<li>在文件中填入如下内容，用于调试node文件。</li>\\n<li>在<code>rule</code>文件中打<code>debugger</code>或者在代码行数那里点一下小红点。</li>\\n<li>点击图中的开始按钮，进入<code>debugger</code></li>\\n</ol>\\n<p><img src=\"https://github.com/OBKoro1/articleImg_src/blob/master/2019/vscode_set.jpg?raw=true\" alt=\"vscode 设置\"></p>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code><span class=\"token punctuation\">{</span>\\n    <span class=\"token comment\">// 使用 IntelliSense 了解相关属性。 </span>\\n    <span class=\"token comment\">// 悬停以查看现有属性的描述。</span>\\n    <span class=\"token comment\">// 欲了解更多信息，请访问: https://go.microsoft.com/fwlink/?linkid=830387</span>\\n    <span class=\"token string\">\"version\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"0.2.0\"</span><span class=\"token punctuation\">,</span>\\n    <span class=\"token string\">\"configurations\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>\\n        <span class=\"token punctuation\">{</span>\\n            <span class=\"token string\">\"type\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"node\"</span><span class=\"token punctuation\">,</span>\\n            <span class=\"token string\">\"request\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"launch\"</span><span class=\"token punctuation\">,</span>\\n            <span class=\"token string\">\"name\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"启动程序\"</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 调试界面的名称</span>\\n            <span class=\"token comment\">// 运行项目下的这个文件：</span>\\n            <span class=\"token string\">\"program\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"${workspaceFolder}/tests/lib/rules/settimeout-no-number.js\"</span><span class=\"token punctuation\">,</span>\\n            <span class=\"token string\">\"args\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token comment\">// node 文件的参数</span>\\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\\n        <span class=\"token comment\">// 下面是用于调试package.json的命令 之前可以用，貌似vscode出了点bug导致现在用不了了</span>\\n        <span class=\"token punctuation\">{</span>\\n            <span class=\"token string\">\"name\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"Launch via NPM\"</span><span class=\"token punctuation\">,</span>\\n            <span class=\"token string\">\"type\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"node\"</span><span class=\"token punctuation\">,</span>\\n            <span class=\"token string\">\"request\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"launch\"</span><span class=\"token punctuation\">,</span>\\n            <span class=\"token string\">\"runtimeExecutable\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"npm\"</span><span class=\"token punctuation\">,</span>\\n            <span class=\"token string\">\"runtimeArgs\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>\\n                <span class=\"token string\">\"run-script\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"dev\"</span>    <span class=\"token comment\">//这里的dev就对应package.json中的scripts中的dev</span>\\n            <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\\n            <span class=\"token string\">\"port\"</span><span class=\"token punctuation\">:</span> <span class=\"token number\">9229</span>    <span class=\"token comment\">//这个端口是调试的端口，不是项目启动的端口</span>\\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\\n    <span class=\"token punctuation\">]</span>\\n<span class=\"token punctuation\">}</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br><span class=\"line-number\">11</span><br><span class=\"line-number\">12</span><br><span class=\"line-number\">13</span><br><span class=\"line-number\">14</span><br><span class=\"line-number\">15</span><br><span class=\"line-number\">16</span><br><span class=\"line-number\">17</span><br><span class=\"line-number\">18</span><br><span class=\"line-number\">19</span><br><span class=\"line-number\">20</span><br><span class=\"line-number\">21</span><br><span class=\"line-number\">22</span><br><span class=\"line-number\">23</span><br><span class=\"line-number\">24</span><br><span class=\"line-number\">25</span><br><span class=\"line-number\">26</span><br><span class=\"line-number\">27</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<h3 id=\"运行测试用例进入断点\"><a class=\"header-anchor\" href=\"#运行测试用例进入断点\" aria-hidden=\"true\">#</a> 运行测试用例进入断点</h3>\\n<ol>\\n<li>在<code>lib/rules/settimeout-no-number.js</code>中打一些<code>debugger</code></li>\\n<li>点击开始按钮，以调试的形式运行测试文件<code>tests/lib/rules/settimeout-no-number.js</code></li>\\n<li>开始调试<code>rule</code>。</li>\\n</ol>\\n<hr>\\n<h3 id=\"发布插件\"><a class=\"header-anchor\" href=\"#发布插件\" aria-hidden=\"true\">#</a> 发布插件</h3>\\n<p>eslint插件都是以<code>npm</code>包的形式来引用的，所以需要把插件发布一下：</p>\\n<ol>\\n<li>\\n<p>注册：如果你还未注册npm账号的话，需要去<a href=\"https://www.npmjs.com/signup\" target=\"_blank\" rel=\"noopener noreferrer\">注册<OutboundLink/></a>一下。</p>\\n</li>\\n<li>\\n<p>登录npm: <code>npm login</code></p>\\n</li>\\n<li>\\n<p>发布<code>npm</code>包: <code>npm publish</code>即可，ESLint已经把<code>package.json</code>弄好了。</p>\\n</li>\\n</ol>\\n<h3 id=\"集成到项目\"><a class=\"header-anchor\" href=\"#集成到项目\" aria-hidden=\"true\">#</a> 集成到项目:</h3>\\n<p>安装<code>npm</code>包：<code>npm i eslint-plugin-korolint -D</code></p>\\n<ol>\\n<li>常规的方法: <code>引入插件一条条写入规则</code></li>\\n</ol>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code><span class=\"token comment\">// .eslintrc.js</span>\\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\\n  plugins<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span> <span class=\"token string\">\\'korolint\\'</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\\n  rules<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> \\n    <span class=\"token string\">\"korolint/settimeout-no-number\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"error\"</span>\\n <span class=\"token punctuation\">}</span>\\n<span class=\"token punctuation\">}</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<ol start=\"2\">\\n<li><code>extends</code>继承插件配置：</li>\\n</ol>\\n<p>当规则比较多的时候，用户一条条去写，未免也太麻烦了，所以ESLint可以<a href=\"https://cn.eslint.org/docs/developer-guide/working-with-plugins#configs-in-plugins\" target=\"_blank\" rel=\"noopener noreferrer\">继承插件的配置<OutboundLink/></a>：</p>\\n<p>修改一下<code>lib/rules/index.js</code>文件:</p>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code><span class=\"token string\">\\'use strict\\'</span><span class=\"token punctuation\">;</span>\\n<span class=\"token keyword\">var</span> requireIndex <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\\'requireindex\\'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\n<span class=\"token keyword\">const</span> output <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\\n  rules<span class=\"token punctuation\">:</span> <span class=\"token function\">requireIndex</span><span class=\"token punctuation\">(</span>__dirname <span class=\"token operator\">+</span> <span class=\"token string\">\\'/rules\\'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 导出所有规则</span>\\n  configs<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\\n    <span class=\"token comment\">// 导出自定义规则 在项目中直接引用</span>\\n    koroRule<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\\n      plugins<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\\'korolint\\'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 引入插件</span>\\n      rules<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\\n        <span class=\"token comment\">// 开启规则</span>\\n        <span class=\"token string\">\\'korolint/settimeout-no-number\\'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\\'error\\'</span>\\n      <span class=\"token punctuation\">}</span>\\n    <span class=\"token punctuation\">}</span>\\n  <span class=\"token punctuation\">}</span>\\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> output<span class=\"token punctuation\">;</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br><span class=\"line-number\">11</span><br><span class=\"line-number\">12</span><br><span class=\"line-number\">13</span><br><span class=\"line-number\">14</span><br><span class=\"line-number\">15</span><br><span class=\"line-number\">16</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<p>使用方法：</p>\\n<p>使用<code>extends</code>来继承插件的配置，<code>extends</code>不止这种继承方式，即使你传入一个npm包，一个文件的相对路径地址，eslint也能继承其中的配置。</p>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code><span class=\"token comment\">// .eslintrc.js</span>\\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\\n  <span class=\"token keyword\">extends</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span> <span class=\"token string\">\\'plugin:korolint/koroRule\\'</span> <span class=\"token punctuation\">]</span> <span class=\"token comment\">// 继承插件导出的配置</span>\\n<span class=\"token punctuation\">}</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<p>PS : 这种使用方式, npm的包名不能为<code>eslint-plugin-xx-xx</code>,只能为<code>eslint-plugin-xx</code>否则会有报错，被这个问题搞得头疼o(╥﹏╥)o</p>\\n<h2 id=\"扩展：\"><a class=\"header-anchor\" href=\"#扩展：\" aria-hidden=\"true\">#</a> 扩展：</h2>\\n<p>以上内容足够开发一个插件，这里是一些扩展知识点。</p>\\n<h3 id=\"遍历方向：\"><a class=\"header-anchor\" href=\"#遍历方向：\" aria-hidden=\"true\">#</a> 遍历方向：</h3>\\n<p>上文中说过: 在拿到AST之后，ESLint会以&quot;从上至下&quot;再&quot;从下至上&quot;的顺序遍历每个选择器两次。</p>\\n<p>我们所监听的<strong>选择器默认会在&quot;从上至下&quot;的过程中触发，如果需要在&quot;从下至上&quot;的过程中执行则需要添加<code>:exit</code></strong>，在上文中<code>CallExpression</code>就变为<code>CallExpression:exit</code>。</p>\\n<p><strong>注意</strong>：一段代码解析后可能包含多次同一个选择器，选择器的钩子也会多次触发。</p>\\n<h3 id=\"fix函数：自动修复rule错误\"><a class=\"header-anchor\" href=\"#fix函数：自动修复rule错误\" aria-hidden=\"true\">#</a> fix函数：自动修复rule错误</h3>\\n<p><strong>修复效果</strong>：</p>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code><span class=\"token comment\">// 修复前</span>\\n<span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\\n\\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span>\\n<span class=\"token comment\">// 修复后 变量名故意写错 为了让用户去修改它</span>\\n<span class=\"token keyword\">const</span> countNumber1 <span class=\"token operator\">=</span> <span class=\"token number\">1000</span>\\n<span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\\n\\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> countNumber2<span class=\"token punctuation\">)</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<ol>\\n<li>在rule的meta对象上打开修复功能:</li>\\n</ol>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code><span class=\"token comment\">// rule文件</span>\\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\\n  meta<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\\n    docs<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\\n      description<span class=\"token punctuation\">:</span> <span class=\"token string\">\\'setTimeout 第二个参数禁止是数字\\'</span>\\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\\n    fixable<span class=\"token punctuation\">:</span> <span class=\"token string\">\\'code\\'</span> <span class=\"token comment\">// 打开修复功能</span>\\n  <span class=\"token punctuation\">}</span>\\n<span class=\"token punctuation\">}</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<ol start=\"2\">\\n<li>在<code>context.report()</code>上提供一个<code>fix</code>函数:</li>\\n</ol>\\n<p>把上文的<code>context.report</code>修改一下，增加一个<code>fix</code>方法即可，更详细的介绍可以看一下<a href=\"https://cn.eslint.org/docs/developer-guide/working-with-rules#applying-fixes\" target=\"_blank\" rel=\"noopener noreferrer\">文档<OutboundLink/></a>。</p>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code>context<span class=\"token punctuation\">.</span><span class=\"token function\">report</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\\n    node<span class=\"token punctuation\">,</span>\\n    message<span class=\"token punctuation\">:</span> <span class=\"token string\">\\'setTimeout第二个参数禁止是数字\\'</span><span class=\"token punctuation\">,</span>\\n    <span class=\"token function\">fix</span><span class=\"token punctuation\">(</span>fixer<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n        <span class=\"token keyword\">const</span> numberValue <span class=\"token operator\">=</span> timeNode<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">;</span>\\n        <span class=\"token keyword\">const</span> statementString <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token string\">`const countNumber = </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>numberValue<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">\\\\n`</span></span>\\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span>\\n        <span class=\"token comment\">// 修改数字为变量</span>\\n        fixer<span class=\"token punctuation\">.</span><span class=\"token function\">replaceTextRange</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>arguments<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>range<span class=\"token punctuation\">,</span> <span class=\"token string\">\\'countNumber\\'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\\n        <span class=\"token comment\">// 在setTimeout之前增加一行声明变量的代码 用户自行修改变量名</span>\\n        fixer<span class=\"token punctuation\">.</span><span class=\"token function\">insertTextBeforeRange</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>range<span class=\"token punctuation\">,</span> statementString<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\\n        <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\\n    <span class=\"token punctuation\">}</span>\\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br><span class=\"line-number\">11</span><br><span class=\"line-number\">12</span><br><span class=\"line-number\">13</span><br><span class=\"line-number\">14</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<h3 id=\"项目地址\"><a class=\"header-anchor\" href=\"#项目地址\" aria-hidden=\"true\">#</a> 项目地址:</h3>\\n<p><a href=\"https://github.com/OBKoro1/eslint-plugin-korolint\" target=\"_blank\" rel=\"noopener noreferrer\">eslint-plugin-korolint<OutboundLink/></a></p>\\n<hr>\\n<p>呼~ 这篇博客断断续续，写了好几周，终于完成了！</p>\\n<p>大家有看到这篇博客的话，建议跟着博客的一起动手写一下，动手实操一下比你mark一百篇文章都来的有用，花不了很长时间的，希望各位看完本文，都能够更深入的了解到ESLint的运行原理。</p>\\n<h4 id=\"觉得我的博客对你有帮助的话，就关注一下-点个赞吧！\"><a class=\"header-anchor\" href=\"#觉得我的博客对你有帮助的话，就关注一下-点个赞吧！\" aria-hidden=\"true\">#</a> 觉得我的博客对你有帮助的话，就关注一下/点个赞吧！</h4>\\n<p><a href=\"http://obkoro1.com/web_accumulate/\" target=\"_blank\" rel=\"noopener noreferrer\">前端进阶积累<OutboundLink/></a>、<a href=\"https://user-gold-cdn.xitu.io/2018/5/1/1631b6f52f7e7015?w=344&amp;h=344&amp;f=jpeg&amp;s=8317\" target=\"_blank\" rel=\"noopener noreferrer\">公众号<OutboundLink/></a>、<a href=\"https://github.com/OBKoro1\" target=\"_blank\" rel=\"noopener noreferrer\">GitHub<OutboundLink/></a>、wx:OBkoro1、邮箱：obkoro1@foxmail.com</p>\\n<h4 id=\"基友带我飞\"><a class=\"header-anchor\" href=\"#基友带我飞\" aria-hidden=\"true\">#</a> 基友带我飞</h4>\\n<p>ESLint插件是向基友<a href=\"https://juejin.im/user/5ba9f38ce51d450e8477bd7a/posts\" target=\"_blank\" rel=\"noopener noreferrer\">yeyan1996<OutboundLink/></a>学习的，在遇到问题的时候，也是他指点我的，特此感谢。</p>\\n<p>参考资料：</p>\\n<p><a href=\"https://cn.eslint.org/docs/developer-guide/working-with-rules\" target=\"_blank\" rel=\"noopener noreferrer\">创建规则<OutboundLink/></a>\\n<a href=\"https://zhuanlan.zhihu.com/p/53680918\" target=\"_blank\" rel=\"noopener noreferrer\">ESLint 工作原理探讨<OutboundLink/></a>\\n\\x3c!-- 特殊字符串：用于修改/删除markdown的结尾提示语-OBKoro1 --\\x3e</p>\\n<h3 id=\"点个star支持我一下\"><a class=\"header-anchor\" href=\"#点个star支持我一下\" aria-hidden=\"true\">#</a> 点个<a href=\"https://github.com/OBKoro1/web_accumulate\" target=\"_blank\" rel=\"noopener noreferrer\">Star<OutboundLink/></a>支持我一下~</h3>\\n\\x3c!-- \\'特殊字符串：用于删除编译后的issue组件-OBKoro1 --\\x3e\\n'},{key:\"v-b782c3b806ffa\",path:\"/accumulate/tool/Eslint%E8%87%AA%E5%8A%A8%E4%BF%AE%E5%A4%8D%E6%A0%BC%E5%BC%8F%E9%94%99%E8%AF%AF.html\",lastUpdated:1564720698e3,title:\"VsCode保存时自动修复Eslint错误\",headers:[{level:2,title:\"VsCode保存时自动修复Eslint错误\",slug:\"vscode保存时自动修复eslint错误\"},{level:2,title:\"保存时自动统一代码风格：\",slug:\"保存时自动统一代码风格：\"},{level:2,title:\"配置：\",slug:\"配置：\"},{level:3,title:\"1.安装VsCode的EsLint和vetur插件\",slug:\"_1-安装vscode的eslint和vetur插件\"},{level:3,title:\"2.为项目安装EsLint包：\",slug:\"_2-为项目安装eslint包：\"},{level:3,title:\"3.在项目的根目录下添加.eslintrc.js\",slug:\"_3-在项目的根目录下添加-eslintrc-js\"},{level:3,title:\"4.首选项设置：\",slug:\"_4-首选项设置：\"},{level:3,title:\"大功告成：\",slug:\"大功告成：\"},{level:3,title:\"一键修复项目格式问题：\",slug:\"一键修复项目格式问题：\"},{level:3,title:\".eslintignore 不检测一些文件：\",slug:\"eslintignore-不检测一些文件：\"},{level:3,title:\"自定义规则：\",slug:\"自定义规则：\"},{level:2,title:\"小结\",slug:\"小结\"},{level:3,title:\"点个Star支持我一下~\",slug:\"点个star支持我一下\"}],excerpt:'<h2 id=\"vscode保存时自动修复eslint错误\"><a class=\"header-anchor\" href=\"#vscode保存时自动修复eslint错误\" aria-hidden=\"true\">#</a> VsCode保存时自动修复Eslint错误</h2>\\n<p>同一个项目，保持代码风格的一致，是非常重要的一个规范。但事实上项目小组成员的代码校验规则、格式化工具通常都不一致，为了避免项目到后期出现无法维护的问题，项目成员使用同一套校验规则，同一个格式化方式是相当好的步骤之一。</p>\\n<blockquote>\\n<p>游泳、健身了解一下：<a href=\"http://obkoro1.com/\" target=\"_blank\" rel=\"noopener noreferrer\">博客<OutboundLink/></a>、<a href=\"http://obkoro1.com/web_accumulate/accumulate/\" target=\"_blank\" rel=\"noopener noreferrer\">前端积累文档<OutboundLink/></a>、<a href=\"https://github.com/OBKoro1/articleImg_src/blob/master/juejin/1631b6f52f7e7015.jpeg?raw=true\" target=\"_blank\" rel=\"noopener noreferrer\">公众号<OutboundLink/></a></p>\\n</blockquote>\\n<h2 id=\"保存时自动统一代码风格：\"><a class=\"header-anchor\" href=\"#保存时自动统一代码风格：\" aria-hidden=\"true\">#</a> 保存时自动统一代码风格：</h2>\\n<p>先通过一些简单的配置，然后：</p>\\n<ul>\\n<li><code>Ctrl</code>+<code>s</code> / <code>command</code>+<code>s</code> 时自动修复代码的格式错误</li>\\n<li>自动修复的规则是读取项目根目录的Eslint规则</li>\\n<li>这样就能保证项目成员都是一套验证规则的代码风格</li>\\n</ul>\\n<hr>\\n<h2 id=\"配置：\"><a class=\"header-anchor\" href=\"#配置：\" aria-hidden=\"true\">#</a> 配置：</h2>\\n<h3 id=\"_1-安装vscode的eslint和vetur插件\"><a class=\"header-anchor\" href=\"#_1-安装vscode的eslint和vetur插件\" aria-hidden=\"true\">#</a> 1.安装VsCode的<code>EsLint</code>和<code>vetur</code>插件</h3>\\n<p>如图安装<code>EsLint</code>插件：</p>\\n<p><img src=\"https://github.com/OBKoro1/articleImg_src/blob/master/juejin/165e132647eca15f?raw=true\" alt=\"\"></p>\\n<h3 id=\"_2-为项目安装eslint包：\"><a class=\"header-anchor\" href=\"#_2-为项目安装eslint包：\" aria-hidden=\"true\">#</a> 2.为项目安装<code>EsLint</code>包：</h3>\\n<p><img src=\"https://github.com/OBKoro1/articleImg_src/blob/master/juejin/165e136abe3b1feb?raw=true\" alt=\"\"></p>\\n<p>注意要安装在开发环境上，还有就是如果你使用的是脚手架的话，选了Eslint选项，会自带这些包。</p>\\n<h3 id=\"_3-在项目的根目录下添加-eslintrc-js\"><a class=\"header-anchor\" href=\"#_3-在项目的根目录下添加-eslintrc-js\" aria-hidden=\"true\">#</a> 3.在项目的根目录下添加<code>.eslintrc.js</code></h3>\\n<p>用于校验代码格式，根据项目情况，可自行编写校验规则：</p>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code>module<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\\n    <span class=\"token comment\">// Eslint规则</span>\\n<span class=\"token punctuation\">}</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<h3 id=\"_4-首选项设置：\"><a class=\"header-anchor\" href=\"#_4-首选项设置：\" aria-hidden=\"true\">#</a> 4.首选项设置：</h3>\\n<p>将下面这部分放入首选项设置中：</p>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-json line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-json\"><code><span class=\"token property\">\"eslint.autoFixOnSave\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>  //  启用保存时自动修复<span class=\"token punctuation\">,</span>默认只支持.js文件\\n<span class=\"token property\">\"eslint.validate\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\\n    <span class=\"token string\">\"javascript\"</span><span class=\"token punctuation\">,</span>  //  用eslint的规则检测js文件\\n    <span class=\"token punctuation\">{</span>\\n        <span class=\"token property\">\"language\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"vue\"</span><span class=\"token punctuation\">,</span>   // 检测vue文件\\n        <span class=\"token property\">\"autoFix\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span>   //  为vue文件开启保存自动修复的功能\\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\\n    <span class=\"token punctuation\">{</span>\\n        <span class=\"token property\">\"language\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"html\"</span><span class=\"token punctuation\">,</span>\\n        <span class=\"token property\">\"autoFix\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span>\\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br><span class=\"line-number\">11</span><br><span class=\"line-number\">12</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<p>想了解更多的话，推荐看一下VsCode的<a href=\"https://marketplace.visualstudio.com/items?itemName=dbaeumer.vscode-eslint\" target=\"_blank\" rel=\"noopener noreferrer\">EsLint<OutboundLink/></a>插件</p>\\n<h3 id=\"大功告成：\"><a class=\"header-anchor\" href=\"#大功告成：\" aria-hidden=\"true\">#</a> 大功告成：</h3>\\n<p>点开文件，你可能会看到如下报错，无需一个一个去改，只要保存一下文件，就可以自动修复这些代码格式上的问题了。</p>\\n<p><img src=\"https://github.com/OBKoro1/articleImg_src/blob/master/juejin/165e151df42747c4?raw=true\" alt=\"\"></p>\\n<p><strong>注意：</strong></p>\\n<p>如果整个文件都飘红的话，不会一次性修改如果的格式问题，会一下改一部分，你可能需要多按几次保存。</p>\\n<h3 id=\"一键修复项目格式问题：\"><a class=\"header-anchor\" href=\"#一键修复项目格式问题：\" aria-hidden=\"true\">#</a> 一键修复项目格式问题：</h3>\\n<p>遇到下面这两种情况：</p>\\n<ul>\\n<li>你刚刚引入这个自动修复，但你项目的文件比较多，且你又比较懒。</li>\\n<li>隔一段时间，修复一下代码格式上的问题</li>\\n</ul>\\n<p>你可以像下面这样，在<code>package.json</code>里面的<code>scripts</code>里面新增一条如下命令：</p>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code><span class=\"token string\">\"lint\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"eslint --ext .js,.vue src --fix\"</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<p><img src=\"https://github.com/OBKoro1/articleImg_src/blob/master/juejin/165e1561a9b92866?raw=true\" alt=\"\"></p>\\n<p><code>--ext</code>后面跟上的<code>.js</code>、<code>.vue</code>是你要检测文件的后缀，<code>.vue</code>后面的<code>src</code>是要检测的哪个目录下面的文件。</p>\\n<p><code>--fix</code>的作用是自动修复根据你配置的规则检测出来的格式问题</p>\\n<p><strong>一键修复:</strong></p>\\n<p>输入如下命令行，就可以自动<strong>修复你<code>src</code>文件夹下面的所有根据你配置的规则检测出来的格式问题</strong>。</p>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code>npm run lint\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<h3 id=\"eslintignore-不检测一些文件：\"><a class=\"header-anchor\" href=\"#eslintignore-不检测一些文件：\" aria-hidden=\"true\">#</a> .eslintignore 不检测一些文件：</h3>\\n<p>在项目的根目录创建一个<code>.eslintignore</code>文件，用于让<code>EsLint</code>不检测一些文件。</p>\\n<p>比如引的一些别人的文件，插件等,比如文件中：</p>\\n\\x3c!--beforebegin--\\x3e<div class=\"language- line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-text\"><code>src/test/* \\nsrc/test2/* \\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<p>文件中的内容像上面这样写，这里第一行是不检测src目录下的test文件夹下面的所有文件。</p>\\n<h3 id=\"自定义规则：\"><a class=\"header-anchor\" href=\"#自定义规则：\" aria-hidden=\"true\">#</a> 自定义规则：</h3>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code><span class=\"token comment\">// .eslintrc.js文件</span>\\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\\n    <span class=\"token string\">\"rules\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// 自定义规则</span>\\n        <span class=\"token string\">\"no-console\"</span><span class=\"token punctuation\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\\n        <span class=\"token string\">\"no-const-assign\"</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> \\n        <span class=\"token string\">\"no-extra-bind\"</span><span class=\"token punctuation\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span>\\n    <span class=\"token punctuation\">}</span>\\n<span class=\"token punctuation\">}</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<p><strong>0、1、2的意思：</strong></p>\\n<ul>\\n<li><code>&quot;off&quot;</code> 或 0 - 关闭这项规则</li>\\n<li><code>&quot;warn&quot;</code> 或 1 - 将规则视为一个警告</li>\\n<li><code>&quot;error&quot;</code> 或 2 - 将规则视为一个错误</li>\\n</ul>\\n<h2 id=\"小结\"><a class=\"header-anchor\" href=\"#小结\" aria-hidden=\"true\">#</a> 小结</h2>\\n<p>使用自动VsCode+EsLint格式化代码，在团队内部相互去看别人的代码的时候，就可以更容易的看的懂，能够极大的降低团队的沟通成本和提高心情,设置这么方便，赶紧在团队中用起来吧！\\n\\x3c!-- 特殊字符串：用于修改/删除markdown的结尾提示语-OBKoro1 --\\x3e</p>\\n<h3 id=\"点个star支持我一下\"><a class=\"header-anchor\" href=\"#点个star支持我一下\" aria-hidden=\"true\">#</a> 点个<a href=\"https://github.com/OBKoro1/web_accumulate\" target=\"_blank\" rel=\"noopener noreferrer\">Star<OutboundLink/></a>支持我一下~</h3>\\n\\x3c!-- \\'特殊字符串：用于删除编译后的issue组件-OBKoro1 --\\x3e\\n'},{key:\"v-50cf818faaa14\",path:\"/accumulate/tool/autoCommit.html\",lastUpdated:161043936e4,title:\"VsCode插件一键刷Github的commit记录-AutoCommit\",headers:[{level:2,title:\"autoCommit\",slug:\"autocommit\"},{level:3,title:\"使用效果\",slug:\"使用效果\"},{level:3,title:\"功能特性\",slug:\"功能特性\"},{level:3,title:\"仓库地址:\",slug:\"仓库地址\"},{level:3,title:\"安装\",slug:\"安装\"},{level:3,title:\"插件入口\",slug:\"插件入口\"},{level:3,title:\"文档\",slug:\"文档\"},{level:3,title:\"插件声明\",slug:\"插件声明\"},{level:3,title:\"头部注释插件\",slug:\"头部注释插件\"},{level:3,title:\"License\",slug:\"license\"},{level:3,title:\"Star一下吧\",slug:\"star一下吧\"},{level:3,title:\"点个Star支持我一下~\",slug:\"点个star支持我一下\"}],excerpt:'<h1 id=\"vscode插件一键刷github的commit记录-autocommit\"><a class=\"header-anchor\" href=\"#vscode插件一键刷github的commit记录-autocommit\" aria-hidden=\"true\">#</a> VsCode插件一键刷Github的commit记录-AutoCommit</h1>\\n<h2 id=\"autocommit\"><a class=\"header-anchor\" href=\"#autocommit\" aria-hidden=\"true\">#</a> autoCommit</h2>\\n<blockquote>\\n<p>用于刷commit记录，可以刷过去几年的commit以及未来的commit, 一键帮你把github首页的绿色格子填满。</p>\\n</blockquote>\\n<ul>\\n<li>它是一个VScode插件可以自由控制commit日期(提交过去几年的commit以及未来的commit)</li>\\n<li>它可以自由控制commit次数, 固定或者随机commit次数。</li>\\n<li>插件提供完善的日志: 清晰的了解插件的运行情况</li>\\n</ul>\\n<h3 id=\"使用效果\"><a class=\"header-anchor\" href=\"#使用效果\" aria-hidden=\"true\">#</a> 使用效果</h3>\\n<ol>\\n<li>使用本插件来控制commit次数.</li>\\n<li>如下图，你甚至可以规划一下<code>commit</code>次数，然后画出图形, 天空才是你的极限。</li>\\n</ol>\\n<p><img src=\"https://github.com/OBKoro1/autoCommit/blob/master/images/commit_img.png?raw=true\" alt=\"image\"></p>\\n<h4 id=\"自动commit演示：\"><a class=\"header-anchor\" href=\"#自动commit演示：\" aria-hidden=\"true\">#</a> 自动commit演示：</h4>\\n<p><img src=\"https://github.com/OBKoro1/autoCommit/blob/master/images/autoCommit.gif?raw=true\" alt=\"image\"></p>\\n<h3 id=\"功能特性\"><a class=\"header-anchor\" href=\"#功能特性\" aria-hidden=\"true\">#</a> 功能特性</h3>\\n<ul>\\n<li><strong>一键提交</strong>: 设置好参数之后，一键超快提交<code>commit</code></li>\\n<li><strong>选择多个日期范围</strong>：一次操作即可提交不同日期<code>commit</code>, <strong>还可以提交过去/未来日期的commit</strong>。</li>\\n<li><strong>控制每个日期的commit次数</strong>: 可以用它来控制绿色格子的颜色，了解<a href=\"https://github.com/OBKoro1/autoCommit/wiki/GitHub%E8%AE%BE%E7%BD%AE%E7%A7%81%E6%9C%89%E9%A1%B9%E7%9B%AE%E5%88%B7commit%E4%BB%A5%E5%8F%8Acommit%E7%9A%84%E6%AC%A1%E6%95%B0%E4%B8%8E%E9%A2%9C%E8%89%B2#commit%E6%AC%A1%E6%95%B0%E4%B8%8E%E9%A2%9C%E8%89%B2\" target=\"_blank\" rel=\"noopener noreferrer\">commit次数与颜色<OutboundLink/></a></li>\\n<li><strong>随机commit次数</strong>：随机commit次数让我们的提交看起来更加逼真。</li>\\n<li><strong>间隔提交commit</strong>: 在一定的时间长度内，随机选取几天不提交commit</li>\\n<li>取消commit: 用于在<code>commit</code>期间取消并回滚到未提交版本</li>\\n<li>超过100次提交，将强制考虑10秒是否要取消commit。</li>\\n<li>插件成功运行后，将自动保存配置参数，无须每次都要一通操作。</li>\\n<li>提供完善的日志: 清晰的了解插件的运行情况</li>\\n<li>后台运行，不影响编码、浏览网页等。</li>\\n<li>运行超快，如下图187次commit，20秒搞定。</li>\\n<li><strong>觉得插件还不错的话，点个Star吧~</strong></li>\\n</ul>\\n<h4 id=\"提交以前和未来的commit\"><a class=\"header-anchor\" href=\"#提交以前和未来的commit\" aria-hidden=\"true\">#</a> 提交以前和未来的commit</h4>\\n<p>在19年12月我创建了一个测试账号：<a href=\"https://github.com/koroTest\" target=\"_blank\" rel=\"noopener noreferrer\">koroTest<OutboundLink/></a>，经过测试：</p>\\n<ol>\\n<li>成功提交17年的10月份的commit。</li>\\n<li>现在2020年1月份，成功提交了2020年2月份的commit。</li>\\n<li>具体能提交最早和最晚的日期没有测试过，有兴趣的可以试试~</li>\\n</ol>\\n<h3 id=\"仓库地址\"><a class=\"header-anchor\" href=\"#仓库地址\" aria-hidden=\"true\">#</a> 仓库地址:</h3>\\n<p><a href=\"https://github.com/OBKoro1/autoCommit\" target=\"_blank\" rel=\"noopener noreferrer\">autoCommit<OutboundLink/></a></p>\\n<h3 id=\"安装\"><a class=\"header-anchor\" href=\"#安装\" aria-hidden=\"true\">#</a> 安装</h3>\\n<p>在 Vscode 扩展商店中搜索<code>Auto Commit</code>,点击安装即可。</p>\\n<h3 id=\"插件入口\"><a class=\"header-anchor\" href=\"#插件入口\" aria-hidden=\"true\">#</a> 插件入口</h3>\\n<ol>\\n<li>\\n<p>使用快捷键打开VSCode的命令面板。</p>\\n<ul>\\n<li><code>mac</code>: <code>command + p</code> window: <code>ctrl + p</code></li>\\n</ul>\\n</li>\\n<li>\\n<p>输入`&gt; auto commit将会看到如下图所示的命令选项，然后用鼠标点击或者回车都可启动插件。</p>\\n<ul>\\n<li>注意有<code>&gt;</code>符号，老是用人不知道怎么用 o(╥﹏╥)o</li>\\n<li>实际上可以输入下方选项的任何一段文字，都可以匹配到插件命令选项。</li>\\n</ul>\\n</li>\\n</ol>\\n<p><img src=\"https://github.com/OBKoro1/autoCommit/blob/master/images/command.png?raw=true\" alt=\"image\"></p>\\n<h3 id=\"文档\"><a class=\"header-anchor\" href=\"#文档\" aria-hidden=\"true\">#</a> 文档</h3>\\n<ul>\\n<li><a href=\"https://github.com/OBKoro1/autoCommit/wiki/%E9%85%8D%E7%BD%AE%E5%8F%8A%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E\" target=\"_blank\" rel=\"noopener noreferrer\">配置及使用说明<OutboundLink/></a></li>\\n<li><a href=\"https://github.com/OBKoro1/autoCommit/wiki/GitHub%E8%AE%BE%E7%BD%AE%E7%A7%81%E6%9C%89%E9%A1%B9%E7%9B%AE%E5%88%B7commit%E4%BB%A5%E5%8F%8Acommit%E7%9A%84%E6%AC%A1%E6%95%B0%E4%B8%8E%E9%A2%9C%E8%89%B2\" target=\"_blank\" rel=\"noopener noreferrer\">GitHub设置私有项目刷commit以及commit的次数与颜色<OutboundLink/></a></li>\\n</ul>\\n<h3 id=\"插件声明\"><a class=\"header-anchor\" href=\"#插件声明\" aria-hidden=\"true\">#</a> 插件声明</h3>\\n<p><a href=\"https://github.com/OBKoro1/autoCommit\" target=\"_blank\" rel=\"noopener noreferrer\">autoCommit<OutboundLink/></a>是本人兴之所至创建的个人项目，仅用于学习交流，禁止任何人商用以及用于非法之途。</p>\\n<p>插件如构成侵权，请通过邮件联系我。</p>\\n<h3 id=\"头部注释插件\"><a class=\"header-anchor\" href=\"#头部注释插件\" aria-hidden=\"true\">#</a> 头部注释插件</h3>\\n<p>本人还开源了另外一个VSCode插件: <a href=\"https://github.com/OBKoro1/koro1FileHeader\" target=\"_blank\" rel=\"noopener noreferrer\">koroFileHeader<OutboundLink/></a>，目前该插件已经有1000+ Star了，欢迎安装使用。</p>\\n<ol>\\n<li>它是用于生成文件头部注释，帮助我们养成良好的编码习惯，规范整个团队风格。</li>\\n<li>插件支持所有主流语言,功能强大，灵活方便，文档齐全，食用简单！</li>\\n</ol>\\n<h3 id=\"license\"><a class=\"header-anchor\" href=\"#license\" aria-hidden=\"true\">#</a> License</h3>\\n<p><a href=\"http://opensource.org/licenses/MIT\" target=\"_blank\" rel=\"noopener noreferrer\">MIT<OutboundLink/></a></p>\\n<h3 id=\"star一下吧\"><a class=\"header-anchor\" href=\"#star一下吧\" aria-hidden=\"true\">#</a> Star一下吧</h3>\\n<p>如果插件觉得还不错的话，就给个 <a href=\"https://github.com/OBKoro1/autoCommit\" target=\"_blank\" rel=\"noopener noreferrer\">Star<OutboundLink/></a> ⭐️ 鼓励一下我吧~</p>\\n<p><a href=\"http://obkoro1.com/web_accumulate/\" target=\"_blank\" rel=\"noopener noreferrer\">前端进阶积累<OutboundLink/></a>、<a href=\"https://user-gold-cdn.xitu.io/2018/5/1/1631b6f52f7e7015?w=344&amp;h=344&amp;f=jpeg&amp;s=8317\" target=\"_blank\" rel=\"noopener noreferrer\">公众号<OutboundLink/></a>、<a href=\"https://github.com/OBKoro1\" target=\"_blank\" rel=\"noopener noreferrer\">GitHub<OutboundLink/></a>\\n\\x3c!-- 特殊字符串：用于修改/删除markdown的结尾提示语-OBKoro1 --\\x3e</p>\\n<h3 id=\"点个star支持我一下\"><a class=\"header-anchor\" href=\"#点个star支持我一下\" aria-hidden=\"true\">#</a> 点个<a href=\"https://github.com/OBKoro1/web_accumulate\" target=\"_blank\" rel=\"noopener noreferrer\">Star<OutboundLink/></a>支持我一下~</h3>\\n\\x3c!-- \\'特殊字符串：用于删除编译后的issue组件-OBKoro1 --\\x3e\\n'},{key:\"v-267f8f82657c\",path:\"/accumulate/tool/electron-playground.html\",lastUpdated:161043936e4,title:\"Electron桌面端所见即所得-electron-playground\",headers:[{level:3,title:\"突然让你开发Electron应用，你能hold住吗？\",slug:\"突然让你开发electron应用，你能hold住吗？\"},{level:3,title:\"快速学习和上手Electron: electron-playground\",slug:\"快速学习和上手electron-electron-playground\"},{level:3,title:\"electron-playground项目的目的\",slug:\"electron-playground项目的目的\"},{level:3,title:\"electron-playrgound能为我学习Electron做什么\",slug:\"electron-playrgound能为我学习electron做什么\"},{level:2,title:\"项目演示\",slug:\"项目演示\"},{level:3,title:\"1. 带有gif示例和可操作的demo文章讲解\",slug:\"_1-带有gif示例和可操作的demo文章讲解\"},{level:3,title:\"系统性的整理了Electron相关的api和功能\",slug:\"系统性的整理了electron相关的api和功能\"},{level:3,title:\"electron-playground列表分类截图\",slug:\"electron-playground列表分类截图\"},{level:3,title:\"如何启动\",slug:\"如何启动\"},{level:3,title:\"欢迎下载学习/体验\",slug:\"欢迎下载学习-体验\"},{level:3,title:\"点个Star支持我一下~\",slug:\"点个star支持我一下\"}],excerpt:'<h1 id=\"electron桌面端所见即所得-electron-playground\"><a class=\"header-anchor\" href=\"#electron桌面端所见即所得-electron-playground\" aria-hidden=\"true\">#</a> Electron桌面端所见即所得-electron-playground</h1>\\n<h3 id=\"突然让你开发electron应用，你能hold住吗？\"><a class=\"header-anchor\" href=\"#突然让你开发electron应用，你能hold住吗？\" aria-hidden=\"true\">#</a> 突然让你开发Electron应用，你能hold住吗？</h3>\\n<p>如果领导突然说需要开发一款前端桌面端应用，那么对于我们前端er来说选择Electron是一件顺理成章的事情。但事实上很多同学对于Electron都不太了解和熟悉。</p>\\n<p><strong>如果突然让我们去开发Electron应用，很多人都会陷入迷茫和懵逼的状态</strong>。然后在依靠网上相对较少的资料，慢慢摸索、一路踩坑的完成Electronn的需求。</p>\\n<p>为了解决上述问题，我们完成了一个项目，并把它开源了出来, 希望能够对大家学习Electron有点帮助。</p>\\n<h3 id=\"快速学习和上手electron-electron-playground\"><a class=\"header-anchor\" href=\"#快速学习和上手electron-electron-playground\" aria-hidden=\"true\">#</a> 快速学习和上手Electron: electron-playground</h3>\\n<p><a href=\"https://github.com/tal-tech/electron-playground\" target=\"_blank\" rel=\"noopener noreferrer\">electron-playground<OutboundLink/></a>是我司(好未来集团晓黑板)前端团队近期开源的项目。</p>\\n<h3 id=\"electron-playground项目的目的\"><a class=\"header-anchor\" href=\"#electron-playground项目的目的\" aria-hidden=\"true\">#</a> electron-playground项目的目的</h3>\\n<p><strong>帮助前端仔更好、更快的学习和理解前端桌面端技术Electron, 少走弯路</strong>。</p>\\n<h3 id=\"electron-playrgound能为我学习electron做什么\"><a class=\"header-anchor\" href=\"#electron-playrgound能为我学习electron做什么\" aria-hidden=\"true\">#</a> electron-playrgound能为我学习Electron做什么</h3>\\n<ol>\\n<li>带有gif示例和可操作的demo的教程文章。</li>\\n<li>系统性的整理了Electron相关的api和功能。</li>\\n<li>搭配演练场，自己动手尝试electron的各种特性。</li>\\n</ol>\\n<p>下面我来具体介绍一下项目的内容。</p>\\n<h2 id=\"项目演示\"><a class=\"header-anchor\" href=\"#项目演示\" aria-hidden=\"true\">#</a> 项目演示</h2>\\n<h3 id=\"_1-带有gif示例和可操作的demo文章讲解\"><a class=\"header-anchor\" href=\"#_1-带有gif示例和可操作的demo文章讲解\" aria-hidden=\"true\">#</a> 1. 带有gif示例和可操作的demo文章讲解</h3>\\n<p>项目搭配一系列教程文章，这些文章都是经过踩坑验证、成体系化的内容，并且带有gif示例，和可操作的demo示例、流程图等内容。</p>\\n<h4 id=\"项目自带的gif演示\"><a class=\"header-anchor\" href=\"#项目自带的gif演示\" aria-hidden=\"true\">#</a> 项目自带的gif演示</h4>\\n<p>menu: 添加菜单</p>\\n<p><img src=\"https://raw.githubusercontent.com/OBKoro1/articleImg_src/master/2020/electron-playground/2020_electrnon-playground_menu.gif\" alt=\"\"></p>\\n<h4 id=\"项目demo操作的gif演示\"><a class=\"header-anchor\" href=\"#项目demo操作的gif演示\" aria-hidden=\"true\">#</a> 项目demo操作的gif演示</h4>\\n<p>dialog: 消息提示与确认</p>\\n<p><img src=\"https://raw.githubusercontent.com/OBKoro1/articleImg_src/master/2020/electron-playground/2020_electrnon-playground_dialog.gif\" alt=\"\"></p>\\n<p>dialog: 选择文件</p>\\n<p><img src=\"hhttps://raw.githubusercontent.com/OBKoro1/articleImg_src/master/2020/electron-playground/2020_electrnon-playground_savefile.gif\" alt=\"\"></p>\\n<h4 id=\"流程图\"><a class=\"header-anchor\" href=\"#流程图\" aria-hidden=\"true\">#</a> 流程图</h4>\\n<p>窗口管理-创建和管理窗口</p>\\n<p><img src=\"https://raw.githubusercontent.com/OBKoro1/articleImg_src/master/2020/electron-playground/2020_electrnon-playground_window.jpg\" alt=\"\"></p>\\n<h3 id=\"系统性的整理了electron相关的api和功能\"><a class=\"header-anchor\" href=\"#系统性的整理了electron相关的api和功能\" aria-hidden=\"true\">#</a> 系统性的整理了Electron相关的api和功能</h3>\\n<p>electronn-playground系统性的整理了Electron的相关API和功能，以及关于工程化相关的内容。</p>\\n<h4 id=\"electron-playground列表分类\"><a class=\"header-anchor\" href=\"#electron-playground列表分类\" aria-hidden=\"true\">#</a> electron-playground列表分类</h4>\\n<ul>\\n<li>工程化\\n<ul>\\n<li>崩溃分析和收集</li>\\n<li>开发调试</li>\\n<li>打包问题</li>\\n<li>应用更新</li>\\n</ul>\\n</li>\\n<li>应用\\n<ul>\\n<li>自定义协议</li>\\n<li>系统提示和文件选择</li>\\n<li>菜单</li>\\n<li>系统托盘</li>\\n<li>文件下载</li>\\n</ul>\\n</li>\\n<li>窗口管理\\n<ul>\\n<li>创建和管理窗口</li>\\n<li>隐藏和恢复</li>\\n<li>聚焦、失焦</li>\\n<li>全屏、最大化、最小化</li>\\n<li>窗口通信</li>\\n<li>窗口类型</li>\\n<li>窗口事件</li>\\n</ul>\\n</li>\\n<li>其他\\n<ul>\\n<li>安全性</li>\\n</ul>\\n</li>\\n</ul>\\n<h3 id=\"electron-playground列表分类截图\"><a class=\"header-anchor\" href=\"#electron-playground列表分类截图\" aria-hidden=\"true\">#</a> electron-playground列表分类截图</h3>\\n<p><img src=\"https://raw.githubusercontent.com/OBKoro1/articleImg_src/master/2020/electron-playground/2020_electrnon-playground_list.jpg\" alt=\"\"></p>\\n<h4 id=\"演练场\"><a class=\"header-anchor\" href=\"#演练场\" aria-hidden=\"true\">#</a> 演练场</h4>\\n<p>想要实现更复杂的操作，我们参考<a href=\"https://github.com/electron/fiddle\" target=\"_blank\" rel=\"noopener noreferrer\">fiddle<OutboundLink/></a>创建了演练场。</p>\\n<p>演练场集成了vscode的web端编辑库：<a href=\"https://github.com/microsoft/monaco-editor\" target=\"_blank\" rel=\"noopener noreferrer\">monaco-editor<OutboundLink/></a>，编码体验接近vscode。</p>\\n<p><img src=\"https://raw.githubusercontent.com/OBKoro1/articleImg_src/master/2020/electron-playground/2020_electrnon-playground_playground.jpg\" alt=\"\"></p>\\n<h3 id=\"如何启动\"><a class=\"header-anchor\" href=\"#如何启动\" aria-hidden=\"true\">#</a> 如何启动</h3>\\n<p><a href=\"https://github.com/tal-tech/electron-playground\" target=\"_blank\" rel=\"noopener noreferrer\">electron-playground<OutboundLink/></a>启动流程如下:</p>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code>git clone https<span class=\"token punctuation\">:</span><span class=\"token operator\">/</span><span class=\"token operator\">/</span>github<span class=\"token punctuation\">.</span>com<span class=\"token operator\">/</span>tal<span class=\"token operator\">-</span>tech<span class=\"token operator\">/</span>electron<span class=\"token operator\">-</span>playground<span class=\"token punctuation\">.</span>git <span class=\"token comment\">// 下载项目</span>\\nnpm install <span class=\"token comment\">// 安装依赖</span>\\nnpm run start <span class=\"token comment\">// 启动项目</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<h3 id=\"欢迎下载学习-体验\"><a class=\"header-anchor\" href=\"#欢迎下载学习-体验\" aria-hidden=\"true\">#</a> 欢迎下载学习/体验</h3>\\n<p><a href=\"https://github.com/tal-tech/electron-playground\" target=\"_blank\" rel=\"noopener noreferrer\">electron-playground<OutboundLink/></a>是一个通过尝试electron各种特性，使electron的各项特性所见即所得, 来达到我们快速上手和学习electron的目的。</p>\\n<p>感兴趣的同学可以下载一下项目，体验一下，希望通过这个项目可以帮助大家更好、更快的学习和理解前端桌面端技术Electron, 少走弯路</p>\\n<p>如果觉得还不错的话，就给个<a href=\"https://github.com/tal-tech/electron-playground\" target=\"_blank\" rel=\"noopener noreferrer\">Star<OutboundLink/></a>⭐️ 鼓励一下我们吧^_^~\\n\\x3c!-- 特殊字符串：用于修改/删除markdown的结尾提示语-OBKoro1 --\\x3e</p>\\n<h3 id=\"点个star支持我一下\"><a class=\"header-anchor\" href=\"#点个star支持我一下\" aria-hidden=\"true\">#</a> 点个<a href=\"https://github.com/OBKoro1/web_accumulate\" target=\"_blank\" rel=\"noopener noreferrer\">Star<OutboundLink/></a>支持我一下~</h3>\\n\\x3c!-- \\'特殊字符串：用于删除编译后的issue组件-OBKoro1 --\\x3e\\n'},{key:\"v-f93fbd1f1f108\",path:\"/accumulate/tool/http%E7%BC%93%E5%AD%98.html\",lastUpdated:1564720698e3,title:\"谈论HTTP缓存时我们在谈论什么\",headers:[{level:2,title:\"谈论HTTP缓存时我们在谈论什么\",slug:\"谈论http缓存时我们在谈论什么\"},{level:3,title:\"当我们在谈论HTTP缓存时我们在谈论什么:\",slug:\"当我们在谈论http缓存时我们在谈论什么\"},{level:3,title:\"缓存流程：\",slug:\"缓存流程：\"},{level:3,title:\"强缓存与弱缓存的区别：\",slug:\"强缓存与弱缓存的区别：\"},{level:3,title:\"强缓存：\",slug:\"强缓存：\"},{level:3,title:\"Cache-Control\",slug:\"cache-control\"},{level:3,title:\"http1.0时代的缓存 Expires+Pragma\",slug:\"http1-0时代的缓存-expires-pragma\"},{level:3,title:\"强缓存命中 from memory cache & from disk cache\",slug:\"强缓存命中-from-memory-cache-from-disk-cache\"},{level:3,title:\"弱缓存：\",slug:\"弱缓存：\"},{level:3,title:\"Etag/lastModified过程如下:\",slug:\"etag-lastmodified过程如下\"},{level:3,title:\"同时使用两个报文头:\",slug:\"同时使用两个报文头\"},{level:3,title:\"Etag 主要为了解决 Last-Modified 无法解决的一些问题：\",slug:\"etag-主要为了解决-last-modified-无法解决的一些问题：\"},{level:3,title:\"用户操作行为与缓存\",slug:\"用户操作行为与缓存\"},{level:3,title:\"如何设置？\",slug:\"如何设置？\"},{level:3,title:\"小结\",slug:\"小结\"},{level:3,title:\"点个Star支持我一下~\",slug:\"点个star支持我一下\"}],excerpt:'<h2 id=\"谈论http缓存时我们在谈论什么\"><a class=\"header-anchor\" href=\"#谈论http缓存时我们在谈论什么\" aria-hidden=\"true\">#</a> 谈论HTTP缓存时我们在谈论什么</h2>\\n<p>在浏览器众多缓存中的HTTP缓存可能很多人对这个的概念并没有很清晰，每个人都知道进入一次网页之后再刷新一次页面，加载速度会比首次加载快非常多，每个人都知道这是浏览器缓存的magic，但是对此背后的原因可能不甚了解...</p>\\n<h3 id=\"当我们在谈论http缓存时我们在谈论什么\"><a class=\"header-anchor\" href=\"#当我们在谈论http缓存时我们在谈论什么\" aria-hidden=\"true\">#</a> 当我们在谈论HTTP缓存时我们在谈论什么:</h3>\\n<p>我们实际上是在谈论下面这两种情况:</p>\\n<p><img src=\"https://github.com/OBKoro1/articleImg_src/blob/master/juejin/163e32ac608a1146?raw=true\" alt=\"\"></p>\\n<p>如上图，浏览器对静态资源的HTTP缓存有两种情况，一种是强缓存(本地缓存)，另一种是弱缓存(协商缓存)。</p>\\n<hr>\\n<h3 id=\"缓存流程：\"><a class=\"header-anchor\" href=\"#缓存流程：\" aria-hidden=\"true\">#</a> 缓存流程：</h3>\\n<h4 id=\"浏览器第一次请求资源时：\"><a class=\"header-anchor\" href=\"#浏览器第一次请求资源时：\" aria-hidden=\"true\">#</a> 浏览器第一次请求资源时：</h4>\\n<p><img src=\"https://github.com/OBKoro1/articleImg_src/blob/master/juejin/163e323d0879019f?raw=true\" alt=\"图片出自网络\"></p>\\n<p>浏览器<strong>第一次请求资源时，必须下载所有的资源，然后根据响应的header内容来决定，如何缓存资源</strong>。可能采用的是强缓存，也可能是弱缓存</p>\\n<h4 id=\"浏览器后续请求资源时的匹配流程：\"><a class=\"header-anchor\" href=\"#浏览器后续请求资源时的匹配流程：\" aria-hidden=\"true\">#</a> 浏览器后续请求资源时的匹配流程：</h4>\\n<p><img src=\"https://github.com/OBKoro1/articleImg_src/blob/master/juejin/163e33ba0484fb14?raw=true\" alt=\"\"></p>\\n<p>由上图可以知道当浏览器请求一个静态资源时的HTTP流程：</p>\\n<ol>\\n<li>强缓存阶段：先在本地查找该资源，如果发现该资源，并且其他限制也没有问题(比如:缓存有效时间)，就命中强缓存，返回200，直接使用强缓存，并且不会发送请求到服务器</li>\\n<li>弱缓存阶段：在本地缓存中找到该资源，发送一个http请求到服务器，服务器判断这个资源没有被改动过，则返回304，让浏览器使用该资源。</li>\\n<li>缓存失败阶段(重新请求)：当服务器发现该资源被修改过，或者在本地没有找到该缓存资源，服务器则返回该资源的数据。</li>\\n</ol>\\n<h3 id=\"强缓存与弱缓存的区别：\"><a class=\"header-anchor\" href=\"#强缓存与弱缓存的区别：\" aria-hidden=\"true\">#</a> 强缓存与弱缓存的区别：</h3>\\n<p><strong>获取资源形式</strong>： 都是从缓存中获取资源的。</p>\\n<p><strong>状态码</strong>： 强缓存返回200(from cache),弱缓存返回304状态码</p>\\n<p><strong>请求(最大区别)</strong>：</p>\\n<p>强缓存不发送请求，直接从缓存中取。</p>\\n<p>弱缓存需要发送一个请求，验证这个文件是否可以使用（有没有被改动过）。</p>\\n<hr>\\n<h3 id=\"强缓存：\"><a class=\"header-anchor\" href=\"#强缓存：\" aria-hidden=\"true\">#</a> 强缓存：</h3>\\n<p>强缓存是利用Expires或者Cache-Control，让原始服务器为文件设置一个过期时间，在多长时间内可以将这些内容视为最新的。</p>\\n<p>若时间未过期，则命中强缓存，使用缓存文件不发送请求。</p>\\n<h3 id=\"cache-control\"><a class=\"header-anchor\" href=\"#cache-control\" aria-hidden=\"true\">#</a> Cache-Control</h3>\\n<p>Cache-Control 是http1.1中为了弥补<code>Expires</code>的缺陷而加入的，当Expires和Cache-Control同时存在时，Cache-Control优先级高于Expires。</p>\\n<p><strong>选项</strong>：</p>\\n<p>可缓存性:</p>\\n<p><code>public</code>： 服务器端和浏览器端都能缓存</p>\\n<p><code>private</code>: 只能浏览器端缓存</p>\\n<p><code>no-cache</code>:  强制浏览器在使用cache拷贝之前先<strong>提交一个http请求到源服务器进行确认</strong>。http请求没有减少，会减少一个响应体(文件内容),这种个选项类似弱缓存。</p>\\n<p><code>only-if-cached</code>: 表明客户端只接受已缓存的响应，并且不要向原始服务器检查是否有更新的拷贝。</p>\\n<p>到期设置：</p>\\n<p><code>max-age=60</code>：设置缓存存储的最大周期，超过这个时间缓存被认为过期(单位秒)。 这里是60秒</p>\\n<p>其他设置：</p>\\n<p><code>no-store</code>: 不缓存，使用协商缓存</p>\\n<p><code>must-revalidate</code>: 缓存必须在使用之前验证旧资源的状态，并且不可使用过期资源。</p>\\n<p>更多设置，移动<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Cache-Control\" target=\"_blank\" rel=\"noopener noreferrer\">MDN<OutboundLink/></a></p>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code><span class=\"token comment\">// 示例</span>\\nCache<span class=\"token operator\">-</span>Control<span class=\"token punctuation\">:</span> no<span class=\"token operator\">-</span>cache<span class=\"token punctuation\">,</span> no<span class=\"token operator\">-</span>store<span class=\"token punctuation\">,</span> must<span class=\"token operator\">-</span>revalidate\\nCache<span class=\"token operator\">-</span>Control<span class=\"token punctuation\">:</span><span class=\"token keyword\">public</span><span class=\"token punctuation\">,</span> max<span class=\"token operator\">-</span>age<span class=\"token operator\">=</span><span class=\"token number\">31536000</span>\\nCache<span class=\"token operator\">-</span>Control<span class=\"token punctuation\">:</span> max<span class=\"token operator\">-</span>age<span class=\"token operator\">=</span><span class=\"token number\">3600</span><span class=\"token punctuation\">,</span> must<span class=\"token operator\">-</span>revalidate\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<h3 id=\"http1-0时代的缓存-expires-pragma\"><a class=\"header-anchor\" href=\"#http1-0时代的缓存-expires-pragma\" aria-hidden=\"true\">#</a> http1.0时代的缓存 Expires+Pragma</h3>\\n<p><strong>Expires用于设置缓存到期时间</strong>：</p>\\n<p>指定缓存到期GMT的绝对时间，如果设了max-age，max-age就会覆盖expires，如果expires到期需要重新请求。</p>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code>Expires<span class=\"token punctuation\">:</span>Sat<span class=\"token punctuation\">,</span> <span class=\"token number\">09</span> Jun <span class=\"token number\">2018</span> <span class=\"token number\">08</span><span class=\"token punctuation\">:</span><span class=\"token number\">13</span><span class=\"token punctuation\">:</span><span class=\"token number\">56</span> <span class=\"token constant\">GMT</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<p>有一个问题是由于使用具体时间，如果时间表示出错或者没有转换到正确的时区都可能造成缓存生命周期出错。</p>\\n<p><strong>Pragma禁用缓存：</strong></p>\\n<p><code>Pragma : no-cache</code> 表示防止客户端缓存，需要强制从服务器获取最新的数据；</p>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code>Pragma <span class=\"token punctuation\">:</span> no<span class=\"token operator\">-</span>cache  <span class=\"token comment\">//只有这一个用法 禁用缓存，强制从服务器获取最新的数据； </span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<h3 id=\"强缓存命中-from-memory-cache-from-disk-cache\"><a class=\"header-anchor\" href=\"#强缓存命中-from-memory-cache-from-disk-cache\" aria-hidden=\"true\">#</a> 强缓存命中 from memory cache &amp; from disk cache</h3>\\n<p>在测试的时候，看到命中强缓存时，有两种状态，200 (from memory cache) cache &amp; 200 (from disk cache)，于是去找了一下这两者的区别：</p>\\n<p>memory cache: 将资源存到<strong>内存</strong>中，从内存中获取。</p>\\n<p>disk cache：将资源缓存到<strong>磁盘</strong>中，从磁盘中获取。</p>\\n<p>二者最大的区别在于：<strong>当退出进程时，内存中的数据会被清空，而磁盘的数据不会</strong>。</p>\\n<p>更详细的介绍推荐这篇<a href=\"https://blog.csdn.net/baidu_38742725/article/details/77181078\" target=\"_blank\" rel=\"noopener noreferrer\">文章<OutboundLink/></a></p>\\n<hr>\\n<h3 id=\"弱缓存：\"><a class=\"header-anchor\" href=\"#弱缓存：\" aria-hidden=\"true\">#</a> 弱缓存：</h3>\\n<p>如果强缓存时间过期，或者没有设置，导致未命中的话。就进入到了弱缓存的阶段了，</p>\\n<p><strong>Last-Modified &amp; if-modified-since:</strong></p>\\n<p>Last-Modified与If-Modified-Since是一对报文头，属于http 1.0。</p>\\n<p>last-modified是web服务器认为文件的最后修改时间，<code>last-modified</code>是第一次请求文件的时候，<strong>服务器返回</strong>的一个属性。</p>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code>Last<span class=\"token operator\">-</span>Modified<span class=\"token punctuation\">:</span> Sat<span class=\"token punctuation\">,</span> <span class=\"token number\">09</span> Jun <span class=\"token number\">2018</span> <span class=\"token number\">08</span><span class=\"token punctuation\">:</span><span class=\"token number\">13</span><span class=\"token punctuation\">:</span><span class=\"token number\">56</span> <span class=\"token constant\">GMT</span> \\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<p>第二次请求这个文件时，浏览器把<code>If-Modified-Since</code><strong>发送给服务器</strong>，询问该时间之后文件是否被修改过。</p>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code>If<span class=\"token operator\">-</span>Modified<span class=\"token operator\">-</span>Since<span class=\"token punctuation\">:</span> Sat<span class=\"token punctuation\">,</span> <span class=\"token number\">09</span> Jun <span class=\"token number\">2018</span> <span class=\"token number\">08</span><span class=\"token punctuation\">:</span><span class=\"token number\">13</span><span class=\"token punctuation\">:</span><span class=\"token number\">56</span> <span class=\"token constant\">GMT</span> <span class=\"token comment\">// 跟Last-Modified的值一样</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<p><strong>ETag &amp; If-None-Match</strong></p>\\n<p>ETag与If-None-Match是一对报文，属于http 1.1。</p>\\n<p><strong>ETag是一个文件的唯一标志符</strong>。就像一个哈希或者指纹，每个文件都有一个单独的标志，只要这个文件发生了改变，这个标志就会发生变化。</p>\\n<p>ETag机制类似于乐观锁机制，如果请求报文的ETag与服务器的不一致，则表示该资源已经被修改过来，需要发最新的内容给浏览器。</p>\\n<p><code>ETag</code>也是首次请求的时候，服务器返回的:</p>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code>ETag<span class=\"token punctuation\">:</span> <span class=\"token string\">\"8F759D4F67D66A7244638AD249675BE2\"</span> <span class=\"token comment\">// 长这样</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<p><code>If-None-Match</code>也是浏览器发送到服务器验证，文件是否改变的:</p>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code>If<span class=\"token operator\">-</span>None<span class=\"token operator\">-</span>Match<span class=\"token punctuation\">:</span> <span class=\"token string\">\"8F759D4F67D66A7244638AD249675BE2\"</span> <span class=\"token comment\">// 跟ETag的值一样</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<h3 id=\"etag-lastmodified过程如下\"><a class=\"header-anchor\" href=\"#etag-lastmodified过程如下\" aria-hidden=\"true\">#</a> <strong>Etag/lastModified过程如下:</strong></h3>\\n<ol>\\n<li>客户端第一次向服务器发起请求,服务器将附加<code>Last-Modified/ETag</code>到所提供的资源上去</li>\\n<li>当再一次请求资源,<strong>如果没有命中强缓存</strong>,在执行在验证时,<strong>将上次请求时服务器返回的Last-Modified/ETag一起传递给服务器</strong>。</li>\\n<li>服务器检查该Last-Modified或ETag，并判断出该资源<strong>页面自上次客户端请求之后还未被修改，返回响应304和一个空的响应体</strong>。</li>\\n</ol>\\n<h3 id=\"同时使用两个报文头\"><a class=\"header-anchor\" href=\"#同时使用两个报文头\" aria-hidden=\"true\">#</a> 同时使用两个报文头:</h3>\\n<p>同时使用这两个报文头，<strong>两个都匹配才会命中弱缓存</strong>，否则将重新请求资源。</p>\\n<p><img src=\"https://github.com/OBKoro1/articleImg_src/blob/master/juejin/163e3d5d5e2119a5?raw=true\" alt=\"\"></p>\\n<h3 id=\"etag-主要为了解决-last-modified-无法解决的一些问题：\"><a class=\"header-anchor\" href=\"#etag-主要为了解决-last-modified-无法解决的一些问题：\" aria-hidden=\"true\">#</a> Etag 主要为了解决 Last-Modified 无法解决的一些问题：</h3>\\n<ol>\\n<li>一些文件也许内容并不改变(仅仅改变的修改时间)，这个时候我们不希望文件重新加载。（Etag值会触发缓存，Last-Modified不会触发）</li>\\n<li>If-Modified-Since能检查到的粒度是秒级的，当修改非常频繁时，Last-Modified会触发缓存，而Etag的值不会触发，重新加载。</li>\\n<li>某些服务器不能精确的得到文件的最后修改时间。</li>\\n</ol>\\n<hr>\\n<h3 id=\"用户操作行为与缓存\"><a class=\"header-anchor\" href=\"#用户操作行为与缓存\" aria-hidden=\"true\">#</a> 用户操作行为与缓存</h3>\\n<p>F5刷新导致强缓存失效。</p>\\n<p>ctrl+F5强制刷新页面强缓存，弱缓存都会失效。</p>\\n<p><img src=\"https://github.com/OBKoro1/articleImg_src/blob/master/juejin/163e4019ed29d0ae?raw=true\" alt=\"图片出自网络\"></p>\\n<h3 id=\"如何设置？\"><a class=\"header-anchor\" href=\"#如何设置？\" aria-hidden=\"true\">#</a> 如何设置？</h3>\\n<p>一般是服务器端设置这些请求头的，我自己试了用阿里云服务器设置<code>Cache-Control</code>，设置一下很方便的。</p>\\n<hr>\\n<h3 id=\"小结\"><a class=\"header-anchor\" href=\"#小结\" aria-hidden=\"true\">#</a> 小结</h3>\\n<p>通过网络重复请求资源既缓慢，成本又高，缓存和重用以前获取的资源的能力成为优化性能很关键的一个方面,也是大厂面试时很频繁出现的内容，掌握好这块知识点是非常重要的，希望本文能给你带来些收获。</p>\\n<p>文章如有不正确的地方欢迎各位路过的大佬鞭策！喜欢的话，赶紧点波<s>订阅</s>关注/喜欢。\\n\\x3c!-- 特殊字符串：用于修改/删除markdown的结尾提示语-OBKoro1 --\\x3e</p>\\n<h3 id=\"点个star支持我一下\"><a class=\"header-anchor\" href=\"#点个star支持我一下\" aria-hidden=\"true\">#</a> 点个<a href=\"https://github.com/OBKoro1/web_accumulate\" target=\"_blank\" rel=\"noopener noreferrer\">Star<OutboundLink/></a>支持我一下~</h3>\\n\\x3c!-- \\'特殊字符串：用于删除编译后的issue组件-OBKoro1 --\\x3e\\n'},{key:\"v-ce479c220f824\",path:\"/accumulate/tool/js%E4%BA%8B%E4%BB%B6%E5%BE%AA%E7%8E%AF%E6%9C%BA%E5%88%B6.html\",lastUpdated:1564720698e3,title:\"事件循环(Event Loop)机制以及实例\",headers:[{level:2,title:\"事件循环(Event Loop)机制以及实例\",slug:\"事件循环-event-loop-机制以及实例\"},{level:3,title:\"为什么js是单线程？\",slug:\"为什么js是单线程？\"},{level:2,title:\"执行栈与任务队列\",slug:\"执行栈与任务队列\"},{level:3,title:\"执行栈\",slug:\"执行栈\"},{level:3,title:\"主线程\",slug:\"主线程\"},{level:3,title:\"js 异步执行的运行机制。\",slug:\"js-异步执行的运行机制。\"},{level:3,title:\"宏任务与微任务:\",slug:\"宏任务与微任务\"},{level:2,title:\"Event Loop(事件循环)：\",slug:\"event-loop-事件循环-：\"},{level:2,title:\"面试题实践\",slug:\"面试题实践\"},{level:2,title:\"小结\",slug:\"小结\"},{level:3,title:\"点个Star支持我一下~\",slug:\"点个star支持我一下\"}],excerpt:'<h2 id=\"事件循环-event-loop-机制以及实例\"><a class=\"header-anchor\" href=\"#事件循环-event-loop-机制以及实例\" aria-hidden=\"true\">#</a> 事件循环(Event Loop)机制以及实例</h2>\\n<p>大家都知道js是单线程的脚本语言，在同一时间，只能做同一件事，为了协调事件、用户交互、脚本、UI渲染和网络处理等行为，防止主线程阻塞，Event Loop方案应运而生...</p>\\n<h3 id=\"为什么js是单线程？\"><a class=\"header-anchor\" href=\"#为什么js是单线程？\" aria-hidden=\"true\">#</a> 为什么js是单线程？</h3>\\n<p>js作为主要运行在浏览器的脚本语言，js主要用途之一是操作DOM。</p>\\n<p>在js高程中举过一个栗子，如果js同时有两个线程，同时对同一个dom进行操作，这时浏览器应该听哪个线程的，如何判断优先级？</p>\\n<p>为了避免这种问题，js必须是一门单线程语言，并且在未来这个特点也不会改变。</p>\\n<h2 id=\"执行栈与任务队列\"><a class=\"header-anchor\" href=\"#执行栈与任务队列\" aria-hidden=\"true\">#</a> 执行栈与任务队列</h2>\\n<p>因为js是单线程语言，当遇到异步任务(如ajax操作等)时，不可能一直等待异步完成，再继续往下执行，在这期间浏览器是空闲状态，显而易见这会导致巨大的资源浪费。</p>\\n<h3 id=\"执行栈\"><a class=\"header-anchor\" href=\"#执行栈\" aria-hidden=\"true\">#</a> 执行栈</h3>\\n<p>当执行某个函数、用户点击一次鼠标，Ajax完成，一个图片加载完成等事件发生时，只要指定过回调函数，这些事件发生时就会进入执行栈队列中，等待主线程读取,遵循先进先出原则。</p>\\n<h3 id=\"主线程\"><a class=\"header-anchor\" href=\"#主线程\" aria-hidden=\"true\">#</a> 主线程</h3>\\n<p>要明确的一点是，主线程跟执行栈是不同概念，主线程规定现在执行执行栈中的哪个事件。</p>\\n<p>主线程循环：即主线程会不停的从执行栈中读取事件，会执行完所有栈中的同步代码。</p>\\n<p>当遇到一个异步事件后，并不会一直等待异步事件返回结果，而是会将这个事件挂在与执行栈不同的队列中，我们称之为任务队列(Task Queue)。</p>\\n<p><strong>当主线程将执行栈中所有的代码执行完之后，主线程将会去查看任务队列是否有任务</strong>。如果有，那么主线程会依次执行那些任务队列中的回调函数。</p>\\n<p>不太理解的话，可以运行一下下面的代码，或者点击一下这个<a href=\"https://codepen.io/OBKoro1/pen/LrzqBd\" target=\"_blank\" rel=\"noopener noreferrer\">demo<OutboundLink/></a></p>\\n<p>结果是当a、b、c函数都执行完成之后，三个setTimeout才会依次执行。</p>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code>    <span class=\"token keyword\">let</span> <span class=\"token function-variable function\">a</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\\n      <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\\'任务队列函数1\\'</span><span class=\"token punctuation\">)</span>\\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\\n      <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">5000</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\\'a的for循环\\'</span><span class=\"token punctuation\">)</span>\\n      <span class=\"token punctuation\">}</span>\\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\\'a事件执行完\\'</span><span class=\"token punctuation\">)</span>\\n    <span class=\"token punctuation\">}</span>\\n    <span class=\"token keyword\">let</span> <span class=\"token function-variable function\">b</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\\n      <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\\'任务队列函数2\\'</span><span class=\"token punctuation\">)</span>\\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\\n      <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">5000</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\\'b的for循环\\'</span><span class=\"token punctuation\">)</span>\\n      <span class=\"token punctuation\">}</span>\\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\\'b事件执行完\\'</span><span class=\"token punctuation\">)</span>\\n    <span class=\"token punctuation\">}</span>\\n    <span class=\"token keyword\">let</span> <span class=\"token function-variable function\">c</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\\n      <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\\'任务队列函数3\\'</span><span class=\"token punctuation\">)</span>\\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\\n      <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">5000</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\\'c的for循环\\'</span><span class=\"token punctuation\">)</span>\\n      <span class=\"token punctuation\">}</span>\\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\\'c事件执行完\\'</span><span class=\"token punctuation\">)</span>\\n    <span class=\"token punctuation\">}</span>\\n    <span class=\"token function\">a</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\n    <span class=\"token function\">b</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\n    <span class=\"token function\">c</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\n    <span class=\"token comment\">// 当a、b、c函数都执行完成之后，三个setTimeout才会依次执行</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br><span class=\"line-number\">11</span><br><span class=\"line-number\">12</span><br><span class=\"line-number\">13</span><br><span class=\"line-number\">14</span><br><span class=\"line-number\">15</span><br><span class=\"line-number\">16</span><br><span class=\"line-number\">17</span><br><span class=\"line-number\">18</span><br><span class=\"line-number\">19</span><br><span class=\"line-number\">20</span><br><span class=\"line-number\">21</span><br><span class=\"line-number\">22</span><br><span class=\"line-number\">23</span><br><span class=\"line-number\">24</span><br><span class=\"line-number\">25</span><br><span class=\"line-number\">26</span><br><span class=\"line-number\">27</span><br><span class=\"line-number\">28</span><br><span class=\"line-number\">29</span><br><span class=\"line-number\">30</span><br><span class=\"line-number\">31</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<hr>\\n<h3 id=\"js-异步执行的运行机制。\"><a class=\"header-anchor\" href=\"#js-异步执行的运行机制。\" aria-hidden=\"true\">#</a> js 异步执行的运行机制。</h3>\\n<ol>\\n<li>所有任务都在主线程上执行，形成一个执行栈。</li>\\n<li>主线程之外，还存在一个&quot;任务队列&quot;（task queue）。只要异步任务有了运行结果，就在&quot;任务队列&quot;之中放置一个事件。</li>\\n<li>一旦&quot;执行栈&quot;中的所有同步任务执行完毕，系统就会读取&quot;任务队列&quot;。那些对应的异步任务，结束等待状态，进入执行栈并开始执行。</li>\\n<li><strong>主线程不断重复上面的第三步</strong>。</li>\\n</ol>\\n<hr>\\n<h3 id=\"宏任务与微任务\"><a class=\"header-anchor\" href=\"#宏任务与微任务\" aria-hidden=\"true\">#</a> 宏任务与微任务:</h3>\\n<p>异步任务分为 宏任务（macrotask） 与 微任务 (microtask)，不同的API注册的任务会依次进入自身对应的队列中，然后等待 Event Loop 将它们依次压入执行栈中执行。</p>\\n<p><strong>宏任务(macrotask)：</strong>：</p>\\n<p>script(整体代码)、setTimeout、setInterval、UI 渲染、 I/O、postMessage、 MessageChannel、setImmediate(Node.js 环境)</p>\\n<p><strong>微任务(microtask)：</strong></p>\\n<p>Promise、 MutaionObserver、process.nextTick(Node.js环境）</p>\\n<h2 id=\"event-loop-事件循环-：\"><a class=\"header-anchor\" href=\"#event-loop-事件循环-：\" aria-hidden=\"true\">#</a> Event Loop(事件循环)：</h2>\\n<p>Event Loop(事件循环)中，每一次循环称为 tick, 每一次tick的任务如下：</p>\\n<ul>\\n<li>执行栈选择最先进入队列的宏任务(通常是<code>script</code>整体代码)，如果有则执行</li>\\n<li>检查是否存在 Microtask，如果存在则不停的执行，直至清空 microtask 队列</li>\\n<li>更新render(每一次事件循环，浏览器都可能会去更新渲染)</li>\\n<li>重复以上步骤</li>\\n</ul>\\n<p>宏任务 &gt; 所有微任务 &gt; 宏任务，如下图所示：</p>\\n<p><img src=\"https://github.com/OBKoro1/articleImg_src/blob/master/juejin/164081cfd8400f92?raw=true\" alt=\"\"></p>\\n<p>从上图我们可以看出：</p>\\n<ol>\\n<li>将所有任务看成两个队列：执行队列与事件队列。</li>\\n<li>执行队列是同步的，事件队列是异步的，宏任务放入事件列表，微任务放入执行队列之后，事件队列之前。</li>\\n<li>当执行完同步代码之后，就会执行位于执行列表之后的微任务，然后再执行事件列表中的宏任务</li>\\n</ol>\\n<p>上面提到的<a href=\"https://codepen.io/OBKoro1/pen/LrzqBd\" target=\"_blank\" rel=\"noopener noreferrer\">demo<OutboundLink/></a>结果可以这么理解：先执行<code>script</code>宏任务，执行完了之后，再执行其他两个定时器宏任务。</p>\\n<hr>\\n<h2 id=\"面试题实践\"><a class=\"header-anchor\" href=\"#面试题实践\" aria-hidden=\"true\">#</a> 面试题实践</h2>\\n<p>下面这个题，很多人都应该看过/遇到过，重新来看会不会觉得清晰很多：</p>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code><span class=\"token comment\">// 执行顺序问题，考察频率挺高的，先自己想答案**</span>\\n<span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\n<span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>resolve<span class=\"token punctuation\">,</span>reject<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\\n    <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br><span class=\"line-number\">11</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<p>根据本文的解析，我们可以得到:</p>\\n<ol>\\n<li>\\n<p>先执行<code>script</code>同步代码</p>\\n<pre><code> 先执行new Promise中的console.log(2),then后面的不执行属于微任务\\n 然后执行console.log(4)\\n</code></pre>\\n</li>\\n<li>\\n<p>执行完<code>script</code>宏任务后，执行微任务，console.log(3)，没有其他微任务了。</p>\\n</li>\\n<li>\\n<p>执行另一个宏任务，定时器，console.log(1)。</p>\\n</li>\\n</ol>\\n<p>根据本文的内容，可以很轻松，且有理有据的<s>猜出</s>写出正确答案：2,4,3,1.</p>\\n<h2 id=\"小结\"><a class=\"header-anchor\" href=\"#小结\" aria-hidden=\"true\">#</a> 小结</h2>\\n<p>类似上文的面试题还有很多，实则都大同小异，只要掌握了事件循环的机制，这些问题都会变得很简单。\\n\\x3c!-- 特殊字符串：用于修改/删除markdown的结尾提示语-OBKoro1 --\\x3e</p>\\n<h3 id=\"点个star支持我一下\"><a class=\"header-anchor\" href=\"#点个star支持我一下\" aria-hidden=\"true\">#</a> 点个<a href=\"https://github.com/OBKoro1/web_accumulate\" target=\"_blank\" rel=\"noopener noreferrer\">Star<OutboundLink/></a>支持我一下~</h3>\\n\\x3c!-- \\'特殊字符串：用于删除编译后的issue组件-OBKoro1 --\\x3e\\n'},{key:\"v-4eb3ecf397ac8\",path:\"/accumulate/tool/js%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E6%9C%BA%E5%88%B6.html\",lastUpdated:1564720698e3,title:\"JS高程中的垃圾回收机制与常见内存泄露的解决方法\",headers:[{level:2,title:\"JS高程中的垃圾回收机制与常见内存泄露的解决方法\",slug:\"js高程中的垃圾回收机制与常见内存泄露的解决方法\"},{level:3,title:\"内存的生命周期：\",slug:\"内存的生命周期：\"},{level:2,title:\"垃圾回收机制：\",slug:\"垃圾回收机制：\"},{level:3,title:\"垃圾收集机制的原理：\",slug:\"垃圾收集机制的原理：\"},{level:3,title:\"标记清除：当前采用的垃圾收集策略\",slug:\"标记清除：当前采用的垃圾收集策略\"},{level:3,title:\"引用计数略：被废弃的垃圾收集策略\",slug:\"引用计数略：被废弃的垃圾收集策略\"},{level:2,title:\"哪些情况会引起内存泄漏？\",slug:\"哪些情况会引起内存泄漏？\"},{level:3,title:\"意外的全局变量：\",slug:\"意外的全局变量：\"},{level:3,title:\"被遗忘的定时器和回调函数\",slug:\"被遗忘的定时器和回调函数\"},{level:3,title:\"闭包：\",slug:\"闭包：\"},{level:3,title:\"循环引用问题\",slug:\"循环引用问题\"},{level:3,title:\"没有清理DOM元素引用：\",slug:\"没有清理dom元素引用：\"},{level:3,title:\"console保存大量数据在内存中。\",slug:\"console保存大量数据在内存中。\"},{level:3,title:\"如何避免内存泄漏：\",slug:\"如何避免内存泄漏：\"},{level:3,title:\"关于内存泄漏：\",slug:\"关于内存泄漏：\"},{level:2,title:\"小结\",slug:\"小结\"},{level:3,title:\"点个Star支持我一下~\",slug:\"点个star支持我一下\"}],excerpt:'<h2 id=\"js高程中的垃圾回收机制与常见内存泄露的解决方法\"><a class=\"header-anchor\" href=\"#js高程中的垃圾回收机制与常见内存泄露的解决方法\" aria-hidden=\"true\">#</a> JS高程中的垃圾回收机制与常见内存泄露的解决方法</h2>\\n<p>起因是因为想了解闭包的内存泄露机制，然后想起《js高级程序设计》中有关于垃圾回收机制的解析，之前没有很懂，过一年回头再看就懂了，写篇博客与大家分享一下。</p>\\n<h3 id=\"内存的生命周期：\"><a class=\"header-anchor\" href=\"#内存的生命周期：\" aria-hidden=\"true\">#</a> 内存的生命周期：</h3>\\n<ol>\\n<li>分配你所需要的内存：</li>\\n</ol>\\n<p>由于字符串、对象等没有固定的大小，js程序在每次创建字符串、对象的时候，程序都会<strong>分配内存来存储那个实体</strong>。</p>\\n<ol start=\"2\">\\n<li>\\n<p>使用分配到的内存做点什么。</p>\\n</li>\\n<li>\\n<p>不需要时将其释放回归：</p>\\n</li>\\n</ol>\\n<p>在不需要字符串、对象的时候，需要释放其所占用的内存，否则将会消耗完系统中所有可用的内存，造成系统崩溃，这就是<strong>垃圾回收机制所存在的意义</strong>。</p>\\n<p><strong>所谓的内存泄漏指的是</strong>：由于疏忽或错误造成程序未能释放那些已经不再使用的内存，造成内存的浪费。</p>\\n<hr>\\n<h2 id=\"垃圾回收机制：\"><a class=\"header-anchor\" href=\"#垃圾回收机制：\" aria-hidden=\"true\">#</a> 垃圾回收机制：</h2>\\n<p>在C和C++之类的语言中，需要手动来管理内存的，这也是造成许多不必要问题的根源。幸运的是，在编写js的过程中，内存的分配以及内存的回收完全实现了自动管理，我们不用操心这种事情。</p>\\n<h3 id=\"垃圾收集机制的原理：\"><a class=\"header-anchor\" href=\"#垃圾收集机制的原理：\" aria-hidden=\"true\">#</a> 垃圾收集机制的原理：</h3>\\n<p>垃圾收集器会按照固定的时间间隔，<strong>周期性的找出不再继续使用的变量，然后释放其占用的内存</strong>。</p>\\n<p><strong>什么叫不再继续使用的变量？</strong></p>\\n<p>不再使用的变量也就是生命周期结束的变量，是局部变量，局部变量只在函数的执行过程中存在，当函数运行结束，没有其他引用(闭包)，那么该变量会被标记回收。</p>\\n<p>全局变量的生命周期直至浏览器卸载页面才会结束，也就是说<strong>全局变量不会被当成垃圾回收</strong>。</p>\\n<h3 id=\"标记清除：当前采用的垃圾收集策略\"><a class=\"header-anchor\" href=\"#标记清除：当前采用的垃圾收集策略\" aria-hidden=\"true\">#</a> 标记清除：当前采用的垃圾收集策略</h3>\\n<p>工作原理：</p>\\n<p>当变量进入环境时(例如在函数中声明一个变量)，将这个变量标记为“进入环境”，当变量离开环境时，则将其标记为“离开环境”。标记“离开环境”的就回收内存。</p>\\n<p>工作流程：</p>\\n<ol>\\n<li>垃圾收集器会在运行的时候会给存储在内存中的<strong>所有变量都加上标记</strong>。</li>\\n<li><strong>去掉环境中的变量</strong>以及被环境中的变量引用的变量的标记。</li>\\n<li>那些<strong>还存在标记的变量被视为准备删除的变量</strong>。</li>\\n<li>最后垃圾收集器会执行最后一步内存清除的工作，<strong>销毁那些带标记的值并回收它们所占用的内存空间</strong>。</li>\\n</ol>\\n<p>到2008年为止,IE、Chorme、Fireofx、Safari、Opera <strong>都使用标记清除式的垃圾收集策略</strong>，只不过垃圾收集的时间间隔互有不同。</p>\\n<h3 id=\"引用计数略：被废弃的垃圾收集策略\"><a class=\"header-anchor\" href=\"#引用计数略：被废弃的垃圾收集策略\" aria-hidden=\"true\">#</a> 引用计数略：被废弃的垃圾收集策略</h3>\\n<p>循环引用：跟踪记录每个值被引用的技术</p>\\n<p>在老版本的浏览器中(对，又是IE)，IE9以下BOM和DOM对象就是使用C++以COM对象的形式实现的。</p>\\n<p>COM的垃圾收集机制采用的就是引用计数策略，这种机制在出现循环引用的时候永远都释放不掉内存。</p>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code><span class=\"token keyword\">let</span> element <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\\'something\\'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\n<span class=\"token keyword\">let</span> myObject <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\nmyObject<span class=\"token punctuation\">.</span>element <span class=\"token operator\">=</span> element<span class=\"token punctuation\">;</span> <span class=\"token comment\">// element属性指向dom</span>\\nelement<span class=\"token punctuation\">.</span>someThing <span class=\"token operator\">=</span> myObject<span class=\"token punctuation\">;</span> <span class=\"token comment\">// someThing回指myObject 出现循环引用(两个对象一直互相包含 一直存在计数)。</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<p>解决方式是，当我们不使用它们的时候，手动切断链接：</p>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code>myObject<span class=\"token punctuation\">.</span>element <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span> \\nelement<span class=\"token punctuation\">.</span>someThing <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<p><strong>淘汰</strong>：</p>\\n<p>IE9把BOM和DOM对象转为了真正的js对象，避免了使用这种垃圾收集策略，消除了IE9以下常见的内存泄漏的主要原因。</p>\\n<p>IE7以下有一个声明狼藉的性能问题，大家了解一下：</p>\\n<ol>\\n<li>256个变量，4096个对象(或数组)字面或者64KB的字符串，达到任何一个临界值会触发垃圾收集器运行。</li>\\n<li>如果一个js脚本的生命周期一直保有那么多变量，垃圾收集器会一直频繁的运行，引发严重的性能问题。</li>\\n</ol>\\n<p>IE7已修复这个问题。</p>\\n<hr>\\n<h2 id=\"哪些情况会引起内存泄漏？\"><a class=\"header-anchor\" href=\"#哪些情况会引起内存泄漏？\" aria-hidden=\"true\">#</a> 哪些情况会引起内存泄漏？</h2>\\n<p>虽然有垃圾回收机制，但我们在编写代码的时候，有些情况还是会造成内存泄漏，了解这些情况，并在编写程序的时候，注意避免，我们的程序会更具健壮性。</p>\\n<h3 id=\"意外的全局变量：\"><a class=\"header-anchor\" href=\"#意外的全局变量：\" aria-hidden=\"true\">#</a> 意外的全局变量：</h3>\\n<p>上文我们提到了<strong>全局变量不会被当成垃圾回收</strong>，我们在编码中有时会出现下面这种情况：</p>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>bar2 <span class=\"token operator\">=</span> <span class=\"token string\">\\'默认绑定this指向全局\\'</span> <span class=\"token comment\">// 全局变量=> window.bar2</span>\\n    bar <span class=\"token operator\">=</span> <span class=\"token string\">\\'全局变量\\'</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 没有声明变量 实际上是全局变量=>window.bar</span>\\n<span class=\"token punctuation\">}</span>\\n<span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<p>当我们使用<a href=\"https://juejin.im/post/5b3715def265da59af40a630#heading-3\" target=\"_blank\" rel=\"noopener noreferrer\">默认绑定<OutboundLink/></a>，this会指向全局，<code>this.something</code>也会创建一个全局变量，这一点可能很多人没有注意到。</p>\\n<p><strong>解决方法：在函数内使用严格模式or细心一点</strong></p>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n    <span class=\"token string\">\"use strict\"</span><span class=\"token punctuation\">;</span> \\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>bar2 <span class=\"token operator\">=</span> <span class=\"token string\">\"严格模式下this指向undefined\"</span><span class=\"token punctuation\">;</span> \\n    bar <span class=\"token operator\">=</span> <span class=\"token string\">\"报错\"</span><span class=\"token punctuation\">;</span>\\n<span class=\"token punctuation\">}</span>\\n<span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<p>当然我们也可以<strong>手动释放全局变量的内存</strong>：</p>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code>window<span class=\"token punctuation\">.</span>bar <span class=\"token operator\">=</span> undefined\\n<span class=\"token keyword\">delete</span> window<span class=\"token punctuation\">.</span>bar2\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<h3 id=\"被遗忘的定时器和回调函数\"><a class=\"header-anchor\" href=\"#被遗忘的定时器和回调函数\" aria-hidden=\"true\">#</a> 被遗忘的定时器和回调函数</h3>\\n<p>当<strong>不需要</strong><code>setInterval</code>或者<code>setTimeout</code>时，<strong>定时器没有被clear</strong>，定时器的<strong>回调函数以及内部依赖的变量都不能被回收</strong>，造成内存泄漏。</p>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code><span class=\"token keyword\">var</span> someResource <span class=\"token operator\">=</span> <span class=\"token function\">getData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\n<span class=\"token function\">setInterval</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n    <span class=\"token keyword\">var</span> node <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\\'Node\\'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n        node<span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span>someResource<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\n        <span class=\"token comment\">// 定时器也没有清除</span>\\n    <span class=\"token punctuation\">}</span>\\n    <span class=\"token comment\">// node、someResource 存储了大量数据 无法回收</span>\\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<p><strong>解决方法</strong>： 在定时器完成工作的时候，手动清除定时器。</p>\\n<h3 id=\"闭包：\"><a class=\"header-anchor\" href=\"#闭包：\" aria-hidden=\"true\">#</a> 闭包：</h3>\\n<p><strong>闭包可以维持函数内局部变量，使其得不到释放，造成内存泄漏</strong>。</p>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">bindEvent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n    <span class=\"token keyword\">var</span> obj <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"XXX\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\n    <span class=\"token keyword\">var</span> <span class=\"token function-variable function\">unused</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">,</span><span class=\"token string\">\\'闭包内引用obj obj不会被释放\\'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\\n    <span class=\"token comment\">// obj = null;</span>\\n<span class=\"token punctuation\">}</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<p><strong>解决方法</strong>：手动解除引用，<code>obj = null</code>。</p>\\n<h3 id=\"循环引用问题\"><a class=\"header-anchor\" href=\"#循环引用问题\" aria-hidden=\"true\">#</a> 循环引用问题</h3>\\n<p>就是IE9以下的循环引用问题，上文讲过了。</p>\\n<h3 id=\"没有清理dom元素引用：\"><a class=\"header-anchor\" href=\"#没有清理dom元素引用：\" aria-hidden=\"true\">#</a> 没有清理DOM元素引用：</h3>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code><span class=\"token keyword\">var</span> refA <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\\'refA\\'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\ndocument<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">.</span><span class=\"token function\">removeChild</span><span class=\"token punctuation\">(</span>refA<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// dom删除了</span>\\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>refA<span class=\"token punctuation\">,</span> <span class=\"token string\">\"refA\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 但是还存在引用 能console出整个div 没有被回收</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<p>不信的话，可以看下这个<a href=\"https://codepen.io/OBKoro1/pen/vroKbg\" target=\"_blank\" rel=\"noopener noreferrer\">dom<OutboundLink/></a>。</p>\\n<p><strong>解决办法</strong>：<code>refA = null</code>;</p>\\n<h3 id=\"console保存大量数据在内存中。\"><a class=\"header-anchor\" href=\"#console保存大量数据在内存中。\" aria-hidden=\"true\">#</a> console保存大量数据在内存中。</h3>\\n<p>过多的console，比如定时器的console会导致浏览器卡死。</p>\\n<p><strong>解决</strong>：合理利用console，线上项目尽量少的使用console，当然如果你要发招聘除外。</p>\\n<hr>\\n<h3 id=\"如何避免内存泄漏：\"><a class=\"header-anchor\" href=\"#如何避免内存泄漏：\" aria-hidden=\"true\">#</a> 如何避免内存泄漏：</h3>\\n<p><strong>记住一个原则：不用的东西，及时归还，毕竟你是\\'借的\\'嘛</strong>。</p>\\n<ol>\\n<li>减少不必要的全局变量，使用严格模式避免意外创建全局变量。</li>\\n<li>在你使用完数据后，及时解除引用(闭包中的变量，dom引用，定时器清除)。</li>\\n<li>组织好你的逻辑，避免死循环等造成浏览器卡顿，崩溃的问题。</li>\\n</ol>\\n<h3 id=\"关于内存泄漏：\"><a class=\"header-anchor\" href=\"#关于内存泄漏：\" aria-hidden=\"true\">#</a> 关于内存泄漏：</h3>\\n<ol>\\n<li>即使是1byte的内存，也叫内存泄漏，并不一定是导致浏览器崩溃、卡顿才能叫做内存泄漏。</li>\\n<li>一般是堆区内存泄漏，栈区不会泄漏。</li>\\n</ol>\\n<p>基本类型的值存在内存中，被保存在栈内存中，引用类型的值是对象，保存在堆内存中。所以<strong>对象、数组之类的，才会发生内存泄漏</strong>。</p>\\n<ol start=\"3\">\\n<li>使用chorme监控内存泄漏，可以看一下这篇<a href=\"https://jinlong.github.io/2016/05/01/4-Types-of-Memory-Leaks-in-JavaScript-and-How-to-Get-Rid-Of-Them/\" target=\"_blank\" rel=\"noopener noreferrer\">文章<OutboundLink/></a></li>\\n</ol>\\n<h2 id=\"小结\"><a class=\"header-anchor\" href=\"#小结\" aria-hidden=\"true\">#</a> 小结</h2>\\n<p>了解了内存泄漏的原因以及出现的情况，那么我们在编码过程中只要多加注意，就不会发生非常严重的内存泄漏问题。\\n\\x3c!-- 特殊字符串：用于修改/删除markdown的结尾提示语-OBKoro1 --\\x3e</p>\\n<h3 id=\"点个star支持我一下\"><a class=\"header-anchor\" href=\"#点个star支持我一下\" aria-hidden=\"true\">#</a> 点个<a href=\"https://github.com/OBKoro1/web_accumulate\" target=\"_blank\" rel=\"noopener noreferrer\">Star<OutboundLink/></a>支持我一下~</h3>\\n\\x3c!-- \\'特殊字符串：用于删除编译后的issue组件-OBKoro1 --\\x3e\\n'},{key:\"v-a645b44d6309e\",path:\"/accumulate/tool/koroFileHeader.html\",lastUpdated:1589454867e3,title:\"koroFileHeader-VSCode文件头部注释生成\",headers:[{level:3,title:\"使用效果：\",slug:\"使用效果：\"},{level:2,title:\"简介\",slug:\"简介\"},{level:2,title:\"安装\",slug:\"安装\"},{level:2,title:\"使用\",slug:\"使用\"},{level:2,title:\"注释模板的设置\",slug:\"注释模板的设置\"},{level:2,title:\"wiki文档\",slug:\"wiki文档\"},{level:3,title:\"支持功能：\",slug:\"支持功能：\"},{level:3,title:\"Auto Commit\",slug:\"auto-commit\"},{level:2,title:\"最后\",slug:\"最后\"},{level:3,title:\"点个Star支持我一下~\",slug:\"点个star支持我一下\"}],excerpt:'<h1 id=\"korofileheader-vscode文件头部注释生成\"><a class=\"header-anchor\" href=\"#korofileheader-vscode文件头部注释生成\" aria-hidden=\"true\">#</a> koroFileHeader-VSCode文件头部注释生成</h1>\\n<blockquote>\\n<p>在vscode中用于生成文件头部注释和函数注释的插件，经过多版迭代后，插件：支持所有主流语言,灵活方便，文档齐全，食用简单！觉得插件不错的话，就给个<a href=\"https://github.com/OBKoro1/koro1FileHeader\" target=\"_blank\" rel=\"noopener noreferrer\">Star<OutboundLink/></a>⭐️吧~</p>\\n</blockquote>\\n<h3 id=\"使用效果：\"><a class=\"header-anchor\" href=\"#使用效果：\" aria-hidden=\"true\">#</a> 使用效果：</h3>\\n<p><img src=\"https://raw.githubusercontent.com/OBKoro1/koro1FileHeader/master/images/example.gif\" alt=\"example.gif\"></p>\\n<h2 id=\"简介\"><a class=\"header-anchor\" href=\"#简介\" aria-hidden=\"true\">#</a> 简介</h2>\\n<ol>\\n<li>\\n<p><strong>文件头部添加注释</strong>:</p>\\n<ul>\\n<li>在文件开头添加注释，记录文件信息/文件的传参/出参等</li>\\n<li>支持用户高度自定义注释选项, 适配各种需求和注释。</li>\\n<li>保存文件的时候，自动更新最后的编辑时间和编辑人</li>\\n<li>快捷键：<code>window</code>：<code>ctrl+alt+i</code>,<code>mac</code>：<code>ctrl+cmd+i</code></li>\\n</ul>\\n</li>\\n<li>\\n<p><strong>在光标处添加函数注释</strong>:</p>\\n<ul>\\n<li>在光标处自动生成一个注释模板</li>\\n<li>支持用户高度自定义注释选项</li>\\n<li>快捷键：<code>window</code>：<code>ctrl+alt+t</code>,<code>mac</code>：<code>ctrl+cmd+t</code></li>\\n<li>快捷键不可用很可能是被占用了,<a href=\"https://github.com/OBKoro1/koro1FileHeader/issues/5\" target=\"_blank\" rel=\"noopener noreferrer\">参考这里<OutboundLink/></a></li>\\n</ul>\\n</li>\\n<li>\\n<p><a href=\"https://github.com/OBKoro1/koro1FileHeader/wiki/%E4%BD%9B%E7%A5%96%E4%BF%9D%E4%BD%91%E6%B0%B8%E6%97%A0BUG%E3%80%81%E7%A5%9E%E5%85%BD%E6%8A%A4%E4%BD%93%E3%80%81%E6%B3%A8%E9%87%8A%E5%9B%BE%E6%A1%88\" target=\"_blank\" rel=\"noopener noreferrer\">支持一键添加佛祖保佑永无BUG、神兽护体等注释图案<OutboundLink/></a></p>\\n<p><img src=\"https://github.com/OBKoro1/koro1FileHeader/raw/master/images/codeDesign.gif?raw=true\" alt=\"\"></p>\\n</li>\\n<li>\\n<p>查看更多<a href=\"https://github.com/OBKoro1/koro1FileHeader/wiki/%E9%85%8D%E7%BD%AE\" target=\"_blank\" rel=\"noopener noreferrer\">功能<OutboundLink/></a>,以及有更多需求可以给我提<a href=\"https://github.com/OBKoro1/koro1FileHeader/issues\" target=\"_blank\" rel=\"noopener noreferrer\">issue<OutboundLink/></a>。</p>\\n</li>\\n</ol>\\n<h2 id=\"安装\"><a class=\"header-anchor\" href=\"#安装\" aria-hidden=\"true\">#</a> 安装</h2>\\n<p>在 Vscode 扩展商店中搜索<code>koroFileHeader</code>,点击安装即可。</p>\\n<h2 id=\"使用\"><a class=\"header-anchor\" href=\"#使用\" aria-hidden=\"true\">#</a> 使用</h2>\\n<ol>\\n<li>\\n<p>文件头部注释：</p>\\n<p>在当前编辑文件中使用快捷键:<code>window</code>：<code>ctrl+alt+i</code>/<code>mac</code>：<code>ctrl+cmd+i</code>,即可生成文件头部注释。</p>\\n</li>\\n<li>\\n<p>函数注释：</p>\\n<ul>\\n<li>将光标放在函数行或者将光标放在函数上方的空白行</li>\\n<li>使用快捷键<code>window</code>：<code>ctrl+alt+t</code>,<code>mac</code>：<code>ctrl+cmd+t</code>，即可生成函数注释。</li>\\n<li>事实上，函数注释在文件的任意位置都可生成，这里需要自己控制。</li>\\n</ul>\\n</li>\\n</ol>\\n<h2 id=\"注释模板的设置\"><a class=\"header-anchor\" href=\"#注释模板的设置\" aria-hidden=\"true\">#</a> 注释模板的设置</h2>\\n<h2 id=\"wiki文档\"><a class=\"header-anchor\" href=\"#wiki文档\" aria-hidden=\"true\">#</a> wiki文档</h2>\\n<p><a href=\"https://github.com/OBKoro1/koro1FileHeader/wiki/%E6%9B%B4%E6%96%B0%E6%97%A5%E5%BF%97\" target=\"_blank\" rel=\"noopener noreferrer\">更新日志<OutboundLink/></a></p>\\n<p><a href=\"https://github.com/OBKoro1/koro1FileHeader/wiki/%E6%94%AF%E6%8C%81%E8%AF%AD%E8%A8%80\" target=\"_blank\" rel=\"noopener noreferrer\">支持语言<OutboundLink/></a></p>\\n<p><a href=\"https://github.com/OBKoro1/koro1FileHeader/wiki/%E9%85%8D%E7%BD%AE\" target=\"_blank\" rel=\"noopener noreferrer\">插件设置/配置<OutboundLink/></a></p>\\n<p><a href=\"https://github.com/OBKoro1/koro1FileHeader/wiki/%E9%85%8D%E7%BD%AE%E5%AD%97%E6%AE%B5\" target=\"_blank\" rel=\"noopener noreferrer\">配置字段<OutboundLink/></a></p>\\n<p><a href=\"https://github.com/OBKoro1/koro1FileHeader/wiki/%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98\" target=\"_blank\" rel=\"noopener noreferrer\">常见问题<OutboundLink/></a></p>\\n<h3 id=\"支持功能：\"><a class=\"header-anchor\" href=\"#支持功能：\" aria-hidden=\"true\">#</a> 支持功能：</h3>\\n<ul>\\n<li>\\n<p><a href=\"https://github.com/OBKoro1/koro1FileHeader/wiki/%E4%BD%9B%E7%A5%96%E4%BF%9D%E4%BD%91%E6%B0%B8%E6%97%A0BUG%E3%80%81%E7%A5%9E%E5%85%BD%E6%8A%A4%E4%BD%93%E3%80%81%E6%B3%A8%E9%87%8A%E5%9B%BE%E6%A1%88\" target=\"_blank\" rel=\"noopener noreferrer\">支持一键添加佛祖保佑永无BUG、神兽护体等注释图案<OutboundLink/></a>: 写代码不骚是不行的 ^_^</p>\\n</li>\\n<li>\\n<p><a href=\"https://github.com/OBKoro1/koro1FileHeader/wiki/%E9%85%8D%E7%BD%AE#%E6%B3%A8%E9%87%8A%E6%A8%A1%E6%9D%BF%E7%9A%84%E8%AE%BE%E7%BD%AE\" target=\"_blank\" rel=\"noopener noreferrer\">自定义注释模板信息<OutboundLink/></a>,自动更新最后编辑时间，最后编辑人。</p>\\n</li>\\n<li>\\n<p><a href=\"https://github.com/OBKoro1/koro1FileHeader/wiki/%E6%94%AF%E6%8C%81%E8%AF%AD%E8%A8%80\" target=\"_blank\" rel=\"noopener noreferrer\">支持几乎所有语言的注释形式<OutboundLink/></a></p>\\n</li>\\n<li>\\n<p><a href=\"https://github.com/OBKoro1/koro1FileHeader/wiki/%E9%85%8D%E7%BD%AE#1-%E8%87%AA%E5%AE%9A%E4%B9%89%E6%B3%A8%E9%87%8A%E7%AC%A6%E5%8F%B7%E5%8F%AF%E9%80%89%E9%A1%B9\" target=\"_blank\" rel=\"noopener noreferrer\">自定义注释符号<OutboundLink/></a>：即使插件不支持的语言，也可以自己定制。</p>\\n</li>\\n<li>\\n<p>检测文件头部没有注释, <a href=\"https://github.com/OBKoro1/koro1FileHeader/wiki/%E9%85%8D%E7%BD%AE#2-%E8%87%AA%E5%8A%A8%E6%B7%BB%E5%8A%A0%E6%96%87%E4%BB%B6%E5%A4%B4%E9%83%A8%E6%B3%A8%E9%87%8A\" target=\"_blank\" rel=\"noopener noreferrer\">自动添加头部注释功能<OutboundLink/></a>，配合<a href=\"https://github.com/OBKoro1/koro1FileHeader/wiki/%E9%85%8D%E7%BD%AE#%E8%87%AA%E5%8A%A8%E6%B7%BB%E5%8A%A0%E6%96%87%E4%BB%B6%E5%A4%B4%E9%83%A8%E6%B3%A8%E9%87%8A%E9%99%90%E5%88%B6\" target=\"_blank\" rel=\"noopener noreferrer\">自动添加头部注释黑名单<OutboundLink/></a>，麻麻再也不用担心我忘记加注释了.</p>\\n</li>\\n<li>\\n<p>生成头部注释时，自动添加<a href=\"https://github.com/OBKoro1/koro1FileHeader/wiki/%E9%85%8D%E7%BD%AE#filepath%E6%96%87%E4%BB%B6%E7%9B%B8%E5%AF%B9%E4%BA%8E%E9%A1%B9%E7%9B%AE%E7%9A%84%E8%B7%AF%E5%BE%84\" target=\"_blank\" rel=\"noopener noreferrer\">文件相对于当前项目的文件路径<OutboundLink/></a></p>\\n</li>\\n<li>\\n<p><a href=\"https://github.com/OBKoro1/koro1FileHeader/wiki/%E9%85%8D%E7%BD%AE#%E5%A4%B4%E9%83%A8%E6%B3%A8%E9%87%8A%E7%AD%89%E5%AE%BD%E8%AE%BE%E7%BD%AEwidesame\" target=\"_blank\" rel=\"noopener noreferrer\">头部注释等宽<OutboundLink/></a>功能，提高文件头部注释的颜值。</p>\\n</li>\\n<li>\\n<p><a href=\"https://github.com/OBKoro1/koro1FileHeader/wiki/%E9%85%8D%E7%BD%AE#3-%E5%A4%B4%E9%83%A8%E6%B3%A8%E9%87%8A%E7%AC%AC%E5%87%A0%E8%A1%8C%E6%8F%92%E5%85%A5\" target=\"_blank\" rel=\"noopener noreferrer\">头部注释第几行插入<OutboundLink/></a>,类似<code>PHP</code>第一行被占用了，通过设置，可以在第二行里面插入。</p>\\n</li>\\n<li>\\n<p>在<a href=\"https://github.com/OBKoro1/koro1FileHeader/wiki/%E9%85%8D%E7%BD%AE#5-%E5%A4%B4%E9%83%A8%E6%B3%A8%E9%87%8A%E5%89%8D%E9%9D%A2%E6%8F%92%E5%85%A5%E5%86%85%E5%AE%B9\" target=\"_blank\" rel=\"noopener noreferrer\">头部注释之前、之后插入一段内容<OutboundLink/></a>，类似<code>python</code>的环境声明: <code>#!/usr/bin/env python</code></p>\\n</li>\\n<li>\\n<p><a href=\"https://github.com/OBKoro1/koro1FileHeader/wiki/%E9%85%8D%E7%BD%AE#6-%E7%89%B9%E6%AE%8A%E5%AD%97%E6%AE%B5%E5%85%81%E8%AE%B8%E8%87%AA%E5%AE%9A%E4%B9%89\" target=\"_blank\" rel=\"noopener noreferrer\">特殊字段自定义<OutboundLink/></a>，类似博客的时间字段有特殊要求。</p>\\n</li>\\n<li>\\n<p>在头部注释/函数注释中<a href=\"https://github.com/OBKoro1/koro1FileHeader/wiki/%E9%85%8D%E7%BD%AE#7-%E5%9C%A8%E5%A4%B4%E9%83%A8%E6%B3%A8%E9%87%8A%E4%B8%AD%E8%BE%93%E5%87%BA%E4%B8%80%E6%AE%B5%E8%87%AA%E5%AE%9A%E4%B9%89%E4%BF%A1%E6%81%AF\" target=\"_blank\" rel=\"noopener noreferrer\">输出一段自定义信息<OutboundLink/></a>，可以是版权声明、个性签名、空行等。</p>\\n</li>\\n<li>\\n<p><a href=\"https://github.com/OBKoro1/koro1FileHeader/wiki/%E9%85%8D%E7%BD%AE#%E6%97%B6%E9%97%B4%E6%A0%BC%E5%BC%8F%E5%8C%96\" target=\"_blank\" rel=\"noopener noreferrer\">注释时间格式化<OutboundLink/></a></p>\\n</li>\\n<li>\\n<p><a href=\"https://github.com/OBKoro1/koro1FileHeader/wiki/%E9%85%8D%E7%BD%AE#8--%E9%81%87%E5%88%B0%E6%8D%A2%E8%A1%8C%E6%B7%BB%E5%8A%A0%E6%B3%A8%E9%87%8A%E7%AC%A6%E5%8F%B7\" target=\"_blank\" rel=\"noopener noreferrer\">匹配到换行自动添加注释符号<OutboundLink/></a></p>\\n</li>\\n<li>\\n<p>生成头部注释/函数注释时<a href=\"https://github.com/OBKoro1/koro1FileHeader/wiki/%E9%85%8D%E7%BD%AE#%E7%A7%BB%E5%8A%A8%E5%85%89%E6%A0%87%E5%88%B0description-%E6%89%80%E5%9C%A8%E8%A1%8C\" target=\"_blank\" rel=\"noopener noreferrer\">自动移动光标到<code>Description</code>所在行<OutboundLink/></a>.</p>\\n</li>\\n<li>\\n<p><a href=\"https://github.com/OBKoro1/koro1FileHeader/wiki/%E9%85%8D%E7%BD%AE#%E5%8D%95%E4%B8%AA%E6%96%87%E4%BB%B6%E4%BF%9D%E5%AD%98%E6%97%B6%E8%BF%9B%E8%A1%8Cdiff%E6%A3%80%E6%9F%A5\" target=\"_blank\" rel=\"noopener noreferrer\">文件diff检查<OutboundLink/></a>：检测只变更<code>LastEditors</code>和<code>LastEditTime</code>，将回滚该文件，减少无意义的提交。</p>\\n</li>\\n<li>\\n<p><a href=\"https://github.com/OBKoro1/koro1FileHeader/wiki/%E9%85%8D%E7%BD%AE#%E6%96%B0%E5%BB%BA%E6%96%87%E4%BB%B6%E8%87%AA%E5%8A%A8%E6%B7%BB%E5%8A%A0%E5%A4%B4%E9%83%A8%E6%B3%A8%E9%87%8A\" target=\"_blank\" rel=\"noopener noreferrer\">新建文件自动添加头部注释<OutboundLink/></a></p>\\n</li>\\n<li>\\n<p><a href=\"https://github.com/OBKoro1/koro1FileHeader/wiki/%E9%85%8D%E7%BD%AE#%E8%87%AA%E5%8A%A8%E6%B7%BB%E5%8A%A0%E5%A4%B4%E9%83%A8%E6%B3%A8%E9%87%8A%E9%A1%B9%E7%9B%AE%E9%BB%91%E5%90%8D%E5%8D%95\" target=\"_blank\" rel=\"noopener noreferrer\">自动添加头部注释-项目黑名单<OutboundLink/></a></p>\\n</li>\\n</ul>\\n<h3 id=\"auto-commit\"><a class=\"header-anchor\" href=\"#auto-commit\" aria-hidden=\"true\">#</a> Auto Commit</h3>\\n<p>推荐一个新开源的插件：<a href=\"https://github.com/OBKoro1/autoCommit\" target=\"_blank\" rel=\"noopener noreferrer\">Auto Commit<OutboundLink/></a></p>\\n<p><strong>这是一个用于Git自动commit的VSCode插件，它可以用来补充之前忘记提交commit，帮助你把首页的绿色格子填满</strong>。</p>\\n<p><img src=\"https://github.com/OBKoro1/autoCommit/blob/master/images/autoCommit.gif?raw=true\" alt=\"autoCommit演示\"></p>\\n<p>设置也超方便的，<a href=\"https://github.com/OBKoro1/koro1FileHeader/wiki/%E9%85%8D%E7%BD%AE\" target=\"_blank\" rel=\"noopener noreferrer\">传送门<OutboundLink/></a></p>\\n<h2 id=\"最后\"><a class=\"header-anchor\" href=\"#最后\" aria-hidden=\"true\">#</a> 最后</h2>\\n<p>如果觉得还不错的话，就给个 <a href=\"https://github.com/OBKoro1/koro1FileHeader\" target=\"_blank\" rel=\"noopener noreferrer\">Star<OutboundLink/></a> ⭐️ 鼓励一下我吧~</p>\\n<p><a href=\"http://obkoro1.com/web_accumulate/\" target=\"_blank\" rel=\"noopener noreferrer\">前端进阶积累<OutboundLink/></a>、<a href=\"https://user-gold-cdn.xitu.io/2018/5/1/1631b6f52f7e7015?w=344&amp;h=344&amp;f=jpeg&amp;s=8317\" target=\"_blank\" rel=\"noopener noreferrer\">公众号<OutboundLink/></a>、<a href=\"https://github.com/OBKoro1\" target=\"_blank\" rel=\"noopener noreferrer\">GitHub<OutboundLink/></a>\\n\\x3c!-- 特殊字符串：用于修改/删除markdown的结尾提示语-OBKoro1 --\\x3e</p>\\n<h3 id=\"点个star支持我一下\"><a class=\"header-anchor\" href=\"#点个star支持我一下\" aria-hidden=\"true\">#</a> 点个<a href=\"https://github.com/OBKoro1/web_accumulate\" target=\"_blank\" rel=\"noopener noreferrer\">Star<OutboundLink/></a>支持我一下~</h3>\\n\\x3c!-- \\'特殊字符串：用于删除编译后的issue组件-OBKoro1 --\\x3e\\n'},{key:\"v-0e4c33cd743e4\",path:\"/accumulate/tool/stop-mess-around.html\",lastUpdated:1625737488e3,title:\"stop-mess-around\",headers:[{level:3,title:\"项目介绍\",slug:\"项目介绍\"},{level:3,title:\"插件解决的问题: 停止下意识的摸鱼\",slug:\"插件解决的问题-停止下意识的摸鱼\"},{level:3,title:\"插件文档\",slug:\"插件文档\"},{level:3,title:\"使用示例\",slug:\"使用示例\"},{level:3,title:\"chrome应用商店\",slug:\"chrome应用商店\"},{level:2,title:\"快速上手\",slug:\"快速上手\"},{level:3,title:\"点个Star吧~\",slug:\"点个star吧\"},{level:3,title:\"欢迎赞助\",slug:\"欢迎赞助\"},{level:3,title:\"我的其他开源推荐\",slug:\"我的其他开源推荐\"},{level:3,title:\"License\",slug:\"license\"},{level:3,title:\"联系我\",slug:\"联系我\"},{level:3,title:\"点个Star支持我一下~\",slug:\"点个star支持我一下\"}],excerpt:'<h1 id=\"stop-mess-around\"><a class=\"header-anchor\" href=\"#stop-mess-around\" aria-hidden=\"true\">#</a> stop-mess-around</h1>\\n<h3 id=\"项目介绍\"><a class=\"header-anchor\" href=\"#项目介绍\" aria-hidden=\"true\">#</a> 项目介绍</h3>\\n<p>这是一个防摸鱼的chrome插件： <strong>通过强制的手段禁止大家浪费时间摸鱼</strong>，在上班/学习期间下意识的打开摸鱼网站, 自动检测摸鱼网站, 提示激励信息后, 关闭摸鱼网站。</p>\\n<h3 id=\"插件解决的问题-停止下意识的摸鱼\"><a class=\"header-anchor\" href=\"#插件解决的问题-停止下意识的摸鱼\" aria-hidden=\"true\">#</a> 插件解决的问题: 停止下意识的摸鱼</h3>\\n<p>在工作、学习期间，如果事情不是太忙，或者说在学习/忙碌一小段时间之后。</p>\\n<p><strong>就会下意识的打开或者输入知乎、掘金沸点、微博等网站，开始了摸鱼时光</strong>。</p>\\n<p><strong>可能是摸鱼奶头乐太快乐了，时间很快就过去两三个小时，而忘记自己的工作、学习初衷了</strong>。</p>\\n<p>事后我们通常会为之内疚，觉得很浪费时间</p>\\n<p>但无奈摸鱼网站深谙人性弱点，仅靠我们自身的自律还是很难去抵抗这种诱惑。</p>\\n<p>作者本人曾经也深受其害，后来我想到可以用工具来限制这种下意识的行为。</p>\\n<p>于是很喜欢写工具的我, 写了一个脚本<strong>用来检测摸鱼网站、检测到了就自动关闭摸鱼网站</strong>。</p>\\n<p><strong>我在经过一段时间的使用之后，我就再也没有在电脑上打开摸鱼网站了，工作学习效率也提高了很多</strong>。</p>\\n<p><strong>很奇怪，每次打开之后就被插件提示我不要摸鱼，然后被关闭摸鱼网站。</strong></p>\\n<p><strong>久而久之我就戒掉了在休息的间隙没事做就打开摸鱼网站的习惯了</strong>。</p>\\n<p><strong>就我个人而言，真的很有用，很有效果，为我节省了很多时间</strong>。</p>\\n<p>所以我将它做成chrome插件，开发了可视化的界面，方便不懂技术的人也可以直接上手使用。</p>\\n<p>希望这个开源工具可以有效的帮助大家减少摸鱼时间，提高工作和学习的效率。</p>\\n<h3 id=\"插件文档\"><a class=\"header-anchor\" href=\"#插件文档\" aria-hidden=\"true\">#</a> 插件文档</h3>\\n<p><a href=\"https://github.com/OBKoro1/stop-mess-around/wiki/%E5%BF%AB%E9%80%9F%E4%B8%8A%E6%89%8B%E4%BB%A5%E5%8F%8A%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E\" target=\"_blank\" rel=\"noopener noreferrer\">安装插件、快速上手以及使用说明<OutboundLink/></a></p>\\n<p><a href=\"https://github.com/OBKoro1/stop-mess-around/wiki/%E5%A6%82%E4%BD%95%E5%90%88%E7%90%86%E5%88%A9%E7%94%A8%E6%97%B6%E9%97%B4\" target=\"_blank\" rel=\"noopener noreferrer\">插件节省下来的时间如何合理利用<OutboundLink/></a></p>\\n<h3 id=\"使用示例\"><a class=\"header-anchor\" href=\"#使用示例\" aria-hidden=\"true\">#</a> 使用示例</h3>\\n<ol>\\n<li>添加摸鱼网站以及匹配摸鱼网站弹窗提示、关闭网页</li>\\n</ol>\\n<p><img src=\"https://github.com/OBKoro1/stop-mess-around/blob/master/static/start.gif?raw=true\" alt=\"\"></p>\\n<ol start=\"2\">\\n<li>一键开启/关闭以及批量添加摸鱼网站</li>\\n</ol>\\n<p><img src=\"https://github.com/OBKoro1/stop-mess-around/blob/master/static/addCheckout.gif?raw=true\" alt=\"\"></p>\\n<ol start=\"3\">\\n<li>匹配摸鱼网站后出现的提示信息 - 随机语录</li>\\n</ol>\\n<p><img src=\"https://github.com/OBKoro1/stop-mess-around/blob/master/static/mottoSetting.gif?raw=true\" alt=\"\"></p>\\n<ol start=\"4\">\\n<li>一些设置提示。</li>\\n</ol>\\n<p><img src=\"https://github.com/OBKoro1/stop-mess-around/blob/master/static/setting.gif?raw=true\" alt=\"\"></p>\\n<h3 id=\"chrome应用商店\"><a class=\"header-anchor\" href=\"#chrome应用商店\" aria-hidden=\"true\">#</a> chrome应用商店</h3>\\n<ol>\\n<li>打开<a href=\"https://chrome.google.com/webstore/detail/stop-mess-around/gbjbkekbbjbieijpebieifkmahlagncm/related?hl=zh-CN\" target=\"_blank\" rel=\"noopener noreferrer\">Chrome应用商店搜索: stop-mess-around<OutboundLink/></a>，点击安装即可。</li>\\n</ol>\\n<p><img src=\"https://github.com/OBKoro1/stop-mess-around/blob/master/static/down.png?raw=true\" alt=\"\"></p>\\n<ol start=\"2\">\\n<li>固定插件到顶部</li>\\n</ol>\\n<p><img src=\"https://github.com/OBKoro1/stop-mess-around/blob/master/static/top.png?raw=true\" alt=\"\"></p>\\n<h2 id=\"快速上手\"><a class=\"header-anchor\" href=\"#快速上手\" aria-hidden=\"true\">#</a> 快速上手</h2>\\n<blockquote>\\n<p>下面有几张演示的gif, 可能需要翻墙才能加载出来。</p>\\n</blockquote>\\n<ol>\\n<li><a href=\"https://github.com/OBKoro1/stop-mess-around/wiki/%E5%BF%AB%E9%80%9F%E4%B8%8A%E6%89%8B%E4%BB%A5%E5%8F%8A%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E#%E5%AE%89%E8%A3%85%E6%8F%92%E4%BB%B6\" target=\"_blank\" rel=\"noopener noreferrer\">安装插件<OutboundLink/></a></li>\\n<li>左键点击插件图标，打开插件管理面板</li>\\n</ol>\\n<p><img src=\"https://github.com/OBKoro1/stop-mess-around/blob/master/static/openoptions.png?raw=true\" alt=\"\"></p>\\n<ol start=\"3\">\\n<li>点击新增按钮新增摸鱼网站、或者一键添加摸鱼网站。</li>\\n</ol>\\n<p><img src=\"https://github.com/OBKoro1/stop-mess-around/blob/master/static/addCheckout.gif?raw=true\" alt=\"一键开启/关闭以及批量添加摸鱼网站\">\\n4. 打开任意网站，插件会去匹配是否添加到摸鱼网站列表中\\n5. 如果匹配到则会打开一个含有提示信息的弹窗,关闭弹窗后将会停留几秒后关闭网站或者跳转到指定网站。</p>\\n<p><img src=\"https://github.com/OBKoro1/stop-mess-around/blob/master/static/start.gif?raw=true\" alt=\"添加摸鱼网站并检查\"></p>\\n<h3 id=\"点个star吧\"><a class=\"header-anchor\" href=\"#点个star吧\" aria-hidden=\"true\">#</a> 点个Star吧~</h3>\\n<p>如果觉得这个插件还不错，对你有所帮助的话，就给我点个Star吧，谢谢兄弟姐妹们~</p>\\n<h3 id=\"欢迎赞助\"><a class=\"header-anchor\" href=\"#欢迎赞助\" aria-hidden=\"true\">#</a> 欢迎赞助</h3>\\n<p>如果觉得插件还不错，对你有所帮助的话，就请我喝杯水吧~</p>\\n<p>十块八块不嫌多，三块五块也是爱 😘</p>\\n<p><img src=\"https://github.com/OBKoro1/koro1FileHeader/raw/master/images/money1.jpg?raw=true\" alt=\"\"></p>\\n<h3 id=\"我的其他开源推荐\"><a class=\"header-anchor\" href=\"#我的其他开源推荐\" aria-hidden=\"true\">#</a> 我的其他开源推荐</h3>\\n<h4 id=\"korofileheader\"><a class=\"header-anchor\" href=\"#korofileheader\" aria-hidden=\"true\">#</a> <a href=\"https://github.com/OBKoro1/koro1FileHeader\" target=\"_blank\" rel=\"noopener noreferrer\">koroFileHeader<OutboundLink/></a></h4>\\n<ol>\\n<li>它是用于生成文件头部注释以及函数注释的，帮助我们养成良好的编码习惯，规范整个团队风格。</li>\\n<li>插件从18年5月维护至今, 2.7K+ Star，插件支持所有主流语言,功能强大，灵活方便，文档齐全，食用简单！</li>\\n</ol>\\n<p><img src=\"https://raw.githubusercontent.com/OBKoro1/koro1FileHeader/master/images/example.gif\" alt=\"头部注释\"></p>\\n<p><img src=\"https://github.com/OBKoro1/koro1FileHeader/raw/master/images/function-params.gif?raw=true\" alt=\"函数注释\"></p>\\n<h4 id=\"autocommit\"><a class=\"header-anchor\" href=\"#autocommit\" aria-hidden=\"true\">#</a> <a href=\"https://github.com/OBKoro1/autoCommit\" target=\"_blank\" rel=\"noopener noreferrer\">AutoCommit<OutboundLink/></a></h4>\\n<p>这是一个用于Git自动commit的VSCode插件，它可以用来补充之前忘记提交commit，帮助你把首页的绿色格子填满。</p>\\n<p><img src=\"https://github.com/OBKoro1/autoCommit/raw/master/images/autoCommit.gif?raw=true\" alt=\"\"></p>\\n<h3 id=\"license\"><a class=\"header-anchor\" href=\"#license\" aria-hidden=\"true\">#</a> License</h3>\\n<p><a href=\"http://opensource.org/licenses/MIT\" target=\"_blank\" rel=\"noopener noreferrer\">MIT<OutboundLink/></a></p>\\n<h3 id=\"联系我\"><a class=\"header-anchor\" href=\"#联系我\" aria-hidden=\"true\">#</a> 联系我</h3>\\n<p><a href=\"https://juejin.im/user/78820536236951\" target=\"_blank\" rel=\"noopener noreferrer\">掘金<OutboundLink/></a>、<a href=\"http://obkoro1.com/web_accumulate/\" target=\"_blank\" rel=\"noopener noreferrer\">前端进阶积累<OutboundLink/></a>、<a href=\"https://user-gold-cdn.xitu.io/2018/5/1/1631b6f52f7e7015?w=344&amp;h=344&amp;f=jpeg&amp;s=8317\" target=\"_blank\" rel=\"noopener noreferrer\">公众号<OutboundLink/></a>、<a href=\"https://github.com/OBKoro1\" target=\"_blank\" rel=\"noopener noreferrer\">GitHub<OutboundLink/></a>、<a href=\"https://raw.githubusercontent.com/OBKoro1/articleImg_src/master/weibo_img_move/005Y4rCogy1fsnslyz5pnj309j0cdgm6.jpg\" target=\"_blank\" rel=\"noopener noreferrer\">微信<OutboundLink/></a>:OBkoro1、邮箱：obkoro1@foxmail.com\\n\\x3c!-- 特殊字符串：用于修改/删除markdown的结尾提示语-OBKoro1 --\\x3e</p>\\n<h3 id=\"点个star支持我一下\"><a class=\"header-anchor\" href=\"#点个star支持我一下\" aria-hidden=\"true\">#</a> 点个<a href=\"https://github.com/OBKoro1/web_accumulate\" target=\"_blank\" rel=\"noopener noreferrer\">Star<OutboundLink/></a>支持我一下~</h3>\\n\\x3c!-- \\'特殊字符串：用于删除编译后的issue组件-OBKoro1 --\\x3e\\n'},{key:\"v-50f36ff1f578e\",path:\"/accumulate/tool/%E4%B8%80%E4%BB%BD%E8%B6%85%E7%BA%A7%E8%AF%A6%E7%BB%86%E7%9A%84Vue-cli3.0%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B.html\",lastUpdated:1564720698e3,title:\"一份超级详细的Vue-cli3.0使用教程\",headers:[{level:2,title:\"一份超级详细的Vue-cli3.0使用教程\",slug:\"一份超级详细的vue-cli3-0使用教程\"},{level:3,title:\"主要内容：\",slug:\"主要内容：\"},{level:2,title:\"安装：\",slug:\"安装：\"},{level:3,title:\"卸载旧版本：\",slug:\"卸载旧版本：\"},{level:3,title:\"Node版本要求：\",slug:\"node版本要求：\"},{level:3,title:\"安装vue-cli:\",slug:\"安装vue-cli\"},{level:2,title:\"零配置启动/打包一个.vue文件：\",slug:\"零配置启动-打包一个-vue文件：\"},{level:3,title:\"安装扩展：\",slug:\"安装扩展：\"},{level:3,title:\"如下图，只需一个.vue文件，就能迅速启动一个服务：\",slug:\"如下图，只需一个-vue文件，就能迅速启动一个服务：\"},{level:2,title:\"第一次创建项目:\",slug:\"第一次创建项目\"},{level:3,title:\"1. 命令行:\",slug:\"_1-命令行\"},{level:3,title:\"2. 选择模板:\",slug:\"_2-选择模板\"},{level:3,title:\"3. 选择配置：\",slug:\"_3-选择配置：\"},{level:3,title:\"4. 选择css预处理器:\",slug:\"_4-选择css预处理器\"},{level:3,title:\"5. 是否使用路由的history模式：\",slug:\"_5-是否使用路由的history模式：\"},{level:3,title:\"6. 选择Eslint代码验证规则：\",slug:\"_6-选择eslint代码验证规则：\"},{level:3,title:\"7. 选择什么时候进行代码规则检测：\",slug:\"_7-选择什么时候进行代码规则检测：\"},{level:3,title:\"8. 选择e2e测试:\",slug:\"_8-选择e2e测试\"},{level:3,title:\"9. 把babel,postcss,eslint这些配置文件放哪：\",slug:\"_9-把babel-postcss-eslint这些配置文件放哪：\"},{level:3,title:\"10. 是否保存配置：\",slug:\"_10-是否保存配置：\"},{level:3,title:\"11. 下载依赖\",slug:\"_11-下载依赖\"},{level:3,title:\"12. webpack配置的目录不见了：\",slug:\"_12-webpack配置的目录不见了：\"},{level:3,title:\"13.启动项目：\",slug:\"_13-启动项目：\"},{level:2,title:\"使用图形化界面创建/管理/运行项目：\",slug:\"使用图形化界面创建-管理-运行项目：\"},{level:3,title:\"启动图形化界面\",slug:\"启动图形化界面\"},{level:3,title:\"创建项目和导入项目：\",slug:\"创建项目和导入项目：\"},{level:3,title:\"项目管理：\",slug:\"项目管理：\"},{level:2,title:\"结语\",slug:\"结语\"},{level:3,title:\"点个Star支持我一下~\",slug:\"点个star支持我一下\"}],excerpt:'<h2 id=\"一份超级详细的vue-cli3-0使用教程\"><a class=\"header-anchor\" href=\"#一份超级详细的vue-cli3-0使用教程\" aria-hidden=\"true\">#</a> 一份超级详细的Vue-cli3.0使用教程</h2>\\n<p>在vue-cli 2.X的时候，也写过一篇类似的<a href=\"https://juejin.im/post/597eee92f265da3e2e56e37c\" target=\"_blank\" rel=\"noopener noreferrer\">文章<OutboundLink/></a>，在八月份的时候vue-cli已经更新到了3.X，新版本的脚手架，功能灰常强大，试用过后非常喜欢，写篇教程来帮助各位踩一下坑。</p>\\n<blockquote>\\n<p>游泳、健身了解一下：<a href=\"http://obkoro1.com/\" target=\"_blank\" rel=\"noopener noreferrer\">博客<OutboundLink/></a>、<a href=\"http://obkoro1.com/web_accumulate/accumulate/\" target=\"_blank\" rel=\"noopener noreferrer\">前端积累文档<OutboundLink/></a>、<a href=\"https://github.com/OBKoro1/articleImg_src/blob/master/juejin/1631b6f52f7e7015.jpeg?raw=true\" target=\"_blank\" rel=\"noopener noreferrer\">公众号<OutboundLink/></a>、<a href=\"https://github.com/OBKoro1\" target=\"_blank\" rel=\"noopener noreferrer\">GitHub<OutboundLink/></a></p>\\n</blockquote>\\n<h3 id=\"主要内容：\"><a class=\"header-anchor\" href=\"#主要内容：\" aria-hidden=\"true\">#</a> 主要内容：</h3>\\n<ol>\\n<li>零配置启动/打包一个<code>.vue</code>文件</li>\\n<li>详细的搭建过程</li>\\n<li><strong>重点推荐：使用图形化界面创建/管理/运行项目</strong></li>\\n</ol>\\n<hr>\\n<h2 id=\"安装：\"><a class=\"header-anchor\" href=\"#安装：\" aria-hidden=\"true\">#</a> 安装：</h2>\\n<h3 id=\"卸载旧版本：\"><a class=\"header-anchor\" href=\"#卸载旧版本：\" aria-hidden=\"true\">#</a> 卸载旧版本：</h3>\\n<p>如果你事先已经全局安装了旧版本的<code>vue-cli</code>(1.x 或 2.x),你需要先卸载它:</p>\\n<pre><code>npm uninstall vue-cli -g\\n</code></pre>\\n<h3 id=\"node版本要求：\"><a class=\"header-anchor\" href=\"#node版本要求：\" aria-hidden=\"true\">#</a> Node版本要求：</h3>\\n<p>3.x需要在<code>Node.js</code>8.9或更高版本(推荐8.11.0+)，点击这里可以安装<a href=\"http://nodejs.cn/download/\" target=\"_blank\" rel=\"noopener noreferrer\">node<OutboundLink/></a></p>\\n<p>大多数人都安装过了node,使用下面的命令行<strong>查询你的node版本</strong>:</p>\\n<pre><code>node -v\\n</code></pre>\\n<p>如果你的版本不够，可以使用下面的命令行来把<strong>Node版本更新到最新的稳定版</strong>：</p>\\n<pre><code>npm install -g n // 安装模块 这个模块是专门用来管理node.js版本的\\nn stable // 更新你的node版本\\n</code></pre>\\n<p>mac下，更新版本的时候,如果提示你权限不够：</p>\\n<pre><code>sudo n stable // 我就遇到了\\n</code></pre>\\n<h3 id=\"安装vue-cli\"><a class=\"header-anchor\" href=\"#安装vue-cli\" aria-hidden=\"true\">#</a> 安装vue-cli:</h3>\\n<pre><code>npm install -g @vue/cli // 安装cli3.x\\nvue --version // 查询版本是否为3.x\\n</code></pre>\\n<p>如果cli3.x用的不舒服，<strong>cli3也能使用2.x模板</strong>：</p>\\n<pre><code>npm install -g @vue/cli-init // 安装这个模块\\n// 就可以使用2.x的模板：vue init webpack my-project\\n</code></pre>\\n<h2 id=\"零配置启动-打包一个-vue文件：\"><a class=\"header-anchor\" href=\"#零配置启动-打包一个-vue文件：\" aria-hidden=\"true\">#</a> 零配置启动/打包一个<code>.vue</code>文件：</h2>\\n<h3 id=\"安装扩展：\"><a class=\"header-anchor\" href=\"#安装扩展：\" aria-hidden=\"true\">#</a> 安装扩展：</h3>\\n<pre><code>npm install -g @vue/cli-service-global\\n</code></pre>\\n<p>安装完扩展之后，可以随便找个文件夹建一个如下方示例的.vue文件,然后跑起来：</p>\\n<pre><code>vue serve App.vue // 启动服务\\nvue build App.vue // 打包出生产环境的包并用来部署\\n</code></pre>\\n<h3 id=\"如下图，只需一个-vue文件，就能迅速启动一个服务：\"><a class=\"header-anchor\" href=\"#如下图，只需一个-vue文件，就能迅速启动一个服务：\" aria-hidden=\"true\">#</a> 如下图，只需一个.vue文件，就能迅速启动一个服务：</h3>\\n<p>如图所示，服务启动的时候回生成一个<code>node_modules</code>包，稍微测试了一下，<strong>服务支持ES6语法和热更新</strong>，打包的时候会生成一个<code>dist</code>文件夹。(新建一个test.vue文件也只有一个<code>node_modules</code>/<code>dist</code>文件夹)</p>\\n<p>这是个很棒的功能，用于<strong>开发一个库、组件，做一些小demo等都是非常适合的</strong>！</p>\\n<p><img src=\"https://github.com/OBKoro1/articleImg_src/blob/master/juejin/166fc87173c427ea?raw=true\" alt=\"\"></p>\\n<hr>\\n<h2 id=\"第一次创建项目\"><a class=\"header-anchor\" href=\"#第一次创建项目\" aria-hidden=\"true\">#</a> 第一次创建项目:</h2>\\n<h3 id=\"_1-命令行\"><a class=\"header-anchor\" href=\"#_1-命令行\" aria-hidden=\"true\">#</a> 1. 命令行:</h3>\\n<pre><code>vue create hello-cli3 \\n</code></pre>\\n<ul>\\n<li>\\n<p>hello-cli3是文件夹名字，如果不存在会<strong>自动创建文件夹</strong>，如果存在会安装到那个文件夹中。</p>\\n</li>\\n<li>\\n<p>相比2.x的时候需要自己手动创建一个文件夹，这里也算是一个小优化吧。</p>\\n</li>\\n</ul>\\n<h3 id=\"_2-选择模板\"><a class=\"header-anchor\" href=\"#_2-选择模板\" aria-hidden=\"true\">#</a> 2. 选择模板:</h3>\\n<ul>\\n<li>\\n<p>一开始只有两个选项: <code>default</code>(默认配置)和<code>Manually select features</code>(手动配置)</p>\\n<p>默认配置只有<code>babel</code>和<code>eslint</code>其他的都要自己另外再配置，所以我们选第二项手动配置。</p>\\n</li>\\n<li>\\n<p>在每次选择手动配置之后，会询问你是否保存配置，也就是图片中的<code>koro</code>选项，这样以后我们在进行创建项目的时候<strong>只需使用原先的配置</strong>就可以了，而不用再进行配置。</p>\\n</li>\\n</ul>\\n<p><img src=\"https://github.com/OBKoro1/articleImg_src/blob/master/juejin/166fca9d5b691cc3?raw=true\" alt=\"\"></p>\\n<h3 id=\"_3-选择配置：\"><a class=\"header-anchor\" href=\"#_3-选择配置：\" aria-hidden=\"true\">#</a> 3. 选择配置：</h3>\\n<ul>\\n<li>\\n<p>根据你的项目需要来选择配置,空格键是选中与取消，A键是全选</p>\\n<pre><code>  ? Check the features needed for your project: (Press &lt;space&gt; to select, &lt;a&gt; to toggle all, &lt;i&gt; to invert selection) \\n  // 检查项目所需的功能:(按&lt;space&gt;选择，&lt;a&gt;切换所有，&lt;i&gt;反转选择）\\n  &gt;( ) TypeScript                                 // 支持使用 TypeScript 书写源码\\n   ( ) Progressive Web App (PWA) Support          // PWA 支持\\n   ( ) Router                                     // 支持 vue-router\\n   ( ) Vuex                                       // 支持 vuex\\n   ( ) CSS Pre-processors                         // 支持 CSS 预处理器。\\n   ( ) Linter / Formatter                         // 支持代码风格检查和格式化。\\n   ( ) Unit Testing                               // 支持单元测试。\\n   ( ) E2E Testing  \\n</code></pre>\\n</li>\\n</ul>\\n<h3 id=\"_4-选择css预处理器\"><a class=\"header-anchor\" href=\"#_4-选择css预处理器\" aria-hidden=\"true\">#</a> 4. 选择css预处理器:</h3>\\n<ul>\\n<li>\\n<p>如果你选择了Css预处理器选项，会让你选择这个</p>\\n<pre><code>  ? Pick a CSS pre-processor (PostCSS, Autoprefixer and CSS Modules are supported by default):\\n  // 选择CSS预处理器（默认支持PostCSS，Autoprefixer和CSS模块）：\\n  &gt; SCSS/SASS\\n    LESS\\n    Stylus\\n</code></pre>\\n</li>\\n</ul>\\n<h3 id=\"_5-是否使用路由的history模式：\"><a class=\"header-anchor\" href=\"#_5-是否使用路由的history模式：\" aria-hidden=\"true\">#</a> 5. 是否使用路由的<code>history</code>模式：</h3>\\n<ul>\\n<li>\\n<p>这里我建议选No，这样打包出来丢到服务器上可以直接使用了，后期要用的话，也可以自己再开起来。</p>\\n</li>\\n<li>\\n<p>选yes的话需要服务器那边再进行设置。</p>\\n<pre><code>  Use history mode for router? (Requires proper server setup for index fallback in production) \\n  // 路由使用history模式?(在生产环境中需要适当的服务器设置以备索引)\\n</code></pre>\\n</li>\\n</ul>\\n<h3 id=\"_6-选择eslint代码验证规则：\"><a class=\"header-anchor\" href=\"#_6-选择eslint代码验证规则：\" aria-hidden=\"true\">#</a> 6. 选择Eslint代码验证规则：</h3>\\n<pre><code>&gt; ESLint with error prevention only\\n  ESLint + Airbnb config\\n  ESLint + Standard config\\n  ESLint + Prettier\\n</code></pre>\\n<h3 id=\"_7-选择什么时候进行代码规则检测：\"><a class=\"header-anchor\" href=\"#_7-选择什么时候进行代码规则检测：\" aria-hidden=\"true\">#</a> 7. 选择什么时候进行代码规则检测：</h3>\\n<ul>\\n<li>\\n<p>建议选保存就检测，等到commit的时候，问题可能都已经积累很多了。</p>\\n</li>\\n<li>\\n<p>之前写了篇<a href=\"http://obkoro1.com/web_accumulate/accumulate/tool/Eslint%E8%87%AA%E5%8A%A8%E4%BF%AE%E5%A4%8D%E6%A0%BC%E5%BC%8F%E9%94%99%E8%AF%AF.html#vscode%E4%BF%9D%E5%AD%98%E6%97%B6%E8%87%AA%E5%8A%A8%E4%BF%AE%E5%A4%8Deslint%E9%94%99%E8%AF%AF\" target=\"_blank\" rel=\"noopener noreferrer\">VsCode保存时自动修复Eslint错误<OutboundLink/></a>推荐一下。</p>\\n<pre><code>  ? Pick additional lint features: (Press &lt;space&gt; to select, &lt;a&gt; to toggle all, &lt;i&gt; to invert selection)\\n  &gt;( ) Lint on save // 保存就检测\\n   ( ) Lint and fix on commit // fix和commit时候检查\\n</code></pre>\\n</li>\\n</ul>\\n<h3 id=\"_8-选择e2e测试\"><a class=\"header-anchor\" href=\"#_8-选择e2e测试\" aria-hidden=\"true\">#</a> 8. 选择e2e测试:</h3>\\n<pre><code>? Pick a E2E testing solution: (Use arrow keys)\\n❯ Cypress (Chrome only) \\n  Nightwatch (Selenium-based) \\n</code></pre>\\n<h3 id=\"_9-把babel-postcss-eslint这些配置文件放哪：\"><a class=\"header-anchor\" href=\"#_9-把babel-postcss-eslint这些配置文件放哪：\" aria-hidden=\"true\">#</a> 9. 把babel,postcss,eslint这些配置文件放哪：</h3>\\n<ul>\\n<li>\\n<p>通常我们会选择独立放置，让package.json干净些</p>\\n<pre><code>  ? Where do you prefer placing config for Babel, PostCSS, ESLint, etc.? (Use arrow keys)\\n  &gt; In dedicated config files // 独立文件放置\\n    In package.json // 放package.json里\\n</code></pre>\\n</li>\\n</ul>\\n<h3 id=\"_10-是否保存配置：\"><a class=\"header-anchor\" href=\"#_10-是否保存配置：\" aria-hidden=\"true\">#</a> 10. 是否保存配置：</h3>\\n<pre><code>Save this as a preset for future projects? (Y/n) // 是否记录一下以便下次继续使用这套配置\\n// 选保存之后，会让你写一个配置的名字：\\nSave preset as:  name // 然后你下次进入配置可以直接使用你这次的配置了\\n</code></pre>\\n<h3 id=\"_11-下载依赖\"><a class=\"header-anchor\" href=\"#_11-下载依赖\" aria-hidden=\"true\">#</a> 11. 下载依赖</h3>\\n<h3 id=\"_12-webpack配置的目录不见了：\"><a class=\"header-anchor\" href=\"#_12-webpack配置的目录不见了：\" aria-hidden=\"true\">#</a> 12. webpack配置的目录不见了：</h3>\\n<p>一起来看一下新项目的结构(下图),会发现2.x的webpack配置的目录不见了，也就是没有build、config这两个文件夹了：</p>\\n<ul>\\n<li>\\n<p>这种方式的优势<strong>对小白来说非常友好</strong>，不会一上来就两个文件夹，一堆文件，看着脑袋都大了。</p>\\n</li>\\n<li>\\n<p>然后在<strong>引用<s>抄</s>别人的配置的时候，也非常方便</strong>，直接将文件复制过来就好了。</p>\\n</li>\\n<li>\\n<p><strong>在自定义一下webpack的配置</strong>，我们需要在<strong>根目录新建一个<code>vue.config.js</code>文件</strong>，文件中应该导出一个对象，然后进行配置，详情查阅<a href=\"https://cli.vuejs.org/zh/config/\" target=\"_blank\" rel=\"noopener noreferrer\">官方文档<OutboundLink/></a></p>\\n<pre><code>  // vue.config.js\\n  module.exports = {\\n    // 选项...\\n  }\\n</code></pre>\\n</li>\\n<li>\\n<p>还有一些小变动像：static文件夹改为public了，router文件夹变成了单个文件之类的(我之前一直这么做,嘿嘿)。</p>\\n<p><img src=\"https://github.com/OBKoro1/articleImg_src/blob/master/juejin/166fcd735ce563ba?raw=true\" alt=\"\"></p>\\n</li>\\n</ul>\\n<h3 id=\"_13-启动项目：\"><a class=\"header-anchor\" href=\"#_13-启动项目：\" aria-hidden=\"true\">#</a> 13.启动项目：</h3>\\n<ul>\\n<li>\\n<p>启动项目：npm run serve // <strong>不是之前的 npm run dev</strong></p>\\n</li>\\n<li>\\n<p>打开<code>http://localhost:8080</code>：</p>\\n<p><img src=\"https://github.com/OBKoro1/articleImg_src/blob/master/juejin/166fcd823cce157b?raw=true\" alt=\"\"></p>\\n</li>\\n</ul>\\n<hr>\\n<h2 id=\"使用图形化界面创建-管理-运行项目：\"><a class=\"header-anchor\" href=\"#使用图形化界面创建-管理-运行项目：\" aria-hidden=\"true\">#</a> 使用图形化界面创建/管理/运行项目：</h2>\\n<h3 id=\"启动图形化界面\"><a class=\"header-anchor\" href=\"#启动图形化界面\" aria-hidden=\"true\">#</a> 启动图形化界面</h3>\\n<pre><code>vue ui \\n</code></pre>\\n<ul>\\n<li>\\n<p>这是个全局的命令 在哪个文件夹都可以打开</p>\\n</li>\\n<li>\\n<p>界面(下图)，重要的项目可以收藏起来(置顶)：</p>\\n<p><img src=\"https://github.com/OBKoro1/articleImg_src/blob/master/juejin/166fd034aae0942d?raw=true\" alt=\"\"></p>\\n</li>\\n</ul>\\n<h3 id=\"创建项目和导入项目：\"><a class=\"header-anchor\" href=\"#创建项目和导入项目：\" aria-hidden=\"true\">#</a> 创建项目和导入项目：</h3>\\n<ol>\\n<li>\\n<p>目录选中之后，导入项目点击下面的导入就可以了。</p>\\n<p><img src=\"https://github.com/OBKoro1/articleImg_src/blob/master/juejin/166fd0f5359fc7ba?raw=true\" alt=\"\"></p>\\n</li>\\n<li>\\n<p>创建项目，填一个文件夹名字：</p>\\n<p><img src=\"https://github.com/OBKoro1/articleImg_src/blob/master/juejin/166fd177edf662d3?raw=true\" alt=\"\"></p>\\n</li>\\n<li>\\n<p>然后选一下预先保存好的设置就可以了，非常方便，建议采用图形界面来创建项目：</p>\\n<p><img src=\"https://github.com/OBKoro1/articleImg_src/blob/master/juejin/166fd1a86f0e7bd5?raw=true\" alt=\"\"></p>\\n</li>\\n</ol>\\n<h3 id=\"项目管理：\"><a class=\"header-anchor\" href=\"#项目管理：\" aria-hidden=\"true\">#</a> 项目管理：</h3>\\n<p>当我们点击hello -cli3项目，就会进入项目管理的界面</p>\\n<h4 id=\"_1-仪表盘：\"><a class=\"header-anchor\" href=\"#_1-仪表盘：\" aria-hidden=\"true\">#</a> 1. 仪表盘：</h4>\\n<ul>\\n<li>\\n<p>这个仪表盘，主要是为了我们操作方便而设置的</p>\\n</li>\\n<li>\\n<p>可以点击右上角的按钮，来添加/移动这些功能选项。</p>\\n<p><img src=\"https://github.com/OBKoro1/articleImg_src/blob/master/juejin/166fd276f5a4de8b?raw=true\" alt=\"\"></p>\\n</li>\\n</ul>\\n<h4 id=\"_2-vue-cli3-x插件：\"><a class=\"header-anchor\" href=\"#_2-vue-cli3-x插件：\" aria-hidden=\"true\">#</a> 2. vue-cli3.x插件：</h4>\\n<ul>\\n<li>\\n<p>vue-cli3的插件功能，详情了解<a href=\"https://cli.vuejs.org/zh/guide/plugins-and-presets.html#%E6%8F%92%E4%BB%B6\" target=\"_blank\" rel=\"noopener noreferrer\">官方文档<OutboundLink/></a></p>\\n<p><img src=\"https://github.com/OBKoro1/articleImg_src/blob/master/juejin/166fd344e9e5edc0?raw=true\" alt=\"\"></p>\\n</li>\\n<li>\\n<p>cli3插件安装的过程：</p>\\n<p><img src=\"https://github.com/OBKoro1/articleImg_src/blob/master/juejin/166fd3595b37e06a?raw=true\" alt=\"cli3插件安装的过程\"></p>\\n</li>\\n</ul>\\n<h4 id=\"_3-项目依赖\"><a class=\"header-anchor\" href=\"#_3-项目依赖\" aria-hidden=\"true\">#</a> 3. 项目依赖</h4>\\n<ul>\\n<li>\\n<p>直接在图形界面管理依赖很舒服了！</p>\\n</li>\\n<li>\\n<p>安装依赖的时候，要记得选择开发依赖/运行依赖！</p>\\n<p><img src=\"https://github.com/OBKoro1/articleImg_src/blob/master/juejin/166fd391835d2edb?raw=true\" alt=\"\"></p>\\n</li>\\n</ul>\\n<h4 id=\"_4-项目配置\"><a class=\"header-anchor\" href=\"#_4-项目配置\" aria-hidden=\"true\">#</a> 4. 项目配置</h4>\\n<ul>\\n<li>\\n<p>可以对cli进行一些配置、Eslint规则修改：</p>\\n<p><img src=\"https://github.com/OBKoro1/articleImg_src/blob/master/juejin/166fd3c81be26fd0?raw=true\" alt=\"\"></p>\\n</li>\\n</ul>\\n<h4 id=\"_5-任务：\"><a class=\"header-anchor\" href=\"#_5-任务：\" aria-hidden=\"true\">#</a> 5. 任务：</h4>\\n<ul>\\n<li>\\n<p>serve 运行项目，点击直接运行，再也不用输入命令了！</p>\\n</li>\\n<li>\\n<p>可以清楚的看到各个模块用了多久，方便我们<strong>针对性的进行优化</strong>：</p>\\n<p><img src=\"https://github.com/OBKoro1/articleImg_src/blob/master/juejin/166fd41bde538496?raw=true\" alt=\"\"></p>\\n</li>\\n<li>\\n<p>build 打包项目：这里<strong>主要展示了图表的功能</strong>，比以前2.x生成报告更加直观，超级棒！</p>\\n<p><img src=\"https://github.com/OBKoro1/articleImg_src/blob/master/juejin/166fd42dae770e0d?raw=true\" alt=\"\"></p>\\n</li>\\n</ul>\\n<h4 id=\"_6-其他\"><a class=\"header-anchor\" href=\"#_6-其他\" aria-hidden=\"true\">#</a> 6. 其他</h4>\\n<ul>\\n<li>\\n<p>夜间风格界面，我更喜欢这个界面</p>\\n</li>\\n<li>\\n<p>直接打开编辑器,很棒了！</p>\\n</li>\\n<li>\\n<p>还有一些乱七八糟的按钮</p>\\n<p><img src=\"https://github.com/OBKoro1/articleImg_src/blob/master/juejin/166fd4f37d2fd567?raw=true\" alt=\"\"></p>\\n</li>\\n</ul>\\n<hr>\\n<h2 id=\"结语\"><a class=\"header-anchor\" href=\"#结语\" aria-hidden=\"true\">#</a> 结语</h2>\\n<p>可以说很认真了，希望大家看完能够有些收获，<strong>赶紧试试新版的vue-cli吧</strong>！</p>\\n<p>以上2018.11.10</p>\\n<p>参考资料：</p>\\n<p><a href=\"https://cli.vuejs.org/zh/guide/\" target=\"_blank\" rel=\"noopener noreferrer\">vue-cli3官方文档<OutboundLink/></a></p>\\n<p><a href=\"https://gitee.com/hjm100/codes/rjch7b31l4f59gt8suidn63\" target=\"_blank\" rel=\"noopener noreferrer\">vue-cli3.0搭建与配置<OutboundLink/></a>\\n\\x3c!-- 特殊字符串：用于修改/删除markdown的结尾提示语-OBKoro1 --\\x3e</p>\\n<h3 id=\"点个star支持我一下\"><a class=\"header-anchor\" href=\"#点个star支持我一下\" aria-hidden=\"true\">#</a> 点个<a href=\"https://github.com/OBKoro1/web_accumulate\" target=\"_blank\" rel=\"noopener noreferrer\">Star<OutboundLink/></a>支持我一下~</h3>\\n\\x3c!-- \\'特殊字符串：用于删除编译后的issue组件-OBKoro1 --\\x3e\\n'},{key:\"v-5169601fac26d\",path:\"/accumulate/tool/%E5%8D%9A%E5%AE%A2%E5%A4%96%E9%93%BE%E5%A4%B1%E6%95%88%E4%B8%80%E9%94%AE%E6%9B%BF%E6%8D%A2.html\",lastUpdated:1564720698e3,title:\"博客外链失效一键替换\",headers:[{level:2,title:\"博客外链失效一键替换\",slug:\"博客外链失效一键替换\"},{level:2,title:\"markdown-img-down-site-change(下载/替换markdown中的图片)\",slug:\"markdown-img-down-site-change-下载-替换markdown中的图片\"},{level:3,title:\"简介\",slug:\"简介\"},{level:3,title:\"解决什么问题？\",slug:\"解决什么问题？\"},{level:3,title:\"安装:\",slug:\"安装\"},{level:3,title:\"文档：\",slug:\"文档：\"},{level:3,title:\"数据安全：\",slug:\"数据安全：\"},{level:3,title:\"使用：20行代码不到\",slug:\"使用：20行代码不到\"},{level:3,title:\"运行：\",slug:\"运行：\"},{level:3,title:\"功能/参数简介：\",slug:\"功能-参数简介：\"},{level:2,title:\"欢迎试用\",slug:\"欢迎试用\"},{level:3,title:\"点个Star支持我一下~\",slug:\"点个star支持我一下\"}],excerpt:'<h2 id=\"博客外链失效一键替换\"><a class=\"header-anchor\" href=\"#博客外链失效一键替换\" aria-hidden=\"true\">#</a> 博客外链失效一键替换</h2>\\n<p>大约一个月前，微博的图片外链失效了，以及掘金因为盗链问题也于<code>2019/06/06</code><a href=\"https://juejin.im/post/5cefb6a3f265da1b95703b9d\" target=\"_blank\" rel=\"noopener noreferrer\">决定开启防盗链<OutboundLink/></a>，造成的影响是：<strong>个人博客网站的引用了这些图片外链都不能显示</strong>。</p>\\n<p><strong>目前微博和掘金的屏蔽，在CSDN和segmentfault都是可以正常显示的，只影响个人博客</strong>。</p>\\n<p>比如前段时间我的博客:<a href=\"http://obkoro1.com\" target=\"_blank\" rel=\"noopener noreferrer\">http://obkoro1.com<OutboundLink/></a>上引用的微博图片都不能显示了。</p>\\n<p>因为我写博客比较频繁，被屏蔽的图片不在少数，肯定不能一个个手动的替换，查了一番没有找到现成的解决方案，做了个脚本工具，并且写了文档把它开源出来了。</p>\\n<h2 id=\"markdown-img-down-site-change-下载-替换markdown中的图片\"><a class=\"header-anchor\" href=\"#markdown-img-down-site-change-下载-替换markdown中的图片\" aria-hidden=\"true\">#</a> markdown-img-down-site-change(下载/替换markdown中的图片)</h2>\\n<blockquote>\\n<p>搜索目标文件夹中的markdown文件，找到目标图片，提供下载图片，替换图片链接的功能-通常用于markdown 图片失效。</p>\\n</blockquote>\\n<h3 id=\"简介\"><a class=\"header-anchor\" href=\"#简介\" aria-hidden=\"true\">#</a> 简介</h3>\\n<p>这是一个极为轻量的脚本，引用包，设置好参数，通过API即可轻松上手。</p>\\n<h3 id=\"解决什么问题？\"><a class=\"header-anchor\" href=\"#解决什么问题？\" aria-hidden=\"true\">#</a> 解决什么问题？</h3>\\n<ol>\\n<li>集中下载markdown文件中某个域名下的图片到一个文件夹下。</li>\\n<li>用新的图片链接替换markdown文件中某个域名的图片链接。</li>\\n</ol>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code><span class=\"token comment\">// 1. 下载这两个图片</span>\\n<span class=\"token comment\">// ![](https://user-gold-cdn.xitu.io/2019/5/20/图片名字?w=2024&amp;h=1240&amp;f=png&amp;s=339262)</span>\\n<span class=\"token comment\">// ![](https://user-gold-cdn.xitu.io/2018/6/16/图片名字)</span>\\n<span class=\"token comment\">// 2. 替换成：github的链接</span>\\n<span class=\"token operator\">!</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>https<span class=\"token punctuation\">:</span><span class=\"token operator\">/</span><span class=\"token operator\">/</span>raw<span class=\"token punctuation\">.</span>githubusercontent<span class=\"token punctuation\">.</span>com<span class=\"token operator\">/</span>OBKoro1<span class=\"token operator\">/</span>articleImg_src<span class=\"token operator\">/</span>master<span class=\"token operator\">/</span>juejin<span class=\"token operator\">/</span>图片名字<span class=\"token operator\">?</span>w<span class=\"token operator\">=</span><span class=\"token number\">2024</span><span class=\"token operator\">&amp;</span>h<span class=\"token operator\">=</span><span class=\"token number\">1240</span><span class=\"token operator\">&amp;</span>f<span class=\"token operator\">=</span>png<span class=\"token operator\">&amp;</span>s<span class=\"token operator\">=</span><span class=\"token number\">339262</span><span class=\"token punctuation\">)</span>\\n<span class=\"token operator\">!</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>https<span class=\"token punctuation\">:</span><span class=\"token operator\">/</span><span class=\"token operator\">/</span>raw<span class=\"token punctuation\">.</span>githubusercontent<span class=\"token punctuation\">.</span>com<span class=\"token operator\">/</span>OBKoro1<span class=\"token operator\">/</span>articleImg_src<span class=\"token operator\">/</span>master<span class=\"token operator\">/</span>juejin<span class=\"token operator\">/</span>图片名字<span class=\"token punctuation\">)</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<h3 id=\"安装\"><a class=\"header-anchor\" href=\"#安装\" aria-hidden=\"true\">#</a> 安装:</h3>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code>npm i markdown<span class=\"token operator\">-</span>img<span class=\"token operator\">-</span>down<span class=\"token operator\">-</span>site<span class=\"token operator\">-</span>change <span class=\"token operator\">-</span><span class=\"token constant\">S</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<h3 id=\"文档：\"><a class=\"header-anchor\" href=\"#文档：\" aria-hidden=\"true\">#</a> 文档：</h3>\\n<p><a href=\"https://github.com/OBKoro1/markdown-img-down-site-change\" target=\"_blank\" rel=\"noopener noreferrer\">Github<OutboundLink/></a></p>\\n<p><a href=\"https://github.com/OBKoro1/markdown-img-down-site-change/wiki/API\" target=\"_blank\" rel=\"noopener noreferrer\">API<OutboundLink/></a></p>\\n<p><a href=\"https://github.com/OBKoro1/markdown-img-down-site-change/wiki/%E6%9B%B4%E6%96%B0%E6%97%A5%E5%BF%97\" target=\"_blank\" rel=\"noopener noreferrer\">更新日志<OutboundLink/></a></p>\\n<h3 id=\"数据安全：\"><a class=\"header-anchor\" href=\"#数据安全：\" aria-hidden=\"true\">#</a> 数据安全：</h3>\\n<p>刚上手可能不了解脚本的功能，需要调试一番，这时候万一把<code>markdown</code>文件给改坏了，岂不是要哭死？</p>\\n<p>脚本有两种形式来防止这种情况发生：</p>\\n<ol>\\n<li>脚本会<a href=\"https://github.com/OBKoro1/markdown-img-down-site-change/wiki/API#copy_item_data%E5%A4%87%E4%BB%BD%E9%A1%B9%E7%9B%AE%E7%9A%84%E5%9C%B0%E5%9D%80\" target=\"_blank\" rel=\"noopener noreferrer\">默认备份<OutboundLink/></a>你的文件。</li>\\n<li>默认开启<a href=\"https://github.com/OBKoro1/markdown-img-down-site-change/wiki/API#test%E6%98%AF%E5%90%A6%E5%BC%80%E5%90%AF%E6%B5%8B%E8%AF%95%E6%A8%A1%E5%BC%8F\" target=\"_blank\" rel=\"noopener noreferrer\">测试模式<OutboundLink/></a>，等到调试的差不多了，可以关闭测试模式。</li>\\n<li>建议：再不放心的话，可以先用一两个文件来测试一下脚本</li>\\n</ol>\\n<h3 id=\"使用：20行代码不到\"><a class=\"header-anchor\" href=\"#使用：20行代码不到\" aria-hidden=\"true\">#</a> 使用：20行代码不到</h3>\\n<p>在项目中有一个使用<a href=\"https://github.com/OBKoro1/markdown-img-down-site-change/blob/master/example.js\" target=\"_blank\" rel=\"noopener noreferrer\">栗子<OutboundLink/></a>，里面加了蛮多注释和空行的，实际代码20行都不到，可以说很简单了，如下：</p>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code><span class=\"token comment\">// npm i markdown-img-down-site-change -S </span>\\n<span class=\"token keyword\">const</span> markdownImageDown <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\\'markdown-img-down-site-change\\'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 文件模块</span>\\n\\n<span class=\"token comment\">// 传参： 这也是脚本的默认参数，根据情况可以自行修改</span>\\n<span class=\"token keyword\">let</span> option <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\\n    replace_image_url<span class=\"token punctuation\">:</span> <span class=\"token string\">\\'https://user-gold-cdn.xitu.io/\\'</span><span class=\"token punctuation\">,</span>\\n    read_markdown_src<span class=\"token punctuation\">:</span> <span class=\"token string\">\\'./source\\'</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 要查找markdown文件的文件夹地址</span>\\n    down_img_src<span class=\"token punctuation\">:</span> <span class=\"token string\">\\'./juejin\\'</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 下载图片到这个文件夹</span>\\n    var_number<span class=\"token punctuation\">:</span> <span class=\"token number\">3</span> <span class=\"token comment\">// url前半部分的变量数量 比如上面的日期: /2019/5/20/、/2018/6/16/</span>\\n<span class=\"token punctuation\">}</span>\\n\\n<span class=\"token comment\">// 初始化</span>\\n<span class=\"token keyword\">const</span> markdownImage <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">markdownImageDown</span><span class=\"token punctuation\">(</span>option<span class=\"token punctuation\">)</span>\\n\\n<span class=\"token comment\">// 下载外链</span>\\nmarkdownImage<span class=\"token punctuation\">.</span><span class=\"token function\">checkDownImg</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\n\\n<span class=\"token comment\">// 上传下载下来的图片文件夹到云端 用户自己操作</span>\\n\\n<span class=\"token comment\">// 上传图片之后 </span>\\n<span class=\"token comment\">// 脚本会把以前的外链替换成云端地址+拼接一个图片名</span>\\nmarkdownImage<span class=\"token punctuation\">.</span><span class=\"token function\">updateOption</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\\n    new_image_url<span class=\"token punctuation\">:</span> <span class=\"token string\">\\'https://xxx.com/目录地址/\\'</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 图片上传的地址</span>\\n    add_end<span class=\"token punctuation\">:</span> <span class=\"token string\">\\'?raw=true\\'</span> <span class=\"token comment\">// github图片地址有后缀 直接进去是仓库</span>\\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\\n\\n<span class=\"token comment\">// 替换外链 </span>\\n<span class=\"token comment\">// 把replace_image_url的字符串换成new_image_url字符串</span>\\nmarkdownImage<span class=\"token punctuation\">.</span><span class=\"token function\">replaceMarkdown</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br><span class=\"line-number\">11</span><br><span class=\"line-number\">12</span><br><span class=\"line-number\">13</span><br><span class=\"line-number\">14</span><br><span class=\"line-number\">15</span><br><span class=\"line-number\">16</span><br><span class=\"line-number\">17</span><br><span class=\"line-number\">18</span><br><span class=\"line-number\">19</span><br><span class=\"line-number\">20</span><br><span class=\"line-number\">21</span><br><span class=\"line-number\">22</span><br><span class=\"line-number\">23</span><br><span class=\"line-number\">24</span><br><span class=\"line-number\">25</span><br><span class=\"line-number\">26</span><br><span class=\"line-number\">27</span><br><span class=\"line-number\">28</span><br><span class=\"line-number\">29</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<h3 id=\"运行：\"><a class=\"header-anchor\" href=\"#运行：\" aria-hidden=\"true\">#</a> 运行：</h3>\\n<p><strong>仔细阅读文本，配置好参数之后</strong></p>\\n<p>在项目根节点新建一个<code>handleImg.js</code>文件，安装一下脚本，然后用<code>node</code>运行该文件：</p>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code>npm i markdown<span class=\"token operator\">-</span>img<span class=\"token operator\">-</span>down<span class=\"token operator\">-</span>site<span class=\"token operator\">-</span>change <span class=\"token operator\">-</span><span class=\"token constant\">S</span>\\nnode handleImg<span class=\"token punctuation\">.</span>js\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<h3 id=\"功能-参数简介：\"><a class=\"header-anchor\" href=\"#功能-参数简介：\" aria-hidden=\"true\">#</a> 功能/参数简介：</h3>\\n<ul>\\n<li><code>checkDownImg()</code>： 下载查找到的图片</li>\\n<li><code>replaceMarkdown()</code>: 替换图片链接为新的图片链接</li>\\n<li><code>replace_image_url</code>：要替换的图片地址</li>\\n<li><code>new_image_url</code>：图片的新地址</li>\\n<li><code>test</code>: 测试模式。</li>\\n<li><code>var_number</code>: 匹配图片链接的图片名之前的url，值为变量数量</li>\\n<li><code>is_link</code>: 匹配链接。</li>\\n<li><code>write_file_time</code>: 间隔多久修改markdown图片链接</li>\\n<li><code>read_markdown_src</code>：要查找markdown文件的文件夹地址</li>\\n<li><code>down_img_src</code>：下载图片到这个地址下</li>\\n<li><code>copy_item_data</code>: 备份项目</li>\\n<li><code>filter_item</code>: 过滤某些文件夹，不查找markdown。</li>\\n<li><code>add_end</code>：在图片链接后面添加后缀添加后缀</li>\\n</ul>\\n<hr>\\n<h2 id=\"欢迎试用\"><a class=\"header-anchor\" href=\"#欢迎试用\" aria-hidden=\"true\">#</a> 欢迎试用</h2>\\n<p>有需要的小伙伴，赶紧来试试吧！文档写的很全，上手非常轻松，项目将会持续维护，有什么问题，欢迎给我提<a href=\"https://github.com/OBKoro1/markdown-img-down-site-change/issues\" target=\"_blank\" rel=\"noopener noreferrer\">issue<OutboundLink/></a>~</p>\\n<p>如果觉得这个脚本还不错的话，就给<a href=\"https://github.com/OBKoro1/markdown-img-down-site-change\" target=\"_blank\" rel=\"noopener noreferrer\">项目<OutboundLink/></a>点个Star吧！</p>\\n<p>以上2019.06.04\\n\\x3c!-- 特殊字符串：用于修改/删除markdown的结尾提示语-OBKoro1 --\\x3e</p>\\n<h3 id=\"点个star支持我一下\"><a class=\"header-anchor\" href=\"#点个star支持我一下\" aria-hidden=\"true\">#</a> 点个<a href=\"https://github.com/OBKoro1/web_accumulate\" target=\"_blank\" rel=\"noopener noreferrer\">Star<OutboundLink/></a>支持我一下~</h3>\\n\\x3c!-- \\'特殊字符串：用于删除编译后的issue组件-OBKoro1 --\\x3e\\n'},{key:\"v-f46941ebe69db\",path:\"/accumulate/tool/%E5%BF%8D%E8%80%85%E7%A7%98%E7%B1%8D%E5%AE%9A%E6%97%B6%E5%99%A8%E6%9C%BA%E5%88%B6.html\",lastUpdated:1564720698e3,title:\"JS忍者秘籍中的定时器机制详解\",headers:[{level:2,title:\"JS忍者秘籍中的定时器机制详解\",slug:\"js忍者秘籍中的定时器机制详解\"},{level:3,title:\"准备\",slug:\"准备\"},{level:3,title:\"定时器解决的问题：\",slug:\"定时器解决的问题：\"},{level:3,title:\"设置和清除定时器：\",slug:\"设置和清除定时器：\"},{level:3,title:\"注意：\",slug:\"注意：\"},{level:2,title:\"执行线程中的定时器执行\",slug:\"执行线程中的定时器执行\"},{level:3,title:\"事件排队。\",slug:\"事件排队。\"},{level:3,title:\"先进先出(先排队的先执行)\",slug:\"先进先出-先排队的先执行\"},{level:3,title:\"setInterval调用被废弃\",slug:\"setinterval调用被废弃\"},{level:3,title:\"setTimeout/setInterval无法保证准时执行回调函数\",slug:\"settimeout-setinterval无法保证准时执行回调函数\"},{level:3,title:\"setInterval的连续执行\",slug:\"setinterval的连续执行\"},{level:3,title:\"setTimeout按照一定的间隔周期性的触发定时器。\",slug:\"settimeout按照一定的间隔周期性的触发定时器。\"},{level:3,title:\"忍者秘籍中关于定时器的其他知识：\",slug:\"忍者秘籍中关于定时器的其他知识：\"},{level:3,title:\"任务队列只有排队这么简单吗？\",slug:\"任务队列只有排队这么简单吗？\"},{level:2,title:\"小结\",slug:\"小结\"},{level:3,title:\"点个Star支持我一下~\",slug:\"点个star支持我一下\"}],excerpt:'<h2 id=\"js忍者秘籍中的定时器机制详解\"><a class=\"header-anchor\" href=\"#js忍者秘籍中的定时器机制详解\" aria-hidden=\"true\">#</a> JS忍者秘籍中的定时器机制详解</h2>\\n<p>前段时间刚看完《JS忍者秘籍》，虽说是15年出版的，有些东西是过时了，但像对原型链、闭包、正则、定时器之类的机制却是不会过时的，里面很多东西都讲的很细，还是值得一读的，本文将对这本书中对定时器机制的部分进行详细的解析，如果喜欢的话可以点波赞/关注，支持一下，希望大家看完本文可以有所收获。</p>\\n<h3 id=\"准备\"><a class=\"header-anchor\" href=\"#准备\" aria-hidden=\"true\">#</a> 准备</h3>\\n<p>阅读本文之前，推荐先阅读<a href=\"https://juejin.im/post/5b24b116e51d4558a65fdb70\" target=\"_blank\" rel=\"noopener noreferrer\">Js 的事件循环(Event Loop)机制以及实例讲解<OutboundLink/></a>这篇文章来理解背后发生的事情，本文对事件循环机制不会很仔细的讲解。</p>\\n<h3 id=\"定时器解决的问题：\"><a class=\"header-anchor\" href=\"#定时器解决的问题：\" aria-hidden=\"true\">#</a> 定时器解决的问题：</h3>\\n<p>由于JS的单线程特性，定时器提供了一种跳出单线程限制的方法，即让一段代码在一定毫秒之后，再异步执行。</p>\\n<h3 id=\"设置和清除定时器：\"><a class=\"header-anchor\" href=\"#设置和清除定时器：\" aria-hidden=\"true\">#</a> 设置和清除定时器：</h3>\\n<p>直接引用忍者秘籍中的图片：</p>\\n<p><img src=\"https://github.com/OBKoro1/articleImg_src/blob/master/juejin/1640c7f6e32c21c3?raw=true\" alt=\"\"></p>\\n<h3 id=\"注意：\"><a class=\"header-anchor\" href=\"#注意：\" aria-hidden=\"true\">#</a> 注意：</h3>\\n<ol>\\n<li>定时器的时间间隔设为0，也会有几毫秒的延迟。</li>\\n<li>在使用<code>setTimeout</code>和<code>setInterval</code>的时候最好将其赋值给一个变量，以便取消定时器。</li>\\n<li>在使用<code>Vue</code>的时候，<code>setTimeout</code>和<code>setInterval</code>的this指向的是window对象，访问不到组件数据以及方法。</li>\\n<li>在使用<code>Vue</code>的时候，路由跳转并不会销毁<code>setInterval</code>，但是组件已经销毁了，这会导致问题。</li>\\n<li>在执行线程中<code>setTimeout</code>/<code>setInterval</code>无法保证准时执行回调函数的。</li>\\n<li><code>setInterval</code>调用有可能会被废弃以及<code>setInterval</code>的连续执行</li>\\n</ol>\\n<p>第三点和第四点的解决方法可以参考我之前写的<a href=\"https://juejin.im/post/5a587b46f265da3e3b7a7677#heading-4\" target=\"_blank\" rel=\"noopener noreferrer\">Vue 实践过程中的几个问题<OutboundLink/></a>。</p>\\n<p>接下来要讲的是第五点和第六点，这两点是最重要，也是本文要重点解析的内容。</p>\\n<h2 id=\"执行线程中的定时器执行\"><a class=\"header-anchor\" href=\"#执行线程中的定时器执行\" aria-hidden=\"true\">#</a> 执行线程中的定时器执行</h2>\\n<p>下面来看忍者秘籍中的栗子：</p>\\n<p><img src=\"https://github.com/OBKoro1/articleImg_src/blob/master/juejin/1640ca6240fb3eeb?raw=true\" alt=\"\"></p>\\n<p>让我们看看这里发生了什么事情：</p>\\n<ol>\\n<li>首先在0毫秒的时候有一个持续18毫秒的js代码块要执行。</li>\\n<li>然后在0毫秒的时候设了两个10毫秒延迟的定时器，<code>setTimeout</code>以及<code>setInterval</code>,<code>setTimeout</code>先设定。</li>\\n<li>在第6毫秒的时候有一个发生了鼠标单击事件。</li>\\n</ol>\\n<h3 id=\"事件排队。\"><a class=\"header-anchor\" href=\"#事件排队。\" aria-hidden=\"true\">#</a> 事件排队。</h3>\\n<p>同时发生了这么多事情，由于js的单线程特性，<strong>当线程正在执行状态，有异步事件触发时，它就会排队，并且在线程空闲时才进行执行</strong>。</p>\\n<pre><code>    这里的异步事件包括：鼠标单击，定时器触发，ajax请求、promise等事件。\\n</code></pre>\\n<p>让我们回到栗子中：</p>\\n<p>栗子中首先有一个18毫秒的代码块要执行，在这18毫秒中只能执行这段代码块，<strong>其他事件触发了之后只能排队等待执行</strong>。</p>\\n<p>在代码块还在运行期间，第6毫秒的时候，发生了一个鼠标单击事件，以及第10毫秒时的<code>setTimeout</code>和<code>setInterval</code>两个处理程序，这三个事件不能立即执行，而是<strong>被添加到等待执行的队列</strong>中。</p>\\n<h3 id=\"先进先出-先排队的先执行\"><a class=\"header-anchor\" href=\"#先进先出-先排队的先执行\" aria-hidden=\"true\">#</a> 先进先出(先排队的先执行)</h3>\\n<p>18毫秒的时候代码块结束执行，有三个任务在排队等待执行，根据<strong>先进先出的原则，此时会先执行click事件</strong>，<code>setTimeout</code>和<code>setInterval</code>将继续排队等待执行。</p>\\n<h3 id=\"setinterval调用被废弃\"><a class=\"header-anchor\" href=\"#setinterval调用被废弃\" aria-hidden=\"true\">#</a> setInterval调用被废弃</h3>\\n<p>在click事件执行时，第20毫秒处，第二个<code>setInterval</code>也到期了，因为此时已经click事件占用了线程，所以<code>setInterval</code>还是不能被执行，并且因为此时<strong>队列中已经有一个<code>setInterval</code>正在排队等待执行，所以这一次的<code>setInterval</code>的调用将被废弃</strong>。</p>\\n<p><strong>浏览器不会对同一个setInterval处理程序多次添加到待执行队列。</strong></p>\\n<h3 id=\"settimeout-setinterval无法保证准时执行回调函数\"><a class=\"header-anchor\" href=\"#settimeout-setinterval无法保证准时执行回调函数\" aria-hidden=\"true\">#</a> <code>setTimeout</code>/<code>setInterval</code>无法保证准时执行回调函数</h3>\\n<p>click事件在第28毫秒处结束执行，有两个任务(<code>setTimeout</code>和<code>setInterval</code>)正在等待执行，遵循先进先出的原则，<code>setTimeout</code>早于<code>setInterval</code>设定，所以先执行<code>setTimeout</code>。</p>\\n<p>so:<strong>我们期望在第10毫秒处执行的<code>setTimeout</code>处理程序，最终会在第28毫秒处才开始执行</strong>，这就是上文提到的<code>setTimeout</code>/<code>setInterval</code>无法保证准时执行回调函数。</p>\\n<p>在30毫秒处，<code>setInterval</code>又触发了，因为队列中已经有<code>setInterval</code>在排队，所以这次的触发又作废了。</p>\\n<h3 id=\"setinterval的连续执行\"><a class=\"header-anchor\" href=\"#setinterval的连续执行\" aria-hidden=\"true\">#</a> setInterval的连续执行</h3>\\n<p><code>setTimeout</code>执行结束，在第36毫秒处，队列中的<code>setInterval</code>处理程序才开始执行，<code>setInterval</code>需要执行6毫秒。</p>\\n<p>在第40毫秒的时候<code>setInterval</code>再次触发，因为此时<strong>上一个<code>setInterval</code>正在执行期间，队列中并没有<code>setInterval</code>在排队，这次触发的<code>setInterval</code>将进入队列等候</strong>。</p>\\n<p>所以：<code>setInterval</code>的处理时长不能比设定的间隔长，否则<code>setInterval</code>将会没有间隔的重复执行</p>\\n<p>第42毫秒的时候，<strong>第一个<code>setInterval</code>结束，然后队列中的<code>setInterval</code>立即开始执行</strong>，在48毫秒的时候完成执行。然后50毫秒的时候再次触发<code>setInterval</code>，此时没有任务在排队，将会立即执行。</p>\\n<h3 id=\"settimeout按照一定的间隔周期性的触发定时器。\"><a class=\"header-anchor\" href=\"#settimeout按照一定的间隔周期性的触发定时器。\" aria-hidden=\"true\">#</a> setTimeout按照一定的间隔周期性的触发定时器。</h3>\\n<p>上文说了，<strong><code>setInterval</code>的处理时长不能比设定的间隔长，否则<code>setInterval</code>将会没有间隔的重复执行</strong>。</p>\\n<p>但是对这个问题，很多情况下，我们并不能清晰的把控处理程序所消耗的时长，为了我们能<strong>按照一定的间隔周期性的触发定时器</strong>，忍者秘籍中提供了下面这种使用方法：</p>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code><span class=\"token comment\">// 实际上我不止在忍者秘籍中见过，在很多地方都见过这种技术。</span>\\n<span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token function\">repeatMe</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\\n    <span class=\"token comment\">// do something</span>\\n    <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span>repeatMe<span class=\"token punctuation\">,</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \\n    <span class=\"token comment\">// 执行完处理程序的内容后，在末尾再间隔10毫秒来调用该程序，这样就能保证一定是10毫秒的周期调用</span>\\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<hr>\\n<h3 id=\"忍者秘籍中关于定时器的其他知识：\"><a class=\"header-anchor\" href=\"#忍者秘籍中关于定时器的其他知识：\" aria-hidden=\"true\">#</a> 忍者秘籍中关于定时器的其他知识：</h3>\\n<ul>\\n<li>定时器不能非常细粒化的控制执行的时间，书中建议在15ms以上。</li>\\n<li>可以使用定时器来分解长时间运行的任务，这里可以自行谷歌。</li>\\n</ul>\\n<h3 id=\"任务队列只有排队这么简单吗？\"><a class=\"header-anchor\" href=\"#任务队列只有排队这么简单吗？\" aria-hidden=\"true\">#</a> 任务队列只有排队这么简单吗？</h3>\\n<p>事实上，关于任务队列并不是只有简单的排队而已，忍者秘籍中提到为了方便，使用了这个概念，如果希望能更清晰的了解背后的机制，再次推荐阅读一下：<a href=\"https://juejin.im/post/5b24b116e51d4558a65fdb70\" target=\"_blank\" rel=\"noopener noreferrer\">Js 的事件循环(Event Loop)机制以及实例讲解<OutboundLink/></a>，</p>\\n<h2 id=\"小结\"><a class=\"header-anchor\" href=\"#小结\" aria-hidden=\"true\">#</a> 小结</h2>\\n<p>这上面所有一切，都是由js单线程特性导致的，所以会有事件排队、先进先出、setInterval调用被废弃、定时器无法保证准时执行回调函数以及出现setInterval的连续执行，时刻记住这一特性，很多关于事件执行顺序的问题都能想的通，并且找出解决方法。\\n\\x3c!-- 特殊字符串：用于修改/删除markdown的结尾提示语-OBKoro1 --\\x3e</p>\\n<h3 id=\"点个star支持我一下\"><a class=\"header-anchor\" href=\"#点个star支持我一下\" aria-hidden=\"true\">#</a> 点个<a href=\"https://github.com/OBKoro1/web_accumulate\" target=\"_blank\" rel=\"noopener noreferrer\">Star<OutboundLink/></a>支持我一下~</h3>\\n\\x3c!-- \\'特殊字符串：用于删除编译后的issue组件-OBKoro1 --\\x3e\\n'},{key:\"v-e806549a0c4fa\",path:\"/accumulate/tool/%E6%B5%8F%E8%A7%88%E5%99%A8%E9%87%8D%E7%BB%98%E9%87%8D%E6%8E%92.html\",lastUpdated:1564720698e3,title:\"轻松掌握浏览器重绘重排原理\",headers:[{level:2,title:\"轻松掌握浏览器重绘重排原理\",slug:\"轻松掌握浏览器重绘重排原理\"},{level:3,title:\"网页生成过程：\",slug:\"网页生成过程：\"},{level:2,title:\"渲染：\",slug:\"渲染：\"},{level:3,title:\"重排比重绘大：\",slug:\"重排比重绘大：\"},{level:2,title:\"重排(reflow)：\",slug:\"重排-reflow-：\"},{level:3,title:\"概念：\",slug:\"概念：\"},{level:3,title:\"常见引起重排属性和方法\",slug:\"常见引起重排属性和方法\"},{level:3,title:\"重排影响的范围：\",slug:\"重排影响的范围：\"},{level:3,title:\"尽可能的减少重排的次数、重排范围：\",slug:\"尽可能的减少重排的次数、重排范围：\"},{level:2,title:\"重绘(Repaints):\",slug:\"重绘-repaints\"},{level:2,title:\"浏览器的渲染队列：\",slug:\"浏览器的渲染队列：\"},{level:3,title:\"强制刷新队列:\",slug:\"强制刷新队列\"},{level:2,title:\"重排优化建议\",slug:\"重排优化建议\"},{level:3,title:\"1. 分离读写操作\",slug:\"_1-分离读写操作\"},{level:3,title:\"2. 样式集中改变\",slug:\"_2-样式集中改变\"},{level:3,title:\"3. 缓存布局信息\",slug:\"_3-缓存布局信息\"},{level:3,title:\"4. 离线改变dom\",slug:\"_4-离线改变dom\"},{level:3,title:\"5. position属性为absolute或fixed\",slug:\"_5-position属性为absolute或fixed\"},{level:3,title:\"6. 优化动画\",slug:\"_6-优化动画\"},{level:2,title:\"结语\",slug:\"结语\"},{level:3,title:\"点个Star支持我一下~\",slug:\"点个star支持我一下\"}],excerpt:'<h2 id=\"轻松掌握浏览器重绘重排原理\"><a class=\"header-anchor\" href=\"#轻松掌握浏览器重绘重排原理\" aria-hidden=\"true\">#</a> 轻松掌握浏览器重绘重排原理</h2>\\n<p><img src=\"https://github.com/OBKoro1/articleImg_src/blob/master/weibo_img_move/005Y4rCogy1fya3fh2jm3j30ku0dwtb2.jpg?raw=true\" alt=\"\"></p>\\n<p>很多人都知道要减少浏览器的重排和重绘，但对其中的具体原理以及如何具体操作并不是很了解，当突然提起这个话题的时候，还是会一脸懵逼。希望大家可以耐着性子阅读本文，仔细琢磨，彻底掌握这个知识点！</p>\\n<blockquote>\\n<p><a href=\"http://obkoro1.com/\" target=\"_blank\" rel=\"noopener noreferrer\">博客<OutboundLink/></a>、<a href=\"http://obkoro1.com/web_accumulate/accumulate/\" target=\"_blank\" rel=\"noopener noreferrer\">前端积累文档<OutboundLink/></a>、<a href=\"https://github.com/OBKoro1/articleImg_src/blob/master/juejin/1631b6f52f7e7015.jpeg?raw=true\" target=\"_blank\" rel=\"noopener noreferrer\">公众号<OutboundLink/></a>、<a href=\"https://github.com/OBKoro1\" target=\"_blank\" rel=\"noopener noreferrer\">GitHub<OutboundLink/></a></p>\\n</blockquote>\\n<h3 id=\"网页生成过程：\"><a class=\"header-anchor\" href=\"#网页生成过程：\" aria-hidden=\"true\">#</a> 网页生成过程：</h3>\\n<ol>\\n<li>HTML被HTML解析器解析成DOM 树</li>\\n<li>css则被css解析器解析成CSSOM 树</li>\\n<li>结合DOM树和CSSOM树，生成一棵渲染树(Render Tree)</li>\\n<li>生成布局（flow），即将所有渲染树的所有节点进行平面合成</li>\\n<li>将布局绘制（paint）在屏幕上</li>\\n</ol>\\n<p>第四步和第五步是最耗时的部分，这两步合起来，就是我们通常所说的<strong>渲染</strong>。</p>\\n<p>网上找了一张图片，我加了注释会更直观一些：</p>\\n<p><img src=\"https://github.com/OBKoro1/articleImg_src/blob/master/juejin/167b642d014afaf1?raw=true\" alt=\"\"></p>\\n<hr>\\n<h2 id=\"渲染：\"><a class=\"header-anchor\" href=\"#渲染：\" aria-hidden=\"true\">#</a> 渲染：</h2>\\n<p><strong>网页生成的时候，至少会渲染一次</strong>。</p>\\n<p><strong>在用户访问的过程中，还会不断重新渲染</strong></p>\\n<p>重新渲染需要重复之前的第四步(重新生成布局)+第五步(重新绘制)或者只有第五个步(重新绘制)。</p>\\n<h3 id=\"重排比重绘大：\"><a class=\"header-anchor\" href=\"#重排比重绘大：\" aria-hidden=\"true\">#</a> 重排比重绘大：</h3>\\n<p>大，在这个语境里的意思是：谁能影响谁？</p>\\n<ul>\\n<li>重绘：某些元素的外观被改变，例如：元素的填充颜色</li>\\n<li>重排：重新生成布局，重新排列元素。</li>\\n</ul>\\n<p>就如上面的概念一样，<strong>单单改变元素的外观，肯定不会引起网页重新生成布局，但当浏览器完成重排之后，将会重新绘制受到此次重排影响的部分</strong>。</p>\\n<pre><code>比如改变元素高度，这个元素乃至周边dom都需要重新绘制。\\n</code></pre>\\n<p>也就是说：<strong>&quot;重绘&quot;不一定会出现&quot;重排&quot;，&quot;重排&quot;必然会出现&quot;重绘&quot;</strong></p>\\n<h2 id=\"重排-reflow-：\"><a class=\"header-anchor\" href=\"#重排-reflow-：\" aria-hidden=\"true\">#</a> 重排(reflow)：</h2>\\n<h3 id=\"概念：\"><a class=\"header-anchor\" href=\"#概念：\" aria-hidden=\"true\">#</a> 概念：</h3>\\n<p>当DOM的变化影响了元素的几何信息(DOM对象的位置和尺寸大小)，浏览器需要重新计算元素的几何属性，将其安放在界面中的正确位置，这个过程叫做重排。</p>\\n<p>重排也叫回流,重排的过程以下面这种理解方式更清晰一些：</p>\\n<blockquote>\\n<p>回流就好比向河里(文档流)扔了一块石头(dom变化)，激起涟漪，然后引起周边水流受到波及，所以叫做回流</p>\\n</blockquote>\\n<h3 id=\"常见引起重排属性和方法\"><a class=\"header-anchor\" href=\"#常见引起重排属性和方法\" aria-hidden=\"true\">#</a> 常见引起重排属性和方法</h3>\\n<p><strong>任何会改变元素几何信息(元素的位置和尺寸大小)的操作，都会触发重排</strong>，下面列一些栗子：</p>\\n<ol>\\n<li>添加或者删除可见的DOM元素；</li>\\n<li>元素尺寸改变——边距、填充、边框、宽度和高度</li>\\n<li>内容变化，比如用户在input框中输入文字</li>\\n<li>浏览器窗口尺寸改变——resize事件发生时</li>\\n<li>计算 offsetWidth 和 offsetHeight 属性</li>\\n<li>设置 style 属性的值</li>\\n</ol>\\n<table>\\n<thead>\\n<tr>\\n<th style=\"text-align:left\">常见引起重排属性和方法</th>\\n<th style=\"text-align:left\"></th>\\n<th style=\"text-align:left\"></th>\\n<th style=\"text-align:left\"></th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td style=\"text-align:left\">width</td>\\n<td style=\"text-align:left\">height</td>\\n<td style=\"text-align:left\">margin</td>\\n<td style=\"text-align:left\">padding</td>\\n</tr>\\n<tr>\\n<td style=\"text-align:left\">display</td>\\n<td style=\"text-align:left\">border</td>\\n<td style=\"text-align:left\">position</td>\\n<td style=\"text-align:left\">overflow</td>\\n</tr>\\n<tr>\\n<td style=\"text-align:left\">clientWidth</td>\\n<td style=\"text-align:left\">clientHeight</td>\\n<td style=\"text-align:left\">clientTop</td>\\n<td style=\"text-align:left\">clientLeft</td>\\n</tr>\\n<tr>\\n<td style=\"text-align:left\">offsetWidth</td>\\n<td style=\"text-align:left\">offsetHeight</td>\\n<td style=\"text-align:left\">offsetTop</td>\\n<td style=\"text-align:left\">offsetLeft</td>\\n</tr>\\n<tr>\\n<td style=\"text-align:left\">scrollWidth</td>\\n<td style=\"text-align:left\">scrollHeight</td>\\n<td style=\"text-align:left\">scrollTop</td>\\n<td style=\"text-align:left\">scrollLeft</td>\\n</tr>\\n<tr>\\n<td style=\"text-align:left\">scrollIntoView()</td>\\n<td style=\"text-align:left\">scrollTo()</td>\\n<td style=\"text-align:left\">getComputedStyle()</td>\\n<td style=\"text-align:left\"></td>\\n</tr>\\n<tr>\\n<td style=\"text-align:left\">getBoundingClientRect()</td>\\n<td style=\"text-align:left\">scrollIntoViewIfNeeded()</td>\\n<td style=\"text-align:left\"></td>\\n<td style=\"text-align:left\"></td>\\n</tr>\\n</tbody>\\n</table>\\n<h3 id=\"重排影响的范围：\"><a class=\"header-anchor\" href=\"#重排影响的范围：\" aria-hidden=\"true\">#</a> 重排影响的范围：</h3>\\n<p>由于浏览器渲染界面是基于流失布局模型的，所以触发重排时会对周围DOM重新排列，影响的范围有两种：</p>\\n<ul>\\n<li>全局范围：从根节点<code>html</code>开始对整个渲染树进行重新布局。</li>\\n<li>局部范围：对渲染树的某部分或某一个渲染对象进行重新布局</li>\\n</ul>\\n<p><strong>全局范围重排</strong>：</p>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-html line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-html\"><code><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">></span></span>\\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>hello<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h4</span><span class=\"token punctuation\">></span></span>hello<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h4</span><span class=\"token punctuation\">></span></span>\\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>strong</span><span class=\"token punctuation\">></span></span>Name:<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>strong</span><span class=\"token punctuation\">></span></span>BDing<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span>\\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h5</span><span class=\"token punctuation\">></span></span>male<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h5</span><span class=\"token punctuation\">></span></span>\\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ol</span><span class=\"token punctuation\">></span></span>\\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">></span></span>coding<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span>\\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">></span></span>loving<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span>\\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ol</span><span class=\"token punctuation\">></span></span>\\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br><span class=\"line-number\">11</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<p>当p节点上发生reflow时，hello和body也会重新渲染，甚至h5和ol都会收到影响。</p>\\n<p><strong>局部范围重排：</strong></p>\\n<p>用局部布局来解释这种现象：把一个dom的宽高之类的几何信息定死，然后在dom内部触发重排，就只会重新渲染该dom内部的元素，而不会影响到外界。</p>\\n<h3 id=\"尽可能的减少重排的次数、重排范围：\"><a class=\"header-anchor\" href=\"#尽可能的减少重排的次数、重排范围：\" aria-hidden=\"true\">#</a> 尽可能的减少重排的次数、重排范围：</h3>\\n<p>重排需要更新渲染树,性能花销非常大:</p>\\n<p>它们的代价是高昂的，会破坏用户体验，并且让UI展示非常迟缓，我们需要尽可能的减少触发重排的次数。</p>\\n<p>重排的性能花销跟渲染树有多少节点需要重新构建有关系：</p>\\n<p>所以我们应该尽量以局部布局的形式组织<code>html</code>结构，尽可能小的影响重排的范围。</p>\\n<p>而不是像全局范围的示例代码一样一溜的堆砌标签，随便一个元素触发重排都会导致全局范围的重排。</p>\\n<h2 id=\"重绘-repaints\"><a class=\"header-anchor\" href=\"#重绘-repaints\" aria-hidden=\"true\">#</a> 重绘(Repaints):</h2>\\n<p><strong>概念</strong>：</p>\\n<p>当一个元素的外观发生改变，但没有改变布局,重新把元素外观绘制出来的过程，叫做重绘。</p>\\n<p><strong>常见的引起重绘的属性</strong>:</p>\\n<table>\\n<thead>\\n<tr>\\n<th style=\"text-align:center\"></th>\\n<th style=\"text-align:center\"></th>\\n<th style=\"text-align:center\"></th>\\n<th style=\"text-align:center\"></th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td style=\"text-align:center\">color</td>\\n<td style=\"text-align:center\">border-style</td>\\n<td style=\"text-align:center\">visibility</td>\\n<td style=\"text-align:center\">background</td>\\n</tr>\\n<tr>\\n<td style=\"text-align:center\">text-decoration</td>\\n<td style=\"text-align:center\">background-image</td>\\n<td style=\"text-align:center\">background-position</td>\\n<td style=\"text-align:center\">background-repeat</td>\\n</tr>\\n<tr>\\n<td style=\"text-align:center\">outline-color</td>\\n<td style=\"text-align:center\">outline</td>\\n<td style=\"text-align:center\">outline-style</td>\\n<td style=\"text-align:center\">border-radius</td>\\n</tr>\\n<tr>\\n<td style=\"text-align:center\">outline-width</td>\\n<td style=\"text-align:center\">box-shadow</td>\\n<td style=\"text-align:center\">background-size</td>\\n<td style=\"text-align:center\"></td>\\n</tr>\\n</tbody>\\n</table>\\n<hr>\\n<h2 id=\"浏览器的渲染队列：\"><a class=\"header-anchor\" href=\"#浏览器的渲染队列：\" aria-hidden=\"true\">#</a> 浏览器的渲染队列：</h2>\\n<p>思考以下代码将会触发几次渲染？</p>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code>div<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> <span class=\"token string\">\\'10px\\'</span><span class=\"token punctuation\">;</span>\\ndiv<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>top <span class=\"token operator\">=</span> <span class=\"token string\">\\'10px\\'</span><span class=\"token punctuation\">;</span>\\ndiv<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>width <span class=\"token operator\">=</span> <span class=\"token string\">\\'20px\\'</span><span class=\"token punctuation\">;</span>\\ndiv<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>height <span class=\"token operator\">=</span> <span class=\"token string\">\\'20px\\'</span><span class=\"token punctuation\">;</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<p>根据我们上文的定义，这段代码理论上会触发4次重排+重绘，因为每一次都改变了元素的几何属性，实际上最后只触发了一次重排，这都得益于浏览器的<strong>渲染队列机制</strong>：</p>\\n<p>当我们修改了元素的几何属性，导致浏览器触发重排或重绘时。它会把该操作放进渲染队列，等到队列中的操作到了<strong>一定的数量或者到了一定的时间间隔</strong>时，浏览器就会批量执行这些操作。</p>\\n<h3 id=\"强制刷新队列\"><a class=\"header-anchor\" href=\"#强制刷新队列\" aria-hidden=\"true\">#</a> 强制刷新队列:</h3>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code>div<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> <span class=\"token string\">\\'10px\\'</span><span class=\"token punctuation\">;</span>\\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>div<span class=\"token punctuation\">.</span>offsetLeft<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\ndiv<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>top <span class=\"token operator\">=</span> <span class=\"token string\">\\'10px\\'</span><span class=\"token punctuation\">;</span>\\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>div<span class=\"token punctuation\">.</span>offsetTop<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\ndiv<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>width <span class=\"token operator\">=</span> <span class=\"token string\">\\'20px\\'</span><span class=\"token punctuation\">;</span>\\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>div<span class=\"token punctuation\">.</span>offsetWidth<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\ndiv<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>height <span class=\"token operator\">=</span> <span class=\"token string\">\\'20px\\'</span><span class=\"token punctuation\">;</span>\\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>div<span class=\"token punctuation\">.</span>offsetHeight<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<p>这段代码会触发4次重排+重绘，因为在<code>console</code>中你请求的这几个样式信息，无论何时浏览器都会立即执行渲染队列的任务，即使该值与你操作中修改的值没关联。</p>\\n<p><strong>因为队列中，可能会有影响到这些值的操作，为了给我们最精确的值，浏览器会立即重排+重绘</strong>。</p>\\n<p><strong>强制刷新队列的style样式请求</strong>：</p>\\n<ol>\\n<li>offsetTop, offsetLeft, offsetWidth, offsetHeight</li>\\n<li>scrollTop, scrollLeft, scrollWidth, scrollHeight</li>\\n<li>clientTop, clientLeft, clientWidth, clientHeight</li>\\n<li>getComputedStyle(), 或者 IE的 currentStyle</li>\\n</ol>\\n<p><strong>我们在开发中，应该谨慎的使用这些style请求，注意上下文关系,避免一行代码一个重排，这对性能是个巨大的消耗</strong></p>\\n<h2 id=\"重排优化建议\"><a class=\"header-anchor\" href=\"#重排优化建议\" aria-hidden=\"true\">#</a> 重排优化建议</h2>\\n<p>就像上文提到的我们要尽可能的减少重排次数、重排范围，这样说很泛，下面是一些行之有效的建议，大家可以参考一下。</p>\\n<h3 id=\"_1-分离读写操作\"><a class=\"header-anchor\" href=\"#_1-分离读写操作\" aria-hidden=\"true\">#</a> 1. 分离读写操作</h3>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code>div<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> <span class=\"token string\">\\'10px\\'</span><span class=\"token punctuation\">;</span>\\ndiv<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>top <span class=\"token operator\">=</span> <span class=\"token string\">\\'10px\\'</span><span class=\"token punctuation\">;</span>\\ndiv<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>width <span class=\"token operator\">=</span> <span class=\"token string\">\\'20px\\'</span><span class=\"token punctuation\">;</span>\\ndiv<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>height <span class=\"token operator\">=</span> <span class=\"token string\">\\'20px\\'</span><span class=\"token punctuation\">;</span>\\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>div<span class=\"token punctuation\">.</span>offsetLeft<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>div<span class=\"token punctuation\">.</span>offsetTop<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>div<span class=\"token punctuation\">.</span>offsetWidth<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>div<span class=\"token punctuation\">.</span>offsetHeight<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<p>还是上面触发4次重排+重绘的代码，这次只触发了一次重排：</p>\\n<p>在第一个<code>console</code>的时候，浏览器把之前上面四个写操作的渲染队列都给清空了。剩下的console，因为渲染队列本来就是空的，所以并没有触发重排，仅仅拿值而已。</p>\\n<h3 id=\"_2-样式集中改变\"><a class=\"header-anchor\" href=\"#_2-样式集中改变\" aria-hidden=\"true\">#</a> 2. 样式集中改变</h3>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code>div<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> <span class=\"token string\">\\'10px\\'</span><span class=\"token punctuation\">;</span>\\ndiv<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>top <span class=\"token operator\">=</span> <span class=\"token string\">\\'10px\\'</span><span class=\"token punctuation\">;</span>\\ndiv<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>width <span class=\"token operator\">=</span> <span class=\"token string\">\\'20px\\'</span><span class=\"token punctuation\">;</span>\\ndiv<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>height <span class=\"token operator\">=</span> <span class=\"token string\">\\'20px\\'</span><span class=\"token punctuation\">;</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<p>虽然现在大部分浏览器有渲染队列优化，不排除有些浏览器以及老版本的浏览器效率仍然低下：</p>\\n<p>建议通过改变class或者csstext属性集中改变样式</p>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code><span class=\"token comment\">// bad</span>\\n<span class=\"token keyword\">var</span> left <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\\n<span class=\"token keyword\">var</span> top <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\\nel<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> left <span class=\"token operator\">+</span> <span class=\"token string\">\"px\"</span><span class=\"token punctuation\">;</span>\\nel<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>top  <span class=\"token operator\">=</span> top  <span class=\"token operator\">+</span> <span class=\"token string\">\"px\"</span><span class=\"token punctuation\">;</span>\\n<span class=\"token comment\">// good </span>\\nel<span class=\"token punctuation\">.</span>className <span class=\"token operator\">+=</span> <span class=\"token string\">\" theclassname\"</span><span class=\"token punctuation\">;</span>\\n<span class=\"token comment\">// good</span>\\nel<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>cssText <span class=\"token operator\">+=</span> <span class=\"token string\">\"; left: \"</span> <span class=\"token operator\">+</span> left <span class=\"token operator\">+</span> <span class=\"token string\">\"px; top: \"</span> <span class=\"token operator\">+</span> top <span class=\"token operator\">+</span> <span class=\"token string\">\"px;\"</span><span class=\"token punctuation\">;</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<h3 id=\"_3-缓存布局信息\"><a class=\"header-anchor\" href=\"#_3-缓存布局信息\" aria-hidden=\"true\">#</a> 3. 缓存布局信息</h3>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code><span class=\"token comment\">// bad 强制刷新 触发两次重排</span>\\ndiv<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> div<span class=\"token punctuation\">.</span>offsetLeft <span class=\"token operator\">+</span> <span class=\"token number\">1</span> <span class=\"token operator\">+</span> <span class=\"token string\">\\'px\\'</span><span class=\"token punctuation\">;</span>\\ndiv<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>top <span class=\"token operator\">=</span> div<span class=\"token punctuation\">.</span>offsetTop <span class=\"token operator\">+</span> <span class=\"token number\">1</span> <span class=\"token operator\">+</span> <span class=\"token string\">\\'px\\'</span><span class=\"token punctuation\">;</span>\\n\\n<span class=\"token comment\">// good 缓存布局信息 相当于读写分离</span>\\n<span class=\"token keyword\">var</span> curLeft <span class=\"token operator\">=</span> div<span class=\"token punctuation\">.</span>offsetLeft<span class=\"token punctuation\">;</span>\\n<span class=\"token keyword\">var</span> curTop <span class=\"token operator\">=</span> div<span class=\"token punctuation\">.</span>offsetTop<span class=\"token punctuation\">;</span>\\ndiv<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> curLeft <span class=\"token operator\">+</span> <span class=\"token number\">1</span> <span class=\"token operator\">+</span> <span class=\"token string\">\\'px\\'</span><span class=\"token punctuation\">;</span>\\ndiv<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>top <span class=\"token operator\">=</span> curTop <span class=\"token operator\">+</span> <span class=\"token number\">1</span> <span class=\"token operator\">+</span> <span class=\"token string\">\\'px\\'</span><span class=\"token punctuation\">;</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<h3 id=\"_4-离线改变dom\"><a class=\"header-anchor\" href=\"#_4-离线改变dom\" aria-hidden=\"true\">#</a> 4. 离线改变dom</h3>\\n<ul>\\n<li>\\n<p>隐藏要操作的dom</p>\\n<p>在要操作dom之前，通过display隐藏dom，当操作完成之后，才将元素的display属性为可见，因为不可见的元素不会触发重排和重绘。</p>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code>dom<span class=\"token punctuation\">.</span>display <span class=\"token operator\">=</span> <span class=\"token string\">\\'none\\'</span>\\n<span class=\"token comment\">// 修改dom样式</span>\\ndom<span class=\"token punctuation\">.</span>display <span class=\"token operator\">=</span> <span class=\"token string\">\\'block\\'</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e</li>\\n<li>\\n<p>通过使用<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/DocumentFragment\" target=\"_blank\" rel=\"noopener noreferrer\">DocumentFragment<OutboundLink/></a>创建一个<code>dom</code>碎片,在它上面批量操作dom，操作完成之后，再添加到文档中，这样只会触发一次重排。</p>\\n</li>\\n<li>\\n<p>复制节点，在副本上工作，然后替换它！</p>\\n</li>\\n</ul>\\n<h3 id=\"_5-position属性为absolute或fixed\"><a class=\"header-anchor\" href=\"#_5-position属性为absolute或fixed\" aria-hidden=\"true\">#</a> 5. position属性为absolute或fixed</h3>\\n<p>position属性为absolute或fixed的元素，重排开销比较小，不用考虑它对其他元素的影响</p>\\n<h3 id=\"_6-优化动画\"><a class=\"header-anchor\" href=\"#_6-优化动画\" aria-hidden=\"true\">#</a> 6. 优化动画</h3>\\n<ul>\\n<li>\\n<p>可以把动画效果应用到position属性为absolute或fixed的元素上，这样对其他元素影响较小</p>\\n<p>动画效果还应牺牲一些平滑，来换取速度，这中间的度自己衡量：</p>\\n<p>比如实现一个动画，以1个像素为单位移动这样最平滑，但是reflow就会过于频繁，大量消耗CPU资源，如果以3个像素为单位移动则会好很多。</p>\\n</li>\\n<li>\\n<p>启用GPPU加速</p>\\n<p>此部分来自<a href=\"http://caibaojian.com/css-reflow-repaint.html\" target=\"_blank\" rel=\"noopener noreferrer\">优化CSS重排重绘与浏览器性能<OutboundLink/></a></p>\\n<p><strong>GPU(图像加速器)：</strong></p>\\n<p>GPU 硬件加速是指应用 GPU 的图形性能对浏览器中的一些图形操作交给 GPU 来完成，因为 GPU 是专门为处理图形而设计，所以它在速度和能耗上更有效率。</p>\\n<p>GPU 加速通常包括以下几个部分：Canvas2D，布局合成, CSS3转换（transitions），CSS3 3D变换（transforms），WebGL和视频(video)。</p>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code><span class=\"token comment\">/*\\n * 根据上面的结论\\n * 将 2d transform 换成 3d\\n * 就可以强制开启 GPU 加速\\n * 提高动画性能\\n */</span>\\ndiv <span class=\"token punctuation\">{</span>\\n  transform<span class=\"token punctuation\">:</span> <span class=\"token function\">translate3d</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span>px<span class=\"token punctuation\">,</span> <span class=\"token number\">10</span>px<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\n<span class=\"token punctuation\">}</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e</li>\\n</ul>\\n<hr>\\n<h2 id=\"结语\"><a class=\"header-anchor\" href=\"#结语\" aria-hidden=\"true\">#</a> 结语</h2>\\n<p>重排也是导致DOM脚本执行效率低的关键因素之一，重排与重绘作为大厂经常出现的面试题，并且涉及的性能优化，这是前端必须掌握的基本概念/技能之一(敲黑板!)。</p>\\n<p>重排会不断触发这是不可避免的，但我们在开发时，应尽量按照文中的建议来组织代码，这种优化，需要平时有意识的去做，一点一滴的去做，希望大家重视一下。</p>\\n<p>以上2018.12.17</p>\\n<p>参考资料：</p>\\n<p><a href=\"http://www.ruanyifeng.com/blog/2015/09/web-page-performance-in-depth.html\" target=\"_blank\" rel=\"noopener noreferrer\">网页性能管理详解<OutboundLink/></a></p>\\n<p><a href=\"http://caibaojian.com/css-reflow-repaint.html\" target=\"_blank\" rel=\"noopener noreferrer\">优化CSS重排重绘与浏览器性能<OutboundLink/></a>\\n\\x3c!-- 特殊字符串：用于修改/删除markdown的结尾提示语-OBKoro1 --\\x3e</p>\\n<h3 id=\"点个star支持我一下\"><a class=\"header-anchor\" href=\"#点个star支持我一下\" aria-hidden=\"true\">#</a> 点个<a href=\"https://github.com/OBKoro1/web_accumulate\" target=\"_blank\" rel=\"noopener noreferrer\">Star<OutboundLink/></a>支持我一下~</h3>\\n\\x3c!-- \\'特殊字符串：用于删除编译后的issue组件-OBKoro1 --\\x3e\\n'},{key:\"v-e0e027f91e79\",path:\"/accumulate/tool/%E9%AA%9A%E6%B3%A8%E9%87%8A%E5%B7%A5%E5%85%B7.html\",lastUpdated:161043936e4,title:\"骚注释工具: 一键添加佛祖保佑永无bug和神兽护体等骚注释\",headers:[{level:3,title:\"koroFileHeader插件简介\",slug:\"korofileheader插件简介\"},{level:2,title:\"一键添加佛祖保佑永无BUG、神兽护体等注释图案\",slug:\"一键添加佛祖保佑永无bug、神兽护体等注释图案\"},{level:3,title:\"使用方式\",slug:\"使用方式\"},{level:3,title:\"注释图案GIF示例\",slug:\"注释图案gif示例\"},{level:3,title:\"支持各种语言的注释\",slug:\"支持各种语言的注释\"},{level:3,title:\"注释图案和头部注释结合\",slug:\"注释图案和头部注释结合\"},{level:3,title:\"注释图案\",slug:\"注释图案\"},{level:3,title:\"Auto Commit 一键补充commit记录\",slug:\"auto-commit-一键补充commit记录\"},{level:2,title:\"最后\",slug:\"最后\"},{level:3,title:\"点个Star支持我一下~\",slug:\"点个star支持我一下\"}],excerpt:'<h1 id=\"骚注释工具-一键添加佛祖保佑永无bug和神兽护体等骚注释\"><a class=\"header-anchor\" href=\"#骚注释工具-一键添加佛祖保佑永无bug和神兽护体等骚注释\" aria-hidden=\"true\">#</a> 骚注释工具: 一键添加佛祖保佑永无bug和神兽护体等骚注释</h1>\\n<p>很早之前就见过各种<code>佛祖保佑永无BUG</code>、<code>神兽护体</code>等形式的注释，感觉很有趣，蛮骚的😉。</p>\\n<p>然后最近有人在我开源的VSCode插件：**<a href=\"https://github.com/OBKoro1/koro1FileHeader\" target=\"_blank\" rel=\"noopener noreferrer\">koroFileHeader<OutboundLink/></a>**里面给我提issue，希望能够支持这种类型的注释。</p>\\n<p>现在开发完成了，大家可以根据下面的使用方式试用一下。</p>\\n<h3 id=\"korofileheader插件简介\"><a class=\"header-anchor\" href=\"#korofileheader插件简介\" aria-hidden=\"true\">#</a> koroFileHeader插件简介</h3>\\n<ol>\\n<li>这个插件目前维护两年多了，有1300+Star，支持所有主流语言，支持自定义语言(不支持的语言可以自行设置)。</li>\\n<li><strong>作用</strong>: 在文件开头添加注释，记录文件信息/文件的传参/出参等，让人对文件的功能一目了然。</li>\\n<li>如果觉得还不错的话，就给我点个<a href=\"https://github.com/OBKoro1/koro1FileHeader\" target=\"_blank\" rel=\"noopener noreferrer\">Star<OutboundLink/></a>⭐️吧~</li>\\n</ol>\\n<p><strong>插件示例</strong>:</p>\\n<p><img src=\"https://raw.githubusercontent.com/OBKoro1/koro1FileHeader/master/images/example.gif\" alt=\"example.gif\"></p>\\n<h2 id=\"一键添加佛祖保佑永无bug、神兽护体等注释图案\"><a class=\"header-anchor\" href=\"#一键添加佛祖保佑永无bug、神兽护体等注释图案\" aria-hidden=\"true\">#</a> 一键添加佛祖保佑永无BUG、神兽护体等注释图案</h2>\\n<h3 id=\"使用方式\"><a class=\"header-anchor\" href=\"#使用方式\" aria-hidden=\"true\">#</a> 使用方式</h3>\\n<ol>\\n<li>\\n<p>在VSCode插件市场下载安装<code>koroFileHeader</code>。</p>\\n</li>\\n<li>\\n<p>通过快捷键<code>shift+command+p</code> 输入注释图案/<code>codeDesign</code>，就可以选择注释图案了， 如下图所示。</p>\\n</li>\\n</ol>\\n<p><img src=\"https://github.com/OBKoro1/koro1FileHeader/blob/master/images/codeDesign.png?raw=true\" alt=\"\"></p>\\n<h3 id=\"注释图案gif示例\"><a class=\"header-anchor\" href=\"#注释图案gif示例\" aria-hidden=\"true\">#</a> 注释图案GIF示例</h3>\\n<p><img src=\"https://github.com/OBKoro1/koro1FileHeader/blob/master/images/codeDesign.gif?raw=true\" alt=\"\"></p>\\n<h3 id=\"支持各种语言的注释\"><a class=\"header-anchor\" href=\"#支持各种语言的注释\" aria-hidden=\"true\">#</a> 支持各种语言的注释</h3>\\n<p>注释图案不仅支持目前世面主流的注释形式，还支持自定义语言的注释形式。url</p>\\n<h3 id=\"注释图案和头部注释结合\"><a class=\"header-anchor\" href=\"#注释图案和头部注释结合\" aria-hidden=\"true\">#</a> 注释图案和头部注释结合</h3>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code><span class=\"token string\">\"fileheader.configObj\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\\n    <span class=\"token string\">\"designAddHead\"</span><span class=\"token punctuation\">:</span> <span class=\"token boolean\">false</span> <span class=\"token comment\">// 默认关闭</span>\\n<span class=\"token punctuation\">}</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<p>设为<code>true</code>效果如下:</p>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code><span class=\"token comment\">/*\\n *                        .::::.\\n *                      .::::::::.\\n *                     :::::::::::\\n *                  ..:::::::::::\\'\\n *               \\'::::::::::::\\'\\n *                 .::::::::::\\n *            \\'::::::::::::::..\\n *                 ..::::::::::::.\\n *               ``::::::::::::::::\\n *                ::::``:::::::::\\'        .:::.\\n *               ::::\\'   \\':::::\\'       .::::::::.\\n *             .::::\\'      ::::     .:::::::\\'::::.\\n *            .:::\\'       :::::  .:::::::::\\' \\':::::.\\n *           .::\\'        :::::.:::::::::\\'      \\':::::.\\n *          .::\\'         ::::::::::::::\\'         ``::::.\\n *      ...:::           ::::::::::::\\'              ``::.\\n *     ````\\':.          \\':::::::::\\'                  ::::..\\n *                        \\'.:::::\\'                    \\':\\'````..\\n * \\n * Author       : OBKoro1\\n * Date         : 2020-04-30 15:51:08\\n * LastEditors  : OBKoro1\\n * LastEditTime : 2020-05-13 17:24:47\\n * FilePath     : \\\\fileHead\\\\test.js\\n * Description  : \\n * https://github.com/OBKoro1\\n */</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br><span class=\"line-number\">11</span><br><span class=\"line-number\">12</span><br><span class=\"line-number\">13</span><br><span class=\"line-number\">14</span><br><span class=\"line-number\">15</span><br><span class=\"line-number\">16</span><br><span class=\"line-number\">17</span><br><span class=\"line-number\">18</span><br><span class=\"line-number\">19</span><br><span class=\"line-number\">20</span><br><span class=\"line-number\">21</span><br><span class=\"line-number\">22</span><br><span class=\"line-number\">23</span><br><span class=\"line-number\">24</span><br><span class=\"line-number\">25</span><br><span class=\"line-number\">26</span><br><span class=\"line-number\">27</span><br><span class=\"line-number\">28</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<h3 id=\"注释图案\"><a class=\"header-anchor\" href=\"#注释图案\" aria-hidden=\"true\">#</a> 注释图案</h3>\\n<h4 id=\"佛祖\"><a class=\"header-anchor\" href=\"#佛祖\" aria-hidden=\"true\">#</a> 佛祖</h4>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code><span class=\"token comment\">/*\\n *                        _oo0oo_\\n *                       o8888888o\\n *                       88\" . \"88\\n *                       (| -_- |)\\n *                       0\\\\  =  /0\\n *                     ___/`---\\'\\\\___\\n *                   .\\' \\\\\\\\|     |// \\'.\\n *                  / \\\\\\\\|||  :  |||// \\\\\\n *                 / _||||| -:- |||||- \\\\\\n *                |   | \\\\\\\\\\\\  - /// |   |\\n *                | \\\\_|  \\'\\'\\\\---/\\'\\'  |_/ |\\n *                \\\\  .-\\\\__  \\'-\\'  ___/-. /\\n *              ___\\'. .\\'  /--.--\\\\  `. .\\'___\\n *           .\"\" \\'&lt;  `.___\\\\_&lt;|>_/___.\\' >\\' \"\".\\n *          | | :  `- \\\\`.;`\\\\ _ /`;.`/ - ` : | |\\n *          \\\\  \\\\ `_.   \\\\_ __\\\\ /__ _/   .-` /  /\\n *      =====`-.____`.___ \\\\_____/___.-`___.-\\'=====\\n *                        `=---=\\'\\n * \\n * \\n *      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\\n * \\n *            佛祖保佑       永不宕机     永无BUG\\n */</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br><span class=\"line-number\">11</span><br><span class=\"line-number\">12</span><br><span class=\"line-number\">13</span><br><span class=\"line-number\">14</span><br><span class=\"line-number\">15</span><br><span class=\"line-number\">16</span><br><span class=\"line-number\">17</span><br><span class=\"line-number\">18</span><br><span class=\"line-number\">19</span><br><span class=\"line-number\">20</span><br><span class=\"line-number\">21</span><br><span class=\"line-number\">22</span><br><span class=\"line-number\">23</span><br><span class=\"line-number\">24</span><br><span class=\"line-number\">25</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<h4 id=\"佛曰\"><a class=\"header-anchor\" href=\"#佛曰\" aria-hidden=\"true\">#</a> 佛曰</h4>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code><span class=\"token comment\">/*\\n *           佛曰:  \\n *                   写字楼里写字间，写字间里程序员；  \\n *                   程序人员写程序，又拿程序换酒钱。  \\n *                   酒醒只在网上坐，酒醉还来网下眠；  \\n *                   酒醉酒醒日复日，网上网下年复年。  \\n *                   但愿老死电脑间，不愿鞠躬老板前；  \\n *                   奔驰宝马贵者趣，公交自行程序员。  \\n *                   别人笑我忒疯癫，我笑自己命太贱；  \\n *                   不见满街漂亮妹，哪个归得程序员？\\n */</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br><span class=\"line-number\">11</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<h4 id=\"佛祖-佛曰\"><a class=\"header-anchor\" href=\"#佛祖-佛曰\" aria-hidden=\"true\">#</a> 佛祖+佛曰</h4>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code><span class=\"token comment\">/*\\n *                        _oo0oo_\\n *                       o8888888o\\n *                       88\" . \"88\\n *                       (| -_- |)\\n *                       0\\\\  =  /0\\n *                     ___/`---\\'\\\\___\\n *                   .\\' \\\\\\\\|     |// \\'.\\n *                  / \\\\\\\\|||  :  |||// \\\\\\n *                 / _||||| -:- |||||- \\\\\\n *                |   | \\\\\\\\\\\\  - /// |   |\\n *                | \\\\_|  \\'\\'\\\\---/\\'\\'  |_/ |\\n *                \\\\  .-\\\\__  \\'-\\'  ___/-. /\\n *              ___\\'. .\\'  /--.--\\\\  `. .\\'___\\n *           .\"\" \\'&lt;  `.___\\\\_&lt;|>_/___.\\' >\\' \"\".\\n *          | | :  `- \\\\`.;`\\\\ _ /`;.`/ - ` : | |\\n *          \\\\  \\\\ `_.   \\\\_ __\\\\ /__ _/   .-` /  /\\n *      =====`-.____`.___ \\\\_____/___.-`___.-\\'=====\\n *                        `=---=\\'\\n * \\n * \\n *      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\\n * \\n *            佛祖保佑       永不宕机     永无BUG\\n * \\n *        佛曰:  \\n *                写字楼里写字间，写字间里程序员；  \\n *                程序人员写程序，又拿程序换酒钱。  \\n *                酒醒只在网上坐，酒醉还来网下眠；  \\n *                酒醉酒醒日复日，网上网下年复年。  \\n *                但愿老死电脑间，不愿鞠躬老板前；  \\n *                奔驰宝马贵者趣，公交自行程序员。  \\n *                别人笑我忒疯癫，我笑自己命太贱；  \\n *                不见满街漂亮妹，哪个归得程序员？\\n */</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br><span class=\"line-number\">11</span><br><span class=\"line-number\">12</span><br><span class=\"line-number\">13</span><br><span class=\"line-number\">14</span><br><span class=\"line-number\">15</span><br><span class=\"line-number\">16</span><br><span class=\"line-number\">17</span><br><span class=\"line-number\">18</span><br><span class=\"line-number\">19</span><br><span class=\"line-number\">20</span><br><span class=\"line-number\">21</span><br><span class=\"line-number\">22</span><br><span class=\"line-number\">23</span><br><span class=\"line-number\">24</span><br><span class=\"line-number\">25</span><br><span class=\"line-number\">26</span><br><span class=\"line-number\">27</span><br><span class=\"line-number\">28</span><br><span class=\"line-number\">29</span><br><span class=\"line-number\">30</span><br><span class=\"line-number\">31</span><br><span class=\"line-number\">32</span><br><span class=\"line-number\">33</span><br><span class=\"line-number\">34</span><br><span class=\"line-number\">35</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<h4 id=\"美女\"><a class=\"header-anchor\" href=\"#美女\" aria-hidden=\"true\">#</a> 美女</h4>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code><span class=\"token comment\">/*\\n *                        .::::.\\n *                      .::::::::.\\n *                     :::::::::::\\n *                  ..:::::::::::\\'\\n *               \\'::::::::::::\\'\\n *                 .::::::::::\\n *            \\'::::::::::::::..\\n *                 ..::::::::::::.\\n *               ``::::::::::::::::\\n *                ::::``:::::::::\\'        .:::.\\n *               ::::\\'   \\':::::\\'       .::::::::.\\n *             .::::\\'      ::::     .:::::::\\'::::.\\n *            .:::\\'       :::::  .:::::::::\\' \\':::::.\\n *           .::\\'        :::::.:::::::::\\'      \\':::::.\\n *          .::\\'         ::::::::::::::\\'         ``::::.\\n *      ...:::           ::::::::::::\\'              ``::.\\n *     ````\\':.          \\':::::::::\\'                  ::::..\\n *                        \\'.:::::\\'                    \\':\\'````..\\n */</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br><span class=\"line-number\">11</span><br><span class=\"line-number\">12</span><br><span class=\"line-number\">13</span><br><span class=\"line-number\">14</span><br><span class=\"line-number\">15</span><br><span class=\"line-number\">16</span><br><span class=\"line-number\">17</span><br><span class=\"line-number\">18</span><br><span class=\"line-number\">19</span><br><span class=\"line-number\">20</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<h4 id=\"龙图腾\"><a class=\"header-anchor\" href=\"#龙图腾\" aria-hidden=\"true\">#</a> 龙图腾</h4>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code><span class=\"token comment\">/*\\n * ......................................&amp;&amp;.........................\\n * ....................................&amp;&amp;&amp;..........................\\n * .................................&amp;&amp;&amp;&amp;............................\\n * ...............................&amp;&amp;&amp;&amp;..............................\\n * .............................&amp;&amp;&amp;&amp;&amp;&amp;..............................\\n * ...........................&amp;&amp;&amp;&amp;&amp;&amp;....&amp;&amp;&amp;..&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;........\\n * ..................&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;..............\\n * ................&amp;...&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;.................\\n * .......................&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;.........\\n * ...................&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;...............\\n * ..................&amp;&amp;&amp;   &amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;............\\n * ...............&amp;&amp;&amp;&amp;&amp;@  &amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;..&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;...........\\n * ..............&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;.&amp;&amp;....&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;..&amp;&amp;&amp;&amp;&amp;.........\\n * ..........&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;...&amp;.....&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;...&amp;&amp;&amp;&amp;........\\n * ........&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;.........&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;....&amp;&amp;&amp;.......\\n * .......&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;.....................&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;.....&amp;&amp;......\\n * ........&amp;&amp;&amp;&amp;&amp;.....................&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;.............\\n * ..........&amp;...................&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;............\\n * ................&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;............\\n * ..................&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;..&amp;&amp;&amp;&amp;&amp;............\\n * ..............&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;....&amp;&amp;&amp;&amp;&amp;............\\n * ...........&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;......&amp;&amp;&amp;&amp;............\\n * .........&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;.........&amp;&amp;&amp;&amp;............\\n * .......&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;...........&amp;&amp;&amp;&amp;............\\n * ......&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;...&amp;&amp;&amp;&amp;&amp;&amp;...............&amp;&amp;&amp;.............\\n * .....&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;............................&amp;&amp;..............\\n * ....&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;.................&amp;&amp;...........................\\n * ...&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;.....................&amp;&amp;&amp;&amp;......................\\n * ...&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;.&amp;&amp;&amp;........................&amp;&amp;&amp;&amp;&amp;...................\\n * ..&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;..&amp;&amp;..........................&amp;&amp;&amp;&amp;&amp;&amp;&amp;...............\\n * ..&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;...&amp;............&amp;&amp;&amp;.....&amp;&amp;&amp;&amp;...&amp;&amp;&amp;&amp;&amp;&amp;&amp;.............\\n * ..&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;.................&amp;&amp;&amp;.....&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;...........\\n * ..&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;..............&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;.........\\n * ..&amp;&amp;.&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;.........&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;.......\\n * ...&amp;&amp;..&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;.........&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;...&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;......\\n * ....&amp;..&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;...........&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;.....\\n * .......&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;..............&amp;&amp;&amp;&amp;&amp;&amp;&amp;....\\n * .......&amp;&amp;&amp;&amp;&amp;.&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;..&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;...&amp;..........&amp;&amp;&amp;&amp;&amp;&amp;....\\n * ........&amp;&amp;&amp;.....&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;.....&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;...........&amp;..&amp;&amp;&amp;&amp;...\\n * .......&amp;&amp;&amp;........&amp;&amp;&amp;.&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;.....&amp;&amp;&amp;&amp;&amp;.................&amp;&amp;&amp;&amp;...\\n * .......&amp;&amp;&amp;...............&amp;&amp;&amp;&amp;&amp;&amp;&amp;.......&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;............&amp;&amp;&amp;...\\n * ........&amp;&amp;...................&amp;&amp;&amp;&amp;&amp;&amp;.........................&amp;&amp;&amp;..\\n * .........&amp;.....................&amp;&amp;&amp;&amp;........................&amp;&amp;....\\n * ...............................&amp;&amp;&amp;.......................&amp;&amp;......\\n * ................................&amp;&amp;......................&amp;&amp;.......\\n * .................................&amp;&amp;..............................\\n * ..................................&amp;..............................\\n */</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br><span class=\"line-number\">11</span><br><span class=\"line-number\">12</span><br><span class=\"line-number\">13</span><br><span class=\"line-number\">14</span><br><span class=\"line-number\">15</span><br><span class=\"line-number\">16</span><br><span class=\"line-number\">17</span><br><span class=\"line-number\">18</span><br><span class=\"line-number\">19</span><br><span class=\"line-number\">20</span><br><span class=\"line-number\">21</span><br><span class=\"line-number\">22</span><br><span class=\"line-number\">23</span><br><span class=\"line-number\">24</span><br><span class=\"line-number\">25</span><br><span class=\"line-number\">26</span><br><span class=\"line-number\">27</span><br><span class=\"line-number\">28</span><br><span class=\"line-number\">29</span><br><span class=\"line-number\">30</span><br><span class=\"line-number\">31</span><br><span class=\"line-number\">32</span><br><span class=\"line-number\">33</span><br><span class=\"line-number\">34</span><br><span class=\"line-number\">35</span><br><span class=\"line-number\">36</span><br><span class=\"line-number\">37</span><br><span class=\"line-number\">38</span><br><span class=\"line-number\">39</span><br><span class=\"line-number\">40</span><br><span class=\"line-number\">41</span><br><span class=\"line-number\">42</span><br><span class=\"line-number\">43</span><br><span class=\"line-number\">44</span><br><span class=\"line-number\">45</span><br><span class=\"line-number\">46</span><br><span class=\"line-number\">47</span><br><span class=\"line-number\">48</span><br><span class=\"line-number\">49</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<h4 id=\"程序员之歌\"><a class=\"header-anchor\" href=\"#程序员之歌\" aria-hidden=\"true\">#</a> 程序员之歌</h4>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code><span class=\"token comment\">/*\\n *                   江城子 . 程序员之歌\\n * \\n *               十年生死两茫茫，写程序，到天亮。\\n *                   千行代码，Bug何处藏。\\n *               纵使上线又怎样，朝令改，夕断肠。\\n * \\n *               领导每天新想法，天天改，日日忙。\\n *                   相顾无言，惟有泪千行。\\n *               每晚灯火阑珊处，夜难寐，加班狂。\\n * \\n */</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br><span class=\"line-number\">11</span><br><span class=\"line-number\">12</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<h4 id=\"耶稣\"><a class=\"header-anchor\" href=\"#耶稣\" aria-hidden=\"true\">#</a> 耶稣</h4>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code><span class=\"token comment\">/*\\n *                                |~~~~~~~|\\n *                                |       |\\n *                                |       |\\n *                                |       |\\n *                                |       |\\n *                                |       |\\n *     |~.\\\\\\\\\\\\_\\\\~~~~~~~~~~~~~~xx~~~         ~~~~~~~~~~~~~~~~~~~~~/_//;~|\\n *     |  \\\\  o \\\\_         ,XXXXX),                         _..-~ o /  |\\n *     |    ~~\\\\  ~-.     XXXXX`)))),                 _.--~~   .-~~~   |\\n *      ~~~~~~~`\\\\   ~\\\\~~~XXX\\' _/ \\';))     |~~~~~~..-~     _.-~ ~~~~~~~\\n *               `\\\\   ~~--`_\\\\~\\\\, ;;;\\\\)__.---.~~~      _.-~\\n *                 ~-.       `:;;/;; \\\\          _..-~~\\n *                    ~-._      `\\'\\'        /-~-~\\n *                        `\\\\              /  /\\n *                          |         ,   | |\\n *                           |  \\'        /  |\\n *                            \\\\/;          |\\n *                             ;;          |\\n *                             `;   .       |\\n *                             |~~~-----.....|\\n *                            | \\\\             \\\\\\n *                           | /\\\\~~--...__    |\\n *                           (|  `\\\\       __-\\\\|\\n *                           ||    \\\\_   /~    |\\n *                           |)     \\\\~-\\'      |\\n *                            |      | \\\\      \\'\\n *                            |      |  \\\\    :\\n *                             \\\\     |  |    |\\n *                              |    )  (    )\\n *                               \\\\  /;  /\\\\  |\\n *                               |    |/   |\\n *                               |    |   |\\n *                                \\\\  .\\'  ||\\n *                                |  |  | |\\n *                                (  | |  |\\n *                                |   \\\\ \\\\ |\\n *                                || o `.)|\\n *                                |`\\\\\\\\) |\\n *                                |       |\\n *                                |       |\\n */</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br><span class=\"line-number\">11</span><br><span class=\"line-number\">12</span><br><span class=\"line-number\">13</span><br><span class=\"line-number\">14</span><br><span class=\"line-number\">15</span><br><span class=\"line-number\">16</span><br><span class=\"line-number\">17</span><br><span class=\"line-number\">18</span><br><span class=\"line-number\">19</span><br><span class=\"line-number\">20</span><br><span class=\"line-number\">21</span><br><span class=\"line-number\">22</span><br><span class=\"line-number\">23</span><br><span class=\"line-number\">24</span><br><span class=\"line-number\">25</span><br><span class=\"line-number\">26</span><br><span class=\"line-number\">27</span><br><span class=\"line-number\">28</span><br><span class=\"line-number\">29</span><br><span class=\"line-number\">30</span><br><span class=\"line-number\">31</span><br><span class=\"line-number\">32</span><br><span class=\"line-number\">33</span><br><span class=\"line-number\">34</span><br><span class=\"line-number\">35</span><br><span class=\"line-number\">36</span><br><span class=\"line-number\">37</span><br><span class=\"line-number\">38</span><br><span class=\"line-number\">39</span><br><span class=\"line-number\">40</span><br><span class=\"line-number\">41</span><br><span class=\"line-number\">42</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<h4 id=\"狗\"><a class=\"header-anchor\" href=\"#狗\" aria-hidden=\"true\">#</a> 狗</h4>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code><span class=\"token comment\">/*\\n *                        ::\\n *                       :;J7, :,                        ::;7:\\n *                       ,ivYi, ,                       ;LLLFS:\\n *                       :iv7Yi                       :7ri;j5PL\\n *                      ,:ivYLvr                    ,ivrrirrY2X,\\n *                      :;r@Wwz.7r:                :ivu@kexianli.\\n *                     :iL7::,:::iiirii:ii;::::,,irvF7rvvLujL7ur\\n *                    ri::,:,::i:iiiiiii:i:irrv177JX7rYXqZEkvv17\\n *                 ;i:, , ::::iirrririi:i:::iiir2XXvii;L8OGJr71i\\n *               :,, ,,:   ,::ir@mingyi.irii:i:::j1jri7ZBOS7ivv,\\n *                  ,::,    ::rv77iiiriii:iii:i::,rvLq@huhao.Li\\n *              ,,      ,, ,:ir7ir::,:::i;ir:::i:i::rSGGYri712:\\n *            :::  ,v7r:: ::rrv77:, ,, ,:i7rrii:::::, ir7ri7Lri\\n *           ,     2OBBOi,iiir;r::        ,irriiii::,, ,iv7Luur:\\n *         ,,     i78MBBi,:,:::,:,  :7FSL: ,iriii:::i::,,:rLqXv::\\n *         :      iuMMP: :,:::,:ii;2GY7OBB0viiii:i:iii:i:::iJqL;::\\n *        ,     ::::i   ,,,,, ::LuBBu BBBBBErii:i:i:i:i:i:i:r77ii\\n *       ,       :       , ,,:::rruBZ1MBBqi, :,,,:::,::::::iiriri:\\n *      ,               ,,,,::::i:  @arqiao.       ,:,, ,:::ii;i7:\\n *     :,       rjujLYLi   ,,:::::,:::::::::,,   ,:i,:,,,,,::i:iii\\n *     ::      BBBBBBBBB0,    ,,::: , ,:::::: ,      ,,,, ,,:::::::\\n *     i,  ,  ,8BMMBBBBBBi     ,,:,,     ,,, , ,   , , , :,::ii::i::\\n *     :      iZMOMOMBBM2::::::::::,,,,     ,,,,,,:,,,::::i:irr:i:::,\\n *     i   ,,:;u0MBMOG1L:::i::::::  ,,,::,   ,,, ::::::i:i:iirii:i:i:\\n *     :    ,iuUuuXUkFu7i:iii:i:::, :,:,: ::::::::i:i:::::iirr7iiri::\\n *     :     :rk@Yizero.i:::::, ,:ii:::::::i:::::i::,::::iirrriiiri::,\\n *      :      5BMBBBBBBSr:,::rv2kuii:::iii::,:i:,, , ,,:,:i@petermu.,\\n *           , :r50EZ8MBBBBGOBBBZP7::::i::,:::::,: :,:,::i;rrririiii::\\n *               :jujYY7LS0ujJL7r::,::i::,::::::::::::::iirirrrrrrr:ii:\\n *            ,:  :@kevensun.:,:,,,::::i:i:::::,,::::::iir;ii;7v77;ii;i,\\n *            ,,,     ,,:,::::::i:iiiii:i::::,, ::::iiiir@xingjief.r;7:i,\\n *         , , ,,,:,,::::::::iiiiiiiiii:,:,:::::::::iiir;ri7vL77rrirri::\\n *          :,, , ::::::::i:::i:::i:i::,,,,,:,::i:i:::iir;@Secbone.ii:::\\n */</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br><span class=\"line-number\">11</span><br><span class=\"line-number\">12</span><br><span class=\"line-number\">13</span><br><span class=\"line-number\">14</span><br><span class=\"line-number\">15</span><br><span class=\"line-number\">16</span><br><span class=\"line-number\">17</span><br><span class=\"line-number\">18</span><br><span class=\"line-number\">19</span><br><span class=\"line-number\">20</span><br><span class=\"line-number\">21</span><br><span class=\"line-number\">22</span><br><span class=\"line-number\">23</span><br><span class=\"line-number\">24</span><br><span class=\"line-number\">25</span><br><span class=\"line-number\">26</span><br><span class=\"line-number\">27</span><br><span class=\"line-number\">28</span><br><span class=\"line-number\">29</span><br><span class=\"line-number\">30</span><br><span class=\"line-number\">31</span><br><span class=\"line-number\">32</span><br><span class=\"line-number\">33</span><br><span class=\"line-number\">34</span><br><span class=\"line-number\">35</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<h4 id=\"喷火龙\"><a class=\"header-anchor\" href=\"#喷火龙\" aria-hidden=\"true\">#</a> 喷火龙</h4>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code><span class=\"token comment\">/*\\n *                                                     __----~~~~~~~~~~~------___\\n *                                    .  .   ~~//====......          __--~ ~~\\n *                    -.            \\\\_|//     |||\\\\\\\\  ~~~~~~::::... /~\\n *                 ___-==_       _-~o~  \\\\/    |||  \\\\\\\\            _/~~-\\n *         __---~~~.==~||\\\\=_    -_--~/_-~|-   |\\\\\\\\   \\\\\\\\        _/~\\n *     _-~~     .=~    |  \\\\\\\\-_    \\'-~7  /-   /  ||    \\\\      /\\n *   .~       .~       |   \\\\\\\\ -_    /  /-   /   ||      \\\\   /\\n *  /  ____  /         |     \\\\\\\\ ~-_/  /|- _/   .||       \\\\ /\\n *  |~~    ~~|--~~~~--_ \\\\     ~==-/   | \\\\~--===~~        .\\\\\\n *           \\'         ~-|      /|    |-~\\\\~~       __--~~\\n *                       |-~~-_/ |    |   ~\\\\_   _-~            /\\\\\\n *                            /  \\\\     \\\\__   \\\\/~                \\\\__\\n *                        _--~ _/ | .-~~____--~-/                  ~~==.\\n *                       ((->/~   \\'.|||\\' -_|    ~~-/ ,              . _||\\n *                                  -_     ~\\\\      ~~---l__i__i__i--~~_/\\n *                                  _-~-__   ~)  \\\\--______________--~~\\n *                                //.-~~~-~_--~- |-------~~~~~~~~\\n *                                       //.-~~~--\\\\\\n *                       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\\n * \\n *                               神兽保佑            永无BUG\\n */</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br><span class=\"line-number\">11</span><br><span class=\"line-number\">12</span><br><span class=\"line-number\">13</span><br><span class=\"line-number\">14</span><br><span class=\"line-number\">15</span><br><span class=\"line-number\">16</span><br><span class=\"line-number\">17</span><br><span class=\"line-number\">18</span><br><span class=\"line-number\">19</span><br><span class=\"line-number\">20</span><br><span class=\"line-number\">21</span><br><span class=\"line-number\">22</span><br><span class=\"line-number\">23</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<h4 id=\"蝙蝠\"><a class=\"header-anchor\" href=\"#蝙蝠\" aria-hidden=\"true\">#</a> 蝙蝠</h4>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code><span class=\"token comment\">/*\\n *                   ___====-_  _-====___\\n *             _--^^^#####//      \\\\\\\\#####^^^--_\\n *          _-^##########// (    ) \\\\\\\\##########^-_\\n *         -############//  |\\\\^^/|  \\\\\\\\############-\\n *       _/############//   (@::@)   \\\\############\\\\_\\n *      /#############((     \\\\\\\\//     ))#############\\\\\\n *     -###############\\\\\\\\    (oo)    //###############-\\n *    -#################\\\\\\\\  / VV \\\\  //#################-\\n *   -###################\\\\\\\\/      \\\\//###################-\\n *  _#/|##########/\\\\######(   /\\\\   )######/\\\\##########|\\\\#_\\n *  |/ |#/\\\\#/\\\\#/\\\\/  \\\\#/\\\\##\\\\  |  |  /##/\\\\#/  \\\\/\\\\#/\\\\#/\\\\#| \\\\|\\n *  `  |/  V  V  `   V  \\\\#\\\\| |  | |/#/  V   \\'  V  V  \\\\|  \\'\\n *     `   `  `      `   / | |  | | \\\\   \\'      \\'  \\'   \\'\\n *                      (  | |  | |  )\\n *                     __\\\\ | |  | | /__\\n *                    (vvv(VVV)(VVV)vvv)\\n * \\n *      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\\n * \\n *                神兽保佑            永无BUG\\n */</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br><span class=\"line-number\">11</span><br><span class=\"line-number\">12</span><br><span class=\"line-number\">13</span><br><span class=\"line-number\">14</span><br><span class=\"line-number\">15</span><br><span class=\"line-number\">16</span><br><span class=\"line-number\">17</span><br><span class=\"line-number\">18</span><br><span class=\"line-number\">19</span><br><span class=\"line-number\">20</span><br><span class=\"line-number\">21</span><br><span class=\"line-number\">22</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<h4 id=\"codedesign-甩葱少女\"><a class=\"header-anchor\" href=\"#codedesign-甩葱少女\" aria-hidden=\"true\">#</a> codeDesign-甩葱少女</h4>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code><span class=\"token comment\">/*\\n * _______________#########_______________________ \\n * ______________############_____________________ \\n * ______________#############____________________ \\n * _____________##__###########___________________ \\n * ____________###__######_#####__________________ \\n * ____________###_#######___####_________________ \\n * ___________###__##########_####________________ \\n * __________####__###########_####_______________ \\n * ________#####___###########__#####_____________ \\n * _______######___###_########___#####___________ \\n * _______#####___###___########___######_________ \\n * ______######___###__###########___######_______ \\n * _____######___####_##############__######______ \\n * ____#######__#####################_#######_____ \\n * ____#######__##############################____ \\n * ___#######__######_#################_#######___ \\n * ___#######__######_######_#########___######___ \\n * ___#######____##__######___######_____######___ \\n * ___#######________######____#####_____#####____ \\n * ____######________#####_____#####_____####_____ \\n * _____#####________####______#####_____###______ \\n * ______#####______;###________###______#________ \\n * ________##_______####________####______________ \\n */</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br><span class=\"line-number\">11</span><br><span class=\"line-number\">12</span><br><span class=\"line-number\">13</span><br><span class=\"line-number\">14</span><br><span class=\"line-number\">15</span><br><span class=\"line-number\">16</span><br><span class=\"line-number\">17</span><br><span class=\"line-number\">18</span><br><span class=\"line-number\">19</span><br><span class=\"line-number\">20</span><br><span class=\"line-number\">21</span><br><span class=\"line-number\">22</span><br><span class=\"line-number\">23</span><br><span class=\"line-number\">24</span><br><span class=\"line-number\">25</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<h4 id=\"codedesign-草泥马\"><a class=\"header-anchor\" href=\"#codedesign-草泥马\" aria-hidden=\"true\">#</a> codeDesign-草泥马</h4>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code><span class=\"token comment\">/*\\n * \\n * 　　┏┓　　　┏┓+ +\\n * 　┏┛┻━━━┛┻┓ + +\\n * 　┃　　　　　　　┃ 　\\n * 　┃　　　━　　　┃ ++ + + +\\n *  ████━████ ┃+\\n * 　┃　　　　　　　┃ +\\n * 　┃　　　┻　　　┃\\n * 　┃　　　　　　　┃ + +\\n * 　┗━┓　　　┏━┛\\n * 　　　┃　　　┃　　　　　　　　　　　\\n * 　　　┃　　　┃ + + + +\\n * 　　　┃　　　┃\\n * 　　　┃　　　┃ +  神兽保佑\\n * 　　　┃　　　┃    代码无bug　　\\n * 　　　┃　　　┃　　+　　　　　　　　　\\n * 　　　┃　 　　┗━━━┓ + +\\n * 　　　┃ 　　　　　　　┣┓\\n * 　　　┃ 　　　　　　　┏┛\\n * 　　　┗┓┓┏━┳┓┏┛ + + + +\\n * 　　　　┃┫┫　┃┫┫\\n * 　　　　┗┻┛　┗┻┛+ + + +\\n * \\n */</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br><span class=\"line-number\">11</span><br><span class=\"line-number\">12</span><br><span class=\"line-number\">13</span><br><span class=\"line-number\">14</span><br><span class=\"line-number\">15</span><br><span class=\"line-number\">16</span><br><span class=\"line-number\">17</span><br><span class=\"line-number\">18</span><br><span class=\"line-number\">19</span><br><span class=\"line-number\">20</span><br><span class=\"line-number\">21</span><br><span class=\"line-number\">22</span><br><span class=\"line-number\">23</span><br><span class=\"line-number\">24</span><br><span class=\"line-number\">25</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<h4 id=\"codedesign-草泥马2\"><a class=\"header-anchor\" href=\"#codedesign-草泥马2\" aria-hidden=\"true\">#</a> codeDesign-草泥马2</h4>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code><span class=\"token comment\">/*\\n * \\n *    ┏┓　　　┏┓\\n *  ┏┛┻━━━┛┻┓\\n *  ┃　　　　　　　┃\\n *  ┃　　　━　　　┃\\n *  ┃　＞　　　＜　┃\\n *  ┃　　　　　　　┃\\n *  ┃...　⌒　...　┃\\n *  ┃　　　　　　　┃\\n *  ┗━┓　　　┏━┛\\n *      ┃　　　┃　\\n *      ┃　　　┃\\n *      ┃　　　┃\\n *      ┃　　　┃  神兽保佑\\n *      ┃　　　┃  代码无bug　　\\n *      ┃　　　┃\\n *      ┃　　　┗━━━┓\\n *      ┃　　　　　　　┣┓\\n *      ┃　　　　　　　┏┛\\n *      ┗┓┓┏━┳┓┏┛\\n *        ┃┫┫　┃┫┫\\n *        ┗┻┛　┗┻┛\\n */</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br><span class=\"line-number\">11</span><br><span class=\"line-number\">12</span><br><span class=\"line-number\">13</span><br><span class=\"line-number\">14</span><br><span class=\"line-number\">15</span><br><span class=\"line-number\">16</span><br><span class=\"line-number\">17</span><br><span class=\"line-number\">18</span><br><span class=\"line-number\">19</span><br><span class=\"line-number\">20</span><br><span class=\"line-number\">21</span><br><span class=\"line-number\">22</span><br><span class=\"line-number\">23</span><br><span class=\"line-number\">24</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<h4 id=\"codedesign-全键盘\"><a class=\"header-anchor\" href=\"#codedesign-全键盘\" aria-hidden=\"true\">#</a> codeDesign-全键盘</h4>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code><span class=\"token comment\">/*\\n *  ┌───┐   ┌───┬───┬───┬───┐ ┌───┬───┬───┬───┐ ┌───┬───┬───┬───┐ ┌───┬───┬───┐\\n *  │Esc│   │ F1│ F2│ F3│ F4│ │ F5│ F6│ F7│ F8│ │ F9│F10│F11│F12│ │P/S│S L│P/B│  ┌┐    ┌┐    ┌┐\\n *  └───┘   └───┴───┴───┴───┘ └───┴───┴───┴───┘ └───┴───┴───┴───┘ └───┴───┴───┘  └┘    └┘    └┘\\n *  ┌───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───────┐ ┌───┬───┬───┐ ┌───┬───┬───┬───┐\\n *  │~ `│! 1│@ 2│# 3│$ 4│% 5│^ 6│&amp; 7│* 8│( 9│) 0│_ -│+ =│ BacSp │ │Ins│Hom│PUp│ │N L│ / │ * │ - │\\n *  ├───┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─────┤ ├───┼───┼───┤ ├───┼───┼───┼───┤\\n *  │ Tab │ Q │ W │ E │ R │ T │ Y │ U │ I │ O │ P │{ [│} ]│ | \\\\ │ │Del│End│PDn│ │ 7 │ 8 │ 9 │   │\\n *  ├─────┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴─────┤ └───┴───┴───┘ ├───┼───┼───┤ + │\\n *  │ Caps │ A │ S │ D │ F │ G │ H │ J │ K │ L │: ;│\" \\'│ Enter  │               │ 4 │ 5 │ 6 │   │\\n *  ├──────┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴────────┤     ┌───┐     ├───┼───┼───┼───┤\\n *  │ Shift  │ Z │ X │ C │ V │ B │ N │ M │&lt; ,│> .│? /│  Shift   │     │ ↑ │     │ 1 │ 2 │ 3 │   │\\n *  ├─────┬──┴─┬─┴──┬┴───┴───┴───┴───┴───┴──┬┴───┼───┴┬────┬────┤ ┌───┼───┼───┐ ├───┴───┼───┤ E││\\n *  │ Ctrl│    │Alt │         Space         │ Alt│    │    │Ctrl│ │ ← │ ↓ │ → │ │   0   │ . │←─┘│\\n *  └─────┴────┴────┴───────────────────────┴────┴────┴────┴────┘ └───┴───┴───┘ └───────┴───┴───┘\\n */</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br><span class=\"line-number\">11</span><br><span class=\"line-number\">12</span><br><span class=\"line-number\">13</span><br><span class=\"line-number\">14</span><br><span class=\"line-number\">15</span><br><span class=\"line-number\">16</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<h4 id=\"codedesign-小键盘\"><a class=\"header-anchor\" href=\"#codedesign-小键盘\" aria-hidden=\"true\">#</a> codeDesign-小键盘</h4>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code><span class=\"token comment\">/*\\n *  ┌─────────────────────────────────────────────────────────────┐\\n *  │┌───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┐│\\n *  ││Esc│!1 │@2 │#3 │$4 │%5 │^6 │&amp;7 │*8 │(9 │)0 │_- │+= │|\\\\ │`~ ││\\n *  │├───┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴───┤│\\n *  ││ Tab │ Q │ W │ E │ R │ T │ Y │ U │ I │ O │ P │{[ │}] │ BS  ││\\n *  │├─────┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴─────┤│\\n *  ││ Ctrl │ A │ S │ D │ F │ G │ H │ J │ K │ L │: ;│\" \\'│ Enter  ││\\n *  │├──────┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴────┬───┤│\\n *  ││ Shift  │ Z │ X │ C │ V │ B │ N │ M │&lt; ,│> .│? /│Shift │Fn ││\\n *  │└─────┬──┴┬──┴──┬┴───┴───┴───┴───┴───┴──┬┴───┴┬──┴┬─────┴───┘│\\n *  │      │Fn │ Alt │         Space         │ Alt │Win│   HHKB   │\\n *  │      └───┴─────┴───────────────────────┴─────┴───┘          │\\n *  └─────────────────────────────────────────────────────────────┘\\n */</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br><span class=\"line-number\">11</span><br><span class=\"line-number\">12</span><br><span class=\"line-number\">13</span><br><span class=\"line-number\">14</span><br><span class=\"line-number\">15</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<h3 id=\"auto-commit-一键补充commit记录\"><a class=\"header-anchor\" href=\"#auto-commit-一键补充commit记录\" aria-hidden=\"true\">#</a> Auto Commit 一键补充commit记录</h3>\\n<p>本人还开源了另外一个VSCode插件：<a href=\"https://github.com/OBKoro1/autoCommit\" target=\"_blank\" rel=\"noopener noreferrer\">Auto Commit<OutboundLink/></a></p>\\n<p><strong>这是一个用于Git自动commit的VSCode插件，它可以用来补充之前忘记提交commit，帮助你把首页的绿色格子填满，感兴趣的可以试用一下</strong>~</p>\\n<p><img src=\"https://github.com/OBKoro1/autoCommit/blob/master/images/autoCommit.gif?raw=true\" alt=\"autoCommit演示\"></p>\\n<h2 id=\"最后\"><a class=\"header-anchor\" href=\"#最后\" aria-hidden=\"true\">#</a> 最后</h2>\\n<p>如果觉得还不错的话，就给个 <a href=\"https://github.com/OBKoro1/koro1FileHeader\" target=\"_blank\" rel=\"noopener noreferrer\">Star<OutboundLink/></a> ⭐️ 鼓励一下我吧~</p>\\n<p><a href=\"http://obkoro1.com/web_accumulate/\" target=\"_blank\" rel=\"noopener noreferrer\">前端进阶积累<OutboundLink/></a>、<a href=\"https://user-gold-cdn.xitu.io/2018/5/1/1631b6f52f7e7015?w=344&amp;h=344&amp;f=jpeg&amp;s=8317\" target=\"_blank\" rel=\"noopener noreferrer\">公众号<OutboundLink/></a>、<a href=\"https://github.com/OBKoro1\" target=\"_blank\" rel=\"noopener noreferrer\">GitHub<OutboundLink/></a>、wx:OBkoro1、邮箱：obkoro1@foxmail.com\\n\\x3c!-- 特殊字符串：用于修改/删除markdown的结尾提示语-OBKoro1 --\\x3e</p>\\n<h3 id=\"点个star支持我一下\"><a class=\"header-anchor\" href=\"#点个star支持我一下\" aria-hidden=\"true\">#</a> 点个<a href=\"https://github.com/OBKoro1/web_accumulate\" target=\"_blank\" rel=\"noopener noreferrer\">Star<OutboundLink/></a>支持我一下~</h3>\\n\\x3c!-- \\'特殊字符串：用于删除编译后的issue组件-OBKoro1 --\\x3e\\n'},{key:\"v-4a44e285452b5\",path:\"/accumulate/year/2020.html\",lastUpdated:161043936e4,title:\"人生是一场马拉松-OBKoro1的2020年年终总结\",headers:[{level:3,title:\"前言\",slug:\"前言\"},{level:2,title:\"工作\",slug:\"工作\"},{level:3,title:\"在家办公\",slug:\"在家办公\"},{level:3,title:\"疫情封闭期间科比意外逝世\",slug:\"疫情封闭期间科比意外逝世\"},{level:3,title:\"electron教程开源项目\",slug:\"electron教程开源项目\"},{level:3,title:\"公司被好未来收购\",slug:\"公司被好未来收购\"},{level:2,title:\"技术\",slug:\"技术\"},{level:3,title:\"博客\",slug:\"博客\"},{level:3,title:\"深入学习webpack\",slug:\"深入学习webpack\"},{level:3,title:\"autoCommit\",slug:\"autocommit\"},{level:3,title:\"koroFileHeader\",slug:\"korofileheader\"},{level:2,title:\"关于生活\",slug:\"关于生活\"},{level:3,title:\"健身\",slug:\"健身\"},{level:3,title:\"被肥胖速度刺激到了\",slug:\"被肥胖速度刺激到了\"},{level:3,title:\"跑步\",slug:\"跑步\"},{level:3,title:\"办健身卡\",slug:\"办健身卡\"},{level:3,title:\"跑步经验\",slug:\"跑步经验\"},{level:3,title:\"健身餐\",slug:\"健身餐\"},{level:3,title:\"效果\",slug:\"效果\"},{level:3,title:\"健身习惯一辈子的事情\",slug:\"健身习惯一辈子的事情\"},{level:3,title:\"旅行散心\",slug:\"旅行散心\"},{level:3,title:\"基金理财\",slug:\"基金理财\"},{level:3,title:\"看书\",slug:\"看书\"},{level:3,title:\"后记\",slug:\"后记\"},{level:2,title:\"人生是一场马拉松\",slug:\"人生是一场马拉松\"},{level:3,title:\"点个Star支持我一下~\",slug:\"点个star支持我一下\"}],excerpt:'<h1 id=\"人生是一场马拉松-obkoro1的2020年年终总结\"><a class=\"header-anchor\" href=\"#人生是一场马拉松-obkoro1的2020年年终总结\" aria-hidden=\"true\">#</a> 人生是一场马拉松-OBKoro1的2020年年终总结</h1>\\n<h3 id=\"前言\"><a class=\"header-anchor\" href=\"#前言\" aria-hidden=\"true\">#</a> 前言</h3>\\n<p>一晃眼2020年马上就要过去了，今年感觉过的特别快。</p>\\n<p>工作已经三年了，之前都没有写过年终总结，结果造成了下面这个现象:</p>\\n<p><code>回首过去的几年，记忆已经很模糊了，需要很用力才能想起过去一部分往事</code>。</p>\\n<p>人生百年，好像也没有多少年终总结可以写呢~</p>\\n<p>这么激励一下，一下子就有动力写年终总结了 😝</p>\\n<h2 id=\"工作\"><a class=\"header-anchor\" href=\"#工作\" aria-hidden=\"true\">#</a> 工作</h2>\\n<h3 id=\"在家办公\"><a class=\"header-anchor\" href=\"#在家办公\" aria-hidden=\"true\">#</a> 在家办公</h3>\\n<p>年初的疫情，是2020年过不去的记忆~</p>\\n<h4 id=\"待到山花烂漫时，我们再相见\"><a class=\"header-anchor\" href=\"#待到山花烂漫时，我们再相见\" aria-hidden=\"true\">#</a> 待到山花烂漫时，我们再相见</h4>\\n<p>当时疫情比较严重，全国封闭，公司很快就宣布在家办公，并且特地说明了不用担心隔离14天赶不上上班~</p>\\n<p>对于当时还惶惶不安的朋友来说，着实感受到了公司所给予的温暖❤️</p>\\n<p><img src=\"https://raw.githubusercontent.com/OBKoro1/articleImg_src/master/2020/2020_12_weixin.jpg\" alt=\"在家办公\"></p>\\n<h4 id=\"在家办公的感受\"><a class=\"header-anchor\" href=\"#在家办公的感受\" aria-hidden=\"true\">#</a> 在家办公的感受</h4>\\n<p>从大年初九开始在家远程办公，疫情对线上教育行业也是一个机会，周末也没有休息，总共在家办公两个月。</p>\\n<p>后面直到疫情已经很稳定了，在四月一号那天才回的上海，然后隔离一周多，就恢复正常的上班了。</p>\\n<p><strong>在家办公的优势</strong></p>\\n<p><strong>效率高</strong>:</p>\\n<p>在家办公的时候,家里人都不会来打扰我,可以很专心,效率非常高。</p>\\n<p><strong>三餐都不用 操心</strong></p>\\n<p>一日三餐我老妈都弄好了，都不用操心，我妈也都不会唠叨我，非常幸福^_^~</p>\\n<p><strong>空间大</strong></p>\\n<p>家里是自己盖的房子, 拿一间来做书房，空间比较大, 不会感到压抑，累了就在家里走走跳跳，活动一下身体。</p>\\n<p><strong>可以陪伴家人</strong></p>\\n<p>偶尔在晚上的时候会跟家人一起打打牌，输赢几十块钱的那种，也很开心~</p>\\n<p>过年的时候买了一个羽毛球网，下午或者晚上(开灯)，也可以跟家里人在院子里打羽毛球。</p>\\n<p>又可以锻炼身体又可以陪伴家人，非常nice！</p>\\n<p><strong>弊端: 工作和生活没有界限</strong></p>\\n<p>因为全体人员都在家里办公,每个人的作息时间、生活习惯都不一样。</p>\\n<p>有些人很早就起床开始办公，有些人很晚才起床，但是晚上很晚才休息。</p>\\n<p>这时候就会出现，别人在他的办公时间来找你语音，影响了你的休息时间。</p>\\n<p>你可能会感到任何时间都有可能有人来找你，没什么事不敢离开工作岗位~</p>\\n<p>总的来说，在家里办公还是非常愉快的，只要完成你的工作内容就可以了，其他时间可以自己调节。</p>\\n<h3 id=\"疫情封闭期间科比意外逝世\"><a class=\"header-anchor\" href=\"#疫情封闭期间科比意外逝世\" aria-hidden=\"true\">#</a> 疫情封闭期间科比意外逝世</h3>\\n<blockquote>\\n<p>退役的时候你曾经说过，如果再过18年你人生的成就还只是篮球的话，那么你该有多失败？但是我们永远猜不到明天和意外谁先来💔</p>\\n</blockquote>\\n<p>科比逝世对我个人来说是一件非常重大的事情</p>\\n<p>科比一直是我的精神偶像，他身上的专注与不服输的精神深深的影响我，激励我前行</p>\\n<p>一觉醒来同学突然在群里艾特我，说科比去世了，还以为是在开玩笑，好端端的，没灾没病的怎么会呢？</p>\\n<p>当我打开微博求证之后，情绪一下子崩溃了，泪奔, 花了很长时间才接受这个事实😭</p>\\n<p><img src=\"https://raw.githubusercontent.com/OBKoro1/articleImg_src/master/2020/2020_12_kobe.jpg\" alt=\"\"></p>\\n<p>写到这里，联想到多灾多难的2020，属实有点难过~</p>\\n<p>实不相瞒，我从来不信鬼神之说,但是如果有上帝的话</p>\\n<p>希望他2021年能对这个世界能够温柔一点，谢谢❤️</p>\\n<h3 id=\"electron教程开源项目\"><a class=\"header-anchor\" href=\"#electron教程开源项目\" aria-hidden=\"true\">#</a> electron教程开源项目</h3>\\n<p>今年做了几个关于electron的项目，公司恰好有开源的计划，后面就拨出几个人员来做开源项目。</p>\\n<p>经过几个版本的推到重来与迭代，最后沉淀出了一个关于electron的教程项目-<a href=\"https://github.com/tal-tech/electron-playground\" target=\"_blank\" rel=\"noopener noreferrer\">electron-playground<OutboundLink/></a>。</p>\\n<p>这是一个类似于 store book的项目，通过尝试electron各种特性，使electron的各项特性所见即所得, 来达到我们快速上手和学习electron的目的。</p>\\n<p>将来如果需要学习electron，或者通过electron做项目，一定要看一下这个项目，可以通过这个项目来入门electron、搭建electron、做一些工程化方面的内容。</p>\\n<p>前两天写了一篇推广文章，感兴趣的朋友可以看一下这篇<a href=\"https://juejin.cn/post/6902230039366991879\" target=\"_blank\" rel=\"noopener noreferrer\">博客<OutboundLink/></a>了解一下这个项目。</p>\\n<h3 id=\"公司被好未来收购\"><a class=\"header-anchor\" href=\"#公司被好未来收购\" aria-hidden=\"true\">#</a> 公司被好未来收购</h3>\\n<p>今年公司有点动荡，公司因为对赌失败被好未来收购了，创始人出局。</p>\\n<p>一整年都在融合好未来的制度，我意外的成为了“大厂”人 😝</p>\\n<h4 id=\"ppt能力\"><a class=\"header-anchor\" href=\"#ppt能力\" aria-hidden=\"true\">#</a> PPT能力</h4>\\n<p>被收购之后，过了一段时间，要求所有人员进行一次定级，需要所有人讲20分钟左右的PPT。</p>\\n<p>大厂在晋升和述职的时候都会要求演讲者准备PPT，PPT能力特别重要，如何将自己的东西讲的高大上一点！</p>\\n<p>没有写过PPT的同学，建议可以自己准备一个晋升PPT模拟一下~</p>\\n<p><strong>PPT经验</strong></p>\\n<ul>\\n<li>\\n<p>PPT字不要太多，准备一些关键词提示一下思路即可。</p>\\n<p>字写得密密麻麻非常减分，PPT应该是一个类似大纲的东西。</p>\\n</li>\\n<li>\\n<p>写完PPT之后，自己对着镜子演练几遍，\\n这样会提高熟练度，讲起来不会磕磕巴巴的，并且能找出一些问题。</p>\\n</li>\\n<li>\\n<p>平日做业务多思考，多承担职责这样在写PPT的时候就不会没东西写了。</p>\\n<p>可以对标大公司，大公司有哪些东西我们没有哪些东西，哪些东西能给公司带来什么东西。</p>\\n</li>\\n</ul>\\n<p><strong>蠢事</strong></p>\\n<p>第一次讲PPT没有经验，我干了一件特别蠢的事情，在这里跟大家分享一下，希望大家不要踩到这个坑：</p>\\n<p>因为平时做的业务比较杂，项目比较多，不知道要讲哪一块</p>\\n<p>后面把自己在开源社区上的成就，当成PPT的主要内容。</p>\\n<p>当时因为是自己熟悉和喜欢的内容，讲的特别流畅和自信，还以为自己肯定没问题。</p>\\n<p>结果后面评委因为我主要讲开源上的东西，工作上的内容不足，认为我本末倒置了 o(╥﹏╥)o，结果不太理想</p>\\n<h4 id=\"融合与动荡\"><a class=\"header-anchor\" href=\"#融合与动荡\" aria-hidden=\"true\">#</a> 融合与动荡</h4>\\n<p><strong>裁员</strong></p>\\n<p>经历了所有人员定级之后，公司也根据定级表现优化了一部分同事。</p>\\n<p>因为赔偿N+1给够了，大家也没有什么怨言，好聚好散。</p>\\n<p>后面听说有的同事是自己申请的名额，工作的累了，自己想休息下，这招学到了~</p>\\n<p><strong>实线与虚线管理</strong></p>\\n<p>团队由实线管理，前端leader直属管理，要转变为虚线管理。</p>\\n<p>简单的说现在就是跟项目，一个人从头到尾做一个项目，以前一个人做很多个项目，这边做一期那边做一期。</p>\\n<p>跟项目的好处在于：做项目的人对项目熟悉，项目也不会太乱，职责也比较清晰。</p>\\n<h2 id=\"技术\"><a class=\"header-anchor\" href=\"#技术\" aria-hidden=\"true\">#</a> 技术</h2>\\n<h3 id=\"博客\"><a class=\"header-anchor\" href=\"#博客\" aria-hidden=\"true\">#</a> 博客</h3>\\n<p>有一些粉丝在微信上，以及一些朋友都会说我今年博客写的少了。</p>\\n<p>今年前中期的时候，在工作、学习上有点迷茫、懈怠。</p>\\n<p>后面因为投入大量时间在跑步、健身上。</p>\\n<p>在学习、维护开源项目、写博客、生活、lol等事项上的时间管理做的不是很好。</p>\\n<p>突然培养了一个耗时间的习惯是这样的。</p>\\n<p>现在我在时间管理上已经调整好了，学习目标也已经找到了，每天很忙但很充实。</p>\\n<p>还有一点是我写博客比较<s>磨蹭</s>慢，一篇博客需要三五天的时间才能完成。</p>\\n<p>因为以上诸多<s>借口</s>原因，今年的输出少了一些。</p>\\n<p>此情此景，我只能说下次一定😝</p>\\n<p>要写的东西是很多，我都记在笔记中，明年争取多输出一些篇高质量的博客 💪</p>\\n<h3 id=\"深入学习webpack\"><a class=\"header-anchor\" href=\"#深入学习webpack\" aria-hidden=\"true\">#</a> 深入学习webpack</h3>\\n<p>近期在深入学习webpack，包括各种环境的配置，plugin、loader、项目优化。</p>\\n<p>也了解了webpack的编译流程，tapable如何通过发布订阅动态生成代码，</p>\\n<p>从webpack入口配置开始是如何运行的，模块的编译过程、chunk的生成过程，</p>\\n<p>下面准备自己手写一个webpack，以及再深入一下webpack的tapable机制以及其他细节。</p>\\n<p><strong>学习方法</strong>:</p>\\n<p>这里分享一下我朋友(易全文)跟我说的学习方法，我觉得特别有效：</p>\\n<p><strong>学习的时候不要分散精力，集中所有精力攻破一个方向的所有内容，彻底学会、学精</strong>。</p>\\n<p>webpack我就是采取这种方式学习，正在进行中, 感觉真的掌握了这个知识。</p>\\n<h3 id=\"autocommit\"><a class=\"header-anchor\" href=\"#autocommit\" aria-hidden=\"true\">#</a> autoCommit</h3>\\n<p><a href=\"https://juejin.cn/post/6844904046357135374\" target=\"_blank\" rel=\"noopener noreferrer\">autoCommit<OutboundLink/></a>是我年初的时候开源的一款插件，它是用来刷首页Github commit记录的。</p>\\n<p>它可以刷过去几年以及未来的commit, 一键帮你把github首页的绿色格子填满</p>\\n<p>有兴趣的同学可以点击<a href=\"https://juejin.cn/post/6844904046357135374\" target=\"_blank\" rel=\"noopener noreferrer\">autoCommit<OutboundLink/></a>来了解它，觉得项目还不错的话，就给我点个<a href=\"(https://juejin.cn/post/6844904046357135374)\">Star⭐️</a>吧~</p>\\n<p><img src=\"https://github.com/OBKoro1/autoCommit/blob/master/images/autoCommit.gif?raw=true\" alt=\"image\"></p>\\n<h4 id=\"技术无罪\"><a class=\"header-anchor\" href=\"#技术无罪\" aria-hidden=\"true\">#</a> 技术无罪</h4>\\n<p>当时以为会大火，结果反响也就一般，还有些争议，有人质疑我为了commit而commit~</p>\\n<p>我的观点：技术无罪，每个人用工具的方式和目的都不一样</p>\\n<ol>\\n<li>坚持了很久的commit，不小心断更的commit记录, 可以用<a href=\"https://juejin.cn/post/6844904046357135374\" target=\"_blank\" rel=\"noopener noreferrer\">autoCommit<OutboundLink/></a>补一下记录。</li>\\n<li>规划一下github首页commit记录的图案，通过<a href=\"https://juejin.cn/post/6844904046357135374\" target=\"_blank\" rel=\"noopener noreferrer\">autoCommit<OutboundLink/></a>在绿色格子里面画出有创意的图形~</li>\\n</ol>\\n<p><strong>如果github什么有价值的东西都没有，就算把绿色格子都刷满了，那也不能代表什么</strong>。</p>\\n<p>不喜欢这个工具的人可以不用，没人强迫你必须要用。</p>\\n<p>emmmm, 千金难买我乐意，写到这里越想越气，我把Github的commit记录刷了一波</p>\\n<p><img src=\"https://raw.githubusercontent.com/OBKoro1/articleImg_src/master/2020/2020_12_commit.jpg\" alt=\"\"></p>\\n<h3 id=\"korofileheader\"><a class=\"header-anchor\" href=\"#korofileheader\" aria-hidden=\"true\">#</a> koroFileHeader</h3>\\n<p>这是我开源的另外一款插件，目前插件已经维护两年半了, 更新了50+版本，关闭200多个issue~</p>\\n<p>今年比较开心的一件事是<a href=\"https://github.com/OBKoro1/koro1FileHeader\" target=\"_blank\" rel=\"noopener noreferrer\">koroFileHeader<OutboundLink/></a>头部注释插件Github仓库Star数量突破了2000，啦啦啦~</p>\\n<p>今年更新了两个比较重要的功能:</p>\\n<ol>\\n<li><a href=\"https://github.com/OBKoro1/koro1FileHeader/wiki/%E4%BD%9B%E7%A5%96%E4%BF%9D%E4%BD%91%E6%B0%B8%E6%97%A0BUG%E3%80%81%E7%A5%9E%E5%85%BD%E6%8A%A4%E4%BD%93%E3%80%81%E6%B3%A8%E9%87%8A%E5%9B%BE%E6%A1%88\" target=\"_blank\" rel=\"noopener noreferrer\">一键添加注释图案的功能<OutboundLink/></a></li>\\n</ol>\\n<p><img src=\"https://github.com/OBKoro1/koro1FileHeader/raw/master/images/codeDesign.gif?raw=true\" alt=\"\"></p>\\n<ol start=\"2\">\\n<li>函数参数自动提取功能</li>\\n</ol>\\n<p><img src=\"https://github.com/OBKoro1/koro1FileHeader/raw/master/images/function-params.gif?raw=true\" alt=\"\"></p>\\n<h2 id=\"关于生活\"><a class=\"header-anchor\" href=\"#关于生活\" aria-hidden=\"true\">#</a> 关于生活</h2>\\n<h3 id=\"健身\"><a class=\"header-anchor\" href=\"#健身\" aria-hidden=\"true\">#</a> 健身</h3>\\n<p>这块是我今年来最大的收获，记录了一下我减肥和健身的心理路程，写的比较长~</p>\\n<h3 id=\"被肥胖速度刺激到了\"><a class=\"header-anchor\" href=\"#被肥胖速度刺激到了\" aria-hidden=\"true\">#</a> 被肥胖速度刺激到了</h3>\\n<p>过年回到家里，不出意料，所有人都说我胖了。</p>\\n<p>去上海后，呆了一个月，就又回去了一下。家里所有人都说我胖了，那时候163斤应该是有的。</p>\\n<p>我胖起来的原因其实自己也知道就是天天吃夜宵+很少运动，</p>\\n<p>这个事情一下子就给我刺激到了, 以前一直不以为然，我的天，我才出去一个月就又胖了😱</p>\\n<p>而且胖的那么明显，再这样下去可怎么办？当时在老家我就开始跑步减肥之旅了..</p>\\n<h3 id=\"跑步\"><a class=\"header-anchor\" href=\"#跑步\" aria-hidden=\"true\">#</a> 跑步</h3>\\n<p><strong>不适应-痛苦</strong></p>\\n<p>今年五月份的时候我只能跑两三公里，并且一公里才配速8分半。</p>\\n<p>因为太久没有运动了，身体不适应，跑完一次浑身酸痛的要死。</p>\\n<p>走路都要慢慢走，走一步痛一次，上下楼梯更是痛的要死。</p>\\n<p>每次需要休息大概四天才缓过来，这个阶段持续了一个月跑了8次。</p>\\n<p><strong>跟大佬一起锻炼</strong></p>\\n<p>六月下旬公司健身五六年的大佬(全文)带我一起跑步锻炼，有人一起锻炼，积极性也会提高很多。</p>\\n<p>每天到下午六点钟的时候就会互相提醒去锻炼，如果不去就是一顿嘲讽，哈哈哈</p>\\n<p>我用了一个月时间跑了把配速练到七分钟，距离也可以跑到五公里了，跑了20次。</p>\\n<p>又花了一个月把配速练到6分10秒左右(20次)，花了三个月终于达到正常的配速。</p>\\n<h3 id=\"办健身卡\"><a class=\"header-anchor\" href=\"#办健身卡\" aria-hidden=\"true\">#</a> 办健身卡</h3>\\n<p>在我跑步两个月后(8月份), 大佬带我去体验了一周的健身房。</p>\\n<p>体验过后经过一番讨价还价，以三年6K的价格办了威尔士的全国通用卡。</p>\\n<p>哼 说实话过了四个月，我还是觉得他肯定吃了我办卡的回扣，奈何没有抓到证据😕</p>\\n<p>如果有想锻炼的同学可以先办一个季卡，不要办太久 万一不能坚持就浪费了~</p>\\n<p>现在我一个月大概去健身房15次到22次之间，每次锻炼一个半小时左右。</p>\\n<p>今年室外和室内总共跑了六个月105次，800公里✌️</p>\\n<p><img src=\"https://raw.githubusercontent.com/OBKoro1/articleImg_src/master/2020/2020_12_run-data.jpg\" alt=\"\"></p>\\n<h4 id=\"有氧运动超级解压\"><a class=\"header-anchor\" href=\"#有氧运动超级解压\" aria-hidden=\"true\">#</a> 有氧运动超级解压</h4>\\n<p>我最喜欢每次跑完步大汗淋漓的感觉，特别爽，在健身房洗过澡。</p>\\n<p>走在回家的路上，即使你刚刚加过班，也会感觉整个人非常轻松。</p>\\n<p>赶走身上所有疲惫，超级超级超级解压！</p>\\n<h3 id=\"跑步经验\"><a class=\"header-anchor\" href=\"#跑步经验\" aria-hidden=\"true\">#</a> 跑步经验</h3>\\n<p>我现在跑步机10公里能跑46分钟，最后三四公里都是4分半左右的配速 ✌️</p>\\n<p><strong>设备</strong>: 运动手表</p>\\n<p>一开始跑步我是把手机拿在手上，后面买了腰包，但是跑步的时候都不舒服。</p>\\n<p>大佬教我买个设备检测一下自己的心率，可以根据心率判断一下自己的状态。</p>\\n<p>后来我买的是华为手表，跑步的时候不用带手机，跑完再同步跑步数据到keep。</p>\\n<p>根据心率判断自己的状态是否极限，以及查看目前的配速，距离。</p>\\n<p><strong>如何提高跑步配速</strong></p>\\n<p>我个人建议就是不断的打破自己的舒适区，不断挑战更高配速！</p>\\n<p>可以采取大佬教我的变速跑，比如12公里配速跑400米再10公里配速跑200米，这样交替进行跑8组。</p>\\n<p>这种形式锻炼心肺能力非常好，心率一直会保持比较高的速度。</p>\\n<p>前面几次会非常辛苦，到后面就适应了。</p>\\n<p>我提高配速都是以这种形式，现在我可以用13公里的配速跑三四公里不休息</p>\\n<h3 id=\"健身餐\"><a class=\"header-anchor\" href=\"#健身餐\" aria-hidden=\"true\">#</a> 健身餐</h3>\\n<p>三分练，七分吃，我感觉减肥就是消耗卡路里大于摄入卡路里就自然会瘦下来。</p>\\n<p>不要以为锻炼了就自然会瘦下来，我一开始锻炼吃的没有控制，减肥也是没有效果的。</p>\\n<p>我看到其他大佬有在吃健身餐，我也跟着吃了三个月(7.15-10.16)</p>\\n<p>最疯狂的时期经常：早上不吃，一天只吃中午一顿健身餐，晚上回家吃脱脂面包</p>\\n<p>现在再也不想吃健身餐了😭， 我减肥很野蛮不够科学，经常被大佬骂~</p>\\n<p><img src=\"https://raw.githubusercontent.com/OBKoro1/articleImg_src/master/2020/2020_12_food.jpg\" alt=\"\"></p>\\n<h3 id=\"效果\"><a class=\"header-anchor\" href=\"#效果\" aria-hidden=\"true\">#</a> 效果</h3>\\n<p>锻炼两个月之后，在八月份中旬我从163已经减重到150以下了。</p>\\n<p>目前稳定在143左右，但是减不到140以下。</p>\\n<p><strong>增加肌肉含量，增加消耗</strong></p>\\n<p>大佬说我肌肉含量不够，每天身体自然消耗不够大。</p>\\n<p>下面我可能要吃一下蛋白粉，练练肌肉，增加消耗，不然减不下去。</p>\\n<p>增加肌肉之后，以后也不会轻易反弹，因为每天不运动消耗也比较大。</p>\\n<h3 id=\"健身习惯一辈子的事情\"><a class=\"header-anchor\" href=\"#健身习惯一辈子的事情\" aria-hidden=\"true\">#</a> 健身习惯一辈子的事情</h3>\\n<h4 id=\"健身感受\"><a class=\"header-anchor\" href=\"#健身感受\" aria-hidden=\"true\">#</a> 健身感受</h4>\\n<p><strong>在我看来我今年最大的收获就是培养了健身的习惯</strong></p>\\n<p><strong>无论我以后走到哪里我都会找一个健身房定期的去锻炼身体</strong></p>\\n<p>真心特别感谢大佬全文带我锻炼身体, 我也培养了一辈子的好习惯 ❤️</p>\\n<p>一开始身体不适应运动，很痛苦，很勉强，为了减肥后面还是撑了过来</p>\\n<p>但现在我在健身和跑步中我收获了快乐，一点都不勉强</p>\\n<p>只要有空都会积极的去健身，因为我知道对我的身体好，而且很也很快乐</p>\\n<p>通过健身我感觉我的身体也充满了活力，精神状态也好了很多，整个人积极向上多了。</p>\\n<h4 id=\"健身例子对比\"><a class=\"header-anchor\" href=\"#健身例子对比\" aria-hidden=\"true\">#</a> 健身例子对比</h4>\\n<p>我们这个行业每天久坐，普遍缺乏锻炼，很多人还有熬夜或者其他不良的习惯。</p>\\n<p><strong>95年的同事</strong></p>\\n<p>有一个跟我玩的非常好的朋友，跟我一样95年的</p>\\n<p>平时基本不运动，人也比较胖，25岁都有脂肪肝和高血压了</p>\\n<p>肩颈和背部都不太好(职业病 我也是) 等其他问题</p>\\n<p><strong>32岁的大佬</strong></p>\\n<p>反观带我健身的大佬，今年32岁，以前一开始见的时候还以为他只是比我大两三岁的样子</p>\\n<p>健身四五年后，他现在身体状态和精神状态都非常好，活力满满。</p>\\n<p>大佬说他的同学，一个个的都是中年大叔，跟他们站在一起好像两个时代的人一样。</p>\\n<p>有一个说法是：什么时候开始锻炼，你的年龄就停留在什么时候。</p>\\n<p><strong>坚持运动健身，稳赚不赔</strong></p>\\n<p>上面通过两个例子的对比，大家可以感受一下健身带来的好处，希望大家也可以尽快的行动起来~</p>\\n<h3 id=\"旅行散心\"><a class=\"header-anchor\" href=\"#旅行散心\" aria-hidden=\"true\">#</a> 旅行散心</h3>\\n<p>今年跟我基友<a href=\"https://juejin.cn/user/2400989094099086\" target=\"_blank\" rel=\"noopener noreferrer\">yeyan1996<OutboundLink/></a>一样，出去玩了几次~</p>\\n<p>可能工作久了，总想散散心，一有机会就想在周边城市玩一下</p>\\n<p>没有机会，也要请一两天假凑成一个小长假出去转转，下周飞重庆😝</p>\\n<p>今年自驾游去了这几个地方：安徽黄山、福建平潭、南京、杭州</p>\\n<p>墙裂推荐自驾游，同学开车，到地方下车玩就可以了什么都不用操心😝</p>\\n<p><img src=\"https://raw.githubusercontent.com/OBKoro1/articleImg_src/master/2020/2020_12_run_sea.jpg\" alt=\"福建平潭\"></p>\\n<h3 id=\"基金理财\"><a class=\"header-anchor\" href=\"#基金理财\" aria-hidden=\"true\">#</a> 基金理财</h3>\\n<p>今年我也入了理财的坑，钱放着是行不通的</p>\\n<p>起码也要做点投资吧，不然怎么跑得赢通货膨胀，要让钱生钱</p>\\n<p>后面请教了一些同事，开始玩支付宝的基金，今年的收益率24.8% ✌️</p>\\n<p>为了缓冲一下风险，买了一个银行定期，定期是稳赚的，不过3.5%-4%实在是太低了</p>\\n<p>后面嫌赚的太慢了，但是银行定期不让我取出来 😭</p>\\n<h3 id=\"看书\"><a class=\"header-anchor\" href=\"#看书\" aria-hidden=\"true\">#</a> 看书</h3>\\n<p>今年看了几本书：图解http、系统之美、老人与海、三体、瓦尔登湖</p>\\n<p>这里推荐一下三体，这本小说是国内第一科幻，还获得了雨果奖，经常在知乎、各种场合看到别人在讨论这本书。</p>\\n<p>里面的设定、脑洞、对人性的深刻描写，超级精彩，总之，看了就是赚！</p>\\n<h3 id=\"后记\"><a class=\"header-anchor\" href=\"#后记\" aria-hidden=\"true\">#</a> 后记</h3>\\n<p>年终总结写的比较琐碎、比较细，全文5000多字，感谢耐心看完。</p>\\n<p>写完总结，顿感今年要结束了</p>\\n<p>来年的计划已经做好了，明年应该会是收获的一年。</p>\\n<p>2021冲冲冲，最后送一段鸡汤给大家。</p>\\n<h2 id=\"人生是一场马拉松\"><a class=\"header-anchor\" href=\"#人生是一场马拉松\" aria-hidden=\"true\">#</a> 人生是一场马拉松</h2>\\n<blockquote>\\n<p>这一段给大家分享一下我的人生观，希望对诸位有所启发。</p>\\n</blockquote>\\n<p><strong>种一棵树最好的时间是十年前，其次就是在现在了</strong>。</p>\\n<p>这是我的人生格言。</p>\\n<p>人生是一场马拉松，没有终点，不要在意自己能跑多远。</p>\\n<p>只要一直种树，一直在路上，就不会太差。</p>\\n<p>在路上的过程中，也要记得欣赏</p>\\n<p>生活还是要快乐最重要，我一向不主张给自己上太多的限制。</p>\\n<p>有什么事情是必须做的？ 房子？车子？</p>\\n<p>佛系一点，享受生活不一定需要这些。</p>\\n<p>培养好学习习惯，锻炼习惯，自然而然的向前跑就好了。</p>\\n<p>最后衷心祝愿大家过得开心，自在！❤️\\n\\x3c!-- 特殊字符串：用于修改/删除markdown的结尾提示语-OBKoro1 --\\x3e</p>\\n<h3 id=\"点个star支持我一下\"><a class=\"header-anchor\" href=\"#点个star支持我一下\" aria-hidden=\"true\">#</a> 点个<a href=\"https://github.com/OBKoro1/web_accumulate\" target=\"_blank\" rel=\"noopener noreferrer\">Star<OutboundLink/></a>支持我一下~</h3>\\n\\x3c!-- \\'特殊字符串：用于删除编译后的issue组件-OBKoro1 --\\x3e\\n'},{key:\"v-98e96a649bf4b\",path:\"/algorithm/\",lastUpdated:1564720698e3,title:\"前端算法\",headers:[{level:2,title:\"前端算法\",slug:\"前端算法\"},{level:3,title:\"提高自身编程能力和逻辑能力\",slug:\"提高自身编程能力和逻辑能力\"},{level:3,title:\"面试看看\",slug:\"面试看看\"},{level:3,title:\"来社区关注我,不错过最新文章：\",slug:\"来社区关注我-不错过最新文章：\"},{level:3,title:\"点个Star支持我一下~\",slug:\"点个star支持我一下\"}],excerpt:'<h2 id=\"前端算法\"><a class=\"header-anchor\" href=\"#前端算法\" aria-hidden=\"true\">#</a> 前端算法</h2>\\n<p>这个部分主要记录了一些算法题, 文档会将算法按照<strong>难度分级</strong>，代码中都有<strong>详细注释</strong>，且会提供<strong>多种解法</strong>。</p>\\n<h3 id=\"提高自身编程能力和逻辑能力\"><a class=\"header-anchor\" href=\"#提高自身编程能力和逻辑能力\" aria-hidden=\"true\">#</a> 提高自身编程能力和逻辑能力</h3>\\n<p>曾经咨询过一个大佬，大佬告诉我：</p>\\n<blockquote>\\n<p>刷算法题对于提高自身编程能力和逻辑能力是一种相当有效的途径。</p>\\n</blockquote>\\n<p>一两道题可能还没有感觉，刷的多了，解题思路多了，就会出现质的突破。</p>\\n<h3 id=\"面试看看\"><a class=\"header-anchor\" href=\"#面试看看\" aria-hidden=\"true\">#</a> 面试看看</h3>\\n<p>面试前也可以看一下本文档, 毕竟蛮多公司喜欢考算法题的，中小型公司出的算法题都不会太难，大部分可以在文档中找到。</p>\\n<p>希望大家看完能够有所收获, 如果觉得本文档还不错的话，记得给个<a href=\"https://github.com/OBKoro1/Brush_algorithm\" target=\"_blank\" rel=\"noopener noreferrer\">Star<OutboundLink/></a>鼓励一下我吧~</p>\\n<h3 id=\"来社区关注我-不错过最新文章：\"><a class=\"header-anchor\" href=\"#来社区关注我-不错过最新文章：\" aria-hidden=\"true\">#</a> 来社区关注我,不错过最新文章：</h3>\\n<ul>\\n<li>\\n<p><a href=\"https://juejin.im/user/58714f0eb123db4a2eb95372/posts\" target=\"_blank\" rel=\"noopener noreferrer\">掘金<OutboundLink/></a></p>\\n</li>\\n<li>\\n<p><a href=\"https://segmentfault.com/u/obkoro1/articles\" target=\"_blank\" rel=\"noopener noreferrer\">segmentfault<OutboundLink/></a></p>\\n</li>\\n<li>\\n<p><a href=\"https://github.com/OBKoro1/articleImg_src/blob/master/juejin/1631b6f52f7e7015.jpeg?raw=true\" target=\"_blank\" rel=\"noopener noreferrer\">微信公众号<OutboundLink/></a>\\n\\x3c!-- 特殊字符串：用于修改/删除markdown的结尾提示语-OBKoro1 --\\x3e</p>\\n</li>\\n</ul>\\n<h3 id=\"点个star支持我一下\"><a class=\"header-anchor\" href=\"#点个star支持我一下\" aria-hidden=\"true\">#</a> 点个<a href=\"https://github.com/OBKoro1/Brush_algorithm\" target=\"_blank\" rel=\"noopener noreferrer\">Star<OutboundLink/></a>支持我一下~</h3>\\n\\x3c!-- \\'特殊字符串：用于删除编译后的issue组件-OBKoro1 --\\x3e\\n'},{key:\"v-6441476dd94df\",path:\"/algorithm/induction/%E5%8F%8D%E8%BD%AC3%E4%BD%8D%E6%95%B4%E6%95%B0.html\",lastUpdated:1564720698e3,title:\"反转一个 3 位整数\",headers:[{level:3,title:\"描述：\",slug:\"描述：\"},{level:3,title:\"样例：\",slug:\"样例：\"},{level:3,title:\"题目分析：\",slug:\"题目分析：\"},{level:3,title:\"转数组操作:\",slug:\"转数组操作\"},{level:3,title:\"取余数，逐个颠倒\",slug:\"取余数，逐个颠倒\"},{level:3,title:\"拼接字符串：\",slug:\"拼接字符串：\"},{level:3,title:\"点个Star支持我一下~\",slug:\"点个star支持我一下\"}],excerpt:'<h1 id=\"反转一个-3-位整数\"><a class=\"header-anchor\" href=\"#反转一个-3-位整数\" aria-hidden=\"true\">#</a> 反转一个 3 位整数</h1>\\n<h3 id=\"描述：\"><a class=\"header-anchor\" href=\"#描述：\" aria-hidden=\"true\">#</a> 描述：</h3>\\n<p>反转一个只有 3 位数的整数</p>\\n<h3 id=\"样例：\"><a class=\"header-anchor\" href=\"#样例：\" aria-hidden=\"true\">#</a> 样例：</h3>\\n<p>123 反转之后是 321。\\n900 反转之后是 9。</p>\\n<h3 id=\"题目分析：\"><a class=\"header-anchor\" href=\"#题目分析：\" aria-hidden=\"true\">#</a> 题目分析：</h3>\\n<ul>\\n<li><code>009</code>这种形式需要转为<code>9</code></li>\\n<li>最后输出的数字。</li>\\n</ul>\\n<hr>\\n<h3 id=\"转数组操作\"><a class=\"header-anchor\" href=\"#转数组操作\" aria-hidden=\"true\">#</a> 转数组操作:</h3>\\n<p>这是最简单，最容易想到的答案：</p>\\n<ol>\\n<li>数字转成字符串再转成数组</li>\\n<li>颠倒数组(翻转了),恢复成字符串</li>\\n<li>输出正常数字，这里用了+号。(用<code>parseInt</code>等也是可以的)</li>\\n</ol>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">reverseInteger</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>number<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n  <span class=\"token keyword\">return</span> <span class=\"token operator\">+</span><span class=\"token punctuation\">[</span><span class=\"token operator\">...</span>number<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">reverse</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">\\'\\'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<h3 id=\"取余数，逐个颠倒\"><a class=\"header-anchor\" href=\"#取余数，逐个颠倒\" aria-hidden=\"true\">#</a> 取余数，逐个颠倒</h3>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">reverseInteger</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span>number<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n    <span class=\"token keyword\">return</span> <span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span>number<span class=\"token operator\">%</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token number\">100</span><span class=\"token operator\">+</span><span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>number<span class=\"token operator\">%</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token operator\">/</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token number\">10</span><span class=\"token operator\">+</span><span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span>number<span class=\"token operator\">/</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token number\">1</span>\\n<span class=\"token punctuation\">}</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<p>通过取余操作，个位转百位，十位转十位，百位转个位。</p>\\n<p>比如：123=&gt;300+20+1,输出321</p>\\n<h3 id=\"拼接字符串：\"><a class=\"header-anchor\" href=\"#拼接字符串：\" aria-hidden=\"true\">#</a> 拼接字符串：</h3>\\n<ul>\\n<li>数字转字符串</li>\\n<li>从后往前取对应位置字符,拼接成一个颠倒的字符串</li>\\n</ul>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">reverseInteger</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>number<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n  <span class=\"token keyword\">var</span> str <span class=\"token operator\">=</span> number<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 转字符</span>\\n  <span class=\"token keyword\">return</span> <span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">.</span><span class=\"token function\">charAt</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> str<span class=\"token punctuation\">.</span><span class=\"token function\">charAt</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> str<span class=\"token punctuation\">.</span><span class=\"token function\">charAt</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 取对应位置字符，拼接成新的字符串</span>\\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e\\x3c!-- 特殊字符串：用于修改/删除markdown的结尾提示语-OBKoro1 --\\x3e\\n<h3 id=\"点个star支持我一下\"><a class=\"header-anchor\" href=\"#点个star支持我一下\" aria-hidden=\"true\">#</a> 点个<a href=\"https://github.com/OBKoro1/Brush_algorithm\" target=\"_blank\" rel=\"noopener noreferrer\">Star<OutboundLink/></a>支持我一下~</h3>\\n\\x3c!-- \\'特殊字符串：用于删除编译后的issue组件-OBKoro1 --\\x3e\\n'},{key:\"v-f54b7613c64aa\",path:\"/algorithm/induction/%E6%95%B0%E7%BB%84%E9%87%8D%E5%A4%8D%E6%AC%A1%E6%95%B0.html\",lastUpdated:1564720698e3,title:\"找出数组重复次数最多的元素\",headers:[{level:2,title:\"找出数组重复次数最多的元素\",slug:\"找出数组重复次数最多的元素\"},{level:3,title:\"描述：\",slug:\"描述：\"},{level:3,title:\"样例：\",slug:\"样例：\"},{level:3,title:\"题目分析：\",slug:\"题目分析：\"},{level:3,title:\"代码：\",slug:\"代码：\"},{level:3,title:\"点个Star支持我一下~\",slug:\"点个star支持我一下\"}],excerpt:'<h2 id=\"找出数组重复次数最多的元素\"><a class=\"header-anchor\" href=\"#找出数组重复次数最多的元素\" aria-hidden=\"true\">#</a> 找出数组重复次数最多的元素</h2>\\n<h3 id=\"描述：\"><a class=\"header-anchor\" href=\"#描述：\" aria-hidden=\"true\">#</a> 描述：</h3>\\n<p>给定一个字符串数组, 每一个元素代表一个 IP 地址，找到出现频率最高的 IP。</p>\\n<p>注：给定数据只有一个频率最高的 IP</p>\\n<h3 id=\"样例：\"><a class=\"header-anchor\" href=\"#样例：\" aria-hidden=\"true\">#</a> 样例：</h3>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code>lines <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\\'192.168.1.1\\'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\\'192.118.2.1\\'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\\'192.168.1.1\\'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\\n<span class=\"token keyword\">return</span> <span class=\"token string\">\\'192.168.1.1\\'</span><span class=\"token punctuation\">;</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<h3 id=\"题目分析：\"><a class=\"header-anchor\" href=\"#题目分析：\" aria-hidden=\"true\">#</a> 题目分析：</h3>\\n<p>说了一堆，其实就是找出数组重复次数最多的元素</p>\\n<p>思路：</p>\\n<p>用对象来处理，将元素赋值到属性上，判断之前有没有这个属性。</p>\\n<div class=\"tip custom-block\"><p class=\"custom-block-title\">数组去重</p>\\n<p>虽然对象属性同样可以用来做数组去重，但是会将 number,NaN,undefined,null，变为字符串形式，因为对象的属性名就是一个字符串</p>\\n</div>\\n<h3 id=\"代码：\"><a class=\"header-anchor\" href=\"#代码：\" aria-hidden=\"true\">#</a> 代码：</h3>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code><span class=\"token comment\">/**\\n * @param ipLines: ip  address\\n * @return: return highestFrequency ip address\\n */</span>\\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">highestFrequency</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>ipLines<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n  <span class=\"token keyword\">var</span> <span class=\"token punctuation\">[</span>obj<span class=\"token punctuation\">,</span> max<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\\'\\'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\\n  ipLines<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span>value <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">[</span>value<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n      <span class=\"token comment\">// 已经有值了 就把值+1</span>\\n      obj<span class=\"token punctuation\">[</span>value<span class=\"token punctuation\">]</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">[</span>value<span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> max<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// 判断重复次数有没有超过当前最高的</span>\\n        max <span class=\"token operator\">=</span> obj<span class=\"token punctuation\">[</span>value<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 重复次数</span>\\n        name <span class=\"token operator\">=</span> value<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 当前元素</span>\\n      <span class=\"token punctuation\">}</span>\\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\\n      <span class=\"token comment\">// 没有值 就初始化一个值</span>\\n      obj<span class=\"token punctuation\">[</span>value<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\\n    <span class=\"token punctuation\">}</span>\\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\n  <span class=\"token keyword\">return</span> name<span class=\"token punctuation\">;</span>\\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br><span class=\"line-number\">11</span><br><span class=\"line-number\">12</span><br><span class=\"line-number\">13</span><br><span class=\"line-number\">14</span><br><span class=\"line-number\">15</span><br><span class=\"line-number\">16</span><br><span class=\"line-number\">17</span><br><span class=\"line-number\">18</span><br><span class=\"line-number\">19</span><br><span class=\"line-number\">20</span><br><span class=\"line-number\">21</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e\\x3c!-- 特殊字符串：用于修改/删除markdown的结尾提示语-OBKoro1 --\\x3e\\n<h3 id=\"点个star支持我一下\"><a class=\"header-anchor\" href=\"#点个star支持我一下\" aria-hidden=\"true\">#</a> 点个<a href=\"https://github.com/OBKoro1/Brush_algorithm\" target=\"_blank\" rel=\"noopener noreferrer\">Star<OutboundLink/></a>支持我一下~</h3>\\n\\x3c!-- \\'特殊字符串：用于删除编译后的issue组件-OBKoro1 --\\x3e\\n'},{key:\"v-0891a53337b9e\",path:\"/algorithm/induction/%E6%9F%A5%E6%89%BE%E6%96%90%E6%B3%A2%E7%BA%B3%E5%A5%91%E6%95%B0%E5%88%97%E4%B8%AD%E7%AC%ACN%E4%B8%AA%E6%95%B0.html\",lastUpdated:1564720698e3,title:\"查找斐波纳契数列中第 N 个数\",headers:[{level:2,title:\"查找斐波纳契数列中第 N 个数\",slug:\"查找斐波纳契数列中第-n-个数\"},{level:3,title:\"描述\",slug:\"描述\"},{level:3,title:\"怎样算解成功：\",slug:\"怎样算解成功：\"},{level:3,title:\"题目分析：\",slug:\"题目分析：\"},{level:3,title:\"code:\",slug:\"code\"},{level:3,title:\"点个Star支持我一下~\",slug:\"点个star支持我一下\"}],excerpt:'<h2 id=\"查找斐波纳契数列中第-n-个数\"><a class=\"header-anchor\" href=\"#查找斐波纳契数列中第-n-个数\" aria-hidden=\"true\">#</a> 查找斐波纳契数列中第 N 个数</h2>\\n<h3 id=\"描述\"><a class=\"header-anchor\" href=\"#描述\" aria-hidden=\"true\">#</a> 描述</h3>\\n<p><strong>所谓的斐波纳契数列是指</strong>：</p>\\n<p>前 2 个数是 0 和 1 。</p>\\n<p>第 i 个数是第 i-1 个数和第 i-2 个数的和。</p>\\n<p><strong>斐波纳契数列的前 10 个数字是</strong>：</p>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code>    <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">13</span><span class=\"token punctuation\">,</span> <span class=\"token number\">21</span><span class=\"token punctuation\">,</span> <span class=\"token number\">34</span> <span class=\"token operator\">...</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<h3 id=\"怎样算解成功：\"><a class=\"header-anchor\" href=\"#怎样算解成功：\" aria-hidden=\"true\">#</a> 怎样算解成功：</h3>\\n<p>给定 1，返回 0</p>\\n<p>给定 2，返回 1</p>\\n<p>给定 10，返回 34</p>\\n<h3 id=\"题目分析：\"><a class=\"header-anchor\" href=\"#题目分析：\" aria-hidden=\"true\">#</a> 题目分析：</h3>\\n<p>值得注意的是：前两个数字可以算成是起始元素，从第三个元素才开始有规则。</p>\\n<h3 id=\"code\"><a class=\"header-anchor\" href=\"#code\" aria-hidden=\"true\">#</a> code:</h3>\\n<ol>\\n<li>递归解法：</li>\\n</ol>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">fibonacci</span> <span class=\"token operator\">=</span> n <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> n <span class=\"token operator\">===</span> <span class=\"token string\">\\'number\\'</span> <span class=\"token operator\">&amp;&amp;</span> n <span class=\"token operator\">%</span> <span class=\"token number\">1</span> <span class=\"token operator\">===</span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> n <span class=\"token operator\">></span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n    <span class=\"token keyword\">throw</span> <span class=\"token string\">\\'请输入大于0的整数数字\\'</span><span class=\"token punctuation\">;</span>\\n  <span class=\"token punctuation\">}</span>\\n  <span class=\"token keyword\">var</span> array <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\\n  <span class=\"token keyword\">let</span> <span class=\"token function-variable function\">temp</span> <span class=\"token operator\">=</span> n <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">==</span> <span class=\"token number\">1</span> <span class=\"token operator\">||</span> n <span class=\"token operator\">==</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> array<span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\\n    array<span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">temp</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token function\">temp</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">-</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 递归获取推算数组每一个元素的值</span>\\n    <span class=\"token keyword\">return</span> array<span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\\n  <span class=\"token keyword\">let</span> num <span class=\"token operator\">=</span> <span class=\"token function\">temp</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\n  array<span class=\"token punctuation\">.</span><span class=\"token function\">splice</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 将数组恢复成 斐波纳契数列</span>\\n  <span class=\"token keyword\">return</span> num<span class=\"token punctuation\">;</span>\\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br><span class=\"line-number\">11</span><br><span class=\"line-number\">12</span><br><span class=\"line-number\">13</span><br><span class=\"line-number\">14</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<ol start=\"2\">\\n<li>遍历保存结果</li>\\n</ol>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">fibonacci</span> <span class=\"token operator\">=</span> n <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\\n  <span class=\"token keyword\">let</span> a <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\\n    b <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\\n    c<span class=\"token punctuation\">,</span>\\n    d <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n    c <span class=\"token operator\">=</span> a <span class=\"token operator\">+</span> b<span class=\"token punctuation\">;</span>\\n    a <span class=\"token operator\">=</span> b<span class=\"token punctuation\">;</span>\\n    b <span class=\"token operator\">=</span> c<span class=\"token punctuation\">;</span>\\n    d<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 加戏 恢复数列</span>\\n  <span class=\"token punctuation\">}</span>\\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">,</span> <span class=\"token string\">\\'斐波纳契数列\\'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\n  <span class=\"token keyword\">return</span> a<span class=\"token punctuation\">;</span>\\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br><span class=\"line-number\">11</span><br><span class=\"line-number\">12</span><br><span class=\"line-number\">13</span><br><span class=\"line-number\">14</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<ol start=\"3\">\\n<li>一次遍历 逐步推导所有元素 时间消耗:158ms 最优</li>\\n</ol>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">fibonacci</span> <span class=\"token operator\">=</span> n <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\\n  <span class=\"token keyword\">let</span> num <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Array</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">fill</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 初始化数组，并设置初始值</span>\\n  num<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 设置第二个元素的值 推导第3个元素</span>\\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> n <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n    num<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> num<span class=\"token punctuation\">[</span>i <span class=\"token operator\">-</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> num<span class=\"token punctuation\">[</span>i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 遍历逐步推导元素值 数组完全符合数列不用进行判断等 运行效率最高。</span>\\n  <span class=\"token punctuation\">}</span>\\n  <span class=\"token keyword\">return</span> num<span class=\"token punctuation\">[</span>n <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 数组是从0开始计算 所以要减1</span>\\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<p>不行，我一定要秀一波，不然心里难受：</p>\\n<p><img src=\"https://github.com/OBKoro1/articleImg_src/blob/master/juejin/1650894f0e88c323?raw=true\" alt=\"\"></p>\\n<p>最后一题的提交，甩的第二名看不到我的车尾灯，开心！</p>\\n<p>2018.8.5\\n\\x3c!-- 特殊字符串：用于修改/删除markdown的结尾提示语-OBKoro1 --\\x3e</p>\\n<h3 id=\"点个star支持我一下\"><a class=\"header-anchor\" href=\"#点个star支持我一下\" aria-hidden=\"true\">#</a> 点个<a href=\"https://github.com/OBKoro1/Brush_algorithm\" target=\"_blank\" rel=\"noopener noreferrer\">Star<OutboundLink/></a>支持我一下~</h3>\\n\\x3c!-- \\'特殊字符串：用于删除编译后的issue组件-OBKoro1 --\\x3e\\n'},{key:\"v-683a132bc17dc\",path:\"/algorithm/induction/%E6%B0%B4%E4%BB%99%E8%8A%B1%E6%95%B0.html\",lastUpdated:1564720698e3,title:\"水仙花数\",headers:[{level:2,title:\"水仙花数\",slug:\"水仙花数\"},{level:3,title:\"水仙花数的定义：\",slug:\"水仙花数的定义：\"},{level:3,title:\"描述：\",slug:\"描述：\"},{level:3,title:\"样例：\",slug:\"样例：\"},{level:3,title:\"题目分析:\",slug:\"题目分析\"},{level:3,title:\"判断一个数是否为水仙花数：\",slug:\"判断一个数是否为水仙花数：\"},{level:3,title:\"找出所有的n位十进制水仙花数\",slug:\"找出所有的n位十进制水仙花数\"},{level:3,title:\"点个Star支持我一下~\",slug:\"点个star支持我一下\"}],excerpt:'<h2 id=\"水仙花数\"><a class=\"header-anchor\" href=\"#水仙花数\" aria-hidden=\"true\">#</a> 水仙花数</h2>\\n<h3 id=\"水仙花数的定义：\"><a class=\"header-anchor\" href=\"#水仙花数的定义：\" aria-hidden=\"true\">#</a> 水仙花数的定义：</h3>\\n<p><strong>一个 N 位非负整数，其各位数字的 N 次方和等于该数本身</strong>。</p>\\n<p>栗子：</p>\\n<p>153 = 1^3 + 5^3 + 3^3</p>\\n<p>370 = 3^3 + 7^3 + 0^3</p>\\n<p>371 = 3^3 + 7^3 + 1^3</p>\\n<p>1634 = 14^4 + 64^4 + 34^4 + 44^4。</p>\\n<p>更详细的推荐：<a href=\"https://zh.wikipedia.org/wiki/%E6%B0%B4%E4%BB%99%E8%8A%B1%E6%95%B0\" target=\"_blank\" rel=\"noopener noreferrer\">维基百科<OutboundLink/></a></p>\\n<h3 id=\"描述：\"><a class=\"header-anchor\" href=\"#描述：\" aria-hidden=\"true\">#</a> 描述：</h3>\\n<p>给出<code>n</code>，找到所有的<code>n</code>位十进制水仙花数。</p>\\n<h3 id=\"样例：\"><a class=\"header-anchor\" href=\"#样例：\" aria-hidden=\"true\">#</a> 样例：</h3>\\n<p>比如 <code>n = 1</code>, 所有水仙花数为：<code>[0,1,2,3,4,5,6,7,8,9]</code>。</p>\\n<p>而对于 <code>n = 2</code>, 则没有 2 位的水仙花数，返回 <code>[]</code>。</p>\\n<h3 id=\"题目分析\"><a class=\"header-anchor\" href=\"#题目分析\" aria-hidden=\"true\">#</a> 题目分析:</h3>\\n<p>弄懂水仙花数！</p>\\n<hr>\\n<h3 id=\"判断一个数是否为水仙花数：\"><a class=\"header-anchor\" href=\"#判断一个数是否为水仙花数：\" aria-hidden=\"true\">#</a> 判断一个数是否为水仙花数：</h3>\\n<p>要找出水仙花数，首先我们需要能识别一个数是否为水仙花数：</p>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code><span class=\"token comment\">// 判断一个数是否为水仙花数</span>\\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">isTrue</span> <span class=\"token operator\">=</span> num <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\\n  <span class=\"token keyword\">const</span> n <span class=\"token operator\">=</span> num<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 数的长度</span>\\n  <span class=\"token keyword\">const</span> str <span class=\"token operator\">=</span> num<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 转字符 等下取数字</span>\\n  <span class=\"token keyword\">let</span> total <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 总数</span>\\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n    total <span class=\"token operator\">+=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">pow</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">.</span><span class=\"token function\">charAt</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 转字符串一个字符一个字符拿出来 计算其各位数字的N次方和</span>\\n  <span class=\"token punctuation\">}</span>\\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>num <span class=\"token operator\">===</span> total<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n    <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 最终相等 即为正确</span>\\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\\n    <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\\n  <span class=\"token punctuation\">}</span>\\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br><span class=\"line-number\">11</span><br><span class=\"line-number\">12</span><br><span class=\"line-number\">13</span><br><span class=\"line-number\">14</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<h3 id=\"找出所有的n位十进制水仙花数\"><a class=\"header-anchor\" href=\"#找出所有的n位十进制水仙花数\" aria-hidden=\"true\">#</a> 找出所有的<code>n</code>位十进制水仙花数</h3>\\n<ul>\\n<li>确定查找的范围(找出n位的最大值与最小值)</li>\\n<li>遍历每个数，判断为水仙花数，添加到数组中</li>\\n</ul>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">getNarcissisticNumbers</span> <span class=\"token operator\">=</span> n <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\\n  <span class=\"token keyword\">let</span> min <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">pow</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> n <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\\n    max <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">pow</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\\n    arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">===</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// n == 1的时候，min应该等于0，但是min等于1,所以这边手动判断一下。</span>\\n    min <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\\n  <span class=\"token punctuation\">}</span>\\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> j <span class=\"token operator\">=</span> min<span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> max<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n    <span class=\"token keyword\">const</span> str <span class=\"token operator\">=</span> j<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 转字符</span>\\n    <span class=\"token keyword\">let</span> total <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n      <span class=\"token comment\">// 判断一个数是否为水仙花数</span>\\n      total <span class=\"token operator\">+=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">pow</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">.</span><span class=\"token function\">charAt</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 转字符串一个字符一个字符拿出来 计算其各位数字的N次方和</span>\\n    <span class=\"token punctuation\">}</span>\\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>j <span class=\"token operator\">===</span> total<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n      arr<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\n    <span class=\"token punctuation\">}</span>\\n  <span class=\"token punctuation\">}</span>\\n  <span class=\"token keyword\">return</span> arr<span class=\"token punctuation\">;</span>\\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br><span class=\"line-number\">11</span><br><span class=\"line-number\">12</span><br><span class=\"line-number\">13</span><br><span class=\"line-number\">14</span><br><span class=\"line-number\">15</span><br><span class=\"line-number\">16</span><br><span class=\"line-number\">17</span><br><span class=\"line-number\">18</span><br><span class=\"line-number\">19</span><br><span class=\"line-number\">20</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<p><strong>注意：</strong></p>\\n<p>查找位数过大会出现性能问题，以及最大值溢出问题。\\n\\x3c!-- 特殊字符串：用于修改/删除markdown的结尾提示语-OBKoro1 --\\x3e</p>\\n<h3 id=\"点个star支持我一下\"><a class=\"header-anchor\" href=\"#点个star支持我一下\" aria-hidden=\"true\">#</a> 点个<a href=\"https://github.com/OBKoro1/Brush_algorithm\" target=\"_blank\" rel=\"noopener noreferrer\">Star<OutboundLink/></a>支持我一下~</h3>\\n\\x3c!-- \\'特殊字符串：用于删除编译后的issue组件-OBKoro1 --\\x3e\\n'},{key:\"v-966533ed9d6b7\",path:\"/algorithm/medium/102%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E5%B1%82%E5%BA%8F%E9%81%8D%E5%8E%86.html\",lastUpdated:1593678455e3,title:\"102 二叉树的层序遍历\",headers:[{level:2,title:\"102 二叉树的层序遍历\",slug:\"_102-二叉树的层序遍历\"},{level:3,title:\"题目链接\",slug:\"题目链接\"},{level:3,title:\"难度：中等\",slug:\"难度：中等\"},{level:3,title:\"思路分析：\",slug:\"思路分析：\"},{level:3,title:\"想\",slug:\"想\"},{level:3,title:\"一\",slug:\"一\"},{level:3,title:\"想\",slug:\"想-2\"},{level:3,title:\"再\",slug:\"再\"},{level:3,title:\"看\",slug:\"看\"},{level:3,title:\"答\",slug:\"答\"},{level:3,title:\"案\",slug:\"案\"},{level:3,title:\"想\",slug:\"想-3\"},{level:3,title:\"一\",slug:\"一-2\"},{level:3,title:\"想\",slug:\"想-4\"},{level:3,title:\"再\",slug:\"再-2\"},{level:3,title:\"看\",slug:\"看-2\"},{level:3,title:\"答\",slug:\"答-2\"},{level:3,title:\"案\",slug:\"案-2\"},{level:3,title:\"代码：\",slug:\"代码：\"},{level:3,title:\"鼓励我一下：\",slug:\"鼓励我一下：\"},{level:3,title:\"点个Star支持我一下~\",slug:\"点个star支持我一下\"}],excerpt:'<h2 id=\"_102-二叉树的层序遍历\"><a class=\"header-anchor\" href=\"#_102-二叉树的层序遍历\" aria-hidden=\"true\">#</a> 102 二叉树的层序遍历</h2>\\n<h3 id=\"题目链接\"><a class=\"header-anchor\" href=\"#题目链接\" aria-hidden=\"true\">#</a> <a href=\"https://leetcode-cn.com/problems/kth-largest-element-in-an-array/\" target=\"_blank\" rel=\"noopener noreferrer\">题目链接<OutboundLink/></a></h3>\\n<h3 id=\"难度：中等\"><a class=\"header-anchor\" href=\"#难度：中等\" aria-hidden=\"true\">#</a> 难度：中等</h3>\\n<h3 id=\"思路分析：\"><a class=\"header-anchor\" href=\"#思路分析：\" aria-hidden=\"true\">#</a> 思路分析：</h3>\\n<p>深度优先和广度优先</p>\\n<h3 id=\"想\"><a class=\"header-anchor\" href=\"#想\" aria-hidden=\"true\">#</a> 想</h3>\\n<h3 id=\"一\"><a class=\"header-anchor\" href=\"#一\" aria-hidden=\"true\">#</a> 一</h3>\\n<h3 id=\"想-2\"><a class=\"header-anchor\" href=\"#想-2\" aria-hidden=\"true\">#</a> 想</h3>\\n<h3 id=\"再\"><a class=\"header-anchor\" href=\"#再\" aria-hidden=\"true\">#</a> 再</h3>\\n<h3 id=\"看\"><a class=\"header-anchor\" href=\"#看\" aria-hidden=\"true\">#</a> 看</h3>\\n<h3 id=\"答\"><a class=\"header-anchor\" href=\"#答\" aria-hidden=\"true\">#</a> 答</h3>\\n<h3 id=\"案\"><a class=\"header-anchor\" href=\"#案\" aria-hidden=\"true\">#</a> 案</h3>\\n<h3 id=\"想-3\"><a class=\"header-anchor\" href=\"#想-3\" aria-hidden=\"true\">#</a> 想</h3>\\n<h3 id=\"一-2\"><a class=\"header-anchor\" href=\"#一-2\" aria-hidden=\"true\">#</a> 一</h3>\\n<h3 id=\"想-4\"><a class=\"header-anchor\" href=\"#想-4\" aria-hidden=\"true\">#</a> 想</h3>\\n<h3 id=\"再-2\"><a class=\"header-anchor\" href=\"#再-2\" aria-hidden=\"true\">#</a> 再</h3>\\n<h3 id=\"看-2\"><a class=\"header-anchor\" href=\"#看-2\" aria-hidden=\"true\">#</a> 看</h3>\\n<h3 id=\"答-2\"><a class=\"header-anchor\" href=\"#答-2\" aria-hidden=\"true\">#</a> 答</h3>\\n<h3 id=\"案-2\"><a class=\"header-anchor\" href=\"#案-2\" aria-hidden=\"true\">#</a> 案</h3>\\n<h3 id=\"代码：\"><a class=\"header-anchor\" href=\"#代码：\" aria-hidden=\"true\">#</a> 代码：</h3>\\n<p><strong>深度优先</strong>:</p>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code><span class=\"token comment\">/**\\n * @param {TreeNode} root\\n * @return {number[][]}\\n */</span>\\n<span class=\"token comment\">// dfs深度优先</span>\\n<span class=\"token keyword\">var</span> <span class=\"token function-variable function\">levelOrder</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n  <span class=\"token keyword\">const</span> res <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\\n  <span class=\"token keyword\">const</span> levelNum <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 当前层级</span>\\n  <span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">,</span> levelNum<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\n  <span class=\"token keyword\">function</span> <span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">,</span> step<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n      <span class=\"token comment\">// 当前节点是否有值</span>\\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">[</span>step<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n        <span class=\"token comment\">// 该层级已添加过节点 在当前层级中继续添加</span>\\n        res<span class=\"token punctuation\">[</span>step<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\n      <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\\n        <span class=\"token comment\">// 当前层级未添加过节点 创建一个数组 添加节点</span>\\n        res<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>node<span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\n      <span class=\"token punctuation\">}</span>\\n      <span class=\"token comment\">// 循环下个节点 增加层级</span>\\n      <span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">,</span> step <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\n      <span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">,</span> step <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\n    <span class=\"token punctuation\">}</span>\\n  <span class=\"token punctuation\">}</span>\\n  <span class=\"token keyword\">return</span> res<span class=\"token punctuation\">;</span>\\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br><span class=\"line-number\">11</span><br><span class=\"line-number\">12</span><br><span class=\"line-number\">13</span><br><span class=\"line-number\">14</span><br><span class=\"line-number\">15</span><br><span class=\"line-number\">16</span><br><span class=\"line-number\">17</span><br><span class=\"line-number\">18</span><br><span class=\"line-number\">19</span><br><span class=\"line-number\">20</span><br><span class=\"line-number\">21</span><br><span class=\"line-number\">22</span><br><span class=\"line-number\">23</span><br><span class=\"line-number\">24</span><br><span class=\"line-number\">25</span><br><span class=\"line-number\">26</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<p><strong>广度优先</strong>:</p>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code><span class=\"token keyword\">var</span> <span class=\"token function-variable function\">levelOrder</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n  <span class=\"token keyword\">const</span> ret <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>root<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> ret<span class=\"token punctuation\">;</span>\\n  <span class=\"token keyword\">const</span> q <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 栈</span>\\n  q<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\n  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>q<span class=\"token punctuation\">.</span>length <span class=\"token operator\">!==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n    <span class=\"token keyword\">const</span> currentLevelSize <span class=\"token operator\">=</span> q<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 记录下一层级的数量</span>\\n    ret<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 层级初始化</span>\\n    <span class=\"token comment\">// 遍历广度 同一层级的元素都取出来</span>\\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> currentLevelSize<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n      <span class=\"token keyword\">const</span> node <span class=\"token operator\">=</span> q<span class=\"token punctuation\">.</span><span class=\"token function\">shift</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 取出同一层级的元素</span>\\n      ret<span class=\"token punctuation\">[</span>ret<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 添加广度同一节点</span>\\n      <span class=\"token comment\">// 下个层级</span>\\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">)</span> q<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span> q<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\n    <span class=\"token punctuation\">}</span>\\n  <span class=\"token punctuation\">}</span>\\n  <span class=\"token keyword\">return</span> ret<span class=\"token punctuation\">;</span>\\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br><span class=\"line-number\">11</span><br><span class=\"line-number\">12</span><br><span class=\"line-number\">13</span><br><span class=\"line-number\">14</span><br><span class=\"line-number\">15</span><br><span class=\"line-number\">16</span><br><span class=\"line-number\">17</span><br><span class=\"line-number\">18</span><br><span class=\"line-number\">19</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<h3 id=\"鼓励我一下：\"><a class=\"header-anchor\" href=\"#鼓励我一下：\" aria-hidden=\"true\">#</a> 鼓励我一下：</h3>\\n<p>觉得还不错的话，给我的项目点个<a href=\"https://github.com/OBKoro1/Brush_algorithm\" target=\"_blank\" rel=\"noopener noreferrer\">star<OutboundLink/></a>吧\\n\\x3c!-- 特殊字符串：用于修改/删除markdown的结尾提示语-OBKoro1 --\\x3e</p>\\n<h3 id=\"点个star支持我一下\"><a class=\"header-anchor\" href=\"#点个star支持我一下\" aria-hidden=\"true\">#</a> 点个<a href=\"https://github.com/OBKoro1/Brush_algorithm\" target=\"_blank\" rel=\"noopener noreferrer\">Star<OutboundLink/></a>支持我一下~</h3>\\n\\x3c!-- \\'特殊字符串：用于删除编译后的issue组件-OBKoro1 --\\x3e\\n'},{key:\"v-049641f5923c7\",path:\"/algorithm/medium/103%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E9%94%AF%E9%BD%BF%E5%BD%A2%E5%B1%82%E6%AC%A1%E9%81%8D%E5%8E%86.html\",lastUpdated:1593678455e3,title:\"103 二叉树的锯齿形层次遍历\",headers:[{level:2,title:\"103 二叉树的锯齿形层次遍历\",slug:\"_103-二叉树的锯齿形层次遍历\"},{level:3,title:\"题目链接\",slug:\"题目链接\"},{level:3,title:\"难度：中等\",slug:\"难度：中等\"},{level:3,title:\"思路分析：\",slug:\"思路分析：\"},{level:3,title:\"想\",slug:\"想\"},{level:3,title:\"一\",slug:\"一\"},{level:3,title:\"想\",slug:\"想-2\"},{level:3,title:\"再\",slug:\"再\"},{level:3,title:\"看\",slug:\"看\"},{level:3,title:\"答\",slug:\"答\"},{level:3,title:\"案\",slug:\"案\"},{level:3,title:\"想\",slug:\"想-3\"},{level:3,title:\"一\",slug:\"一-2\"},{level:3,title:\"想\",slug:\"想-4\"},{level:3,title:\"再\",slug:\"再-2\"},{level:3,title:\"看\",slug:\"看-2\"},{level:3,title:\"答\",slug:\"答-2\"},{level:3,title:\"案\",slug:\"案-2\"},{level:3,title:\"代码：\",slug:\"代码：\"},{level:3,title:\"鼓励我一下：\",slug:\"鼓励我一下：\"},{level:3,title:\"点个Star支持我一下~\",slug:\"点个star支持我一下\"}],excerpt:'<h2 id=\"_103-二叉树的锯齿形层次遍历\"><a class=\"header-anchor\" href=\"#_103-二叉树的锯齿形层次遍历\" aria-hidden=\"true\">#</a> 103 二叉树的锯齿形层次遍历</h2>\\n<h3 id=\"题目链接\"><a class=\"header-anchor\" href=\"#题目链接\" aria-hidden=\"true\">#</a> <a href=\"https://leetcode-cn.com/problems/binary-tree-zigzag-level-order-traversal/\" target=\"_blank\" rel=\"noopener noreferrer\">题目链接<OutboundLink/></a></h3>\\n<h3 id=\"难度：中等\"><a class=\"header-anchor\" href=\"#难度：中等\" aria-hidden=\"true\">#</a> 难度：中等</h3>\\n<h3 id=\"思路分析：\"><a class=\"header-anchor\" href=\"#思路分析：\" aria-hidden=\"true\">#</a> 思路分析：</h3>\\n<p>广度或者深度，存的顺序要一致和取的顺序按照遍历的方向</p>\\n<h3 id=\"想\"><a class=\"header-anchor\" href=\"#想\" aria-hidden=\"true\">#</a> 想</h3>\\n<h3 id=\"一\"><a class=\"header-anchor\" href=\"#一\" aria-hidden=\"true\">#</a> 一</h3>\\n<h3 id=\"想-2\"><a class=\"header-anchor\" href=\"#想-2\" aria-hidden=\"true\">#</a> 想</h3>\\n<h3 id=\"再\"><a class=\"header-anchor\" href=\"#再\" aria-hidden=\"true\">#</a> 再</h3>\\n<h3 id=\"看\"><a class=\"header-anchor\" href=\"#看\" aria-hidden=\"true\">#</a> 看</h3>\\n<h3 id=\"答\"><a class=\"header-anchor\" href=\"#答\" aria-hidden=\"true\">#</a> 答</h3>\\n<h3 id=\"案\"><a class=\"header-anchor\" href=\"#案\" aria-hidden=\"true\">#</a> 案</h3>\\n<h3 id=\"想-3\"><a class=\"header-anchor\" href=\"#想-3\" aria-hidden=\"true\">#</a> 想</h3>\\n<h3 id=\"一-2\"><a class=\"header-anchor\" href=\"#一-2\" aria-hidden=\"true\">#</a> 一</h3>\\n<h3 id=\"想-4\"><a class=\"header-anchor\" href=\"#想-4\" aria-hidden=\"true\">#</a> 想</h3>\\n<h3 id=\"再-2\"><a class=\"header-anchor\" href=\"#再-2\" aria-hidden=\"true\">#</a> 再</h3>\\n<h3 id=\"看-2\"><a class=\"header-anchor\" href=\"#看-2\" aria-hidden=\"true\">#</a> 看</h3>\\n<h3 id=\"答-2\"><a class=\"header-anchor\" href=\"#答-2\" aria-hidden=\"true\">#</a> 答</h3>\\n<h3 id=\"案-2\"><a class=\"header-anchor\" href=\"#案-2\" aria-hidden=\"true\">#</a> 案</h3>\\n<h3 id=\"代码：\"><a class=\"header-anchor\" href=\"#代码：\" aria-hidden=\"true\">#</a> 代码：</h3>\\n<p>广度优先： 核心是左侧一直在前面 右侧一直在后面 取的时候按照遍历顺序从前或者从后取</p>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code><span class=\"token keyword\">var</span> <span class=\"token function-variable function\">zigzagLevelOrder</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>root <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\\n  <span class=\"token keyword\">var</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>root<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\\n  <span class=\"token keyword\">var</span> res <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\\n  <span class=\"token keyword\">var</span> go <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\\n  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">.</span>length <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n    <span class=\"token keyword\">var</span> n <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>\\n    <span class=\"token keyword\">var</span> now <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>go<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n      <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n        <span class=\"token comment\">// 从左侧往右</span>\\n        <span class=\"token keyword\">var</span> node <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">.</span><span class=\"token function\">shift</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\n        now<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\n        <span class=\"token comment\">// 下一轮是 从右往左</span>\\n        <span class=\"token comment\">// 从左往右循环一定要用push unshift右侧的值会在前面</span>\\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>left <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> arr<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 左侧在前面</span>\\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>right <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> arr<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 右侧在后面</span>\\n        n<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\\n      <span class=\"token punctuation\">}</span>\\n      res<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>now<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 添加当前层级</span>\\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\\n      <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n        <span class=\"token comment\">// 从右往左 先取后面的</span>\\n        <span class=\"token keyword\">var</span> node <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\n        now<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\n        <span class=\"token comment\">// 下一轮是从左往右</span>\\n        <span class=\"token comment\">// TODO: 从右往左一定要用unshift 用push左边的树的子节点可能会在后面</span>\\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>right <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> arr<span class=\"token punctuation\">.</span><span class=\"token function\">unshift</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 右侧在后面</span>\\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>left <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> arr<span class=\"token punctuation\">.</span><span class=\"token function\">unshift</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 左侧在前面</span>\\n        n<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\\n      <span class=\"token punctuation\">}</span>\\n      res<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>now<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\n    <span class=\"token punctuation\">}</span>\\n    go <span class=\"token operator\">=</span> <span class=\"token operator\">!</span>go<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 更改方向</span>\\n  <span class=\"token punctuation\">}</span>\\n  <span class=\"token keyword\">return</span> res<span class=\"token punctuation\">;</span>\\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br><span class=\"line-number\">11</span><br><span class=\"line-number\">12</span><br><span class=\"line-number\">13</span><br><span class=\"line-number\">14</span><br><span class=\"line-number\">15</span><br><span class=\"line-number\">16</span><br><span class=\"line-number\">17</span><br><span class=\"line-number\">18</span><br><span class=\"line-number\">19</span><br><span class=\"line-number\">20</span><br><span class=\"line-number\">21</span><br><span class=\"line-number\">22</span><br><span class=\"line-number\">23</span><br><span class=\"line-number\">24</span><br><span class=\"line-number\">25</span><br><span class=\"line-number\">26</span><br><span class=\"line-number\">27</span><br><span class=\"line-number\">28</span><br><span class=\"line-number\">29</span><br><span class=\"line-number\">30</span><br><span class=\"line-number\">31</span><br><span class=\"line-number\">32</span><br><span class=\"line-number\">33</span><br><span class=\"line-number\">34</span><br><span class=\"line-number\">35</span><br><span class=\"line-number\">36</span><br><span class=\"line-number\">37</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<h3 id=\"鼓励我一下：\"><a class=\"header-anchor\" href=\"#鼓励我一下：\" aria-hidden=\"true\">#</a> 鼓励我一下：</h3>\\n<p>觉得还不错的话，给我的项目点个<a href=\"https://github.com/OBKoro1/Brush_algorithm\" target=\"_blank\" rel=\"noopener noreferrer\">star<OutboundLink/></a>吧\\n\\x3c!-- 特殊字符串：用于修改/删除markdown的结尾提示语-OBKoro1 --\\x3e</p>\\n<h3 id=\"点个star支持我一下\"><a class=\"header-anchor\" href=\"#点个star支持我一下\" aria-hidden=\"true\">#</a> 点个<a href=\"https://github.com/OBKoro1/Brush_algorithm\" target=\"_blank\" rel=\"noopener noreferrer\">Star<OutboundLink/></a>支持我一下~</h3>\\n\\x3c!-- \\'特殊字符串：用于删除编译后的issue组件-OBKoro1 --\\x3e\\n'},{key:\"v-eab000f086772\",path:\"/algorithm/medium/11%E9%A2%98%E7%9B%9B%E6%9C%80%E5%A4%9A%E6%B0%B4%E7%9A%84%E5%AE%B9%E5%99%A8.html\",lastUpdated:1593678455e3,title:\"11 题盛最多水的容器\",headers:[{level:2,title:\"11 题盛最多水的容器\",slug:\"_11-题盛最多水的容器\"},{level:3,title:\"题目链接\",slug:\"题目链接\"},{level:3,title:\"难度：中等\",slug:\"难度：中等\"},{level:3,title:\"思路分析：\",slug:\"思路分析：\"},{level:3,title:\"想\",slug:\"想\"},{level:3,title:\"一\",slug:\"一\"},{level:3,title:\"想\",slug:\"想-2\"},{level:3,title:\"再\",slug:\"再\"},{level:3,title:\"看\",slug:\"看\"},{level:3,title:\"答\",slug:\"答\"},{level:3,title:\"案\",slug:\"案\"},{level:3,title:\"想\",slug:\"想-3\"},{level:3,title:\"一\",slug:\"一-2\"},{level:3,title:\"想\",slug:\"想-4\"},{level:3,title:\"再\",slug:\"再-2\"},{level:3,title:\"看\",slug:\"看-2\"},{level:3,title:\"答\",slug:\"答-2\"},{level:3,title:\"案\",slug:\"案-2\"},{level:3,title:\"代码：\",slug:\"代码：\"},{level:3,title:\"鼓励我一下：\",slug:\"鼓励我一下：\"},{level:3,title:\"点个Star支持我一下~\",slug:\"点个star支持我一下\"}],excerpt:'<h2 id=\"_11-题盛最多水的容器\"><a class=\"header-anchor\" href=\"#_11-题盛最多水的容器\" aria-hidden=\"true\">#</a> 11 题盛最多水的容器</h2>\\n<h3 id=\"题目链接\"><a class=\"header-anchor\" href=\"#题目链接\" aria-hidden=\"true\">#</a> <a href=\"https://leetcode-cn.com/problems/container-with-most-water/\" target=\"_blank\" rel=\"noopener noreferrer\">题目链接<OutboundLink/></a></h3>\\n<h3 id=\"难度：中等\"><a class=\"header-anchor\" href=\"#难度：中等\" aria-hidden=\"true\">#</a> 难度：中等</h3>\\n<h3 id=\"思路分析：\"><a class=\"header-anchor\" href=\"#思路分析：\" aria-hidden=\"true\">#</a> 思路分析：</h3>\\n<p>双指针滑窗</p>\\n<h3 id=\"想\"><a class=\"header-anchor\" href=\"#想\" aria-hidden=\"true\">#</a> 想</h3>\\n<h3 id=\"一\"><a class=\"header-anchor\" href=\"#一\" aria-hidden=\"true\">#</a> 一</h3>\\n<h3 id=\"想-2\"><a class=\"header-anchor\" href=\"#想-2\" aria-hidden=\"true\">#</a> 想</h3>\\n<h3 id=\"再\"><a class=\"header-anchor\" href=\"#再\" aria-hidden=\"true\">#</a> 再</h3>\\n<h3 id=\"看\"><a class=\"header-anchor\" href=\"#看\" aria-hidden=\"true\">#</a> 看</h3>\\n<h3 id=\"答\"><a class=\"header-anchor\" href=\"#答\" aria-hidden=\"true\">#</a> 答</h3>\\n<h3 id=\"案\"><a class=\"header-anchor\" href=\"#案\" aria-hidden=\"true\">#</a> 案</h3>\\n<h3 id=\"想-3\"><a class=\"header-anchor\" href=\"#想-3\" aria-hidden=\"true\">#</a> 想</h3>\\n<h3 id=\"一-2\"><a class=\"header-anchor\" href=\"#一-2\" aria-hidden=\"true\">#</a> 一</h3>\\n<h3 id=\"想-4\"><a class=\"header-anchor\" href=\"#想-4\" aria-hidden=\"true\">#</a> 想</h3>\\n<h3 id=\"再-2\"><a class=\"header-anchor\" href=\"#再-2\" aria-hidden=\"true\">#</a> 再</h3>\\n<h3 id=\"看-2\"><a class=\"header-anchor\" href=\"#看-2\" aria-hidden=\"true\">#</a> 看</h3>\\n<h3 id=\"答-2\"><a class=\"header-anchor\" href=\"#答-2\" aria-hidden=\"true\">#</a> 答</h3>\\n<h3 id=\"案-2\"><a class=\"header-anchor\" href=\"#案-2\" aria-hidden=\"true\">#</a> 案</h3>\\n<h3 id=\"代码：\"><a class=\"header-anchor\" href=\"#代码：\" aria-hidden=\"true\">#</a> 代码：</h3>\\n<p><strong>暴力法</strong></p>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">maxArea</span><span class=\"token punctuation\">(</span>height<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n  <span class=\"token keyword\">const</span> total <span class=\"token operator\">=</span> height<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>\\n  <span class=\"token keyword\">let</span> max <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\\n  <span class=\"token comment\">// 双循环 每个木板都跟其他木板匹配一次</span>\\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> total<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> j <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> total<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n      <span class=\"token comment\">// 两个木板的高度</span>\\n      <span class=\"token keyword\">const</span> height1 <span class=\"token operator\">=</span> height<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\\n      <span class=\"token keyword\">const</span> height2 <span class=\"token operator\">=</span> height<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\\n      <span class=\"token comment\">// 获取最小高度</span>\\n      <span class=\"token keyword\">const</span> heightNum <span class=\"token operator\">=</span> height1 <span class=\"token operator\">></span> height2 <span class=\"token operator\">?</span> height2 <span class=\"token punctuation\">:</span> height1<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 取木板最小的那个值</span>\\n      <span class=\"token keyword\">const</span> lengthNum <span class=\"token operator\">=</span> j <span class=\"token operator\">-</span> i<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 底部的长度</span>\\n      <span class=\"token keyword\">const</span> size <span class=\"token operator\">=</span> heightNum <span class=\"token operator\">*</span> lengthNum<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 当前两块木板的面积</span>\\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>size <span class=\"token operator\">></span> max<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n        max <span class=\"token operator\">=</span> size<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 最大面积</span>\\n      <span class=\"token punctuation\">}</span>\\n    <span class=\"token punctuation\">}</span>\\n  <span class=\"token punctuation\">}</span>\\n  <span class=\"token keyword\">return</span> max<span class=\"token punctuation\">;</span>\\n<span class=\"token punctuation\">}</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br><span class=\"line-number\">11</span><br><span class=\"line-number\">12</span><br><span class=\"line-number\">13</span><br><span class=\"line-number\">14</span><br><span class=\"line-number\">15</span><br><span class=\"line-number\">16</span><br><span class=\"line-number\">17</span><br><span class=\"line-number\">18</span><br><span class=\"line-number\">19</span><br><span class=\"line-number\">20</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<p><strong>双指针: 滑窗</strong></p>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code><span class=\"token keyword\">var</span> <span class=\"token function-variable function\">maxArea</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>height<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n  <span class=\"token keyword\">let</span> left <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//左下标</span>\\n  <span class=\"token keyword\">let</span> right <span class=\"token operator\">=</span> height<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//右下标</span>\\n  <span class=\"token keyword\">let</span> max <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//最大装水量</span>\\n  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>left <span class=\"token operator\">&lt;</span> right<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n    <span class=\"token keyword\">let</span> now <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>right <span class=\"token operator\">-</span> left<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">min</span><span class=\"token punctuation\">(</span>height<span class=\"token punctuation\">[</span>right<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> height<span class=\"token punctuation\">[</span>left<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 当前水量</span>\\n    max <span class=\"token operator\">=</span> now <span class=\"token operator\">></span> max <span class=\"token operator\">?</span> now <span class=\"token punctuation\">:</span> max<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 更新最大水量</span>\\n    <span class=\"token comment\">// 窗口缩小思路</span>\\n    <span class=\"token comment\">// 从数组左右两侧开始，判定两者的大小，以较小的一侧为滑动边界；</span>\\n    <span class=\"token comment\">// 如果滑动边界向内收缩一位的值比之前的值要小，那么继续滑动，这时候的面积肯定是逐渐减小的；</span>\\n    <span class=\"token comment\">// 当出现滑动边界的值比之前的大了，那么就需要重新判断下左右边界的大小，进行一次新的操作；</span>\\n    <span class=\"token comment\">// 最终会找到一个窗口的最大值 遍历一次 O(n)</span>\\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>height<span class=\"token punctuation\">[</span>left<span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> height<span class=\"token punctuation\">[</span>right<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n      right<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\\n      left<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\\n    <span class=\"token punctuation\">}</span>\\n  <span class=\"token punctuation\">}</span>\\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br><span class=\"line-number\">11</span><br><span class=\"line-number\">12</span><br><span class=\"line-number\">13</span><br><span class=\"line-number\">14</span><br><span class=\"line-number\">15</span><br><span class=\"line-number\">16</span><br><span class=\"line-number\">17</span><br><span class=\"line-number\">18</span><br><span class=\"line-number\">19</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<h3 id=\"鼓励我一下：\"><a class=\"header-anchor\" href=\"#鼓励我一下：\" aria-hidden=\"true\">#</a> 鼓励我一下：</h3>\\n<p>觉得还不错的话，给我的项目点个<a href=\"https://github.com/OBKoro1/Brush_algorithm\" target=\"_blank\" rel=\"noopener noreferrer\">star<OutboundLink/></a>吧\\n\\x3c!-- 特殊字符串：用于修改/删除markdown的结尾提示语-OBKoro1 --\\x3e</p>\\n<h3 id=\"点个star支持我一下\"><a class=\"header-anchor\" href=\"#点个star支持我一下\" aria-hidden=\"true\">#</a> 点个<a href=\"https://github.com/OBKoro1/Brush_algorithm\" target=\"_blank\" rel=\"noopener noreferrer\">Star<OutboundLink/></a>支持我一下~</h3>\\n\\x3c!-- \\'特殊字符串：用于删除编译后的issue组件-OBKoro1 --\\x3e\\n'},{key:\"v-b7f098b3ad5d3\",path:\"/algorithm/medium/1229%E5%AE%89%E6%8E%92%E4%BC%9A%E8%AE%AE%E6%97%A5%E7%A8%8B.html\",lastUpdated:1593678455e3,title:\"1229 安排会议日程\",headers:[{level:2,title:\"1229 安排会议日程\",slug:\"_1229-安排会议日程\"},{level:3,title:\"题目链接\",slug:\"题目链接\"},{level:3,title:\"难度：中等\",slug:\"难度：中等\"},{level:3,title:\"思路分析：\",slug:\"思路分析：\"},{level:3,title:\"想\",slug:\"想\"},{level:3,title:\"一\",slug:\"一\"},{level:3,title:\"想\",slug:\"想-2\"},{level:3,title:\"再\",slug:\"再\"},{level:3,title:\"看\",slug:\"看\"},{level:3,title:\"答\",slug:\"答\"},{level:3,title:\"案\",slug:\"案\"},{level:3,title:\"想\",slug:\"想-3\"},{level:3,title:\"一\",slug:\"一-2\"},{level:3,title:\"想\",slug:\"想-4\"},{level:3,title:\"再\",slug:\"再-2\"},{level:3,title:\"看\",slug:\"看-2\"},{level:3,title:\"答\",slug:\"答-2\"},{level:3,title:\"案\",slug:\"案-2\"},{level:3,title:\"代码：\",slug:\"代码：\"},{level:3,title:\"鼓励我一下：\",slug:\"鼓励我一下：\"},{level:3,title:\"点个Star支持我一下~\",slug:\"点个star支持我一下\"}],excerpt:'<h2 id=\"_1229-安排会议日程\"><a class=\"header-anchor\" href=\"#_1229-安排会议日程\" aria-hidden=\"true\">#</a> 1229 安排会议日程</h2>\\n<h3 id=\"题目链接\"><a class=\"header-anchor\" href=\"#题目链接\" aria-hidden=\"true\">#</a> <a href=\"https://leetcode-cn.com/problems/meeting-scheduler/\" target=\"_blank\" rel=\"noopener noreferrer\">题目链接<OutboundLink/></a></h3>\\n<h3 id=\"难度：中等\"><a class=\"header-anchor\" href=\"#难度：中等\" aria-hidden=\"true\">#</a> 难度：中等</h3>\\n<h3 id=\"思路分析：\"><a class=\"header-anchor\" href=\"#思路分析：\" aria-hidden=\"true\">#</a> 思路分析：</h3>\\n<p>滑窗思想，一端一端固定</p>\\n<h3 id=\"想\"><a class=\"header-anchor\" href=\"#想\" aria-hidden=\"true\">#</a> 想</h3>\\n<h3 id=\"一\"><a class=\"header-anchor\" href=\"#一\" aria-hidden=\"true\">#</a> 一</h3>\\n<h3 id=\"想-2\"><a class=\"header-anchor\" href=\"#想-2\" aria-hidden=\"true\">#</a> 想</h3>\\n<h3 id=\"再\"><a class=\"header-anchor\" href=\"#再\" aria-hidden=\"true\">#</a> 再</h3>\\n<h3 id=\"看\"><a class=\"header-anchor\" href=\"#看\" aria-hidden=\"true\">#</a> 看</h3>\\n<h3 id=\"答\"><a class=\"header-anchor\" href=\"#答\" aria-hidden=\"true\">#</a> 答</h3>\\n<h3 id=\"案\"><a class=\"header-anchor\" href=\"#案\" aria-hidden=\"true\">#</a> 案</h3>\\n<h3 id=\"想-3\"><a class=\"header-anchor\" href=\"#想-3\" aria-hidden=\"true\">#</a> 想</h3>\\n<h3 id=\"一-2\"><a class=\"header-anchor\" href=\"#一-2\" aria-hidden=\"true\">#</a> 一</h3>\\n<h3 id=\"想-4\"><a class=\"header-anchor\" href=\"#想-4\" aria-hidden=\"true\">#</a> 想</h3>\\n<h3 id=\"再-2\"><a class=\"header-anchor\" href=\"#再-2\" aria-hidden=\"true\">#</a> 再</h3>\\n<h3 id=\"看-2\"><a class=\"header-anchor\" href=\"#看-2\" aria-hidden=\"true\">#</a> 看</h3>\\n<h3 id=\"答-2\"><a class=\"header-anchor\" href=\"#答-2\" aria-hidden=\"true\">#</a> 答</h3>\\n<h3 id=\"案-2\"><a class=\"header-anchor\" href=\"#案-2\" aria-hidden=\"true\">#</a> 案</h3>\\n<h3 id=\"代码：\"><a class=\"header-anchor\" href=\"#代码：\" aria-hidden=\"true\">#</a> 代码：</h3>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code><span class=\"token comment\">/**\\n * @param {number[][]} slots1\\n * @param {number[][]} slots2\\n * @param {number} duration\\n * @return {number[]}\\n */</span>\\n<span class=\"token comment\">// 滑窗 划出范围</span>\\n<span class=\"token keyword\">var</span> <span class=\"token function-variable function\">minAvailableDuration</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>slots1<span class=\"token punctuation\">,</span> slots2<span class=\"token punctuation\">,</span> duration<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n  <span class=\"token keyword\">let</span> start <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\\n    end <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\\n    find <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\\n  <span class=\"token comment\">// 排序找到最早的时间</span>\\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">fn</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\\n    <span class=\"token keyword\">return</span> a<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> b<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\\n  slots1<span class=\"token punctuation\">.</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span>fn<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\n  slots2<span class=\"token punctuation\">.</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span>fn<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> slots1<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n    <span class=\"token keyword\">const</span> item1 <span class=\"token operator\">=</span> slots1<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> slots2<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n      <span class=\"token keyword\">const</span> item2 <span class=\"token operator\">=</span> slots2<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>item1<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> item2<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n        <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\\n      <span class=\"token punctuation\">}</span>\\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>item2<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> item1<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n        <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\\n      <span class=\"token punctuation\">}</span>\\n      <span class=\"token comment\">// 滑窗思想 先固定一边 再固定另一边</span>\\n      start <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span>item1<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> item2<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 找到最小值中最大的</span>\\n      end <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">min</span><span class=\"token punctuation\">(</span>item1<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> item2<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 找到最大值最小的</span>\\n      <span class=\"token comment\">// 测试区间范围</span>\\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>end <span class=\"token operator\">-</span> start <span class=\"token operator\">>=</span> duration<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n        find <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\\n        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\\n      <span class=\"token punctuation\">}</span>\\n    <span class=\"token punctuation\">}</span>\\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>find<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n      <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\\n    <span class=\"token punctuation\">}</span>\\n  <span class=\"token punctuation\">}</span>\\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>find<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n    end <span class=\"token operator\">=</span> start <span class=\"token operator\">+</span> duration<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 最早会议时间</span>\\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span>start<span class=\"token punctuation\">,</span> end<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\\n  <span class=\"token punctuation\">}</span>\\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br><span class=\"line-number\">11</span><br><span class=\"line-number\">12</span><br><span class=\"line-number\">13</span><br><span class=\"line-number\">14</span><br><span class=\"line-number\">15</span><br><span class=\"line-number\">16</span><br><span class=\"line-number\">17</span><br><span class=\"line-number\">18</span><br><span class=\"line-number\">19</span><br><span class=\"line-number\">20</span><br><span class=\"line-number\">21</span><br><span class=\"line-number\">22</span><br><span class=\"line-number\">23</span><br><span class=\"line-number\">24</span><br><span class=\"line-number\">25</span><br><span class=\"line-number\">26</span><br><span class=\"line-number\">27</span><br><span class=\"line-number\">28</span><br><span class=\"line-number\">29</span><br><span class=\"line-number\">30</span><br><span class=\"line-number\">31</span><br><span class=\"line-number\">32</span><br><span class=\"line-number\">33</span><br><span class=\"line-number\">34</span><br><span class=\"line-number\">35</span><br><span class=\"line-number\">36</span><br><span class=\"line-number\">37</span><br><span class=\"line-number\">38</span><br><span class=\"line-number\">39</span><br><span class=\"line-number\">40</span><br><span class=\"line-number\">41</span><br><span class=\"line-number\">42</span><br><span class=\"line-number\">43</span><br><span class=\"line-number\">44</span><br><span class=\"line-number\">45</span><br><span class=\"line-number\">46</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<h3 id=\"鼓励我一下：\"><a class=\"header-anchor\" href=\"#鼓励我一下：\" aria-hidden=\"true\">#</a> 鼓励我一下：</h3>\\n<p>觉得还不错的话，给我的项目点个<a href=\"https://github.com/OBKoro1/Brush_algorithm\" target=\"_blank\" rel=\"noopener noreferrer\">star<OutboundLink/></a>吧\\n\\x3c!-- 特殊字符串：用于修改/删除markdown的结尾提示语-OBKoro1 --\\x3e</p>\\n<h3 id=\"点个star支持我一下\"><a class=\"header-anchor\" href=\"#点个star支持我一下\" aria-hidden=\"true\">#</a> 点个<a href=\"https://github.com/OBKoro1/Brush_algorithm\" target=\"_blank\" rel=\"noopener noreferrer\">Star<OutboundLink/></a>支持我一下~</h3>\\n\\x3c!-- \\'特殊字符串：用于删除编译后的issue组件-OBKoro1 --\\x3e\\n'},{key:\"v-e72e8374dc6b7\",path:\"/algorithm/medium/146LRU%E7%BC%93%E5%AD%98%E6%9C%BA%E5%88%B6.html\",lastUpdated:1593678455e3,title:\"146LRU 缓存机制\",headers:[{level:2,title:\"146LRU 缓存机制\",slug:\"_146lru-缓存机制\"},{level:3,title:\"题目链接\",slug:\"题目链接\"},{level:3,title:\"难度：中等\",slug:\"难度：中等\"},{level:3,title:\"思路分析：\",slug:\"思路分析：\"},{level:3,title:\"想\",slug:\"想\"},{level:3,title:\"一\",slug:\"一\"},{level:3,title:\"想\",slug:\"想-2\"},{level:3,title:\"再\",slug:\"再\"},{level:3,title:\"看\",slug:\"看\"},{level:3,title:\"答\",slug:\"答\"},{level:3,title:\"案\",slug:\"案\"},{level:3,title:\"想\",slug:\"想-3\"},{level:3,title:\"一\",slug:\"一-2\"},{level:3,title:\"想\",slug:\"想-4\"},{level:3,title:\"再\",slug:\"再-2\"},{level:3,title:\"看\",slug:\"看-2\"},{level:3,title:\"答\",slug:\"答-2\"},{level:3,title:\"案\",slug:\"案-2\"},{level:3,title:\"代码：\",slug:\"代码：\"},{level:3,title:\"鼓励我一下：\",slug:\"鼓励我一下：\"},{level:3,title:\"点个Star支持我一下~\",slug:\"点个star支持我一下\"}],excerpt:'<h2 id=\"_146lru-缓存机制\"><a class=\"header-anchor\" href=\"#_146lru-缓存机制\" aria-hidden=\"true\">#</a> 146LRU 缓存机制</h2>\\n<h3 id=\"题目链接\"><a class=\"header-anchor\" href=\"#题目链接\" aria-hidden=\"true\">#</a> <a href=\"https://leetcode-cn.com/problems/lru-cache/\" target=\"_blank\" rel=\"noopener noreferrer\">题目链接<OutboundLink/></a></h3>\\n<h3 id=\"难度：中等\"><a class=\"header-anchor\" href=\"#难度：中等\" aria-hidden=\"true\">#</a> 难度：中等</h3>\\n<h3 id=\"思路分析：\"><a class=\"header-anchor\" href=\"#思路分析：\" aria-hidden=\"true\">#</a> 思路分析：</h3>\\n<p>编程题。</p>\\n<p>链表，数组，对象都可以。</p>\\n<h3 id=\"想\"><a class=\"header-anchor\" href=\"#想\" aria-hidden=\"true\">#</a> 想</h3>\\n<h3 id=\"一\"><a class=\"header-anchor\" href=\"#一\" aria-hidden=\"true\">#</a> 一</h3>\\n<h3 id=\"想-2\"><a class=\"header-anchor\" href=\"#想-2\" aria-hidden=\"true\">#</a> 想</h3>\\n<h3 id=\"再\"><a class=\"header-anchor\" href=\"#再\" aria-hidden=\"true\">#</a> 再</h3>\\n<h3 id=\"看\"><a class=\"header-anchor\" href=\"#看\" aria-hidden=\"true\">#</a> 看</h3>\\n<h3 id=\"答\"><a class=\"header-anchor\" href=\"#答\" aria-hidden=\"true\">#</a> 答</h3>\\n<h3 id=\"案\"><a class=\"header-anchor\" href=\"#案\" aria-hidden=\"true\">#</a> 案</h3>\\n<h3 id=\"想-3\"><a class=\"header-anchor\" href=\"#想-3\" aria-hidden=\"true\">#</a> 想</h3>\\n<h3 id=\"一-2\"><a class=\"header-anchor\" href=\"#一-2\" aria-hidden=\"true\">#</a> 一</h3>\\n<h3 id=\"想-4\"><a class=\"header-anchor\" href=\"#想-4\" aria-hidden=\"true\">#</a> 想</h3>\\n<h3 id=\"再-2\"><a class=\"header-anchor\" href=\"#再-2\" aria-hidden=\"true\">#</a> 再</h3>\\n<h3 id=\"看-2\"><a class=\"header-anchor\" href=\"#看-2\" aria-hidden=\"true\">#</a> 看</h3>\\n<h3 id=\"答-2\"><a class=\"header-anchor\" href=\"#答-2\" aria-hidden=\"true\">#</a> 答</h3>\\n<h3 id=\"案-2\"><a class=\"header-anchor\" href=\"#案-2\" aria-hidden=\"true\">#</a> 案</h3>\\n<h3 id=\"代码：\"><a class=\"header-anchor\" href=\"#代码：\" aria-hidden=\"true\">#</a> 代码：</h3>\\n<p>链表：</p>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code><span class=\"token comment\">/**\\n * @param {number} capacity\\n */</span>\\n<span class=\"token keyword\">var</span> <span class=\"token function-variable function\">LRUCache</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>capacity<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>map <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// map默认记住插入的顺序</span>\\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>max <span class=\"token operator\">=</span> capacity<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 最大数量</span>\\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\\n\\n<span class=\"token comment\">/**\\n * @param {number} key\\n * @return {number}\\n */</span>\\nLRUCache<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">get</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n  <span class=\"token keyword\">const</span> value <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>map<span class=\"token punctuation\">.</span><span class=\"token keyword\">get</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>value <span class=\"token operator\">!==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>map<span class=\"token punctuation\">.</span><span class=\"token keyword\">delete</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 删除更新插入顺序</span>\\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>map<span class=\"token punctuation\">.</span><span class=\"token keyword\">set</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\n  <span class=\"token punctuation\">}</span>\\n  <span class=\"token keyword\">return</span> value<span class=\"token punctuation\">;</span>\\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\\n<span class=\"token comment\">/**\\n * @param {number} key\\n * @param {number} value\\n * @return {void}\\n */</span>\\nLRUCache<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">put</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>map<span class=\"token punctuation\">.</span><span class=\"token function\">has</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>map<span class=\"token punctuation\">.</span><span class=\"token keyword\">delete</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 删除更新插入顺序</span>\\n  <span class=\"token punctuation\">}</span>\\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>map<span class=\"token punctuation\">.</span><span class=\"token keyword\">set</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>max <span class=\"token operator\">&lt;</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>map<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n    <span class=\"token keyword\">const</span> mapKeys <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>map<span class=\"token punctuation\">.</span><span class=\"token function\">keys</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 获取遍历值</span>\\n    <span class=\"token keyword\">const</span> oldKey <span class=\"token operator\">=</span> mapKeys<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">;</span> <span class=\"token comment\">// map插入顺序 默认第一个即最早插入的值</span>\\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>map<span class=\"token punctuation\">.</span><span class=\"token keyword\">delete</span><span class=\"token punctuation\">(</span>oldKey<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 删除最早的值</span>\\n  <span class=\"token punctuation\">}</span>\\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br><span class=\"line-number\">11</span><br><span class=\"line-number\">12</span><br><span class=\"line-number\">13</span><br><span class=\"line-number\">14</span><br><span class=\"line-number\">15</span><br><span class=\"line-number\">16</span><br><span class=\"line-number\">17</span><br><span class=\"line-number\">18</span><br><span class=\"line-number\">19</span><br><span class=\"line-number\">20</span><br><span class=\"line-number\">21</span><br><span class=\"line-number\">22</span><br><span class=\"line-number\">23</span><br><span class=\"line-number\">24</span><br><span class=\"line-number\">25</span><br><span class=\"line-number\">26</span><br><span class=\"line-number\">27</span><br><span class=\"line-number\">28</span><br><span class=\"line-number\">29</span><br><span class=\"line-number\">30</span><br><span class=\"line-number\">31</span><br><span class=\"line-number\">32</span><br><span class=\"line-number\">33</span><br><span class=\"line-number\">34</span><br><span class=\"line-number\">35</span><br><span class=\"line-number\">36</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<p>对象/map</p>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code><span class=\"token comment\">// TODO: map: 用时88.91, 内存100</span>\\n<span class=\"token comment\">/**\\n * @param {number} capacity\\n */</span>\\n<span class=\"token keyword\">var</span> <span class=\"token function-variable function\">LRUCache</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>capacity<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>map <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// map默认记住插入的顺序</span>\\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>max <span class=\"token operator\">=</span> capacity<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 最大数量</span>\\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\\n\\n<span class=\"token comment\">/**\\n * @param {number} key\\n * @return {number}\\n */</span>\\nLRUCache<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">get</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n  <span class=\"token keyword\">const</span> value <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>map<span class=\"token punctuation\">.</span><span class=\"token keyword\">get</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>value <span class=\"token operator\">!==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>map<span class=\"token punctuation\">.</span><span class=\"token keyword\">delete</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 删除更新插入顺序</span>\\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>map<span class=\"token punctuation\">.</span><span class=\"token keyword\">set</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\n  <span class=\"token punctuation\">}</span>\\n  <span class=\"token keyword\">return</span> value<span class=\"token punctuation\">;</span>\\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\\n<span class=\"token comment\">/**\\n * @param {number} key\\n * @param {number} value\\n * @return {void}\\n */</span>\\nLRUCache<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">put</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>map<span class=\"token punctuation\">.</span><span class=\"token function\">has</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>map<span class=\"token punctuation\">.</span><span class=\"token keyword\">delete</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 删除更新插入顺序</span>\\n  <span class=\"token punctuation\">}</span>\\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>map<span class=\"token punctuation\">.</span><span class=\"token keyword\">set</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>max <span class=\"token operator\">&lt;</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>map<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n    <span class=\"token keyword\">const</span> mapKeys <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>map<span class=\"token punctuation\">.</span><span class=\"token function\">keys</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 获取遍历值</span>\\n    <span class=\"token keyword\">const</span> oldKey <span class=\"token operator\">=</span> mapKeys<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">;</span> <span class=\"token comment\">// map插入顺序 默认第一个即最早插入的值</span>\\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>map<span class=\"token punctuation\">.</span><span class=\"token keyword\">delete</span><span class=\"token punctuation\">(</span>oldKey<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 删除最早的值</span>\\n  <span class=\"token punctuation\">}</span>\\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br><span class=\"line-number\">11</span><br><span class=\"line-number\">12</span><br><span class=\"line-number\">13</span><br><span class=\"line-number\">14</span><br><span class=\"line-number\">15</span><br><span class=\"line-number\">16</span><br><span class=\"line-number\">17</span><br><span class=\"line-number\">18</span><br><span class=\"line-number\">19</span><br><span class=\"line-number\">20</span><br><span class=\"line-number\">21</span><br><span class=\"line-number\">22</span><br><span class=\"line-number\">23</span><br><span class=\"line-number\">24</span><br><span class=\"line-number\">25</span><br><span class=\"line-number\">26</span><br><span class=\"line-number\">27</span><br><span class=\"line-number\">28</span><br><span class=\"line-number\">29</span><br><span class=\"line-number\">30</span><br><span class=\"line-number\">31</span><br><span class=\"line-number\">32</span><br><span class=\"line-number\">33</span><br><span class=\"line-number\">34</span><br><span class=\"line-number\">35</span><br><span class=\"line-number\">36</span><br><span class=\"line-number\">37</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<p>数组</p>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code><span class=\"token comment\">//  数组: 用时36, 内存100;</span>\\n<span class=\"token comment\">/**\\n * @param {number} capacity\\n */</span>\\n<span class=\"token keyword\">var</span> <span class=\"token function-variable function\">LRUCache</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>capacity<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>keyArr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// key最近使用的值</span>\\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>data <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 存储数据</span>\\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>max <span class=\"token operator\">=</span> capacity<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 最大数量</span>\\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\\n\\n<span class=\"token comment\">/**\\n * @param {number} key\\n * @return {number}\\n */</span>\\nLRUCache<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">get</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n  <span class=\"token keyword\">const</span> index <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">findIndex</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>index <span class=\"token operator\">!==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">updateNew</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\\n  <span class=\"token punctuation\">}</span>\\n  <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\\n<span class=\"token comment\">// 更新key的新鲜值</span>\\nLRUCache<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">updateNew</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> index<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>keyArr<span class=\"token punctuation\">.</span><span class=\"token function\">splice</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>keyArr<span class=\"token punctuation\">.</span><span class=\"token function\">unshift</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 更新key的新鲜值</span>\\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\\n\\n<span class=\"token comment\">// 寻找key的位置</span>\\nLRUCache<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">findIndex</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>keyArr<span class=\"token punctuation\">.</span><span class=\"token function\">findIndex</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\\n    <span class=\"token keyword\">return</span> item <span class=\"token operator\">===</span> key<span class=\"token punctuation\">;</span>\\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\\n\\n<span class=\"token comment\">/**\\n * @param {number} key\\n * @param {number} value\\n * @return {void}\\n */</span>\\nLRUCache<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">put</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n  <span class=\"token keyword\">const</span> index <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">findIndex</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>index <span class=\"token operator\">!==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">updateNew</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> value<span class=\"token punctuation\">;</span>\\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> value<span class=\"token punctuation\">;</span>\\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>keyArr<span class=\"token punctuation\">.</span><span class=\"token function\">unshift</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\n  <span class=\"token punctuation\">}</span>\\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>max <span class=\"token operator\">&lt;</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>keyArr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>keyArr<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 删除最后一个值</span>\\n  <span class=\"token punctuation\">}</span>\\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br><span class=\"line-number\">11</span><br><span class=\"line-number\">12</span><br><span class=\"line-number\">13</span><br><span class=\"line-number\">14</span><br><span class=\"line-number\">15</span><br><span class=\"line-number\">16</span><br><span class=\"line-number\">17</span><br><span class=\"line-number\">18</span><br><span class=\"line-number\">19</span><br><span class=\"line-number\">20</span><br><span class=\"line-number\">21</span><br><span class=\"line-number\">22</span><br><span class=\"line-number\">23</span><br><span class=\"line-number\">24</span><br><span class=\"line-number\">25</span><br><span class=\"line-number\">26</span><br><span class=\"line-number\">27</span><br><span class=\"line-number\">28</span><br><span class=\"line-number\">29</span><br><span class=\"line-number\">30</span><br><span class=\"line-number\">31</span><br><span class=\"line-number\">32</span><br><span class=\"line-number\">33</span><br><span class=\"line-number\">34</span><br><span class=\"line-number\">35</span><br><span class=\"line-number\">36</span><br><span class=\"line-number\">37</span><br><span class=\"line-number\">38</span><br><span class=\"line-number\">39</span><br><span class=\"line-number\">40</span><br><span class=\"line-number\">41</span><br><span class=\"line-number\">42</span><br><span class=\"line-number\">43</span><br><span class=\"line-number\">44</span><br><span class=\"line-number\">45</span><br><span class=\"line-number\">46</span><br><span class=\"line-number\">47</span><br><span class=\"line-number\">48</span><br><span class=\"line-number\">49</span><br><span class=\"line-number\">50</span><br><span class=\"line-number\">51</span><br><span class=\"line-number\">52</span><br><span class=\"line-number\">53</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<h3 id=\"鼓励我一下：\"><a class=\"header-anchor\" href=\"#鼓励我一下：\" aria-hidden=\"true\">#</a> 鼓励我一下：</h3>\\n<p>觉得还不错的话，给我的项目点个<a href=\"https://github.com/OBKoro1/Brush_algorithm\" target=\"_blank\" rel=\"noopener noreferrer\">star<OutboundLink/></a>吧\\n\\x3c!-- 特殊字符串：用于修改/删除markdown的结尾提示语-OBKoro1 --\\x3e</p>\\n<h3 id=\"点个star支持我一下\"><a class=\"header-anchor\" href=\"#点个star支持我一下\" aria-hidden=\"true\">#</a> 点个<a href=\"https://github.com/OBKoro1/Brush_algorithm\" target=\"_blank\" rel=\"noopener noreferrer\">Star<OutboundLink/></a>支持我一下~</h3>\\n\\x3c!-- \\'特殊字符串：用于删除编译后的issue组件-OBKoro1 --\\x3e\\n'},{key:\"v-dc396649ec201\",path:\"/algorithm/medium/15%E4%B8%89%E6%95%B0%E4%B9%8B%E5%92%8C.html\",lastUpdated:1593678455e3,title:\"15 三数之和\",headers:[{level:2,title:\"15 三数之和\",slug:\"_15-三数之和\"},{level:3,title:\"题目链接\",slug:\"题目链接\"},{level:3,title:\"难度：中等\",slug:\"难度：中等\"},{level:3,title:\"想\",slug:\"想\"},{level:3,title:\"一\",slug:\"一\"},{level:3,title:\"想\",slug:\"想-2\"},{level:3,title:\"再\",slug:\"再\"},{level:3,title:\"看\",slug:\"看\"},{level:3,title:\"答\",slug:\"答\"},{level:3,title:\"案\",slug:\"案\"},{level:3,title:\"想\",slug:\"想-3\"},{level:3,title:\"一\",slug:\"一-2\"},{level:3,title:\"想\",slug:\"想-4\"},{level:3,title:\"再\",slug:\"再-2\"},{level:3,title:\"看\",slug:\"看-2\"},{level:3,title:\"答\",slug:\"答-2\"},{level:3,title:\"案\",slug:\"案-2\"},{level:3,title:\"代码：\",slug:\"代码：\"},{level:3,title:\"鼓励我一下：\",slug:\"鼓励我一下：\"},{level:3,title:\"点个Star支持我一下~\",slug:\"点个star支持我一下\"}],excerpt:'<h2 id=\"_15-三数之和\"><a class=\"header-anchor\" href=\"#_15-三数之和\" aria-hidden=\"true\">#</a> 15 三数之和</h2>\\n<h3 id=\"题目链接\"><a class=\"header-anchor\" href=\"#题目链接\" aria-hidden=\"true\">#</a> <a href=\"https://leetcode-cn.com/problems/3sum/\" target=\"_blank\" rel=\"noopener noreferrer\">题目链接<OutboundLink/></a></h3>\\n<h3 id=\"难度：中等\"><a class=\"header-anchor\" href=\"#难度：中等\" aria-hidden=\"true\">#</a> 难度：中等</h3>\\n<h3 id=\"想\"><a class=\"header-anchor\" href=\"#想\" aria-hidden=\"true\">#</a> 想</h3>\\n<h3 id=\"一\"><a class=\"header-anchor\" href=\"#一\" aria-hidden=\"true\">#</a> 一</h3>\\n<h3 id=\"想-2\"><a class=\"header-anchor\" href=\"#想-2\" aria-hidden=\"true\">#</a> 想</h3>\\n<h3 id=\"再\"><a class=\"header-anchor\" href=\"#再\" aria-hidden=\"true\">#</a> 再</h3>\\n<h3 id=\"看\"><a class=\"header-anchor\" href=\"#看\" aria-hidden=\"true\">#</a> 看</h3>\\n<h3 id=\"答\"><a class=\"header-anchor\" href=\"#答\" aria-hidden=\"true\">#</a> 答</h3>\\n<h3 id=\"案\"><a class=\"header-anchor\" href=\"#案\" aria-hidden=\"true\">#</a> 案</h3>\\n<h3 id=\"想-3\"><a class=\"header-anchor\" href=\"#想-3\" aria-hidden=\"true\">#</a> 想</h3>\\n<h3 id=\"一-2\"><a class=\"header-anchor\" href=\"#一-2\" aria-hidden=\"true\">#</a> 一</h3>\\n<h3 id=\"想-4\"><a class=\"header-anchor\" href=\"#想-4\" aria-hidden=\"true\">#</a> 想</h3>\\n<h3 id=\"再-2\"><a class=\"header-anchor\" href=\"#再-2\" aria-hidden=\"true\">#</a> 再</h3>\\n<h3 id=\"看-2\"><a class=\"header-anchor\" href=\"#看-2\" aria-hidden=\"true\">#</a> 看</h3>\\n<h3 id=\"答-2\"><a class=\"header-anchor\" href=\"#答-2\" aria-hidden=\"true\">#</a> 答</h3>\\n<h3 id=\"案-2\"><a class=\"header-anchor\" href=\"#案-2\" aria-hidden=\"true\">#</a> 案</h3>\\n<h3 id=\"代码：\"><a class=\"header-anchor\" href=\"#代码：\" aria-hidden=\"true\">#</a> 代码：</h3>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code><span class=\"token comment\">/**\\n * @param {number[]} nums\\n * @return {number[][]}\\n */</span>\\n<span class=\"token keyword\">var</span> <span class=\"token function-variable function\">threeSum</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n  <span class=\"token keyword\">let</span> ans <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\\n  <span class=\"token keyword\">const</span> len <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>\\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nums <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> len <span class=\"token operator\">&lt;</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> ans<span class=\"token punctuation\">;</span>\\n  nums<span class=\"token punctuation\">.</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> a <span class=\"token operator\">-</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 排序</span>\\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> len<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 如果当前数字大于0，则三数之和一定大于0，所以结束循环</span>\\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">></span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">===</span> nums<span class=\"token punctuation\">[</span>i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 当前值跟上一个值重复 上面左右指针已经相加过 会导致结果重复 跳过后面的</span>\\n    <span class=\"token keyword\">let</span> <span class=\"token constant\">L</span> <span class=\"token operator\">=</span> i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 左指针比当前值大</span>\\n    <span class=\"token keyword\">let</span> <span class=\"token constant\">R</span> <span class=\"token operator\">=</span> len <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 右指针</span>\\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">L</span> <span class=\"token operator\">&lt;</span> <span class=\"token constant\">R</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n      <span class=\"token comment\">// 当前值 穷尽可能为0</span>\\n      <span class=\"token keyword\">const</span> sum <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> nums<span class=\"token punctuation\">[</span><span class=\"token constant\">L</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> nums<span class=\"token punctuation\">[</span><span class=\"token constant\">R</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>sum <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n        ans<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> nums<span class=\"token punctuation\">[</span><span class=\"token constant\">L</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> nums<span class=\"token punctuation\">[</span><span class=\"token constant\">R</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">L</span> <span class=\"token operator\">&lt;</span> <span class=\"token constant\">R</span> <span class=\"token operator\">&amp;&amp;</span> nums<span class=\"token punctuation\">[</span><span class=\"token constant\">L</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">===</span> nums<span class=\"token punctuation\">[</span><span class=\"token constant\">L</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token constant\">L</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 指针值相同 跳过 否则会添加重复值</span>\\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">L</span> <span class=\"token operator\">&lt;</span> <span class=\"token constant\">R</span> <span class=\"token operator\">&amp;&amp;</span> nums<span class=\"token punctuation\">[</span><span class=\"token constant\">R</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">===</span> nums<span class=\"token punctuation\">[</span><span class=\"token constant\">R</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token constant\">R</span><span class=\"token operator\">--</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 指针值相同 跳过  否则会添加重复值</span>\\n        <span class=\"token constant\">L</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\\n        <span class=\"token constant\">R</span><span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\\n      <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>sum <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token constant\">L</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\\n      <span class=\"token comment\">//小于0 左侧值过小</span>\\n      <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>sum <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token constant\">R</span><span class=\"token operator\">--</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 大于0 右侧值过大</span>\\n    <span class=\"token punctuation\">}</span>\\n  <span class=\"token punctuation\">}</span>\\n  <span class=\"token keyword\">return</span> ans<span class=\"token punctuation\">;</span>\\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br><span class=\"line-number\">11</span><br><span class=\"line-number\">12</span><br><span class=\"line-number\">13</span><br><span class=\"line-number\">14</span><br><span class=\"line-number\">15</span><br><span class=\"line-number\">16</span><br><span class=\"line-number\">17</span><br><span class=\"line-number\">18</span><br><span class=\"line-number\">19</span><br><span class=\"line-number\">20</span><br><span class=\"line-number\">21</span><br><span class=\"line-number\">22</span><br><span class=\"line-number\">23</span><br><span class=\"line-number\">24</span><br><span class=\"line-number\">25</span><br><span class=\"line-number\">26</span><br><span class=\"line-number\">27</span><br><span class=\"line-number\">28</span><br><span class=\"line-number\">29</span><br><span class=\"line-number\">30</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<h3 id=\"鼓励我一下：\"><a class=\"header-anchor\" href=\"#鼓励我一下：\" aria-hidden=\"true\">#</a> 鼓励我一下：</h3>\\n<p>觉得还不错的话，给我的项目点个<a href=\"https://github.com/OBKoro1/Brush_algorithm\" target=\"_blank\" rel=\"noopener noreferrer\">star<OutboundLink/></a>吧\\n\\x3c!-- 特殊字符串：用于修改/删除markdown的结尾提示语-OBKoro1 --\\x3e</p>\\n<h3 id=\"点个star支持我一下\"><a class=\"header-anchor\" href=\"#点个star支持我一下\" aria-hidden=\"true\">#</a> 点个<a href=\"https://github.com/OBKoro1/Brush_algorithm\" target=\"_blank\" rel=\"noopener noreferrer\">Star<OutboundLink/></a>支持我一下~</h3>\\n\\x3c!-- \\'特殊字符串：用于删除编译后的issue组件-OBKoro1 --\\x3e\\n'},{key:\"v-37cf2f54309e2\",path:\"/algorithm/medium/199%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E5%8F%B3%E8%A7%86%E5%9B%BE.html\",lastUpdated:1593678455e3,title:\"199 二叉树的右视图\",headers:[{level:2,title:\"199 二叉树的右视图\",slug:\"_199-二叉树的右视图\"},{level:3,title:\"题目链接\",slug:\"题目链接\"},{level:3,title:\"难度：中等\",slug:\"难度：中等\"},{level:3,title:\"思路分析：\",slug:\"思路分析：\"},{level:3,title:\"想\",slug:\"想\"},{level:3,title:\"一\",slug:\"一\"},{level:3,title:\"想\",slug:\"想-2\"},{level:3,title:\"再\",slug:\"再\"},{level:3,title:\"看\",slug:\"看\"},{level:3,title:\"答\",slug:\"答\"},{level:3,title:\"案\",slug:\"案\"},{level:3,title:\"想\",slug:\"想-3\"},{level:3,title:\"一\",slug:\"一-2\"},{level:3,title:\"想\",slug:\"想-4\"},{level:3,title:\"再\",slug:\"再-2\"},{level:3,title:\"看\",slug:\"看-2\"},{level:3,title:\"答\",slug:\"答-2\"},{level:3,title:\"案\",slug:\"案-2\"},{level:3,title:\"代码：\",slug:\"代码：\"},{level:3,title:\"鼓励我一下：\",slug:\"鼓励我一下：\"},{level:3,title:\"点个Star支持我一下~\",slug:\"点个star支持我一下\"}],excerpt:'<h2 id=\"_199-二叉树的右视图\"><a class=\"header-anchor\" href=\"#_199-二叉树的右视图\" aria-hidden=\"true\">#</a> 199 二叉树的右视图</h2>\\n<h3 id=\"题目链接\"><a class=\"header-anchor\" href=\"#题目链接\" aria-hidden=\"true\">#</a> <a href=\"https://leetcode-cn.com/problems/binary-tree-right-side-view/\" target=\"_blank\" rel=\"noopener noreferrer\">题目链接<OutboundLink/></a></h3>\\n<h3 id=\"难度：中等\"><a class=\"header-anchor\" href=\"#难度：中等\" aria-hidden=\"true\">#</a> 难度：中等</h3>\\n<h3 id=\"思路分析：\"><a class=\"header-anchor\" href=\"#思路分析：\" aria-hidden=\"true\">#</a> 思路分析：</h3>\\n<p>深度优先、广度优先</p>\\n<h3 id=\"想\"><a class=\"header-anchor\" href=\"#想\" aria-hidden=\"true\">#</a> 想</h3>\\n<h3 id=\"一\"><a class=\"header-anchor\" href=\"#一\" aria-hidden=\"true\">#</a> 一</h3>\\n<h3 id=\"想-2\"><a class=\"header-anchor\" href=\"#想-2\" aria-hidden=\"true\">#</a> 想</h3>\\n<h3 id=\"再\"><a class=\"header-anchor\" href=\"#再\" aria-hidden=\"true\">#</a> 再</h3>\\n<h3 id=\"看\"><a class=\"header-anchor\" href=\"#看\" aria-hidden=\"true\">#</a> 看</h3>\\n<h3 id=\"答\"><a class=\"header-anchor\" href=\"#答\" aria-hidden=\"true\">#</a> 答</h3>\\n<h3 id=\"案\"><a class=\"header-anchor\" href=\"#案\" aria-hidden=\"true\">#</a> 案</h3>\\n<h3 id=\"想-3\"><a class=\"header-anchor\" href=\"#想-3\" aria-hidden=\"true\">#</a> 想</h3>\\n<h3 id=\"一-2\"><a class=\"header-anchor\" href=\"#一-2\" aria-hidden=\"true\">#</a> 一</h3>\\n<h3 id=\"想-4\"><a class=\"header-anchor\" href=\"#想-4\" aria-hidden=\"true\">#</a> 想</h3>\\n<h3 id=\"再-2\"><a class=\"header-anchor\" href=\"#再-2\" aria-hidden=\"true\">#</a> 再</h3>\\n<h3 id=\"看-2\"><a class=\"header-anchor\" href=\"#看-2\" aria-hidden=\"true\">#</a> 看</h3>\\n<h3 id=\"答-2\"><a class=\"header-anchor\" href=\"#答-2\" aria-hidden=\"true\">#</a> 答</h3>\\n<h3 id=\"案-2\"><a class=\"header-anchor\" href=\"#案-2\" aria-hidden=\"true\">#</a> 案</h3>\\n<h3 id=\"代码：\"><a class=\"header-anchor\" href=\"#代码：\" aria-hidden=\"true\">#</a> 代码：</h3>\\n<p><strong>深度优先</strong>:</p>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code><span class=\"token keyword\">var</span> <span class=\"token function-variable function\">rightSideView</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>root<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\\n  <span class=\"token keyword\">let</span> res <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 结果</span>\\n  <span class=\"token keyword\">let</span> start <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 树的深度 从0开始</span>\\n  <span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">,</span> start<span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\n  <span class=\"token keyword\">return</span> res<span class=\"token punctuation\">;</span>\\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\\n<span class=\"token keyword\">function</span> <span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">,</span> step<span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>step <span class=\"token operator\">===</span> res<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n      res<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 数组长度等于树的深度时 添加当前值 因为右侧先遍历 有右侧先添加右侧</span>\\n    <span class=\"token punctuation\">}</span>\\n    <span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">,</span> step <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\n    <span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">,</span> step <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\n  <span class=\"token punctuation\">}</span>\\n<span class=\"token punctuation\">}</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br><span class=\"line-number\">11</span><br><span class=\"line-number\">12</span><br><span class=\"line-number\">13</span><br><span class=\"line-number\">14</span><br><span class=\"line-number\">15</span><br><span class=\"line-number\">16</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<p><strong>广度优先</strong>:</p>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code><span class=\"token keyword\">var</span> <span class=\"token function-variable function\">rightSideView</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>root<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\\n  <span class=\"token keyword\">let</span> queue <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>root<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 队列 把树顶加入队列</span>\\n  <span class=\"token keyword\">let</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 用来存储每层最后个元素值</span>\\n  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>queue<span class=\"token punctuation\">.</span>length <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n    <span class=\"token keyword\">let</span> len <span class=\"token operator\">=</span> queue<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 当前层的广度</span>\\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>len<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n      <span class=\"token keyword\">let</span> node <span class=\"token operator\">=</span> queue<span class=\"token punctuation\">.</span><span class=\"token function\">shift</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 依次取出当前层队列的元素 从左到右</span>\\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>len <span class=\"token operator\">===</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> arr<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 当是 当前一层的最后一个元素时，把值加入arr</span>\\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">)</span> queue<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 先添加左侧的</span>\\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span> queue<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 最后添加右侧的 等到最后一个元素时即可添加右侧的值</span>\\n      len<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\\n    <span class=\"token punctuation\">}</span>\\n  <span class=\"token punctuation\">}</span>\\n  <span class=\"token keyword\">return</span> arr<span class=\"token punctuation\">;</span>\\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br><span class=\"line-number\">11</span><br><span class=\"line-number\">12</span><br><span class=\"line-number\">13</span><br><span class=\"line-number\">14</span><br><span class=\"line-number\">15</span><br><span class=\"line-number\">16</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<h3 id=\"鼓励我一下：\"><a class=\"header-anchor\" href=\"#鼓励我一下：\" aria-hidden=\"true\">#</a> 鼓励我一下：</h3>\\n<p>觉得还不错的话，给我的项目点个<a href=\"https://github.com/OBKoro1/Brush_algorithm\" target=\"_blank\" rel=\"noopener noreferrer\">star<OutboundLink/></a>吧\\n\\x3c!-- 特殊字符串：用于修改/删除markdown的结尾提示语-OBKoro1 --\\x3e</p>\\n<h3 id=\"点个star支持我一下\"><a class=\"header-anchor\" href=\"#点个star支持我一下\" aria-hidden=\"true\">#</a> 点个<a href=\"https://github.com/OBKoro1/Brush_algorithm\" target=\"_blank\" rel=\"noopener noreferrer\">Star<OutboundLink/></a>支持我一下~</h3>\\n\\x3c!-- \\'特殊字符串：用于删除编译后的issue组件-OBKoro1 --\\x3e\\n'},{key:\"v-8367fcd123807\",path:\"/algorithm/medium/19%E5%88%A0%E9%99%A4%E9%93%BE%E8%A1%A8%E7%9A%84%E5%80%92%E6%95%B0%E7%AC%ACN%E4%B8%AA%E8%8A%82%E7%82%B9.html\",lastUpdated:1593678455e3,title:\"19 删除链表的倒数第 N 个节点\",headers:[{level:2,title:\"19 删除链表的倒数第 N 个节点\",slug:\"_19-删除链表的倒数第-n-个节点\"},{level:3,title:\"题目链接\",slug:\"题目链接\"},{level:3,title:\"难度：中等\",slug:\"难度：中等\"},{level:3,title:\"思路分析：\",slug:\"思路分析：\"},{level:3,title:\"想\",slug:\"想\"},{level:3,title:\"一\",slug:\"一\"},{level:3,title:\"想\",slug:\"想-2\"},{level:3,title:\"再\",slug:\"再\"},{level:3,title:\"看\",slug:\"看\"},{level:3,title:\"答\",slug:\"答\"},{level:3,title:\"案\",slug:\"案\"},{level:3,title:\"想\",slug:\"想-3\"},{level:3,title:\"一\",slug:\"一-2\"},{level:3,title:\"想\",slug:\"想-4\"},{level:3,title:\"再\",slug:\"再-2\"},{level:3,title:\"看\",slug:\"看-2\"},{level:3,title:\"答\",slug:\"答-2\"},{level:3,title:\"案\",slug:\"案-2\"},{level:3,title:\"代码：\",slug:\"代码：\"},{level:3,title:\"鼓励我一下：\",slug:\"鼓励我一下：\"},{level:3,title:\"点个Star支持我一下~\",slug:\"点个star支持我一下\"}],excerpt:'<h2 id=\"_19-删除链表的倒数第-n-个节点\"><a class=\"header-anchor\" href=\"#_19-删除链表的倒数第-n-个节点\" aria-hidden=\"true\">#</a> 19 删除链表的倒数第 N 个节点</h2>\\n<h3 id=\"题目链接\"><a class=\"header-anchor\" href=\"#题目链接\" aria-hidden=\"true\">#</a> <a href=\"https://leetcode-cn.com/problems/remove-nth-node-from-end-of-list/\" target=\"_blank\" rel=\"noopener noreferrer\">题目链接<OutboundLink/></a></h3>\\n<h3 id=\"难度：中等\"><a class=\"header-anchor\" href=\"#难度：中等\" aria-hidden=\"true\">#</a> 难度：中等</h3>\\n<h3 id=\"思路分析：\"><a class=\"header-anchor\" href=\"#思路分析：\" aria-hidden=\"true\">#</a> 思路分析：</h3>\\n<p>快慢指针</p>\\n<p>数组</p>\\n<h3 id=\"想\"><a class=\"header-anchor\" href=\"#想\" aria-hidden=\"true\">#</a> 想</h3>\\n<h3 id=\"一\"><a class=\"header-anchor\" href=\"#一\" aria-hidden=\"true\">#</a> 一</h3>\\n<h3 id=\"想-2\"><a class=\"header-anchor\" href=\"#想-2\" aria-hidden=\"true\">#</a> 想</h3>\\n<h3 id=\"再\"><a class=\"header-anchor\" href=\"#再\" aria-hidden=\"true\">#</a> 再</h3>\\n<h3 id=\"看\"><a class=\"header-anchor\" href=\"#看\" aria-hidden=\"true\">#</a> 看</h3>\\n<h3 id=\"答\"><a class=\"header-anchor\" href=\"#答\" aria-hidden=\"true\">#</a> 答</h3>\\n<h3 id=\"案\"><a class=\"header-anchor\" href=\"#案\" aria-hidden=\"true\">#</a> 案</h3>\\n<h3 id=\"想-3\"><a class=\"header-anchor\" href=\"#想-3\" aria-hidden=\"true\">#</a> 想</h3>\\n<h3 id=\"一-2\"><a class=\"header-anchor\" href=\"#一-2\" aria-hidden=\"true\">#</a> 一</h3>\\n<h3 id=\"想-4\"><a class=\"header-anchor\" href=\"#想-4\" aria-hidden=\"true\">#</a> 想</h3>\\n<h3 id=\"再-2\"><a class=\"header-anchor\" href=\"#再-2\" aria-hidden=\"true\">#</a> 再</h3>\\n<h3 id=\"看-2\"><a class=\"header-anchor\" href=\"#看-2\" aria-hidden=\"true\">#</a> 看</h3>\\n<h3 id=\"答-2\"><a class=\"header-anchor\" href=\"#答-2\" aria-hidden=\"true\">#</a> 答</h3>\\n<h3 id=\"案-2\"><a class=\"header-anchor\" href=\"#案-2\" aria-hidden=\"true\">#</a> 案</h3>\\n<h3 id=\"代码：\"><a class=\"header-anchor\" href=\"#代码：\" aria-hidden=\"true\">#</a> 代码：</h3>\\n<p><strong>快慢指针</strong></p>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code><span class=\"token keyword\">var</span> <span class=\"token function-variable function\">removeNthFromEnd</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>head<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n  <span class=\"token keyword\">const</span> preHead <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ListNode</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\n  preHead<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> head<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 新增虚拟头节点 防止删除第一个节点</span>\\n  <span class=\"token keyword\">let</span> fast <span class=\"token operator\">=</span> preHead<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 快指针</span>\\n  <span class=\"token keyword\">let</span> slow <span class=\"token operator\">=</span> preHead<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 慢指针</span>\\n  <span class=\"token comment\">// 快指针先走N步</span>\\n  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>n<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n    fast <span class=\"token operator\">=</span> fast<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span>\\n  <span class=\"token punctuation\">}</span>\\n  <span class=\"token comment\">// 快慢一起前进 快指针先停下到结尾了 慢指针的下一个值就是要删除的节点</span>\\n  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>fast <span class=\"token operator\">&amp;&amp;</span> fast<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n    fast <span class=\"token operator\">=</span> fast<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span>\\n    slow <span class=\"token operator\">=</span> slow<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span>\\n  <span class=\"token punctuation\">}</span>\\n  <span class=\"token comment\">// 删除第n个节点</span>\\n  slow<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> slow<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span>\\n  <span class=\"token keyword\">return</span> preHead<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span>\\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br><span class=\"line-number\">11</span><br><span class=\"line-number\">12</span><br><span class=\"line-number\">13</span><br><span class=\"line-number\">14</span><br><span class=\"line-number\">15</span><br><span class=\"line-number\">16</span><br><span class=\"line-number\">17</span><br><span class=\"line-number\">18</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<p>数组: 将节点都添加到数组中 再删除对应的元素 最后按顺序转化成链表</p>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code><span class=\"token keyword\">var</span> <span class=\"token function-variable function\">removeNthFromEnd</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>head<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n  <span class=\"token keyword\">const</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\\n  <span class=\"token comment\">// 转化成数组</span>\\n  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>head<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n    arr<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>head<span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\n    head <span class=\"token operator\">=</span> head<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span>\\n  <span class=\"token punctuation\">}</span>\\n  <span class=\"token comment\">// 要删除节点</span>\\n  <span class=\"token keyword\">const</span> num <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> n<span class=\"token punctuation\">;</span>\\n  arr<span class=\"token punctuation\">.</span><span class=\"token function\">splice</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\n  <span class=\"token comment\">// 转化成节点</span>\\n  <span class=\"token keyword\">let</span> preHead <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ListNode</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 虚拟头节点用于定位</span>\\n  <span class=\"token keyword\">let</span> res <span class=\"token operator\">=</span> preHead<span class=\"token punctuation\">;</span>\\n  arr<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\\n    res<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ListNode</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 连接新节点</span>\\n    res <span class=\"token operator\">=</span> res<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 连接下一个节点</span>\\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\n  <span class=\"token keyword\">return</span> preHead<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span>\\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br><span class=\"line-number\">11</span><br><span class=\"line-number\">12</span><br><span class=\"line-number\">13</span><br><span class=\"line-number\">14</span><br><span class=\"line-number\">15</span><br><span class=\"line-number\">16</span><br><span class=\"line-number\">17</span><br><span class=\"line-number\">18</span><br><span class=\"line-number\">19</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<h3 id=\"鼓励我一下：\"><a class=\"header-anchor\" href=\"#鼓励我一下：\" aria-hidden=\"true\">#</a> 鼓励我一下：</h3>\\n<p>觉得还不错的话，给我的项目点个<a href=\"https://github.com/OBKoro1/Brush_algorithm\" target=\"_blank\" rel=\"noopener noreferrer\">star<OutboundLink/></a>吧\\n\\x3c!-- 特殊字符串：用于修改/删除markdown的结尾提示语-OBKoro1 --\\x3e</p>\\n<h3 id=\"点个star支持我一下\"><a class=\"header-anchor\" href=\"#点个star支持我一下\" aria-hidden=\"true\">#</a> 点个<a href=\"https://github.com/OBKoro1/Brush_algorithm\" target=\"_blank\" rel=\"noopener noreferrer\">Star<OutboundLink/></a>支持我一下~</h3>\\n\\x3c!-- \\'特殊字符串：用于删除编译后的issue组件-OBKoro1 --\\x3e\\n'},{key:\"v-2781c5265299a\",path:\"/algorithm/medium/200%E9%A2%98%E5%B2%9B%E5%B1%BF%E6%95%B0%E9%87%8F.html\",lastUpdated:1593678455e3,title:\"200 题岛屿数量\",headers:[{level:2,title:\"200 题岛屿数量\",slug:\"_200-题岛屿数量\"},{level:3,title:\"题目链接\",slug:\"题目链接\"},{level:3,title:\"难度：中等\",slug:\"难度：中等\"},{level:3,title:\"思路分析：\",slug:\"思路分析：\"},{level:3,title:\"想\",slug:\"想\"},{level:3,title:\"一\",slug:\"一\"},{level:3,title:\"想\",slug:\"想-2\"},{level:3,title:\"再\",slug:\"再\"},{level:3,title:\"看\",slug:\"看\"},{level:3,title:\"答\",slug:\"答\"},{level:3,title:\"案\",slug:\"案\"},{level:3,title:\"想\",slug:\"想-3\"},{level:3,title:\"一\",slug:\"一-2\"},{level:3,title:\"想\",slug:\"想-4\"},{level:3,title:\"再\",slug:\"再-2\"},{level:3,title:\"看\",slug:\"看-2\"},{level:3,title:\"答\",slug:\"答-2\"},{level:3,title:\"案\",slug:\"案-2\"},{level:3,title:\"代码：\",slug:\"代码：\"},{level:3,title:\"鼓励我一下：\",slug:\"鼓励我一下：\"},{level:3,title:\"点个Star支持我一下~\",slug:\"点个star支持我一下\"}],excerpt:'<h2 id=\"_200-题岛屿数量\"><a class=\"header-anchor\" href=\"#_200-题岛屿数量\" aria-hidden=\"true\">#</a> 200 题岛屿数量</h2>\\n<h3 id=\"题目链接\"><a class=\"header-anchor\" href=\"#题目链接\" aria-hidden=\"true\">#</a> <a href=\"https://leetcode-cn.com/problems/number-of-islands/\" target=\"_blank\" rel=\"noopener noreferrer\">题目链接<OutboundLink/></a></h3>\\n<h3 id=\"难度：中等\"><a class=\"header-anchor\" href=\"#难度：中等\" aria-hidden=\"true\">#</a> 难度：中等</h3>\\n<h3 id=\"思路分析：\"><a class=\"header-anchor\" href=\"#思路分析：\" aria-hidden=\"true\">#</a> 思路分析：</h3>\\n<p>递归</p>\\n<h3 id=\"想\"><a class=\"header-anchor\" href=\"#想\" aria-hidden=\"true\">#</a> 想</h3>\\n<h3 id=\"一\"><a class=\"header-anchor\" href=\"#一\" aria-hidden=\"true\">#</a> 一</h3>\\n<h3 id=\"想-2\"><a class=\"header-anchor\" href=\"#想-2\" aria-hidden=\"true\">#</a> 想</h3>\\n<h3 id=\"再\"><a class=\"header-anchor\" href=\"#再\" aria-hidden=\"true\">#</a> 再</h3>\\n<h3 id=\"看\"><a class=\"header-anchor\" href=\"#看\" aria-hidden=\"true\">#</a> 看</h3>\\n<h3 id=\"答\"><a class=\"header-anchor\" href=\"#答\" aria-hidden=\"true\">#</a> 答</h3>\\n<h3 id=\"案\"><a class=\"header-anchor\" href=\"#案\" aria-hidden=\"true\">#</a> 案</h3>\\n<h3 id=\"想-3\"><a class=\"header-anchor\" href=\"#想-3\" aria-hidden=\"true\">#</a> 想</h3>\\n<h3 id=\"一-2\"><a class=\"header-anchor\" href=\"#一-2\" aria-hidden=\"true\">#</a> 一</h3>\\n<h3 id=\"想-4\"><a class=\"header-anchor\" href=\"#想-4\" aria-hidden=\"true\">#</a> 想</h3>\\n<h3 id=\"再-2\"><a class=\"header-anchor\" href=\"#再-2\" aria-hidden=\"true\">#</a> 再</h3>\\n<h3 id=\"看-2\"><a class=\"header-anchor\" href=\"#看-2\" aria-hidden=\"true\">#</a> 看</h3>\\n<h3 id=\"答-2\"><a class=\"header-anchor\" href=\"#答-2\" aria-hidden=\"true\">#</a> 答</h3>\\n<h3 id=\"案-2\"><a class=\"header-anchor\" href=\"#案-2\" aria-hidden=\"true\">#</a> 案</h3>\\n<h3 id=\"代码：\"><a class=\"header-anchor\" href=\"#代码：\" aria-hidden=\"true\">#</a> 代码：</h3>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code><span class=\"token comment\">// 深度优先</span>\\n<span class=\"token keyword\">var</span> <span class=\"token function-variable function\">numIslands</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>grid<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n  <span class=\"token keyword\">let</span> num <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>grid <span class=\"token operator\">&amp;&amp;</span> grid<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n    <span class=\"token keyword\">const</span> maxI <span class=\"token operator\">=</span> grid<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\\n      maxJ <span class=\"token operator\">=</span> grid<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\\n    <span class=\"token comment\">// 递归将连接的岛屿全都转为海水 连成一片</span>\\n    <span class=\"token keyword\">function</span> <span class=\"token function\">overturn</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> j<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> j <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> i <span class=\"token operator\">></span> maxI <span class=\"token operator\">||</span> j <span class=\"token operator\">></span> maxJ<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>grid<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">===</span> <span class=\"token string\">\"1\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n        grid<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"0\"</span><span class=\"token punctuation\">;</span>\\n        <span class=\"token function\">overturn</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> j <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\n        <span class=\"token function\">overturn</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\n        <span class=\"token function\">overturn</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\n        <span class=\"token function\">overturn</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> j <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\n      <span class=\"token punctuation\">}</span>\\n    <span class=\"token punctuation\">}</span>\\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> grid<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n      <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> grid<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>grid<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">===</span> <span class=\"token string\">\"1\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n          <span class=\"token comment\">// 每次碰到1就说明有新的岛屿 与之相连的岛屿都已经递归转化成海水了</span>\\n          num<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\\n          <span class=\"token function\">overturn</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 将连接的岛屿全都转为海水 连成一片</span>\\n        <span class=\"token punctuation\">}</span>\\n      <span class=\"token punctuation\">}</span>\\n    <span class=\"token punctuation\">}</span>\\n  <span class=\"token punctuation\">}</span>\\n  <span class=\"token keyword\">return</span> num<span class=\"token punctuation\">;</span>\\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br><span class=\"line-number\">11</span><br><span class=\"line-number\">12</span><br><span class=\"line-number\">13</span><br><span class=\"line-number\">14</span><br><span class=\"line-number\">15</span><br><span class=\"line-number\">16</span><br><span class=\"line-number\">17</span><br><span class=\"line-number\">18</span><br><span class=\"line-number\">19</span><br><span class=\"line-number\">20</span><br><span class=\"line-number\">21</span><br><span class=\"line-number\">22</span><br><span class=\"line-number\">23</span><br><span class=\"line-number\">24</span><br><span class=\"line-number\">25</span><br><span class=\"line-number\">26</span><br><span class=\"line-number\">27</span><br><span class=\"line-number\">28</span><br><span class=\"line-number\">29</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<h3 id=\"鼓励我一下：\"><a class=\"header-anchor\" href=\"#鼓励我一下：\" aria-hidden=\"true\">#</a> 鼓励我一下：</h3>\\n<p>觉得还不错的话，给我的项目点个<a href=\"https://github.com/OBKoro1/Brush_algorithm\" target=\"_blank\" rel=\"noopener noreferrer\">star<OutboundLink/></a>吧\\n\\x3c!-- 特殊字符串：用于修改/删除markdown的结尾提示语-OBKoro1 --\\x3e</p>\\n<h3 id=\"点个star支持我一下\"><a class=\"header-anchor\" href=\"#点个star支持我一下\" aria-hidden=\"true\">#</a> 点个<a href=\"https://github.com/OBKoro1/Brush_algorithm\" target=\"_blank\" rel=\"noopener noreferrer\">Star<OutboundLink/></a>支持我一下~</h3>\\n\\x3c!-- \\'特殊字符串：用于删除编译后的issue组件-OBKoro1 --\\x3e\\n'},{key:\"v-f223fcad8b2e4\",path:\"/algorithm/medium/22%E6%8B%AC%E5%8F%B7%E7%94%9F%E6%88%90.html\",lastUpdated:1593678455e3,title:\"22 括号生成\",headers:[{level:2,title:\"22 括号生成\",slug:\"_22-括号生成\"},{level:3,title:\"题目链接\",slug:\"题目链接\"},{level:3,title:\"难度：中等\",slug:\"难度：中等\"},{level:3,title:\"思路分析：\",slug:\"思路分析：\"},{level:3,title:\"想\",slug:\"想\"},{level:3,title:\"一\",slug:\"一\"},{level:3,title:\"想\",slug:\"想-2\"},{level:3,title:\"再\",slug:\"再\"},{level:3,title:\"看\",slug:\"看\"},{level:3,title:\"答\",slug:\"答\"},{level:3,title:\"案\",slug:\"案\"},{level:3,title:\"想\",slug:\"想-3\"},{level:3,title:\"一\",slug:\"一-2\"},{level:3,title:\"想\",slug:\"想-4\"},{level:3,title:\"再\",slug:\"再-2\"},{level:3,title:\"看\",slug:\"看-2\"},{level:3,title:\"答\",slug:\"答-2\"},{level:3,title:\"案\",slug:\"案-2\"},{level:3,title:\"代码：\",slug:\"代码：\"},{level:3,title:\"鼓励我一下：\",slug:\"鼓励我一下：\"},{level:3,title:\"点个Star支持我一下~\",slug:\"点个star支持我一下\"}],excerpt:'<h2 id=\"_22-括号生成\"><a class=\"header-anchor\" href=\"#_22-括号生成\" aria-hidden=\"true\">#</a> 22 括号生成</h2>\\n<h3 id=\"题目链接\"><a class=\"header-anchor\" href=\"#题目链接\" aria-hidden=\"true\">#</a> <a href=\"https://leetcode-cn.com/problems/generate-parentheses/\" target=\"_blank\" rel=\"noopener noreferrer\">题目链接<OutboundLink/></a></h3>\\n<h3 id=\"难度：中等\"><a class=\"header-anchor\" href=\"#难度：中等\" aria-hidden=\"true\">#</a> 难度：中等</h3>\\n<h3 id=\"思路分析：\"><a class=\"header-anchor\" href=\"#思路分析：\" aria-hidden=\"true\">#</a> 思路分析：</h3>\\n<p>树思想 回溯</p>\\n<h3 id=\"想\"><a class=\"header-anchor\" href=\"#想\" aria-hidden=\"true\">#</a> 想</h3>\\n<h3 id=\"一\"><a class=\"header-anchor\" href=\"#一\" aria-hidden=\"true\">#</a> 一</h3>\\n<h3 id=\"想-2\"><a class=\"header-anchor\" href=\"#想-2\" aria-hidden=\"true\">#</a> 想</h3>\\n<h3 id=\"再\"><a class=\"header-anchor\" href=\"#再\" aria-hidden=\"true\">#</a> 再</h3>\\n<h3 id=\"看\"><a class=\"header-anchor\" href=\"#看\" aria-hidden=\"true\">#</a> 看</h3>\\n<h3 id=\"答\"><a class=\"header-anchor\" href=\"#答\" aria-hidden=\"true\">#</a> 答</h3>\\n<h3 id=\"案\"><a class=\"header-anchor\" href=\"#案\" aria-hidden=\"true\">#</a> 案</h3>\\n<h3 id=\"想-3\"><a class=\"header-anchor\" href=\"#想-3\" aria-hidden=\"true\">#</a> 想</h3>\\n<h3 id=\"一-2\"><a class=\"header-anchor\" href=\"#一-2\" aria-hidden=\"true\">#</a> 一</h3>\\n<h3 id=\"想-4\"><a class=\"header-anchor\" href=\"#想-4\" aria-hidden=\"true\">#</a> 想</h3>\\n<h3 id=\"再-2\"><a class=\"header-anchor\" href=\"#再-2\" aria-hidden=\"true\">#</a> 再</h3>\\n<h3 id=\"看-2\"><a class=\"header-anchor\" href=\"#看-2\" aria-hidden=\"true\">#</a> 看</h3>\\n<h3 id=\"答-2\"><a class=\"header-anchor\" href=\"#答-2\" aria-hidden=\"true\">#</a> 答</h3>\\n<h3 id=\"案-2\"><a class=\"header-anchor\" href=\"#案-2\" aria-hidden=\"true\">#</a> 案</h3>\\n<h3 id=\"代码：\"><a class=\"header-anchor\" href=\"#代码：\" aria-hidden=\"true\">#</a> 代码：</h3>\\n<p>树思想 回溯 深度优先遍历</p>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code><span class=\"token keyword\">var</span> <span class=\"token function-variable function\">generateParenthesis2</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n  <span class=\"token keyword\">let</span> left <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>right <span class=\"token operator\">=</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 左右分支的数量</span>\\n  <span class=\"token keyword\">let</span> res <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n    <span class=\"token keyword\">return</span> res<span class=\"token punctuation\">;</span>\\n  <span class=\"token punctuation\">}</span>\\n  <span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span> left<span class=\"token punctuation\">,</span> right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\n  <span class=\"token keyword\">function</span> <span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span>preStr<span class=\"token punctuation\">,</span> left<span class=\"token punctuation\">,</span> right<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n    <span class=\"token comment\">// 当没有括号时 即回溯终止</span>\\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>left <span class=\"token operator\">===</span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> right <span class=\"token operator\">===</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n      res<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>preStr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\n      <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\\n    <span class=\"token punctuation\">}</span>\\n    <span class=\"token comment\">// 当成一颗深度为2n的树来做 每个括号在这棵树内都会都用到</span>\\n    <span class=\"token comment\">// 剪枝: 左括号可以使用的个数严格大于右括号可以使用的个数时 左侧也会生出分支准备生出右侧的括号</span>\\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>left <span class=\"token operator\">></span> right<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n      <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\\n    <span class=\"token punctuation\">}</span>\\n    <span class=\"token comment\">// 一次添加左侧一次添加右侧 回溯 凑成括号</span>\\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>left <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n      <span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>preStr<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">(`</span></span><span class=\"token punctuation\">,</span> left <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\n    <span class=\"token punctuation\">}</span>\\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>right <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n      <span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>preStr<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">)`</span></span><span class=\"token punctuation\">,</span> left<span class=\"token punctuation\">,</span> right <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\n    <span class=\"token punctuation\">}</span>\\n  <span class=\"token punctuation\">}</span>\\n  <span class=\"token keyword\">return</span> res<span class=\"token punctuation\">;</span>\\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br><span class=\"line-number\">11</span><br><span class=\"line-number\">12</span><br><span class=\"line-number\">13</span><br><span class=\"line-number\">14</span><br><span class=\"line-number\">15</span><br><span class=\"line-number\">16</span><br><span class=\"line-number\">17</span><br><span class=\"line-number\">18</span><br><span class=\"line-number\">19</span><br><span class=\"line-number\">20</span><br><span class=\"line-number\">21</span><br><span class=\"line-number\">22</span><br><span class=\"line-number\">23</span><br><span class=\"line-number\">24</span><br><span class=\"line-number\">25</span><br><span class=\"line-number\">26</span><br><span class=\"line-number\">27</span><br><span class=\"line-number\">28</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<p>回溯加法方式 深度优先遍历</p>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code><span class=\"token keyword\">var</span> <span class=\"token function-variable function\">generateParenthesis3</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n  <span class=\"token keyword\">let</span> res <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\\n  <span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\n  <span class=\"token keyword\">function</span> <span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span>preStr<span class=\"token punctuation\">,</span> left<span class=\"token punctuation\">,</span> right<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n    <span class=\"token comment\">// 括号数量用完了 取消回溯</span>\\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>left <span class=\"token operator\">===</span> n <span class=\"token operator\">&amp;&amp;</span> right <span class=\"token operator\">===</span> n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n      res<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>preStr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\n      <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\\n    <span class=\"token punctuation\">}</span>\\n    <span class=\"token comment\">// 当左边的数量小于右边时 左侧也会生出分支准备生出右侧的括号</span>\\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>left <span class=\"token operator\">&lt;</span> right<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n      <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\\n    <span class=\"token punctuation\">}</span>\\n    <span class=\"token comment\">// 一次添加左侧一次添加右侧 回溯 凑成括号</span>\\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>left <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n      <span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>preStr<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">(`</span></span><span class=\"token punctuation\">,</span> left <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\n    <span class=\"token punctuation\">}</span>\\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>right <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n      <span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>preStr<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">)`</span></span><span class=\"token punctuation\">,</span> left<span class=\"token punctuation\">,</span> right <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\n    <span class=\"token punctuation\">}</span>\\n  <span class=\"token punctuation\">}</span>\\n  <span class=\"token keyword\">return</span> res<span class=\"token punctuation\">;</span>\\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br><span class=\"line-number\">11</span><br><span class=\"line-number\">12</span><br><span class=\"line-number\">13</span><br><span class=\"line-number\">14</span><br><span class=\"line-number\">15</span><br><span class=\"line-number\">16</span><br><span class=\"line-number\">17</span><br><span class=\"line-number\">18</span><br><span class=\"line-number\">19</span><br><span class=\"line-number\">20</span><br><span class=\"line-number\">21</span><br><span class=\"line-number\">22</span><br><span class=\"line-number\">23</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<h3 id=\"鼓励我一下：\"><a class=\"header-anchor\" href=\"#鼓励我一下：\" aria-hidden=\"true\">#</a> 鼓励我一下：</h3>\\n<p>觉得还不错的话，给我的项目点个<a href=\"https://github.com/OBKoro1/Brush_algorithm\" target=\"_blank\" rel=\"noopener noreferrer\">star<OutboundLink/></a>吧\\n\\x3c!-- 特殊字符串：用于修改/删除markdown的结尾提示语-OBKoro1 --\\x3e</p>\\n<h3 id=\"点个star支持我一下\"><a class=\"header-anchor\" href=\"#点个star支持我一下\" aria-hidden=\"true\">#</a> 点个<a href=\"https://github.com/OBKoro1/Brush_algorithm\" target=\"_blank\" rel=\"noopener noreferrer\">Star<OutboundLink/></a>支持我一下~</h3>\\n\\x3c!-- \\'特殊字符串：用于删除编译后的issue组件-OBKoro1 --\\x3e\\n'},{key:\"v-98a06e9a047bf\",path:\"/algorithm/medium/322%E9%9B%B6%E9%92%B1%E5%85%91%E6%8D%A2.html\",lastUpdated:1593678455e3,title:\"322 零钱兑换\",headers:[{level:2,title:\"322 零钱兑换\",slug:\"_322-零钱兑换\"},{level:3,title:\"题目链接\",slug:\"题目链接\"},{level:3,title:\"难度：中等\",slug:\"难度：中等\"},{level:3,title:\"思路分析：\",slug:\"思路分析：\"},{level:3,title:\"想\",slug:\"想\"},{level:3,title:\"一\",slug:\"一\"},{level:3,title:\"想\",slug:\"想-2\"},{level:3,title:\"再\",slug:\"再\"},{level:3,title:\"看\",slug:\"看\"},{level:3,title:\"答\",slug:\"答\"},{level:3,title:\"案\",slug:\"案\"},{level:3,title:\"想\",slug:\"想-3\"},{level:3,title:\"一\",slug:\"一-2\"},{level:3,title:\"想\",slug:\"想-4\"},{level:3,title:\"再\",slug:\"再-2\"},{level:3,title:\"看\",slug:\"看-2\"},{level:3,title:\"答\",slug:\"答-2\"},{level:3,title:\"案\",slug:\"案-2\"},{level:3,title:\"代码：\",slug:\"代码：\"},{level:3,title:\"鼓励我一下：\",slug:\"鼓励我一下：\"},{level:3,title:\"点个Star支持我一下~\",slug:\"点个star支持我一下\"}],excerpt:'<h2 id=\"_322-零钱兑换\"><a class=\"header-anchor\" href=\"#_322-零钱兑换\" aria-hidden=\"true\">#</a> 322 零钱兑换</h2>\\n<h3 id=\"题目链接\"><a class=\"header-anchor\" href=\"#题目链接\" aria-hidden=\"true\">#</a> <a href=\"https://leetcode-cn.com/problems/coin-change/\" target=\"_blank\" rel=\"noopener noreferrer\">题目链接<OutboundLink/></a></h3>\\n<h3 id=\"难度：中等\"><a class=\"header-anchor\" href=\"#难度：中等\" aria-hidden=\"true\">#</a> 难度：中等</h3>\\n<h3 id=\"思路分析：\"><a class=\"header-anchor\" href=\"#思路分析：\" aria-hidden=\"true\">#</a> 思路分析：</h3>\\n<p>动态规划</p>\\n<h3 id=\"想\"><a class=\"header-anchor\" href=\"#想\" aria-hidden=\"true\">#</a> 想</h3>\\n<h3 id=\"一\"><a class=\"header-anchor\" href=\"#一\" aria-hidden=\"true\">#</a> 一</h3>\\n<h3 id=\"想-2\"><a class=\"header-anchor\" href=\"#想-2\" aria-hidden=\"true\">#</a> 想</h3>\\n<h3 id=\"再\"><a class=\"header-anchor\" href=\"#再\" aria-hidden=\"true\">#</a> 再</h3>\\n<h3 id=\"看\"><a class=\"header-anchor\" href=\"#看\" aria-hidden=\"true\">#</a> 看</h3>\\n<h3 id=\"答\"><a class=\"header-anchor\" href=\"#答\" aria-hidden=\"true\">#</a> 答</h3>\\n<h3 id=\"案\"><a class=\"header-anchor\" href=\"#案\" aria-hidden=\"true\">#</a> 案</h3>\\n<h3 id=\"想-3\"><a class=\"header-anchor\" href=\"#想-3\" aria-hidden=\"true\">#</a> 想</h3>\\n<h3 id=\"一-2\"><a class=\"header-anchor\" href=\"#一-2\" aria-hidden=\"true\">#</a> 一</h3>\\n<h3 id=\"想-4\"><a class=\"header-anchor\" href=\"#想-4\" aria-hidden=\"true\">#</a> 想</h3>\\n<h3 id=\"再-2\"><a class=\"header-anchor\" href=\"#再-2\" aria-hidden=\"true\">#</a> 再</h3>\\n<h3 id=\"看-2\"><a class=\"header-anchor\" href=\"#看-2\" aria-hidden=\"true\">#</a> 看</h3>\\n<h3 id=\"答-2\"><a class=\"header-anchor\" href=\"#答-2\" aria-hidden=\"true\">#</a> 答</h3>\\n<h3 id=\"案-2\"><a class=\"header-anchor\" href=\"#案-2\" aria-hidden=\"true\">#</a> 案</h3>\\n<h3 id=\"代码：\"><a class=\"header-anchor\" href=\"#代码：\" aria-hidden=\"true\">#</a> 代码：</h3>\\n<p>自底而上动态规划 从头开始找最优解</p>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code><span class=\"token keyword\">var</span> <span class=\"token function-variable function\">coinChange</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>coins<span class=\"token punctuation\">,</span> amount<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n  <span class=\"token keyword\">let</span> dp <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Array</span><span class=\"token punctuation\">(</span>amount <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">fill</span><span class=\"token punctuation\">(</span><span class=\"token number\">Infinity</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 初始无限大 再比较的时候 会使用零钱次数</span>\\n  dp<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\\n  <span class=\"token comment\">// 所有零钱种类</span>\\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> coin <span class=\"token keyword\">of</span> coins<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n    <span class=\"token comment\">// 总金额</span>\\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> amount<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">-</span> coin <span class=\"token operator\">>=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n        <span class=\"token comment\">// 总金额大于零钱</span>\\n        <span class=\"token comment\">// dp[i - coin] + 1 当前零钱需要的次数</span>\\n        <span class=\"token comment\">// dp[i] 其他零钱种类的最少次数</span>\\n        <span class=\"token comment\">// 如果前面的找不到最优解 会变为Infinity</span>\\n        dp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">min</span><span class=\"token punctuation\">(</span>dp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> dp<span class=\"token punctuation\">[</span>i <span class=\"token operator\">-</span> coin<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\n      <span class=\"token punctuation\">}</span>\\n    <span class=\"token punctuation\">}</span>\\n  <span class=\"token punctuation\">}</span>\\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"res\"</span><span class=\"token punctuation\">,</span> dp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\n  <span class=\"token comment\">// 如果没找到 返回-1</span>\\n  <span class=\"token keyword\">return</span> dp<span class=\"token punctuation\">[</span>amount<span class=\"token punctuation\">]</span> <span class=\"token operator\">===</span> <span class=\"token number\">Infinity</span> <span class=\"token operator\">?</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span> <span class=\"token punctuation\">:</span> dp<span class=\"token punctuation\">[</span>amount<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br><span class=\"line-number\">11</span><br><span class=\"line-number\">12</span><br><span class=\"line-number\">13</span><br><span class=\"line-number\">14</span><br><span class=\"line-number\">15</span><br><span class=\"line-number\">16</span><br><span class=\"line-number\">17</span><br><span class=\"line-number\">18</span><br><span class=\"line-number\">19</span><br><span class=\"line-number\">20</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<h3 id=\"鼓励我一下：\"><a class=\"header-anchor\" href=\"#鼓励我一下：\" aria-hidden=\"true\">#</a> 鼓励我一下：</h3>\\n<p>觉得还不错的话，给我的项目点个<a href=\"https://github.com/OBKoro1/Brush_algorithm\" target=\"_blank\" rel=\"noopener noreferrer\">star<OutboundLink/></a>吧\\n\\x3c!-- 特殊字符串：用于修改/删除markdown的结尾提示语-OBKoro1 --\\x3e</p>\\n<h3 id=\"点个star支持我一下\"><a class=\"header-anchor\" href=\"#点个star支持我一下\" aria-hidden=\"true\">#</a> 点个<a href=\"https://github.com/OBKoro1/Brush_algorithm\" target=\"_blank\" rel=\"noopener noreferrer\">Star<OutboundLink/></a>支持我一下~</h3>\\n\\x3c!-- \\'特殊字符串：用于删除编译后的issue组件-OBKoro1 --\\x3e\\n'},{key:\"v-4bacd4425ee62\",path:\"/algorithm/medium/33%E6%90%9C%E7%B4%A2%E6%97%8B%E8%BD%AC%E6%8E%92%E5%BA%8F%E6%95%B0%E7%BB%84.html\",lastUpdated:1593678455e3,title:\"33 搜索旋转排序数组\",headers:[{level:2,title:\"33 搜索旋转排序数组\",slug:\"_33-搜索旋转排序数组\"},{level:3,title:\"题目链接\",slug:\"题目链接\"},{level:3,title:\"难度：中等\",slug:\"难度：中等\"},{level:3,title:\"思路分析：\",slug:\"思路分析：\"},{level:3,title:\"想\",slug:\"想\"},{level:3,title:\"一\",slug:\"一\"},{level:3,title:\"想\",slug:\"想-2\"},{level:3,title:\"再\",slug:\"再\"},{level:3,title:\"看\",slug:\"看\"},{level:3,title:\"答\",slug:\"答\"},{level:3,title:\"案\",slug:\"案\"},{level:3,title:\"想\",slug:\"想-3\"},{level:3,title:\"一\",slug:\"一-2\"},{level:3,title:\"想\",slug:\"想-4\"},{level:3,title:\"再\",slug:\"再-2\"},{level:3,title:\"看\",slug:\"看-2\"},{level:3,title:\"答\",slug:\"答-2\"},{level:3,title:\"案\",slug:\"案-2\"},{level:3,title:\"代码：\",slug:\"代码：\"},{level:3,title:\"鼓励我一下：\",slug:\"鼓励我一下：\"},{level:3,title:\"点个Star支持我一下~\",slug:\"点个star支持我一下\"}],excerpt:'<h2 id=\"_33-搜索旋转排序数组\"><a class=\"header-anchor\" href=\"#_33-搜索旋转排序数组\" aria-hidden=\"true\">#</a> 33 搜索旋转排序数组</h2>\\n<h3 id=\"题目链接\"><a class=\"header-anchor\" href=\"#题目链接\" aria-hidden=\"true\">#</a> <a href=\"https://leetcode-cn.com/problems/search-in-rotated-sorted-array/\" target=\"_blank\" rel=\"noopener noreferrer\">题目链接<OutboundLink/></a></h3>\\n<h3 id=\"难度：中等\"><a class=\"header-anchor\" href=\"#难度：中等\" aria-hidden=\"true\">#</a> 难度：中等</h3>\\n<h3 id=\"思路分析：\"><a class=\"header-anchor\" href=\"#思路分析：\" aria-hidden=\"true\">#</a> 思路分析：</h3>\\n<p>二分查找</p>\\n<h3 id=\"想\"><a class=\"header-anchor\" href=\"#想\" aria-hidden=\"true\">#</a> 想</h3>\\n<h3 id=\"一\"><a class=\"header-anchor\" href=\"#一\" aria-hidden=\"true\">#</a> 一</h3>\\n<h3 id=\"想-2\"><a class=\"header-anchor\" href=\"#想-2\" aria-hidden=\"true\">#</a> 想</h3>\\n<h3 id=\"再\"><a class=\"header-anchor\" href=\"#再\" aria-hidden=\"true\">#</a> 再</h3>\\n<h3 id=\"看\"><a class=\"header-anchor\" href=\"#看\" aria-hidden=\"true\">#</a> 看</h3>\\n<h3 id=\"答\"><a class=\"header-anchor\" href=\"#答\" aria-hidden=\"true\">#</a> 答</h3>\\n<h3 id=\"案\"><a class=\"header-anchor\" href=\"#案\" aria-hidden=\"true\">#</a> 案</h3>\\n<h3 id=\"想-3\"><a class=\"header-anchor\" href=\"#想-3\" aria-hidden=\"true\">#</a> 想</h3>\\n<h3 id=\"一-2\"><a class=\"header-anchor\" href=\"#一-2\" aria-hidden=\"true\">#</a> 一</h3>\\n<h3 id=\"想-4\"><a class=\"header-anchor\" href=\"#想-4\" aria-hidden=\"true\">#</a> 想</h3>\\n<h3 id=\"再-2\"><a class=\"header-anchor\" href=\"#再-2\" aria-hidden=\"true\">#</a> 再</h3>\\n<h3 id=\"看-2\"><a class=\"header-anchor\" href=\"#看-2\" aria-hidden=\"true\">#</a> 看</h3>\\n<h3 id=\"答-2\"><a class=\"header-anchor\" href=\"#答-2\" aria-hidden=\"true\">#</a> 答</h3>\\n<h3 id=\"案-2\"><a class=\"header-anchor\" href=\"#案-2\" aria-hidden=\"true\">#</a> 案</h3>\\n<h3 id=\"代码：\"><a class=\"header-anchor\" href=\"#代码：\" aria-hidden=\"true\">#</a> 代码：</h3>\\n<p><strong>二分查找</strong>:</p>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code><span class=\"token comment\">/**\\n * @description\\n * TODO: 利用二分查找方式\\n * 1.利用将数组从中间分开\\n * 此时肯定存在前半部分或是后半部分是有序的（重要）\\n * 2.对有序部分执行二分查找\\n * 3.如果目标值不可能存在于有序部分\\n * 4.则将目标查找数组选择在无序部分\\n * 5.继续进行1进行判断\\n * @param {number[]} nums\\n * @param {number} target\\n * @return {number}\\n */</span>\\n<span class=\"token keyword\">var</span> <span class=\"token function-variable function\">search</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">,</span> target<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>nums <span class=\"token operator\">||</span> nums<span class=\"token punctuation\">.</span>length <span class=\"token operator\">===</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\\n  <span class=\"token keyword\">let</span> start <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\\n  <span class=\"token keyword\">let</span> end <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\\n  <span class=\"token keyword\">let</span> mid<span class=\"token punctuation\">;</span>\\n  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>start <span class=\"token operator\">&lt;=</span> end<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n    mid <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">ceil</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>start <span class=\"token operator\">+</span> end<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\n    <span class=\"token comment\">// 首尾中全部验证</span>\\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>mid<span class=\"token punctuation\">]</span> <span class=\"token operator\">===</span> target<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> mid<span class=\"token punctuation\">;</span>\\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>start<span class=\"token punctuation\">]</span> <span class=\"token operator\">===</span> target<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> start<span class=\"token punctuation\">;</span>\\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>end<span class=\"token punctuation\">]</span> <span class=\"token operator\">===</span> target<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> end<span class=\"token punctuation\">;</span>\\n    <span class=\"token comment\">// 说明前半部分有序</span>\\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>start<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> nums<span class=\"token punctuation\">[</span>mid<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n      <span class=\"token comment\">// 说明目标值存在于有序部分，将末尾设置为mid</span>\\n      <span class=\"token comment\">// 判断目标值是否在前半部分</span>\\n      <span class=\"token comment\">// 更新索引 继续执行二分查找</span>\\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>start<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> target <span class=\"token operator\">&amp;&amp;</span> target <span class=\"token operator\">&lt;</span> nums<span class=\"token punctuation\">[</span>mid<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n        end <span class=\"token operator\">=</span> mid <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\\n      <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\\n        <span class=\"token comment\">// 说明目标值存在于后半段</span>\\n        start <span class=\"token operator\">=</span> mid <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\\n      <span class=\"token punctuation\">}</span>\\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\\n      <span class=\"token comment\">// 说明后半部分有序</span>\\n      <span class=\"token comment\">// 判断目标值是否在后半部分</span>\\n      <span class=\"token comment\">// 更新索引 继续执行二分查找</span>\\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>mid<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> target <span class=\"token operator\">&amp;&amp;</span> target <span class=\"token operator\">&lt;</span> nums<span class=\"token punctuation\">[</span>end<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n        start <span class=\"token operator\">=</span> mid <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\\n      <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\\n        end <span class=\"token operator\">=</span> mid <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\\n      <span class=\"token punctuation\">}</span>\\n    <span class=\"token punctuation\">}</span>\\n  <span class=\"token punctuation\">}</span>\\n  <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br><span class=\"line-number\">11</span><br><span class=\"line-number\">12</span><br><span class=\"line-number\">13</span><br><span class=\"line-number\">14</span><br><span class=\"line-number\">15</span><br><span class=\"line-number\">16</span><br><span class=\"line-number\">17</span><br><span class=\"line-number\">18</span><br><span class=\"line-number\">19</span><br><span class=\"line-number\">20</span><br><span class=\"line-number\">21</span><br><span class=\"line-number\">22</span><br><span class=\"line-number\">23</span><br><span class=\"line-number\">24</span><br><span class=\"line-number\">25</span><br><span class=\"line-number\">26</span><br><span class=\"line-number\">27</span><br><span class=\"line-number\">28</span><br><span class=\"line-number\">29</span><br><span class=\"line-number\">30</span><br><span class=\"line-number\">31</span><br><span class=\"line-number\">32</span><br><span class=\"line-number\">33</span><br><span class=\"line-number\">34</span><br><span class=\"line-number\">35</span><br><span class=\"line-number\">36</span><br><span class=\"line-number\">37</span><br><span class=\"line-number\">38</span><br><span class=\"line-number\">39</span><br><span class=\"line-number\">40</span><br><span class=\"line-number\">41</span><br><span class=\"line-number\">42</span><br><span class=\"line-number\">43</span><br><span class=\"line-number\">44</span><br><span class=\"line-number\">45</span><br><span class=\"line-number\">46</span><br><span class=\"line-number\">47</span><br><span class=\"line-number\">48</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<h3 id=\"鼓励我一下：\"><a class=\"header-anchor\" href=\"#鼓励我一下：\" aria-hidden=\"true\">#</a> 鼓励我一下：</h3>\\n<p>觉得还不错的话，给我的项目点个<a href=\"https://github.com/OBKoro1/Brush_algorithm\" target=\"_blank\" rel=\"noopener noreferrer\">star<OutboundLink/></a>吧\\n\\x3c!-- 特殊字符串：用于修改/删除markdown的结尾提示语-OBKoro1 --\\x3e</p>\\n<h3 id=\"点个star支持我一下\"><a class=\"header-anchor\" href=\"#点个star支持我一下\" aria-hidden=\"true\">#</a> 点个<a href=\"https://github.com/OBKoro1/Brush_algorithm\" target=\"_blank\" rel=\"noopener noreferrer\">Star<OutboundLink/></a>支持我一下~</h3>\\n\\x3c!-- \\'特殊字符串：用于删除编译后的issue组件-OBKoro1 --\\x3e\\n'},{key:\"v-dd6f941cc68ea\",path:\"/algorithm/medium/351%E5%AE%89%E5%8D%93%E7%B3%BB%E7%BB%9F%E6%89%8B%E5%8A%BF%E8%A7%A3%E9%94%81.html\",lastUpdated:1593678455e3,title:\"351 安卓系统手势解锁\",headers:[{level:2,title:\"351 安卓系统手势解锁\",slug:\"_351-安卓系统手势解锁\"},{level:3,title:\"题目链接\",slug:\"题目链接\"},{level:3,title:\"难度：中等\",slug:\"难度：中等\"},{level:3,title:\"思路分析：\",slug:\"思路分析：\"},{level:3,title:\"想\",slug:\"想\"},{level:3,title:\"一\",slug:\"一\"},{level:3,title:\"想\",slug:\"想-2\"},{level:3,title:\"再\",slug:\"再\"},{level:3,title:\"看\",slug:\"看\"},{level:3,title:\"答\",slug:\"答\"},{level:3,title:\"案\",slug:\"案\"},{level:3,title:\"想\",slug:\"想-3\"},{level:3,title:\"一\",slug:\"一-2\"},{level:3,title:\"想\",slug:\"想-4\"},{level:3,title:\"再\",slug:\"再-2\"},{level:3,title:\"看\",slug:\"看-2\"},{level:3,title:\"答\",slug:\"答-2\"},{level:3,title:\"案\",slug:\"案-2\"},{level:3,title:\"代码：\",slug:\"代码：\"},{level:3,title:\"鼓励我一下：\",slug:\"鼓励我一下：\"},{level:3,title:\"点个Star支持我一下~\",slug:\"点个star支持我一下\"}],excerpt:'<h2 id=\"_351-安卓系统手势解锁\"><a class=\"header-anchor\" href=\"#_351-安卓系统手势解锁\" aria-hidden=\"true\">#</a> 351 安卓系统手势解锁</h2>\\n<h3 id=\"题目链接\"><a class=\"header-anchor\" href=\"#题目链接\" aria-hidden=\"true\">#</a> <a href=\"https://leetcode-cn.com/problems/android-unlock-patterns/\" target=\"_blank\" rel=\"noopener noreferrer\">题目链接<OutboundLink/></a></h3>\\n<h3 id=\"难度：中等\"><a class=\"header-anchor\" href=\"#难度：中等\" aria-hidden=\"true\">#</a> 难度：中等</h3>\\n<h3 id=\"思路分析：\"><a class=\"header-anchor\" href=\"#思路分析：\" aria-hidden=\"true\">#</a> 思路分析：</h3>\\n<p>针对一些链接点，需要先链接其他点。</p>\\n<h3 id=\"想\"><a class=\"header-anchor\" href=\"#想\" aria-hidden=\"true\">#</a> 想</h3>\\n<h3 id=\"一\"><a class=\"header-anchor\" href=\"#一\" aria-hidden=\"true\">#</a> 一</h3>\\n<h3 id=\"想-2\"><a class=\"header-anchor\" href=\"#想-2\" aria-hidden=\"true\">#</a> 想</h3>\\n<h3 id=\"再\"><a class=\"header-anchor\" href=\"#再\" aria-hidden=\"true\">#</a> 再</h3>\\n<h3 id=\"看\"><a class=\"header-anchor\" href=\"#看\" aria-hidden=\"true\">#</a> 看</h3>\\n<h3 id=\"答\"><a class=\"header-anchor\" href=\"#答\" aria-hidden=\"true\">#</a> 答</h3>\\n<h3 id=\"案\"><a class=\"header-anchor\" href=\"#案\" aria-hidden=\"true\">#</a> 案</h3>\\n<h3 id=\"想-3\"><a class=\"header-anchor\" href=\"#想-3\" aria-hidden=\"true\">#</a> 想</h3>\\n<h3 id=\"一-2\"><a class=\"header-anchor\" href=\"#一-2\" aria-hidden=\"true\">#</a> 一</h3>\\n<h3 id=\"想-4\"><a class=\"header-anchor\" href=\"#想-4\" aria-hidden=\"true\">#</a> 想</h3>\\n<h3 id=\"再-2\"><a class=\"header-anchor\" href=\"#再-2\" aria-hidden=\"true\">#</a> 再</h3>\\n<h3 id=\"看-2\"><a class=\"header-anchor\" href=\"#看-2\" aria-hidden=\"true\">#</a> 看</h3>\\n<h3 id=\"答-2\"><a class=\"header-anchor\" href=\"#答-2\" aria-hidden=\"true\">#</a> 答</h3>\\n<h3 id=\"案-2\"><a class=\"header-anchor\" href=\"#案-2\" aria-hidden=\"true\">#</a> 案</h3>\\n<h3 id=\"代码：\"><a class=\"header-anchor\" href=\"#代码：\" aria-hidden=\"true\">#</a> 代码：</h3>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code><span class=\"token comment\">/**\\n * @param {number} m\\n * @param {number} n\\n * @return {number}\\n */</span>\\n<span class=\"token comment\">// 回溯</span>\\n<span class=\"token keyword\">var</span> <span class=\"token function-variable function\">numberOfPatterns</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n  <span class=\"token keyword\">let</span> result <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\\n  <span class=\"token comment\">// 两个点之间必须要经过的点</span>\\n  <span class=\"token keyword\">let</span> <span class=\"token constant\">S</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\\n    <span class=\"token string\">\"1 3\"</span><span class=\"token punctuation\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span>\\n    <span class=\"token string\">\"4 6\"</span><span class=\"token punctuation\">:</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span>\\n    <span class=\"token string\">\"7 9\"</span><span class=\"token punctuation\">:</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span>\\n    <span class=\"token string\">\"1 7\"</span><span class=\"token punctuation\">:</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span>\\n    <span class=\"token string\">\"2 8\"</span><span class=\"token punctuation\">:</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span>\\n    <span class=\"token string\">\"3 9\"</span><span class=\"token punctuation\">:</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span>\\n    <span class=\"token string\">\"1 9\"</span><span class=\"token punctuation\">:</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span>\\n    <span class=\"token string\">\"3 7\"</span><span class=\"token punctuation\">:</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span>\\n    <span class=\"token string\">\"3 1\"</span><span class=\"token punctuation\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span>\\n    <span class=\"token string\">\"6 4\"</span><span class=\"token punctuation\">:</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span>\\n    <span class=\"token string\">\"9 7\"</span><span class=\"token punctuation\">:</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span>\\n    <span class=\"token string\">\"7 1\"</span><span class=\"token punctuation\">:</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span>\\n    <span class=\"token string\">\"8 2\"</span><span class=\"token punctuation\">:</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span>\\n    <span class=\"token string\">\"9 3\"</span><span class=\"token punctuation\">:</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span>\\n    <span class=\"token string\">\"9 1\"</span><span class=\"token punctuation\">:</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span>\\n    <span class=\"token string\">\"7 3\"</span><span class=\"token punctuation\">:</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span>\\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\\n  <span class=\"token comment\">// 最小连接数量和最大连接数量</span>\\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> m<span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token function\">helper</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\n  <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\\n  <span class=\"token comment\">/**\\n   * @param {number} n 已连接多少点\\n   * @param {number} l 当前出发点\\n   * @param {number} s 之前连接点的字符\\n   */</span>\\n  <span class=\"token keyword\">function</span> <span class=\"token function\">helper</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">,</span> l <span class=\"token operator\">=</span> undefined<span class=\"token punctuation\">,</span> s <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">===</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>result <span class=\"token operator\">+=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 连接的点够了 增加一种方案</span>\\n    <span class=\"token comment\">// 从1开始 每个点都作为起始点</span>\\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> <span class=\"token number\">9</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>l<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n        <span class=\"token keyword\">let</span> k <span class=\"token operator\">=</span> l <span class=\"token operator\">+</span> <span class=\"token string\">\" \"</span> <span class=\"token operator\">+</span> i<span class=\"token punctuation\">;</span>\\n        <span class=\"token comment\">// 当前点是否连接过 连接过不操作</span>\\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n          <span class=\"token comment\">// 是否需要经过中间的点</span>\\n          <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">S</span><span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span> <span class=\"token operator\">!==</span> undefined<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n            <span class=\"token comment\">// 在s中找到中间点 继续从i连接的点出发</span>\\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">S</span><span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token function\">helper</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">,</span> s <span class=\"token operator\">+</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\n            <span class=\"token comment\">// 没找到中间点不操作 回溯 说明不能连接这两个点</span>\\n          <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\\n            <span class=\"token comment\">// 不经过 回溯 从连接的点再出发</span>\\n            <span class=\"token function\">helper</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">,</span> s <span class=\"token operator\">+</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\n          <span class=\"token punctuation\">}</span>\\n        <span class=\"token punctuation\">}</span>\\n      <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\\n        <span class=\"token comment\">// 连接上初始点</span>\\n        <span class=\"token function\">helper</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">,</span> s <span class=\"token operator\">+</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\n      <span class=\"token punctuation\">}</span>\\n    <span class=\"token punctuation\">}</span>\\n  <span class=\"token punctuation\">}</span>\\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br><span class=\"line-number\">11</span><br><span class=\"line-number\">12</span><br><span class=\"line-number\">13</span><br><span class=\"line-number\">14</span><br><span class=\"line-number\">15</span><br><span class=\"line-number\">16</span><br><span class=\"line-number\">17</span><br><span class=\"line-number\">18</span><br><span class=\"line-number\">19</span><br><span class=\"line-number\">20</span><br><span class=\"line-number\">21</span><br><span class=\"line-number\">22</span><br><span class=\"line-number\">23</span><br><span class=\"line-number\">24</span><br><span class=\"line-number\">25</span><br><span class=\"line-number\">26</span><br><span class=\"line-number\">27</span><br><span class=\"line-number\">28</span><br><span class=\"line-number\">29</span><br><span class=\"line-number\">30</span><br><span class=\"line-number\">31</span><br><span class=\"line-number\">32</span><br><span class=\"line-number\">33</span><br><span class=\"line-number\">34</span><br><span class=\"line-number\">35</span><br><span class=\"line-number\">36</span><br><span class=\"line-number\">37</span><br><span class=\"line-number\">38</span><br><span class=\"line-number\">39</span><br><span class=\"line-number\">40</span><br><span class=\"line-number\">41</span><br><span class=\"line-number\">42</span><br><span class=\"line-number\">43</span><br><span class=\"line-number\">44</span><br><span class=\"line-number\">45</span><br><span class=\"line-number\">46</span><br><span class=\"line-number\">47</span><br><span class=\"line-number\">48</span><br><span class=\"line-number\">49</span><br><span class=\"line-number\">50</span><br><span class=\"line-number\">51</span><br><span class=\"line-number\">52</span><br><span class=\"line-number\">53</span><br><span class=\"line-number\">54</span><br><span class=\"line-number\">55</span><br><span class=\"line-number\">56</span><br><span class=\"line-number\">57</span><br><span class=\"line-number\">58</span><br><span class=\"line-number\">59</span><br><span class=\"line-number\">60</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<h3 id=\"鼓励我一下：\"><a class=\"header-anchor\" href=\"#鼓励我一下：\" aria-hidden=\"true\">#</a> 鼓励我一下：</h3>\\n<p>觉得还不错的话，给我的项目点个<a href=\"https://github.com/OBKoro1/Brush_algorithm\" target=\"_blank\" rel=\"noopener noreferrer\">star<OutboundLink/></a>吧\\n\\x3c!-- 特殊字符串：用于修改/删除markdown的结尾提示语-OBKoro1 --\\x3e</p>\\n<h3 id=\"点个star支持我一下\"><a class=\"header-anchor\" href=\"#点个star支持我一下\" aria-hidden=\"true\">#</a> 点个<a href=\"https://github.com/OBKoro1/Brush_algorithm\" target=\"_blank\" rel=\"noopener noreferrer\">Star<OutboundLink/></a>支持我一下~</h3>\\n\\x3c!-- \\'特殊字符串：用于删除编译后的issue组件-OBKoro1 --\\x3e\\n'},{key:\"v-7af70fd86809a\",path:\"/algorithm/medium/456%E9%A2%98132%E6%A8%A1%E5%BC%8F.html\",lastUpdated:1593678455e3,title:\"456 题 132 模式\",headers:[{level:2,title:\"456 题 132 模式\",slug:\"_456-题-132-模式\"},{level:3,title:\"题目链接\",slug:\"题目链接\"},{level:3,title:\"难度：中等\",slug:\"难度：中等\"},{level:3,title:\"思路分析：\",slug:\"思路分析：\"},{level:3,title:\"想\",slug:\"想\"},{level:3,title:\"一\",slug:\"一\"},{level:3,title:\"想\",slug:\"想-2\"},{level:3,title:\"再\",slug:\"再\"},{level:3,title:\"看\",slug:\"看\"},{level:3,title:\"答\",slug:\"答\"},{level:3,title:\"案\",slug:\"案\"},{level:3,title:\"想\",slug:\"想-3\"},{level:3,title:\"一\",slug:\"一-2\"},{level:3,title:\"想\",slug:\"想-4\"},{level:3,title:\"再\",slug:\"再-2\"},{level:3,title:\"看\",slug:\"看-2\"},{level:3,title:\"答\",slug:\"答-2\"},{level:3,title:\"案\",slug:\"案-2\"},{level:3,title:\"代码：\",slug:\"代码：\"},{level:3,title:\"鼓励我一下：\",slug:\"鼓励我一下：\"},{level:3,title:\"点个Star支持我一下~\",slug:\"点个star支持我一下\"}],excerpt:'<h2 id=\"_456-题-132-模式\"><a class=\"header-anchor\" href=\"#_456-题-132-模式\" aria-hidden=\"true\">#</a> 456 题 132 模式</h2>\\n<h3 id=\"题目链接\"><a class=\"header-anchor\" href=\"#题目链接\" aria-hidden=\"true\">#</a> <a href=\"https://leetcode-cn.com/problems/132-pattern/\" target=\"_blank\" rel=\"noopener noreferrer\">题目链接<OutboundLink/></a></h3>\\n<h3 id=\"难度：中等\"><a class=\"header-anchor\" href=\"#难度：中等\" aria-hidden=\"true\">#</a> 难度：中等</h3>\\n<h3 id=\"思路分析：\"><a class=\"header-anchor\" href=\"#思路分析：\" aria-hidden=\"true\">#</a> 思路分析：</h3>\\n<h3 id=\"想\"><a class=\"header-anchor\" href=\"#想\" aria-hidden=\"true\">#</a> 想</h3>\\n<h3 id=\"一\"><a class=\"header-anchor\" href=\"#一\" aria-hidden=\"true\">#</a> 一</h3>\\n<h3 id=\"想-2\"><a class=\"header-anchor\" href=\"#想-2\" aria-hidden=\"true\">#</a> 想</h3>\\n<h3 id=\"再\"><a class=\"header-anchor\" href=\"#再\" aria-hidden=\"true\">#</a> 再</h3>\\n<h3 id=\"看\"><a class=\"header-anchor\" href=\"#看\" aria-hidden=\"true\">#</a> 看</h3>\\n<h3 id=\"答\"><a class=\"header-anchor\" href=\"#答\" aria-hidden=\"true\">#</a> 答</h3>\\n<h3 id=\"案\"><a class=\"header-anchor\" href=\"#案\" aria-hidden=\"true\">#</a> 案</h3>\\n<h3 id=\"想-3\"><a class=\"header-anchor\" href=\"#想-3\" aria-hidden=\"true\">#</a> 想</h3>\\n<h3 id=\"一-2\"><a class=\"header-anchor\" href=\"#一-2\" aria-hidden=\"true\">#</a> 一</h3>\\n<h3 id=\"想-4\"><a class=\"header-anchor\" href=\"#想-4\" aria-hidden=\"true\">#</a> 想</h3>\\n<h3 id=\"再-2\"><a class=\"header-anchor\" href=\"#再-2\" aria-hidden=\"true\">#</a> 再</h3>\\n<h3 id=\"看-2\"><a class=\"header-anchor\" href=\"#看-2\" aria-hidden=\"true\">#</a> 看</h3>\\n<h3 id=\"答-2\"><a class=\"header-anchor\" href=\"#答-2\" aria-hidden=\"true\">#</a> 答</h3>\\n<h3 id=\"案-2\"><a class=\"header-anchor\" href=\"#案-2\" aria-hidden=\"true\">#</a> 案</h3>\\n<h3 id=\"代码：\"><a class=\"header-anchor\" href=\"#代码：\" aria-hidden=\"true\">#</a> 代码：</h3>\\n<p><strong>贪心</strong>:</p>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code><span class=\"token keyword\">var</span> <span class=\"token function-variable function\">find132pattern</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">.</span>length <span class=\"token operator\">&lt;=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\\n  <span class=\"token keyword\">let</span> min <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> nums<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> j <span class=\"token operator\">=</span> i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> nums<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n      <span class=\"token comment\">// 比主循环大一个索引 当前循环值 比最小值大， 又比主循环值小 即满足</span>\\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> min <span class=\"token operator\">&amp;&amp;</span> nums<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\\n    <span class=\"token punctuation\">}</span>\\n    min <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">min</span><span class=\"token punctuation\">(</span>min<span class=\"token punctuation\">,</span> nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 遍历过的值的最小值</span>\\n  <span class=\"token punctuation\">}</span>\\n  <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br><span class=\"line-number\">11</span><br><span class=\"line-number\">12</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<p><strong>栈</strong></p>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code><span class=\"token keyword\">var</span> <span class=\"token function-variable function\">find132pattern</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">.</span>length <span class=\"token operator\">&lt;=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\\n  <span class=\"token keyword\">const</span> min <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>nums<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\\n  <span class=\"token keyword\">const</span> stack <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\\n  <span class=\"token comment\">// 数组前i项最小的数字存在一个数组min内</span>\\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> nums<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n    min<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">min</span><span class=\"token punctuation\">(</span>min<span class=\"token punctuation\">[</span>i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\n  <span class=\"token punctuation\">}</span>\\n  <span class=\"token comment\">// 倒序</span>\\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n    <span class=\"token comment\">// 当前项不是最小值</span>\\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> min<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n      <span class=\"token comment\">// 栈内数据小于当前值的最小值 从min的大值开始</span>\\n      <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>stack<span class=\"token punctuation\">.</span>length <span class=\"token operator\">!==</span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> stack<span class=\"token punctuation\">[</span>stack<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;=</span> min<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n        stack<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\n      <span class=\"token punctuation\">}</span>\\n      <span class=\"token comment\">// 栈内(之前遍历的)数据比当前值小 即满足 l1&lt;l3&lt;l2的需求</span>\\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>stack<span class=\"token punctuation\">.</span>length <span class=\"token operator\">!==</span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> stack<span class=\"token punctuation\">[</span>stack<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\\n      <span class=\"token punctuation\">}</span>\\n      stack<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 比最小值大</span>\\n    <span class=\"token punctuation\">}</span>\\n  <span class=\"token punctuation\">}</span>\\n  <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br><span class=\"line-number\">11</span><br><span class=\"line-number\">12</span><br><span class=\"line-number\">13</span><br><span class=\"line-number\">14</span><br><span class=\"line-number\">15</span><br><span class=\"line-number\">16</span><br><span class=\"line-number\">17</span><br><span class=\"line-number\">18</span><br><span class=\"line-number\">19</span><br><span class=\"line-number\">20</span><br><span class=\"line-number\">21</span><br><span class=\"line-number\">22</span><br><span class=\"line-number\">23</span><br><span class=\"line-number\">24</span><br><span class=\"line-number\">25</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<h3 id=\"鼓励我一下：\"><a class=\"header-anchor\" href=\"#鼓励我一下：\" aria-hidden=\"true\">#</a> 鼓励我一下：</h3>\\n<p>觉得还不错的话，给我的项目点个<a href=\"https://github.com/OBKoro1/Brush_algorithm\" target=\"_blank\" rel=\"noopener noreferrer\">star<OutboundLink/></a>吧\\n\\x3c!-- 特殊字符串：用于修改/删除markdown的结尾提示语-OBKoro1 --\\x3e</p>\\n<h3 id=\"点个star支持我一下\"><a class=\"header-anchor\" href=\"#点个star支持我一下\" aria-hidden=\"true\">#</a> 点个<a href=\"https://github.com/OBKoro1/Brush_algorithm\" target=\"_blank\" rel=\"noopener noreferrer\">Star<OutboundLink/></a>支持我一下~</h3>\\n\\x3c!-- \\'特殊字符串：用于删除编译后的issue组件-OBKoro1 --\\x3e\\n'},{key:\"v-5fd46ff0994fc\",path:\"/algorithm/medium/45%E9%A2%98%E8%B7%B3%E8%B7%83%E6%B8%B8%E6%88%8F2.html\",lastUpdated:1593678455e3,title:\"45 题跳跃游戏 2\",headers:[{level:2,title:\"45 题跳跃游戏 2\",slug:\"_45-题跳跃游戏-2\"},{level:3,title:\"题目链接\",slug:\"题目链接\"},{level:3,title:\"难度：中等\",slug:\"难度：中等\"},{level:3,title:\"思路分析：\",slug:\"思路分析：\"},{level:3,title:\"想\",slug:\"想\"},{level:3,title:\"一\",slug:\"一\"},{level:3,title:\"想\",slug:\"想-2\"},{level:3,title:\"再\",slug:\"再\"},{level:3,title:\"看\",slug:\"看\"},{level:3,title:\"答\",slug:\"答\"},{level:3,title:\"案\",slug:\"案\"},{level:3,title:\"想\",slug:\"想-3\"},{level:3,title:\"一\",slug:\"一-2\"},{level:3,title:\"想\",slug:\"想-4\"},{level:3,title:\"再\",slug:\"再-2\"},{level:3,title:\"看\",slug:\"看-2\"},{level:3,title:\"答\",slug:\"答-2\"},{level:3,title:\"案\",slug:\"案-2\"},{level:3,title:\"代码：\",slug:\"代码：\"},{level:3,title:\"鼓励我一下：\",slug:\"鼓励我一下：\"},{level:3,title:\"点个Star支持我一下~\",slug:\"点个star支持我一下\"}],excerpt:'<h2 id=\"_45-题跳跃游戏-2\"><a class=\"header-anchor\" href=\"#_45-题跳跃游戏-2\" aria-hidden=\"true\">#</a> 45 题跳跃游戏 2</h2>\\n<h3 id=\"题目链接\"><a class=\"header-anchor\" href=\"#题目链接\" aria-hidden=\"true\">#</a> <a href=\"https://leetcode-cn.com/problems/jump-game-ii/\" target=\"_blank\" rel=\"noopener noreferrer\">题目链接<OutboundLink/></a></h3>\\n<h3 id=\"难度：中等\"><a class=\"header-anchor\" href=\"#难度：中等\" aria-hidden=\"true\">#</a> 难度：中等</h3>\\n<h3 id=\"思路分析：\"><a class=\"header-anchor\" href=\"#思路分析：\" aria-hidden=\"true\">#</a> 思路分析：</h3>\\n<p>贪心</p>\\n<h3 id=\"想\"><a class=\"header-anchor\" href=\"#想\" aria-hidden=\"true\">#</a> 想</h3>\\n<h3 id=\"一\"><a class=\"header-anchor\" href=\"#一\" aria-hidden=\"true\">#</a> 一</h3>\\n<h3 id=\"想-2\"><a class=\"header-anchor\" href=\"#想-2\" aria-hidden=\"true\">#</a> 想</h3>\\n<h3 id=\"再\"><a class=\"header-anchor\" href=\"#再\" aria-hidden=\"true\">#</a> 再</h3>\\n<h3 id=\"看\"><a class=\"header-anchor\" href=\"#看\" aria-hidden=\"true\">#</a> 看</h3>\\n<h3 id=\"答\"><a class=\"header-anchor\" href=\"#答\" aria-hidden=\"true\">#</a> 答</h3>\\n<h3 id=\"案\"><a class=\"header-anchor\" href=\"#案\" aria-hidden=\"true\">#</a> 案</h3>\\n<h3 id=\"想-3\"><a class=\"header-anchor\" href=\"#想-3\" aria-hidden=\"true\">#</a> 想</h3>\\n<h3 id=\"一-2\"><a class=\"header-anchor\" href=\"#一-2\" aria-hidden=\"true\">#</a> 一</h3>\\n<h3 id=\"想-4\"><a class=\"header-anchor\" href=\"#想-4\" aria-hidden=\"true\">#</a> 想</h3>\\n<h3 id=\"再-2\"><a class=\"header-anchor\" href=\"#再-2\" aria-hidden=\"true\">#</a> 再</h3>\\n<h3 id=\"看-2\"><a class=\"header-anchor\" href=\"#看-2\" aria-hidden=\"true\">#</a> 看</h3>\\n<h3 id=\"答-2\"><a class=\"header-anchor\" href=\"#答-2\" aria-hidden=\"true\">#</a> 答</h3>\\n<h3 id=\"案-2\"><a class=\"header-anchor\" href=\"#案-2\" aria-hidden=\"true\">#</a> 案</h3>\\n<h3 id=\"代码：\"><a class=\"header-anchor\" href=\"#代码：\" aria-hidden=\"true\">#</a> 代码：</h3>\\n<p><strong>贪心</strong></p>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code><span class=\"token keyword\">var</span> <span class=\"token function-variable function\">jump</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n  <span class=\"token keyword\">let</span> step <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\\n  <span class=\"token keyword\">let</span> jumpMax <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 预计最远距离</span>\\n  <span class=\"token keyword\">let</span> last_canJumpMax <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 上次可跳的最远距离</span>\\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> nums<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n    <span class=\"token keyword\">const</span> nowMax <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> i<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 当前最远距离</span>\\n    jumpMax <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span>jumpMax<span class=\"token punctuation\">,</span> nowMax<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 下一步最远距离</span>\\n    <span class=\"token comment\">// 上次跳跃后 下一步的最远距离 需要再跳</span>\\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>last_canJumpMax <span class=\"token operator\">===</span> i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n      last_canJumpMax <span class=\"token operator\">=</span> jumpMax<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 最远距离更新</span>\\n      step<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 步数更新</span>\\n    <span class=\"token punctuation\">}</span>\\n    <span class=\"token comment\">// 最远距离超过终点</span>\\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>last_canJumpMax <span class=\"token operator\">>=</span> len <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n      <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\\n    <span class=\"token punctuation\">}</span>\\n  <span class=\"token punctuation\">}</span>\\n  <span class=\"token keyword\">return</span> step<span class=\"token punctuation\">;</span>\\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br><span class=\"line-number\">11</span><br><span class=\"line-number\">12</span><br><span class=\"line-number\">13</span><br><span class=\"line-number\">14</span><br><span class=\"line-number\">15</span><br><span class=\"line-number\">16</span><br><span class=\"line-number\">17</span><br><span class=\"line-number\">18</span><br><span class=\"line-number\">19</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<p><strong>递归</strong></p>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">jump</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n  <span class=\"token keyword\">let</span> num <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 初始能跳的步数</span>\\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">.</span>length <span class=\"token operator\">===</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\\n  <span class=\"token keyword\">let</span> total <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 总共跳几次</span>\\n  <span class=\"token keyword\">let</span> everOne <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>num<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 每次经过的地方</span>\\n  <span class=\"token keyword\">function</span> <span class=\"token function\">jumpOne</span><span class=\"token punctuation\">(</span>newNums<span class=\"token punctuation\">,</span> oneNum<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n    <span class=\"token keyword\">let</span> maxNum <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 最远能跳多远</span>\\n    <span class=\"token keyword\">let</span> maxIndex <span class=\"token operator\">=</span> oneNum<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 预设最大值</span>\\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>oneNum <span class=\"token operator\">+</span> <span class=\"token number\">1</span> <span class=\"token operator\">>=</span> newNums<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n      <span class=\"token comment\">// 步数已经足够到达最后一个位置</span>\\n      maxIndex <span class=\"token operator\">=</span> newNums<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\\n      <span class=\"token comment\">// 每个点都跳一遍</span>\\n      <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> oneNum<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n        <span class=\"token comment\">// 当前已跳步数大于 之前缓存的最大步数 更新最远距离</span>\\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">+</span> newNums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">>=</span> maxNum<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n          maxNum <span class=\"token operator\">=</span> newNums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> i<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 最远能跳多远</span>\\n          maxIndex <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 最远跳的目标位置</span>\\n        <span class=\"token punctuation\">}</span>\\n      <span class=\"token punctuation\">}</span>\\n    <span class=\"token punctuation\">}</span>\\n    total<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 当前跳跃次数</span>\\n    everOne<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>newNums<span class=\"token punctuation\">[</span>maxIndex<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 每次到达的位置</span>\\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>maxIndex <span class=\"token operator\">!==</span> newNums<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n      newNums<span class=\"token punctuation\">.</span><span class=\"token function\">splice</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> maxIndex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 清除已跳的元素</span>\\n      <span class=\"token function\">jumpOne</span><span class=\"token punctuation\">(</span>newNums<span class=\"token punctuation\">,</span> newNums<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\n    <span class=\"token punctuation\">}</span>\\n  <span class=\"token punctuation\">}</span>\\n  <span class=\"token function\">jumpOne</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">,</span> num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\n  <span class=\"token keyword\">return</span> total<span class=\"token punctuation\">;</span>\\n<span class=\"token punctuation\">}</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br><span class=\"line-number\">11</span><br><span class=\"line-number\">12</span><br><span class=\"line-number\">13</span><br><span class=\"line-number\">14</span><br><span class=\"line-number\">15</span><br><span class=\"line-number\">16</span><br><span class=\"line-number\">17</span><br><span class=\"line-number\">18</span><br><span class=\"line-number\">19</span><br><span class=\"line-number\">20</span><br><span class=\"line-number\">21</span><br><span class=\"line-number\">22</span><br><span class=\"line-number\">23</span><br><span class=\"line-number\">24</span><br><span class=\"line-number\">25</span><br><span class=\"line-number\">26</span><br><span class=\"line-number\">27</span><br><span class=\"line-number\">28</span><br><span class=\"line-number\">29</span><br><span class=\"line-number\">30</span><br><span class=\"line-number\">31</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<h3 id=\"鼓励我一下：\"><a class=\"header-anchor\" href=\"#鼓励我一下：\" aria-hidden=\"true\">#</a> 鼓励我一下：</h3>\\n<p>觉得还不错的话，给我的项目点个<a href=\"https://github.com/OBKoro1/Brush_algorithm\" target=\"_blank\" rel=\"noopener noreferrer\">star<OutboundLink/></a>吧\\n\\x3c!-- 特殊字符串：用于修改/删除markdown的结尾提示语-OBKoro1 --\\x3e</p>\\n<h3 id=\"点个star支持我一下\"><a class=\"header-anchor\" href=\"#点个star支持我一下\" aria-hidden=\"true\">#</a> 点个<a href=\"https://github.com/OBKoro1/Brush_algorithm\" target=\"_blank\" rel=\"noopener noreferrer\">Star<OutboundLink/></a>支持我一下~</h3>\\n\\x3c!-- \\'特殊字符串：用于删除编译后的issue组件-OBKoro1 --\\x3e\\n'},{key:\"v-c1b537c92c8ac\",path:\"/algorithm/medium/466%E7%BB%9F%E8%AE%A1%E9%87%8D%E5%A4%8D%E4%B8%AA%E6%95%B0.html\",lastUpdated:1593678455e3,title:\"466 统计重复个数\",headers:[{level:2,title:\"466 统计重复个数\",slug:\"_466-统计重复个数\"},{level:3,title:\"题目链接\",slug:\"题目链接\"},{level:3,title:\"难度：困难\",slug:\"难度：困难\"},{level:3,title:\"思路分析：\",slug:\"思路分析：\"},{level:3,title:\"想\",slug:\"想\"},{level:3,title:\"一\",slug:\"一\"},{level:3,title:\"想\",slug:\"想-2\"},{level:3,title:\"再\",slug:\"再\"},{level:3,title:\"看\",slug:\"看\"},{level:3,title:\"答\",slug:\"答\"},{level:3,title:\"案\",slug:\"案\"},{level:3,title:\"想\",slug:\"想-3\"},{level:3,title:\"一\",slug:\"一-2\"},{level:3,title:\"想\",slug:\"想-4\"},{level:3,title:\"再\",slug:\"再-2\"},{level:3,title:\"看\",slug:\"看-2\"},{level:3,title:\"答\",slug:\"答-2\"},{level:3,title:\"案\",slug:\"案-2\"},{level:3,title:\"代码：\",slug:\"代码：\"},{level:3,title:\"鼓励我一下：\",slug:\"鼓励我一下：\"},{level:3,title:\"点个Star支持我一下~\",slug:\"点个star支持我一下\"}],excerpt:'<h2 id=\"_466-统计重复个数\"><a class=\"header-anchor\" href=\"#_466-统计重复个数\" aria-hidden=\"true\">#</a> 466 统计重复个数</h2>\\n<h3 id=\"题目链接\"><a class=\"header-anchor\" href=\"#题目链接\" aria-hidden=\"true\">#</a> <a href=\"https://leetcode-cn.com/problems/count-the-repetitions/\" target=\"_blank\" rel=\"noopener noreferrer\">题目链接<OutboundLink/></a></h3>\\n<h3 id=\"难度：困难\"><a class=\"header-anchor\" href=\"#难度：困难\" aria-hidden=\"true\">#</a> 难度：困难</h3>\\n<h3 id=\"思路分析：\"><a class=\"header-anchor\" href=\"#思路分析：\" aria-hidden=\"true\">#</a> 思路分析：</h3>\\n<p>双指针 循环点</p>\\n<h3 id=\"想\"><a class=\"header-anchor\" href=\"#想\" aria-hidden=\"true\">#</a> 想</h3>\\n<h3 id=\"一\"><a class=\"header-anchor\" href=\"#一\" aria-hidden=\"true\">#</a> 一</h3>\\n<h3 id=\"想-2\"><a class=\"header-anchor\" href=\"#想-2\" aria-hidden=\"true\">#</a> 想</h3>\\n<h3 id=\"再\"><a class=\"header-anchor\" href=\"#再\" aria-hidden=\"true\">#</a> 再</h3>\\n<h3 id=\"看\"><a class=\"header-anchor\" href=\"#看\" aria-hidden=\"true\">#</a> 看</h3>\\n<h3 id=\"答\"><a class=\"header-anchor\" href=\"#答\" aria-hidden=\"true\">#</a> 答</h3>\\n<h3 id=\"案\"><a class=\"header-anchor\" href=\"#案\" aria-hidden=\"true\">#</a> 案</h3>\\n<h3 id=\"想-3\"><a class=\"header-anchor\" href=\"#想-3\" aria-hidden=\"true\">#</a> 想</h3>\\n<h3 id=\"一-2\"><a class=\"header-anchor\" href=\"#一-2\" aria-hidden=\"true\">#</a> 一</h3>\\n<h3 id=\"想-4\"><a class=\"header-anchor\" href=\"#想-4\" aria-hidden=\"true\">#</a> 想</h3>\\n<h3 id=\"再-2\"><a class=\"header-anchor\" href=\"#再-2\" aria-hidden=\"true\">#</a> 再</h3>\\n<h3 id=\"看-2\"><a class=\"header-anchor\" href=\"#看-2\" aria-hidden=\"true\">#</a> 看</h3>\\n<h3 id=\"答-2\"><a class=\"header-anchor\" href=\"#答-2\" aria-hidden=\"true\">#</a> 答</h3>\\n<h3 id=\"案-2\"><a class=\"header-anchor\" href=\"#案-2\" aria-hidden=\"true\">#</a> 案</h3>\\n<h3 id=\"代码：\"><a class=\"header-anchor\" href=\"#代码：\" aria-hidden=\"true\">#</a> 代码：</h3>\\n<p>双指针 循环点</p>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code><span class=\"token keyword\">var</span> <span class=\"token function-variable function\">getMaxRepetitions</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>s1<span class=\"token punctuation\">,</span> n1<span class=\"token punctuation\">,</span> s2<span class=\"token punctuation\">,</span> n2<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n  <span class=\"token keyword\">let</span> counts1 <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//s1计数</span>\\n  <span class=\"token keyword\">let</span> counts2 <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//s2计数</span>\\n  <span class=\"token keyword\">let</span> s2p <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//s2指针</span>\\n  <span class=\"token comment\">//当s1的循环数量没有超过s1总个数，就可以继续读取s1</span>\\n  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>counts1 <span class=\"token operator\">&lt;</span> n1<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n    <span class=\"token comment\">//遍历s1中每一个字符</span>\\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> s1<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n      <span class=\"token comment\">// 如果相等指针后移 匹配后面的字符</span>\\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>s1<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">===</span> s2<span class=\"token punctuation\">[</span>s2p<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> s2p<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\\n      <span class=\"token comment\">// s2最后一个，全都匹配到了 重置指针，s2计数加一</span>\\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>s2p <span class=\"token operator\">===</span> s2<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n        counts2<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\\n        s2p <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\\n      <span class=\"token punctuation\">}</span>\\n    <span class=\"token punctuation\">}</span>\\n    counts1<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 循环下一个s1</span>\\n    <span class=\"token comment\">//如果s2的指针指到了开头，说明正好找到了循环点</span>\\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>s2p <span class=\"token operator\">===</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n      <span class=\"token keyword\">let</span> times <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">floor</span><span class=\"token punctuation\">(</span>n1 <span class=\"token operator\">/</span> counts1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 之前循环了多少次 还有多少次循环点</span>\\n      counts1 <span class=\"token operator\">*=</span> times<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 循环点 * 子序列次数</span>\\n      counts2 <span class=\"token operator\">*=</span> times<span class=\"token punctuation\">;</span>\\n      <span class=\"token comment\">//这里计数乘循环的次数，继续循环 因为counts1还可能是小于n1的，循环节点不能整除</span>\\n    <span class=\"token punctuation\">}</span>\\n  <span class=\"token punctuation\">}</span>\\n  <span class=\"token comment\">//返回结果。</span>\\n  <span class=\"token keyword\">return</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">floor</span><span class=\"token punctuation\">(</span>counts2 <span class=\"token operator\">/</span> n2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br><span class=\"line-number\">11</span><br><span class=\"line-number\">12</span><br><span class=\"line-number\">13</span><br><span class=\"line-number\">14</span><br><span class=\"line-number\">15</span><br><span class=\"line-number\">16</span><br><span class=\"line-number\">17</span><br><span class=\"line-number\">18</span><br><span class=\"line-number\">19</span><br><span class=\"line-number\">20</span><br><span class=\"line-number\">21</span><br><span class=\"line-number\">22</span><br><span class=\"line-number\">23</span><br><span class=\"line-number\">24</span><br><span class=\"line-number\">25</span><br><span class=\"line-number\">26</span><br><span class=\"line-number\">27</span><br><span class=\"line-number\">28</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<h3 id=\"鼓励我一下：\"><a class=\"header-anchor\" href=\"#鼓励我一下：\" aria-hidden=\"true\">#</a> 鼓励我一下：</h3>\\n<p>觉得还不错的话，给我的项目点个<a href=\"https://github.com/OBKoro1/Brush_algorithm\" target=\"_blank\" rel=\"noopener noreferrer\">star<OutboundLink/></a>吧\\n\\x3c!-- 特殊字符串：用于修改/删除markdown的结尾提示语-OBKoro1 --\\x3e</p>\\n<h3 id=\"点个star支持我一下\"><a class=\"header-anchor\" href=\"#点个star支持我一下\" aria-hidden=\"true\">#</a> 点个<a href=\"https://github.com/OBKoro1/Brush_algorithm\" target=\"_blank\" rel=\"noopener noreferrer\">Star<OutboundLink/></a>支持我一下~</h3>\\n\\x3c!-- \\'特殊字符串：用于删除编译后的issue组件-OBKoro1 --\\x3e\\n'},{key:\"v-14871d15cc145\",path:\"/algorithm/medium/46%E5%85%A8%E6%8E%92%E5%88%97.html\",lastUpdated:1593678455e3,title:\"46 全排列\",headers:[{level:2,title:\"46 全排列\",slug:\"_46-全排列\"},{level:3,title:\"题目链接\",slug:\"题目链接\"},{level:3,title:\"难度：中等\",slug:\"难度：中等\"},{level:3,title:\"思路分析：\",slug:\"思路分析：\"},{level:3,title:\"想\",slug:\"想\"},{level:3,title:\"一\",slug:\"一\"},{level:3,title:\"想\",slug:\"想-2\"},{level:3,title:\"再\",slug:\"再\"},{level:3,title:\"看\",slug:\"看\"},{level:3,title:\"答\",slug:\"答\"},{level:3,title:\"案\",slug:\"案\"},{level:3,title:\"想\",slug:\"想-3\"},{level:3,title:\"一\",slug:\"一-2\"},{level:3,title:\"想\",slug:\"想-4\"},{level:3,title:\"再\",slug:\"再-2\"},{level:3,title:\"看\",slug:\"看-2\"},{level:3,title:\"答\",slug:\"答-2\"},{level:3,title:\"案\",slug:\"案-2\"},{level:3,title:\"代码：\",slug:\"代码：\"},{level:3,title:\"鼓励我一下：\",slug:\"鼓励我一下：\"},{level:3,title:\"点个Star支持我一下~\",slug:\"点个star支持我一下\"}],excerpt:'<h2 id=\"_46-全排列\"><a class=\"header-anchor\" href=\"#_46-全排列\" aria-hidden=\"true\">#</a> 46 全排列</h2>\\n<h3 id=\"题目链接\"><a class=\"header-anchor\" href=\"#题目链接\" aria-hidden=\"true\">#</a> <a href=\"https://leetcode-cn.com/problems/permutations/\" target=\"_blank\" rel=\"noopener noreferrer\">题目链接<OutboundLink/></a></h3>\\n<h3 id=\"难度：中等\"><a class=\"header-anchor\" href=\"#难度：中等\" aria-hidden=\"true\">#</a> 难度：中等</h3>\\n<h3 id=\"思路分析：\"><a class=\"header-anchor\" href=\"#思路分析：\" aria-hidden=\"true\">#</a> 思路分析：</h3>\\n<p>回溯</p>\\n<h3 id=\"想\"><a class=\"header-anchor\" href=\"#想\" aria-hidden=\"true\">#</a> 想</h3>\\n<h3 id=\"一\"><a class=\"header-anchor\" href=\"#一\" aria-hidden=\"true\">#</a> 一</h3>\\n<h3 id=\"想-2\"><a class=\"header-anchor\" href=\"#想-2\" aria-hidden=\"true\">#</a> 想</h3>\\n<h3 id=\"再\"><a class=\"header-anchor\" href=\"#再\" aria-hidden=\"true\">#</a> 再</h3>\\n<h3 id=\"看\"><a class=\"header-anchor\" href=\"#看\" aria-hidden=\"true\">#</a> 看</h3>\\n<h3 id=\"答\"><a class=\"header-anchor\" href=\"#答\" aria-hidden=\"true\">#</a> 答</h3>\\n<h3 id=\"案\"><a class=\"header-anchor\" href=\"#案\" aria-hidden=\"true\">#</a> 案</h3>\\n<h3 id=\"想-3\"><a class=\"header-anchor\" href=\"#想-3\" aria-hidden=\"true\">#</a> 想</h3>\\n<h3 id=\"一-2\"><a class=\"header-anchor\" href=\"#一-2\" aria-hidden=\"true\">#</a> 一</h3>\\n<h3 id=\"想-4\"><a class=\"header-anchor\" href=\"#想-4\" aria-hidden=\"true\">#</a> 想</h3>\\n<h3 id=\"再-2\"><a class=\"header-anchor\" href=\"#再-2\" aria-hidden=\"true\">#</a> 再</h3>\\n<h3 id=\"看-2\"><a class=\"header-anchor\" href=\"#看-2\" aria-hidden=\"true\">#</a> 看</h3>\\n<h3 id=\"答-2\"><a class=\"header-anchor\" href=\"#答-2\" aria-hidden=\"true\">#</a> 答</h3>\\n<h3 id=\"案-2\"><a class=\"header-anchor\" href=\"#案-2\" aria-hidden=\"true\">#</a> 案</h3>\\n<h3 id=\"代码：\"><a class=\"header-anchor\" href=\"#代码：\" aria-hidden=\"true\">#</a> 代码：</h3>\\n<p><strong>回溯</strong>：</p>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code><span class=\"token comment\">/**\\n * @param {number[]} nums\\n * @return {number[][]}\\n */</span>\\n<span class=\"token keyword\">var</span> <span class=\"token function-variable function\">permute</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n  <span class=\"token keyword\">let</span> res <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\\n  <span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\n  <span class=\"token keyword\">function</span> <span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">.</span>length <span class=\"token operator\">===</span> nums<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n      <span class=\"token keyword\">const</span> item <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span>path<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 复制path 引用类型 指针相同</span>\\n      res<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 一条路径完成</span>\\n      <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\\n    <span class=\"token punctuation\">}</span>\\n    <span class=\"token comment\">// 遍历决策树</span>\\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> num <span class=\"token keyword\">of</span> nums<span class=\"token punctuation\">.</span><span class=\"token function\">values</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">.</span><span class=\"token function\">includes</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 已存在的元素不再添加 防止重复</span>\\n      path<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 每个节点 都选择一遍它的路径</span>\\n      <span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 穷尽它的路径 回溯</span>\\n      path<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 撤销选择的节点 回归原先的状态 回溯</span>\\n    <span class=\"token punctuation\">}</span>\\n  <span class=\"token punctuation\">}</span>\\n  <span class=\"token keyword\">return</span> res<span class=\"token punctuation\">;</span>\\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br><span class=\"line-number\">11</span><br><span class=\"line-number\">12</span><br><span class=\"line-number\">13</span><br><span class=\"line-number\">14</span><br><span class=\"line-number\">15</span><br><span class=\"line-number\">16</span><br><span class=\"line-number\">17</span><br><span class=\"line-number\">18</span><br><span class=\"line-number\">19</span><br><span class=\"line-number\">20</span><br><span class=\"line-number\">21</span><br><span class=\"line-number\">22</span><br><span class=\"line-number\">23</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<h3 id=\"鼓励我一下：\"><a class=\"header-anchor\" href=\"#鼓励我一下：\" aria-hidden=\"true\">#</a> 鼓励我一下：</h3>\\n<p>觉得还不错的话，给我的项目点个<a href=\"https://github.com/OBKoro1/Brush_algorithm\" target=\"_blank\" rel=\"noopener noreferrer\">star<OutboundLink/></a>吧\\n\\x3c!-- 特殊字符串：用于修改/删除markdown的结尾提示语-OBKoro1 --\\x3e</p>\\n<h3 id=\"点个star支持我一下\"><a class=\"header-anchor\" href=\"#点个star支持我一下\" aria-hidden=\"true\">#</a> 点个<a href=\"https://github.com/OBKoro1/Brush_algorithm\" target=\"_blank\" rel=\"noopener noreferrer\">Star<OutboundLink/></a>支持我一下~</h3>\\n\\x3c!-- \\'特殊字符串：用于删除编译后的issue组件-OBKoro1 --\\x3e\\n'},{key:\"v-9db67c910879a\",path:\"/algorithm/medium/54%E8%9E%BA%E6%97%8B%E7%9F%A9%E9%98%B5.html\",lastUpdated:1593678455e3,title:\"54 螺旋矩阵\",headers:[{level:2,title:\"54 螺旋矩阵\",slug:\"_54-螺旋矩阵\"},{level:3,title:\"题目链接\",slug:\"题目链接\"},{level:3,title:\"难度：中等\",slug:\"难度：中等\"},{level:3,title:\"思路分析：\",slug:\"思路分析：\"},{level:3,title:\"想\",slug:\"想\"},{level:3,title:\"一\",slug:\"一\"},{level:3,title:\"想\",slug:\"想-2\"},{level:3,title:\"再\",slug:\"再\"},{level:3,title:\"看\",slug:\"看\"},{level:3,title:\"答\",slug:\"答\"},{level:3,title:\"案\",slug:\"案\"},{level:3,title:\"想\",slug:\"想-3\"},{level:3,title:\"一\",slug:\"一-2\"},{level:3,title:\"想\",slug:\"想-4\"},{level:3,title:\"再\",slug:\"再-2\"},{level:3,title:\"看\",slug:\"看-2\"},{level:3,title:\"答\",slug:\"答-2\"},{level:3,title:\"案\",slug:\"案-2\"},{level:3,title:\"代码：\",slug:\"代码：\"},{level:3,title:\"鼓励我一下：\",slug:\"鼓励我一下：\"},{level:3,title:\"点个Star支持我一下~\",slug:\"点个star支持我一下\"}],excerpt:'<h2 id=\"_54-螺旋矩阵\"><a class=\"header-anchor\" href=\"#_54-螺旋矩阵\" aria-hidden=\"true\">#</a> 54 螺旋矩阵</h2>\\n<h3 id=\"题目链接\"><a class=\"header-anchor\" href=\"#题目链接\" aria-hidden=\"true\">#</a> <a href=\"https://leetcode-cn.com/problems/spiral-matrix/\" target=\"_blank\" rel=\"noopener noreferrer\">题目链接<OutboundLink/></a></h3>\\n<h3 id=\"难度：中等\"><a class=\"header-anchor\" href=\"#难度：中等\" aria-hidden=\"true\">#</a> 难度：中等</h3>\\n<h3 id=\"思路分析：\"><a class=\"header-anchor\" href=\"#思路分析：\" aria-hidden=\"true\">#</a> 思路分析：</h3>\\n<p>环形遍历、</p>\\n<h3 id=\"想\"><a class=\"header-anchor\" href=\"#想\" aria-hidden=\"true\">#</a> 想</h3>\\n<h3 id=\"一\"><a class=\"header-anchor\" href=\"#一\" aria-hidden=\"true\">#</a> 一</h3>\\n<h3 id=\"想-2\"><a class=\"header-anchor\" href=\"#想-2\" aria-hidden=\"true\">#</a> 想</h3>\\n<h3 id=\"再\"><a class=\"header-anchor\" href=\"#再\" aria-hidden=\"true\">#</a> 再</h3>\\n<h3 id=\"看\"><a class=\"header-anchor\" href=\"#看\" aria-hidden=\"true\">#</a> 看</h3>\\n<h3 id=\"答\"><a class=\"header-anchor\" href=\"#答\" aria-hidden=\"true\">#</a> 答</h3>\\n<h3 id=\"案\"><a class=\"header-anchor\" href=\"#案\" aria-hidden=\"true\">#</a> 案</h3>\\n<h3 id=\"想-3\"><a class=\"header-anchor\" href=\"#想-3\" aria-hidden=\"true\">#</a> 想</h3>\\n<h3 id=\"一-2\"><a class=\"header-anchor\" href=\"#一-2\" aria-hidden=\"true\">#</a> 一</h3>\\n<h3 id=\"想-4\"><a class=\"header-anchor\" href=\"#想-4\" aria-hidden=\"true\">#</a> 想</h3>\\n<h3 id=\"再-2\"><a class=\"header-anchor\" href=\"#再-2\" aria-hidden=\"true\">#</a> 再</h3>\\n<h3 id=\"看-2\"><a class=\"header-anchor\" href=\"#看-2\" aria-hidden=\"true\">#</a> 看</h3>\\n<h3 id=\"答-2\"><a class=\"header-anchor\" href=\"#答-2\" aria-hidden=\"true\">#</a> 答</h3>\\n<h3 id=\"案-2\"><a class=\"header-anchor\" href=\"#案-2\" aria-hidden=\"true\">#</a> 案</h3>\\n<h3 id=\"代码：\"><a class=\"header-anchor\" href=\"#代码：\" aria-hidden=\"true\">#</a> 代码：</h3>\\n<p>环形遍历 设置四个边界 由外向内遍历</p>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code><span class=\"token keyword\">var</span> <span class=\"token function-variable function\">spiralOrder</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>matrix<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>matrix<span class=\"token punctuation\">.</span>length <span class=\"token operator\">===</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\\n  <span class=\"token keyword\">const</span> res <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\\n  <span class=\"token keyword\">let</span> top <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\\n    bottom <span class=\"token operator\">=</span> matrix<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\\n    left <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\\n    right <span class=\"token operator\">=</span> matrix<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\\n  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>top <span class=\"token operator\">&lt;</span> bottom <span class=\"token operator\">&amp;&amp;</span> left <span class=\"token operator\">&lt;</span> right<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> left<span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> right<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> res<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>matrix<span class=\"token punctuation\">[</span>top<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 上层</span>\\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> top<span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> bottom<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> res<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>matrix<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>right<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 右层</span>\\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> right<span class=\"token punctuation\">;</span> i <span class=\"token operator\">></span> left<span class=\"token punctuation\">;</span> i<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span> res<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>matrix<span class=\"token punctuation\">[</span>bottom<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 下层</span>\\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> bottom<span class=\"token punctuation\">;</span> i <span class=\"token operator\">></span> top<span class=\"token punctuation\">;</span> i<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span> res<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>matrix<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>left<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 左层</span>\\n    right<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\\n    top<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\\n    bottom<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\\n    left<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 四个边界同时收缩，进入内层</span>\\n  <span class=\"token punctuation\">}</span>\\n  <span class=\"token comment\">// 剩下一行，从左到右依次添加</span>\\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>top <span class=\"token operator\">===</span> bottom <span class=\"token operator\">&amp;&amp;</span> left <span class=\"token operator\">&lt;=</span> right<span class=\"token punctuation\">)</span>\\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> left<span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> right<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> res<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>matrix<span class=\"token punctuation\">[</span>top<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\n  <span class=\"token comment\">// 剩下一列，从上到下依次添加</span>\\n  <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>left <span class=\"token operator\">===</span> right <span class=\"token operator\">&amp;&amp;</span> top <span class=\"token operator\">&lt;=</span> bottom<span class=\"token punctuation\">)</span>\\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> top<span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> bottom<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> res<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>matrix<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>left<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\n  <span class=\"token keyword\">return</span> res<span class=\"token punctuation\">;</span>\\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br><span class=\"line-number\">11</span><br><span class=\"line-number\">12</span><br><span class=\"line-number\">13</span><br><span class=\"line-number\">14</span><br><span class=\"line-number\">15</span><br><span class=\"line-number\">16</span><br><span class=\"line-number\">17</span><br><span class=\"line-number\">18</span><br><span class=\"line-number\">19</span><br><span class=\"line-number\">20</span><br><span class=\"line-number\">21</span><br><span class=\"line-number\">22</span><br><span class=\"line-number\">23</span><br><span class=\"line-number\">24</span><br><span class=\"line-number\">25</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<p>环形遍历到底 中途退出</p>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code><span class=\"token keyword\">var</span> <span class=\"token function-variable function\">spiralOrder</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>matrix<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>matrix<span class=\"token punctuation\">.</span>length <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\\n  <span class=\"token keyword\">const</span> res <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\\n  <span class=\"token keyword\">let</span> top <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\\n    bottom <span class=\"token operator\">=</span> matrix<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\\n    left <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\\n    right <span class=\"token operator\">=</span> matrix<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\\n  <span class=\"token comment\">// 即使top === bottom 或者 left === right 可能还剩一行或者一列</span>\\n  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>top <span class=\"token operator\">&lt;=</span> bottom <span class=\"token operator\">&amp;&amp;</span> left <span class=\"token operator\">&lt;=</span> right<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> left<span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> right<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> res<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>matrix<span class=\"token punctuation\">[</span>top<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\n    top<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// i = top 如果是最后一项 那么下面一个for循环不会运行</span>\\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> top<span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> bottom<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> res<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>matrix<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>right<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\n    right<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\\n    <span class=\"token comment\">// 跟上个方法的区别</span>\\n    <span class=\"token comment\">// 当top > bottom 或者 left > right 其中有条边界将交错</span>\\n    <span class=\"token comment\">// 即所有项都添加完成</span>\\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>top <span class=\"token operator\">></span> bottom <span class=\"token operator\">||</span> left <span class=\"token operator\">></span> right<span class=\"token punctuation\">)</span> <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> right<span class=\"token punctuation\">;</span> i <span class=\"token operator\">>=</span> left<span class=\"token punctuation\">;</span> i<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span> res<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>matrix<span class=\"token punctuation\">[</span>bottom<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\n    bottom<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> bottom<span class=\"token punctuation\">;</span> i <span class=\"token operator\">>=</span> top<span class=\"token punctuation\">;</span> i<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span> res<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>matrix<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>left<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\n    left<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\\n  <span class=\"token punctuation\">}</span>\\n  <span class=\"token keyword\">return</span> res<span class=\"token punctuation\">;</span>\\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br><span class=\"line-number\">11</span><br><span class=\"line-number\">12</span><br><span class=\"line-number\">13</span><br><span class=\"line-number\">14</span><br><span class=\"line-number\">15</span><br><span class=\"line-number\">16</span><br><span class=\"line-number\">17</span><br><span class=\"line-number\">18</span><br><span class=\"line-number\">19</span><br><span class=\"line-number\">20</span><br><span class=\"line-number\">21</span><br><span class=\"line-number\">22</span><br><span class=\"line-number\">23</span><br><span class=\"line-number\">24</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<h3 id=\"鼓励我一下：\"><a class=\"header-anchor\" href=\"#鼓励我一下：\" aria-hidden=\"true\">#</a> 鼓励我一下：</h3>\\n<p>觉得还不错的话，给我的项目点个<a href=\"https://github.com/OBKoro1/Brush_algorithm\" target=\"_blank\" rel=\"noopener noreferrer\">star<OutboundLink/></a>吧\\n\\x3c!-- 特殊字符串：用于修改/删除markdown的结尾提示语-OBKoro1 --\\x3e</p>\\n<h3 id=\"点个star支持我一下\"><a class=\"header-anchor\" href=\"#点个star支持我一下\" aria-hidden=\"true\">#</a> 点个<a href=\"https://github.com/OBKoro1/Brush_algorithm\" target=\"_blank\" rel=\"noopener noreferrer\">Star<OutboundLink/></a>支持我一下~</h3>\\n\\x3c!-- \\'特殊字符串：用于删除编译后的issue组件-OBKoro1 --\\x3e\\n'},{key:\"v-c46ad29ab7ef4\",path:\"/algorithm/medium/55%E9%A2%98%E8%B7%B3%E8%BF%9C%E6%B8%B8%E6%88%8F.html\",lastUpdated:1593678455e3,title:\"55 题跳远游戏\",headers:[{level:2,title:\"55 题跳远游戏\",slug:\"_55-题跳远游戏\"},{level:3,title:\"题目链接\",slug:\"题目链接\"},{level:3,title:\"难度：中等\",slug:\"难度：中等\"},{level:3,title:\"思路分析：\",slug:\"思路分析：\"},{level:3,title:\"想\",slug:\"想\"},{level:3,title:\"一\",slug:\"一\"},{level:3,title:\"想\",slug:\"想-2\"},{level:3,title:\"再\",slug:\"再\"},{level:3,title:\"看\",slug:\"看\"},{level:3,title:\"答\",slug:\"答\"},{level:3,title:\"案\",slug:\"案\"},{level:3,title:\"想\",slug:\"想-3\"},{level:3,title:\"一\",slug:\"一-2\"},{level:3,title:\"想\",slug:\"想-4\"},{level:3,title:\"再\",slug:\"再-2\"},{level:3,title:\"看\",slug:\"看-2\"},{level:3,title:\"答\",slug:\"答-2\"},{level:3,title:\"案\",slug:\"案-2\"},{level:3,title:\"代码：\",slug:\"代码：\"},{level:3,title:\"鼓励我一下：\",slug:\"鼓励我一下：\"},{level:3,title:\"点个Star支持我一下~\",slug:\"点个star支持我一下\"}],excerpt:'<h2 id=\"_55-题跳远游戏\"><a class=\"header-anchor\" href=\"#_55-题跳远游戏\" aria-hidden=\"true\">#</a> 55 题跳远游戏</h2>\\n<h3 id=\"题目链接\"><a class=\"header-anchor\" href=\"#题目链接\" aria-hidden=\"true\">#</a> <a href=\"https://leetcode-cn.com/problems/jump-game/\" target=\"_blank\" rel=\"noopener noreferrer\">题目链接<OutboundLink/></a></h3>\\n<h3 id=\"难度：中等\"><a class=\"header-anchor\" href=\"#难度：中等\" aria-hidden=\"true\">#</a> 难度：中等</h3>\\n<h3 id=\"思路分析：\"><a class=\"header-anchor\" href=\"#思路分析：\" aria-hidden=\"true\">#</a> 思路分析：</h3>\\n<p>贪心</p>\\n<h3 id=\"想\"><a class=\"header-anchor\" href=\"#想\" aria-hidden=\"true\">#</a> 想</h3>\\n<h3 id=\"一\"><a class=\"header-anchor\" href=\"#一\" aria-hidden=\"true\">#</a> 一</h3>\\n<h3 id=\"想-2\"><a class=\"header-anchor\" href=\"#想-2\" aria-hidden=\"true\">#</a> 想</h3>\\n<h3 id=\"再\"><a class=\"header-anchor\" href=\"#再\" aria-hidden=\"true\">#</a> 再</h3>\\n<h3 id=\"看\"><a class=\"header-anchor\" href=\"#看\" aria-hidden=\"true\">#</a> 看</h3>\\n<h3 id=\"答\"><a class=\"header-anchor\" href=\"#答\" aria-hidden=\"true\">#</a> 答</h3>\\n<h3 id=\"案\"><a class=\"header-anchor\" href=\"#案\" aria-hidden=\"true\">#</a> 案</h3>\\n<h3 id=\"想-3\"><a class=\"header-anchor\" href=\"#想-3\" aria-hidden=\"true\">#</a> 想</h3>\\n<h3 id=\"一-2\"><a class=\"header-anchor\" href=\"#一-2\" aria-hidden=\"true\">#</a> 一</h3>\\n<h3 id=\"想-4\"><a class=\"header-anchor\" href=\"#想-4\" aria-hidden=\"true\">#</a> 想</h3>\\n<h3 id=\"再-2\"><a class=\"header-anchor\" href=\"#再-2\" aria-hidden=\"true\">#</a> 再</h3>\\n<h3 id=\"看-2\"><a class=\"header-anchor\" href=\"#看-2\" aria-hidden=\"true\">#</a> 看</h3>\\n<h3 id=\"答-2\"><a class=\"header-anchor\" href=\"#答-2\" aria-hidden=\"true\">#</a> 答</h3>\\n<h3 id=\"案-2\"><a class=\"header-anchor\" href=\"#案-2\" aria-hidden=\"true\">#</a> 案</h3>\\n<h3 id=\"代码：\"><a class=\"header-anchor\" href=\"#代码：\" aria-hidden=\"true\">#</a> 代码：</h3>\\n<p>贪心</p>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code><span class=\"token keyword\">var</span> <span class=\"token function-variable function\">canJump</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n  <span class=\"token keyword\">let</span> canJumpMax <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 下一步的最远距离</span>\\n  <span class=\"token keyword\">let</span> last_canJumpMax <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 上一步的最远距离</span>\\n  <span class=\"token keyword\">let</span> len <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>\\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> len<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n    canJumpMax <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span>canJumpMax<span class=\"token punctuation\">,</span> i <span class=\"token operator\">+</span> nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 下一步的最远距离</span>\\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>last_canJumpMax <span class=\"token operator\">===</span> i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n      last_canJumpMax <span class=\"token operator\">=</span> canJumpMax<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 当前的最远距离</span>\\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>last_canJumpMax <span class=\"token operator\">&lt;</span> i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n      <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 最远距离无法到达终点即false</span>\\n    <span class=\"token punctuation\">}</span>\\n  <span class=\"token punctuation\">}</span>\\n  <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br><span class=\"line-number\">11</span><br><span class=\"line-number\">12</span><br><span class=\"line-number\">13</span><br><span class=\"line-number\">14</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<h3 id=\"鼓励我一下：\"><a class=\"header-anchor\" href=\"#鼓励我一下：\" aria-hidden=\"true\">#</a> 鼓励我一下：</h3>\\n<p>觉得还不错的话，给我的项目点个<a href=\"https://github.com/OBKoro1/Brush_algorithm\" target=\"_blank\" rel=\"noopener noreferrer\">star<OutboundLink/></a>吧\\n\\x3c!-- 特殊字符串：用于修改/删除markdown的结尾提示语-OBKoro1 --\\x3e</p>\\n<h3 id=\"点个star支持我一下\"><a class=\"header-anchor\" href=\"#点个star支持我一下\" aria-hidden=\"true\">#</a> 点个<a href=\"https://github.com/OBKoro1/Brush_algorithm\" target=\"_blank\" rel=\"noopener noreferrer\">Star<OutboundLink/></a>支持我一下~</h3>\\n\\x3c!-- \\'特殊字符串：用于删除编译后的issue组件-OBKoro1 --\\x3e\\n'},{key:\"v-3ebe26cec5483\",path:\"/algorithm/medium/56%E5%90%88%E5%B9%B6%E5%8C%BA%E9%97%B4.html\",lastUpdated:1593678455e3,title:\"56 合并区间\",headers:[{level:2,title:\"56 合并区间\",slug:\"_56-合并区间\"},{level:3,title:\"题目链接\",slug:\"题目链接\"},{level:3,title:\"难度：中等\",slug:\"难度：中等\"},{level:3,title:\"想\",slug:\"想\"},{level:3,title:\"一\",slug:\"一\"},{level:3,title:\"想\",slug:\"想-2\"},{level:3,title:\"再\",slug:\"再\"},{level:3,title:\"看\",slug:\"看\"},{level:3,title:\"答\",slug:\"答\"},{level:3,title:\"案\",slug:\"案\"},{level:3,title:\"想\",slug:\"想-3\"},{level:3,title:\"一\",slug:\"一-2\"},{level:3,title:\"想\",slug:\"想-4\"},{level:3,title:\"再\",slug:\"再-2\"},{level:3,title:\"看\",slug:\"看-2\"},{level:3,title:\"答\",slug:\"答-2\"},{level:3,title:\"案\",slug:\"案-2\"},{level:3,title:\"代码：\",slug:\"代码：\"},{level:3,title:\"鼓励我一下：\",slug:\"鼓励我一下：\"},{level:3,title:\"点个Star支持我一下~\",slug:\"点个star支持我一下\"}],excerpt:'<h2 id=\"_56-合并区间\"><a class=\"header-anchor\" href=\"#_56-合并区间\" aria-hidden=\"true\">#</a> 56 合并区间</h2>\\n<h3 id=\"题目链接\"><a class=\"header-anchor\" href=\"#题目链接\" aria-hidden=\"true\">#</a> <a href=\"https://leetcode-cn.com/problems/merge-intervals/\" target=\"_blank\" rel=\"noopener noreferrer\">题目链接<OutboundLink/></a></h3>\\n<h3 id=\"难度：中等\"><a class=\"header-anchor\" href=\"#难度：中等\" aria-hidden=\"true\">#</a> 难度：中等</h3>\\n<h3 id=\"想\"><a class=\"header-anchor\" href=\"#想\" aria-hidden=\"true\">#</a> 想</h3>\\n<h3 id=\"一\"><a class=\"header-anchor\" href=\"#一\" aria-hidden=\"true\">#</a> 一</h3>\\n<h3 id=\"想-2\"><a class=\"header-anchor\" href=\"#想-2\" aria-hidden=\"true\">#</a> 想</h3>\\n<h3 id=\"再\"><a class=\"header-anchor\" href=\"#再\" aria-hidden=\"true\">#</a> 再</h3>\\n<h3 id=\"看\"><a class=\"header-anchor\" href=\"#看\" aria-hidden=\"true\">#</a> 看</h3>\\n<h3 id=\"答\"><a class=\"header-anchor\" href=\"#答\" aria-hidden=\"true\">#</a> 答</h3>\\n<h3 id=\"案\"><a class=\"header-anchor\" href=\"#案\" aria-hidden=\"true\">#</a> 案</h3>\\n<h3 id=\"想-3\"><a class=\"header-anchor\" href=\"#想-3\" aria-hidden=\"true\">#</a> 想</h3>\\n<h3 id=\"一-2\"><a class=\"header-anchor\" href=\"#一-2\" aria-hidden=\"true\">#</a> 一</h3>\\n<h3 id=\"想-4\"><a class=\"header-anchor\" href=\"#想-4\" aria-hidden=\"true\">#</a> 想</h3>\\n<h3 id=\"再-2\"><a class=\"header-anchor\" href=\"#再-2\" aria-hidden=\"true\">#</a> 再</h3>\\n<h3 id=\"看-2\"><a class=\"header-anchor\" href=\"#看-2\" aria-hidden=\"true\">#</a> 看</h3>\\n<h3 id=\"答-2\"><a class=\"header-anchor\" href=\"#答-2\" aria-hidden=\"true\">#</a> 答</h3>\\n<h3 id=\"案-2\"><a class=\"header-anchor\" href=\"#案-2\" aria-hidden=\"true\">#</a> 案</h3>\\n<h3 id=\"代码：\"><a class=\"header-anchor\" href=\"#代码：\" aria-hidden=\"true\">#</a> 代码：</h3>\\n<p>排序 即将添加的元素和已添加元素之间的对比</p>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code><span class=\"token comment\">/**\\n * @param {number[][]} intervals\\n * @return {number[][]}\\n */</span>\\n<span class=\"token keyword\">var</span> <span class=\"token function-variable function\">merge</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>intervals<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>intervals<span class=\"token punctuation\">.</span>length <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\\n  <span class=\"token keyword\">var</span> res <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\\n  <span class=\"token comment\">// 排序二维数组 递增的数组</span>\\n  intervals<span class=\"token punctuation\">.</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n    <span class=\"token keyword\">return</span> a<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> b<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\n  <span class=\"token comment\">// 初始化区间 从二维数组的第二个元素开始比较</span>\\n  res<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>intervals<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> intervals<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n    <span class=\"token comment\">// 当前元素的左边界> 已添加元素的右边界 即为新的区间</span>\\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>intervals<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> res<span class=\"token punctuation\">[</span>res<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n      res<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>intervals<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>intervals<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> res<span class=\"token punctuation\">[</span>res<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n      <span class=\"token comment\">// 当前元素的右边界 大于已添加元素的右边界 它们重合 合并元素</span>\\n      res<span class=\"token punctuation\">[</span>res<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> intervals<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 当前元素的最大值赋值给已添加元素的最大值</span>\\n    <span class=\"token punctuation\">}</span>\\n  <span class=\"token punctuation\">}</span>\\n  <span class=\"token keyword\">return</span> res<span class=\"token punctuation\">;</span>\\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br><span class=\"line-number\">11</span><br><span class=\"line-number\">12</span><br><span class=\"line-number\">13</span><br><span class=\"line-number\">14</span><br><span class=\"line-number\">15</span><br><span class=\"line-number\">16</span><br><span class=\"line-number\">17</span><br><span class=\"line-number\">18</span><br><span class=\"line-number\">19</span><br><span class=\"line-number\">20</span><br><span class=\"line-number\">21</span><br><span class=\"line-number\">22</span><br><span class=\"line-number\">23</span><br><span class=\"line-number\">24</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<h3 id=\"鼓励我一下：\"><a class=\"header-anchor\" href=\"#鼓励我一下：\" aria-hidden=\"true\">#</a> 鼓励我一下：</h3>\\n<p>觉得还不错的话，给我的项目点个<a href=\"https://github.com/OBKoro1/Brush_algorithm\" target=\"_blank\" rel=\"noopener noreferrer\">star<OutboundLink/></a>吧\\n\\x3c!-- 特殊字符串：用于修改/删除markdown的结尾提示语-OBKoro1 --\\x3e</p>\\n<h3 id=\"点个star支持我一下\"><a class=\"header-anchor\" href=\"#点个star支持我一下\" aria-hidden=\"true\">#</a> 点个<a href=\"https://github.com/OBKoro1/Brush_algorithm\" target=\"_blank\" rel=\"noopener noreferrer\">Star<OutboundLink/></a>支持我一下~</h3>\\n\\x3c!-- \\'特殊字符串：用于删除编译后的issue组件-OBKoro1 --\\x3e\\n'},{key:\"v-e01412358136\",path:\"/algorithm/medium/5%E6%9C%80%E9%95%BF%E5%9B%9E%E6%96%87%E5%AD%90%E4%B8%B2.html\",lastUpdated:1593678455e3,title:\"5 最长回文子串\",headers:[{level:2,title:\"5 最长回文子串\",slug:\"_5-最长回文子串\"},{level:3,title:\"题目链接\",slug:\"题目链接\"},{level:3,title:\"难度：中等\",slug:\"难度：中等\"},{level:3,title:\"思路:\",slug:\"思路\"},{level:3,title:\"想\",slug:\"想\"},{level:3,title:\"一\",slug:\"一\"},{level:3,title:\"想\",slug:\"想-2\"},{level:3,title:\"再\",slug:\"再\"},{level:3,title:\"看\",slug:\"看\"},{level:3,title:\"答\",slug:\"答\"},{level:3,title:\"案\",slug:\"案\"},{level:3,title:\"想\",slug:\"想-3\"},{level:3,title:\"一\",slug:\"一-2\"},{level:3,title:\"想\",slug:\"想-4\"},{level:3,title:\"再\",slug:\"再-2\"},{level:3,title:\"看\",slug:\"看-2\"},{level:3,title:\"答\",slug:\"答-2\"},{level:3,title:\"案\",slug:\"案-2\"},{level:3,title:\"代码：\",slug:\"代码：\"},{level:3,title:\"鼓励我一下：\",slug:\"鼓励我一下：\"},{level:3,title:\"点个Star支持我一下~\",slug:\"点个star支持我一下\"}],excerpt:'<h2 id=\"_5-最长回文子串\"><a class=\"header-anchor\" href=\"#_5-最长回文子串\" aria-hidden=\"true\">#</a> 5 最长回文子串</h2>\\n<h3 id=\"题目链接\"><a class=\"header-anchor\" href=\"#题目链接\" aria-hidden=\"true\">#</a> <a href=\"https://leetcode-cn.com/problems/longest-palindromic-substring/\" target=\"_blank\" rel=\"noopener noreferrer\">题目链接<OutboundLink/></a></h3>\\n<h3 id=\"难度：中等\"><a class=\"header-anchor\" href=\"#难度：中等\" aria-hidden=\"true\">#</a> 难度：中等</h3>\\n<h3 id=\"思路\"><a class=\"header-anchor\" href=\"#思路\" aria-hidden=\"true\">#</a> 思路:</h3>\\n<p>中心扩展法</p>\\n<h3 id=\"想\"><a class=\"header-anchor\" href=\"#想\" aria-hidden=\"true\">#</a> 想</h3>\\n<h3 id=\"一\"><a class=\"header-anchor\" href=\"#一\" aria-hidden=\"true\">#</a> 一</h3>\\n<h3 id=\"想-2\"><a class=\"header-anchor\" href=\"#想-2\" aria-hidden=\"true\">#</a> 想</h3>\\n<h3 id=\"再\"><a class=\"header-anchor\" href=\"#再\" aria-hidden=\"true\">#</a> 再</h3>\\n<h3 id=\"看\"><a class=\"header-anchor\" href=\"#看\" aria-hidden=\"true\">#</a> 看</h3>\\n<h3 id=\"答\"><a class=\"header-anchor\" href=\"#答\" aria-hidden=\"true\">#</a> 答</h3>\\n<h3 id=\"案\"><a class=\"header-anchor\" href=\"#案\" aria-hidden=\"true\">#</a> 案</h3>\\n<h3 id=\"想-3\"><a class=\"header-anchor\" href=\"#想-3\" aria-hidden=\"true\">#</a> 想</h3>\\n<h3 id=\"一-2\"><a class=\"header-anchor\" href=\"#一-2\" aria-hidden=\"true\">#</a> 一</h3>\\n<h3 id=\"想-4\"><a class=\"header-anchor\" href=\"#想-4\" aria-hidden=\"true\">#</a> 想</h3>\\n<h3 id=\"再-2\"><a class=\"header-anchor\" href=\"#再-2\" aria-hidden=\"true\">#</a> 再</h3>\\n<h3 id=\"看-2\"><a class=\"header-anchor\" href=\"#看-2\" aria-hidden=\"true\">#</a> 看</h3>\\n<h3 id=\"答-2\"><a class=\"header-anchor\" href=\"#答-2\" aria-hidden=\"true\">#</a> 答</h3>\\n<h3 id=\"案-2\"><a class=\"header-anchor\" href=\"#案-2\" aria-hidden=\"true\">#</a> 案</h3>\\n<h3 id=\"代码：\"><a class=\"header-anchor\" href=\"#代码：\" aria-hidden=\"true\">#</a> 代码：</h3>\\n<p>双指针：中心扩展</p>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code><span class=\"token comment\">/**\\n * @param {string} s\\n * @return {string}\\n */</span>\\n<span class=\"token keyword\">var</span> <span class=\"token function-variable function\">longestPalindrome</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n  <span class=\"token keyword\">let</span> result <span class=\"token operator\">=</span> s<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">||</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span>\\n  <span class=\"token comment\">// 遍历整个字符串</span>\\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> s<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n    <span class=\"token comment\">// 选择一个中心点 j&lt;=2尝试偶数和奇数两种形式的中心点</span>\\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> j <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n      <span class=\"token comment\">// 对称回文或者中心点回文</span>\\n      <span class=\"token keyword\">let</span> left <span class=\"token operator\">=</span> i<span class=\"token punctuation\">,</span> <span class=\"token comment\">// 左</span>\\n        right <span class=\"token operator\">=</span> i <span class=\"token operator\">+</span> j<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 右</span>\\n      <span class=\"token comment\">// 当左右两遍的字符相同时 向外扩展直到两端不相同</span>\\n      <span class=\"token comment\">// 左右的边界</span>\\n      <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>left <span class=\"token operator\">>=</span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> right <span class=\"token operator\">&lt;</span> s<span class=\"token punctuation\">.</span>length <span class=\"token operator\">&amp;&amp;</span> s<span class=\"token punctuation\">[</span>left<span class=\"token punctuation\">]</span> <span class=\"token operator\">===</span> s<span class=\"token punctuation\">[</span>right<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n        left<span class=\"token operator\">--</span><span class=\"token punctuation\">,</span> right<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 扩展</span>\\n      <span class=\"token punctuation\">}</span>\\n      <span class=\"token comment\">// 找到回文</span>\\n      <span class=\"token keyword\">let</span> length <span class=\"token operator\">=</span> right <span class=\"token operator\">-</span> left <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// (right - 1) - (left + 1) + 1</span>\\n      <span class=\"token comment\">// 对比 更新回文</span>\\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>length <span class=\"token operator\">></span> result<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n        result <span class=\"token operator\">=</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">substr</span><span class=\"token punctuation\">(</span>left <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\n      <span class=\"token punctuation\">}</span>\\n    <span class=\"token punctuation\">}</span>\\n  <span class=\"token punctuation\">}</span>\\n  <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br><span class=\"line-number\">11</span><br><span class=\"line-number\">12</span><br><span class=\"line-number\">13</span><br><span class=\"line-number\">14</span><br><span class=\"line-number\">15</span><br><span class=\"line-number\">16</span><br><span class=\"line-number\">17</span><br><span class=\"line-number\">18</span><br><span class=\"line-number\">19</span><br><span class=\"line-number\">20</span><br><span class=\"line-number\">21</span><br><span class=\"line-number\">22</span><br><span class=\"line-number\">23</span><br><span class=\"line-number\">24</span><br><span class=\"line-number\">25</span><br><span class=\"line-number\">26</span><br><span class=\"line-number\">27</span><br><span class=\"line-number\">28</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<p>动态规划: 中心扩展</p>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code><span class=\"token comment\">/**\\n * @param {string} s\\n * @return {string}\\n */</span>\\n<span class=\"token keyword\">var</span> <span class=\"token function-variable function\">longestPalindrome</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n    <span class=\"token keyword\">let</span> n <span class=\"token operator\">=</span> s<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>\\n    <span class=\"token keyword\">let</span> res <span class=\"token operator\">=</span> <span class=\"token string\">\\'\\'</span><span class=\"token punctuation\">;</span>\\n    <span class=\"token keyword\">let</span> dp <span class=\"token operator\">=</span> Array<span class=\"token punctuation\">.</span><span class=\"token keyword\">from</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Array</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Array</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">fill</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> n<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i <span class=\"token operator\">>=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> j <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span>j <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span>j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\\n            dp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> s<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> s<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span>j <span class=\"token operator\">-</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">2</span> <span class=\"token operator\">||</span> dp<span class=\"token punctuation\">[</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>dp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">&amp;&amp;</span> j <span class=\"token operator\">-</span> i <span class=\"token operator\">+</span><span class=\"token number\">1</span> <span class=\"token operator\">></span> res<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\\n                res <span class=\"token operator\">=</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">substring</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span>j<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\n            <span class=\"token punctuation\">}</span>\\n        <span class=\"token punctuation\">}</span>\\n    <span class=\"token punctuation\">}</span>\\n    <span class=\"token keyword\">return</span> res<span class=\"token punctuation\">;</span>\\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br><span class=\"line-number\">11</span><br><span class=\"line-number\">12</span><br><span class=\"line-number\">13</span><br><span class=\"line-number\">14</span><br><span class=\"line-number\">15</span><br><span class=\"line-number\">16</span><br><span class=\"line-number\">17</span><br><span class=\"line-number\">18</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<h3 id=\"鼓励我一下：\"><a class=\"header-anchor\" href=\"#鼓励我一下：\" aria-hidden=\"true\">#</a> 鼓励我一下：</h3>\\n<p>觉得还不错的话，给我的项目点个<a href=\"https://github.com/OBKoro1/Brush_algorithm\" target=\"_blank\" rel=\"noopener noreferrer\">star<OutboundLink/></a>吧\\n\\x3c!-- 特殊字符串：用于修改/删除markdown的结尾提示语-OBKoro1 --\\x3e</p>\\n<h3 id=\"点个star支持我一下\"><a class=\"header-anchor\" href=\"#点个star支持我一下\" aria-hidden=\"true\">#</a> 点个<a href=\"https://github.com/OBKoro1/Brush_algorithm\" target=\"_blank\" rel=\"noopener noreferrer\">Star<OutboundLink/></a>支持我一下~</h3>\\n\\x3c!-- \\'特殊字符串：用于删除编译后的issue组件-OBKoro1 --\\x3e\\n'},{key:\"v-744ec355c9318\",path:\"/algorithm/medium/64%E9%A2%98%E6%9C%80%E5%B0%8F%E8%B7%AF%E5%BE%84%E5%92%8C.html\",lastUpdated:1593678455e3,title:\"64 题最小路径和\",headers:[{level:2,title:\"64 题最小路径和\",slug:\"_64-题最小路径和\"},{level:3,title:\"题目链接\",slug:\"题目链接\"},{level:3,title:\"难度：中等\",slug:\"难度：中等\"},{level:3,title:\"思路分析：\",slug:\"思路分析：\"},{level:3,title:\"想\",slug:\"想\"},{level:3,title:\"一\",slug:\"一\"},{level:3,title:\"想\",slug:\"想-2\"},{level:3,title:\"再\",slug:\"再\"},{level:3,title:\"看\",slug:\"看\"},{level:3,title:\"答\",slug:\"答\"},{level:3,title:\"案\",slug:\"案\"},{level:3,title:\"想\",slug:\"想-3\"},{level:3,title:\"一\",slug:\"一-2\"},{level:3,title:\"想\",slug:\"想-4\"},{level:3,title:\"再\",slug:\"再-2\"},{level:3,title:\"看\",slug:\"看-2\"},{level:3,title:\"答\",slug:\"答-2\"},{level:3,title:\"案\",slug:\"案-2\"},{level:3,title:\"代码：\",slug:\"代码：\"},{level:3,title:\"鼓励我一下：\",slug:\"鼓励我一下：\"},{level:3,title:\"点个Star支持我一下~\",slug:\"点个star支持我一下\"}],excerpt:'<h2 id=\"_64-题最小路径和\"><a class=\"header-anchor\" href=\"#_64-题最小路径和\" aria-hidden=\"true\">#</a> 64 题最小路径和</h2>\\n<h3 id=\"题目链接\"><a class=\"header-anchor\" href=\"#题目链接\" aria-hidden=\"true\">#</a> <a href=\"https://leetcode-cn.com/problems/minimum-path-sum/\" target=\"_blank\" rel=\"noopener noreferrer\">题目链接<OutboundLink/></a></h3>\\n<h3 id=\"难度：中等\"><a class=\"header-anchor\" href=\"#难度：中等\" aria-hidden=\"true\">#</a> 难度：中等</h3>\\n<h3 id=\"思路分析：\"><a class=\"header-anchor\" href=\"#思路分析：\" aria-hidden=\"true\">#</a> 思路分析：</h3>\\n<p>动态规划</p>\\n<h3 id=\"想\"><a class=\"header-anchor\" href=\"#想\" aria-hidden=\"true\">#</a> 想</h3>\\n<h3 id=\"一\"><a class=\"header-anchor\" href=\"#一\" aria-hidden=\"true\">#</a> 一</h3>\\n<h3 id=\"想-2\"><a class=\"header-anchor\" href=\"#想-2\" aria-hidden=\"true\">#</a> 想</h3>\\n<h3 id=\"再\"><a class=\"header-anchor\" href=\"#再\" aria-hidden=\"true\">#</a> 再</h3>\\n<h3 id=\"看\"><a class=\"header-anchor\" href=\"#看\" aria-hidden=\"true\">#</a> 看</h3>\\n<h3 id=\"答\"><a class=\"header-anchor\" href=\"#答\" aria-hidden=\"true\">#</a> 答</h3>\\n<h3 id=\"案\"><a class=\"header-anchor\" href=\"#案\" aria-hidden=\"true\">#</a> 案</h3>\\n<h3 id=\"想-3\"><a class=\"header-anchor\" href=\"#想-3\" aria-hidden=\"true\">#</a> 想</h3>\\n<h3 id=\"一-2\"><a class=\"header-anchor\" href=\"#一-2\" aria-hidden=\"true\">#</a> 一</h3>\\n<h3 id=\"想-4\"><a class=\"header-anchor\" href=\"#想-4\" aria-hidden=\"true\">#</a> 想</h3>\\n<h3 id=\"再-2\"><a class=\"header-anchor\" href=\"#再-2\" aria-hidden=\"true\">#</a> 再</h3>\\n<h3 id=\"看-2\"><a class=\"header-anchor\" href=\"#看-2\" aria-hidden=\"true\">#</a> 看</h3>\\n<h3 id=\"答-2\"><a class=\"header-anchor\" href=\"#答-2\" aria-hidden=\"true\">#</a> 答</h3>\\n<h3 id=\"案-2\"><a class=\"header-anchor\" href=\"#案-2\" aria-hidden=\"true\">#</a> 案</h3>\\n<h3 id=\"代码：\"><a class=\"header-anchor\" href=\"#代码：\" aria-hidden=\"true\">#</a> 代码：</h3>\\n<p>动态规划 由下至上</p>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code><span class=\"token comment\">// 由下至上找出每个步骤离终点的最佳距离</span>\\n<span class=\"token keyword\">var</span> <span class=\"token function-variable function\">minPathSum</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>grid<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n  <span class=\"token keyword\">const</span> m <span class=\"token operator\">=</span> grid<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">,</span> <span class=\"token comment\">// 二维长度</span>\\n    n <span class=\"token operator\">=</span> grid<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 二维宽度</span>\\n  <span class=\"token comment\">// 倒序遍历</span>\\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> m <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">>=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> j <span class=\"token operator\">=</span> n <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">>=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n      <span class=\"token comment\">// 计算每一步移动到终点位置的代价 得到最终代价</span>\\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span> <span class=\"token operator\">&lt;</span> m <span class=\"token operator\">&amp;&amp;</span> j <span class=\"token operator\">+</span> <span class=\"token number\">1</span> <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n        <span class=\"token comment\">// 可以向左和向上移动的情况 取最小值 动规</span>\\n        grid<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">+=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">min</span><span class=\"token punctuation\">(</span>grid<span class=\"token punctuation\">[</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> grid<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\n      <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span> <span class=\"token operator\">&lt;</span> m<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n        <span class=\"token comment\">// 只能向上移动的情况</span>\\n        <span class=\"token comment\">// 加上下一行数组的最后一个元素 计算向上移动的代价</span>\\n        grid<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">+=</span> grid<span class=\"token punctuation\">[</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\\n      <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>j <span class=\"token operator\">+</span> <span class=\"token number\">1</span> <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n        <span class=\"token comment\">// 只能向左移动的情况</span>\\n        <span class=\"token comment\">// 加上右侧的原先的值 计算向左移动的代价</span>\\n        grid<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">+=</span> grid<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\\n      <span class=\"token punctuation\">}</span>\\n    <span class=\"token punctuation\">}</span>\\n  <span class=\"token punctuation\">}</span>\\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"grid\"</span><span class=\"token punctuation\">,</span> grid<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\n  <span class=\"token keyword\">return</span> grid<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 由起点到终点的位置</span>\\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br><span class=\"line-number\">11</span><br><span class=\"line-number\">12</span><br><span class=\"line-number\">13</span><br><span class=\"line-number\">14</span><br><span class=\"line-number\">15</span><br><span class=\"line-number\">16</span><br><span class=\"line-number\">17</span><br><span class=\"line-number\">18</span><br><span class=\"line-number\">19</span><br><span class=\"line-number\">20</span><br><span class=\"line-number\">21</span><br><span class=\"line-number\">22</span><br><span class=\"line-number\">23</span><br><span class=\"line-number\">24</span><br><span class=\"line-number\">25</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<p>动态规划 由上至下</p>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code><span class=\"token keyword\">var</span> <span class=\"token function-variable function\">minPathSum</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>grid<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n  <span class=\"token keyword\">const</span> m <span class=\"token operator\">=</span> grid<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">,</span> <span class=\"token comment\">// 二维长度</span>\\n    n <span class=\"token operator\">=</span> grid<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 二维宽度</span>\\n  <span class=\"token keyword\">const</span> memo <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span><span class=\"token function\">Array</span><span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span><span class=\"token function\">Array</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 初始化二维数组</span>\\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">calcPath</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> j<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span> <span class=\"token operator\">===</span> m <span class=\"token operator\">&amp;&amp;</span> j <span class=\"token operator\">+</span> <span class=\"token number\">1</span> <span class=\"token operator\">===</span> n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n      <span class=\"token keyword\">return</span> grid<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 返回终点位置的值</span>\\n    <span class=\"token punctuation\">}</span>\\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>memo<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n      <span class=\"token keyword\">return</span> memo<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 计算过了, 不重复计算</span>\\n    <span class=\"token punctuation\">}</span>\\n    <span class=\"token keyword\">let</span> min <span class=\"token operator\">=</span> <span class=\"token number\">Infinity</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 初始化最大值</span>\\n    <span class=\"token comment\">// 计算往右走以及往下走的步数，取最小值</span>\\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span> <span class=\"token operator\">&lt;</span> m<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n      <span class=\"token comment\">// 防止右侧出界</span>\\n      <span class=\"token comment\">// 计算往右走的最终代价</span>\\n      min <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">min</span><span class=\"token punctuation\">(</span>min<span class=\"token punctuation\">,</span> <span class=\"token function\">calcPath</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\n    <span class=\"token punctuation\">}</span>\\n    <span class=\"token comment\">// 往下走的步数</span>\\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>j <span class=\"token operator\">+</span> <span class=\"token number\">1</span> <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n      <span class=\"token comment\">// 防止下方出界</span>\\n      <span class=\"token comment\">// 计算往下走的最终代价</span>\\n      min <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">min</span><span class=\"token punctuation\">(</span>min<span class=\"token punctuation\">,</span> <span class=\"token function\">calcPath</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> j <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\n    <span class=\"token punctuation\">}</span>\\n    memo<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> min <span class=\"token operator\">+</span> grid<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 终点到当前位置的代价</span>\\n    <span class=\"token keyword\">return</span> memo<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 返回每个位置到终点位置的代价</span>\\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\\n  <span class=\"token keyword\">let</span> res <span class=\"token operator\">=</span> <span class=\"token function\">calcPath</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\n  <span class=\"token keyword\">return</span> res<span class=\"token punctuation\">;</span>\\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br><span class=\"line-number\">11</span><br><span class=\"line-number\">12</span><br><span class=\"line-number\">13</span><br><span class=\"line-number\">14</span><br><span class=\"line-number\">15</span><br><span class=\"line-number\">16</span><br><span class=\"line-number\">17</span><br><span class=\"line-number\">18</span><br><span class=\"line-number\">19</span><br><span class=\"line-number\">20</span><br><span class=\"line-number\">21</span><br><span class=\"line-number\">22</span><br><span class=\"line-number\">23</span><br><span class=\"line-number\">24</span><br><span class=\"line-number\">25</span><br><span class=\"line-number\">26</span><br><span class=\"line-number\">27</span><br><span class=\"line-number\">28</span><br><span class=\"line-number\">29</span><br><span class=\"line-number\">30</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<h3 id=\"鼓励我一下：\"><a class=\"header-anchor\" href=\"#鼓励我一下：\" aria-hidden=\"true\">#</a> 鼓励我一下：</h3>\\n<p>觉得还不错的话，给我的项目点个<a href=\"https://github.com/OBKoro1/Brush_algorithm\" target=\"_blank\" rel=\"noopener noreferrer\">star<OutboundLink/></a>吧\\n\\x3c!-- 特殊字符串：用于修改/删除markdown的结尾提示语-OBKoro1 --\\x3e</p>\\n<h3 id=\"点个star支持我一下\"><a class=\"header-anchor\" href=\"#点个star支持我一下\" aria-hidden=\"true\">#</a> 点个<a href=\"https://github.com/OBKoro1/Brush_algorithm\" target=\"_blank\" rel=\"noopener noreferrer\">Star<OutboundLink/></a>支持我一下~</h3>\\n\\x3c!-- \\'特殊字符串：用于删除编译后的issue组件-OBKoro1 --\\x3e\\n'},{key:\"v-e81054f8959f5\",path:\"/algorithm/medium/735%E9%A2%98%E8%A1%8C%E6%98%9F%E7%A2%B0%E6%92%9E.html\",lastUpdated:1593678455e3,title:\"735 题行星碰撞\",headers:[{level:2,title:\"735 题行星碰撞\",slug:\"_735-题行星碰撞\"},{level:3,title:\"题目链接\",slug:\"题目链接\"},{level:3,title:\"难度：中等\",slug:\"难度：中等\"},{level:3,title:\"思路分析：\",slug:\"思路分析：\"},{level:3,title:\"想\",slug:\"想\"},{level:3,title:\"一\",slug:\"一\"},{level:3,title:\"想\",slug:\"想-2\"},{level:3,title:\"再\",slug:\"再\"},{level:3,title:\"看\",slug:\"看\"},{level:3,title:\"答\",slug:\"答\"},{level:3,title:\"案\",slug:\"案\"},{level:3,title:\"想\",slug:\"想-3\"},{level:3,title:\"一\",slug:\"一-2\"},{level:3,title:\"想\",slug:\"想-4\"},{level:3,title:\"再\",slug:\"再-2\"},{level:3,title:\"看\",slug:\"看-2\"},{level:3,title:\"答\",slug:\"答-2\"},{level:3,title:\"案\",slug:\"案-2\"},{level:3,title:\"代码：\",slug:\"代码：\"},{level:3,title:\"鼓励我一下：\",slug:\"鼓励我一下：\"},{level:3,title:\"点个Star支持我一下~\",slug:\"点个star支持我一下\"}],excerpt:'<h2 id=\"_735-题行星碰撞\"><a class=\"header-anchor\" href=\"#_735-题行星碰撞\" aria-hidden=\"true\">#</a> 735 题行星碰撞</h2>\\n<h3 id=\"题目链接\"><a class=\"header-anchor\" href=\"#题目链接\" aria-hidden=\"true\">#</a> <a href=\"https://leetcode-cn.com/problems/asteroid-collision/\" target=\"_blank\" rel=\"noopener noreferrer\">题目链接<OutboundLink/></a></h3>\\n<h3 id=\"难度：中等\"><a class=\"header-anchor\" href=\"#难度：中等\" aria-hidden=\"true\">#</a> 难度：中等</h3>\\n<h3 id=\"思路分析：\"><a class=\"header-anchor\" href=\"#思路分析：\" aria-hidden=\"true\">#</a> 思路分析：</h3>\\n<h3 id=\"想\"><a class=\"header-anchor\" href=\"#想\" aria-hidden=\"true\">#</a> 想</h3>\\n<h3 id=\"一\"><a class=\"header-anchor\" href=\"#一\" aria-hidden=\"true\">#</a> 一</h3>\\n<h3 id=\"想-2\"><a class=\"header-anchor\" href=\"#想-2\" aria-hidden=\"true\">#</a> 想</h3>\\n<h3 id=\"再\"><a class=\"header-anchor\" href=\"#再\" aria-hidden=\"true\">#</a> 再</h3>\\n<h3 id=\"看\"><a class=\"header-anchor\" href=\"#看\" aria-hidden=\"true\">#</a> 看</h3>\\n<h3 id=\"答\"><a class=\"header-anchor\" href=\"#答\" aria-hidden=\"true\">#</a> 答</h3>\\n<h3 id=\"案\"><a class=\"header-anchor\" href=\"#案\" aria-hidden=\"true\">#</a> 案</h3>\\n<h3 id=\"想-3\"><a class=\"header-anchor\" href=\"#想-3\" aria-hidden=\"true\">#</a> 想</h3>\\n<h3 id=\"一-2\"><a class=\"header-anchor\" href=\"#一-2\" aria-hidden=\"true\">#</a> 一</h3>\\n<h3 id=\"想-4\"><a class=\"header-anchor\" href=\"#想-4\" aria-hidden=\"true\">#</a> 想</h3>\\n<h3 id=\"再-2\"><a class=\"header-anchor\" href=\"#再-2\" aria-hidden=\"true\">#</a> 再</h3>\\n<h3 id=\"看-2\"><a class=\"header-anchor\" href=\"#看-2\" aria-hidden=\"true\">#</a> 看</h3>\\n<h3 id=\"答-2\"><a class=\"header-anchor\" href=\"#答-2\" aria-hidden=\"true\">#</a> 答</h3>\\n<h3 id=\"案-2\"><a class=\"header-anchor\" href=\"#案-2\" aria-hidden=\"true\">#</a> 案</h3>\\n<h3 id=\"代码：\"><a class=\"header-anchor\" href=\"#代码：\" aria-hidden=\"true\">#</a> 代码：</h3>\\n<p><strong>栈</strong></p>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code><span class=\"token keyword\">var</span> <span class=\"token function-variable function\">asteroidCollision</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>asteroids<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n  <span class=\"token keyword\">let</span> len <span class=\"token operator\">=</span> asteroids<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>\\n  <span class=\"token keyword\">let</span> stack <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> len<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n    stack<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>asteroids<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 一个一个值添加到栈里面 然后控制栈里面的元素</span>\\n    <span class=\"token comment\">// 栈中有两个值才比较</span>\\n    <span class=\"token comment\">// 验证最后一个值是负数最后第二个值是正数 它们才会碰撞</span>\\n    <span class=\"token comment\">// 如果最后一个值是正数 最后第二个值是负数 它们不会碰撞</span>\\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>\\n      stack<span class=\"token punctuation\">.</span>length <span class=\"token operator\">>=</span> <span class=\"token number\">2</span> <span class=\"token operator\">&amp;&amp;</span>\\n      stack<span class=\"token punctuation\">[</span>stack<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span>\\n      stack<span class=\"token punctuation\">[</span>stack<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> <span class=\"token number\">0</span>\\n    <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n      <span class=\"token comment\">// 获取绝对值</span>\\n      <span class=\"token keyword\">let</span> last <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">abs</span><span class=\"token punctuation\">(</span>stack<span class=\"token punctuation\">[</span>stack<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\n      <span class=\"token keyword\">let</span> last2 <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">abs</span><span class=\"token punctuation\">(</span>stack<span class=\"token punctuation\">[</span>stack<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>last <span class=\"token operator\">===</span> last2<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n        stack<span class=\"token punctuation\">.</span><span class=\"token function\">splice</span><span class=\"token punctuation\">(</span>stack<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 相同 一起销毁</span>\\n      <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>last <span class=\"token operator\">></span> last2<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n        stack<span class=\"token punctuation\">.</span><span class=\"token function\">splice</span><span class=\"token punctuation\">(</span>stack<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 最后一个值比较大 删除最后第二个</span>\\n      <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\\n        stack<span class=\"token punctuation\">.</span><span class=\"token function\">splice</span><span class=\"token punctuation\">(</span>stack<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 最后一个值比较小 删除最后第二个</span>\\n      <span class=\"token punctuation\">}</span>\\n    <span class=\"token punctuation\">}</span>\\n  <span class=\"token punctuation\">}</span>\\n  <span class=\"token keyword\">return</span> stack<span class=\"token punctuation\">;</span>\\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br><span class=\"line-number\">11</span><br><span class=\"line-number\">12</span><br><span class=\"line-number\">13</span><br><span class=\"line-number\">14</span><br><span class=\"line-number\">15</span><br><span class=\"line-number\">16</span><br><span class=\"line-number\">17</span><br><span class=\"line-number\">18</span><br><span class=\"line-number\">19</span><br><span class=\"line-number\">20</span><br><span class=\"line-number\">21</span><br><span class=\"line-number\">22</span><br><span class=\"line-number\">23</span><br><span class=\"line-number\">24</span><br><span class=\"line-number\">25</span><br><span class=\"line-number\">26</span><br><span class=\"line-number\">27</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<h3 id=\"鼓励我一下：\"><a class=\"header-anchor\" href=\"#鼓励我一下：\" aria-hidden=\"true\">#</a> 鼓励我一下：</h3>\\n<p>觉得还不错的话，给我的项目点个<a href=\"https://github.com/OBKoro1/Brush_algorithm\" target=\"_blank\" rel=\"noopener noreferrer\">star<OutboundLink/></a>吧\\n\\x3c!-- 特殊字符串：用于修改/删除markdown的结尾提示语-OBKoro1 --\\x3e</p>\\n<h3 id=\"点个star支持我一下\"><a class=\"header-anchor\" href=\"#点个star支持我一下\" aria-hidden=\"true\">#</a> 点个<a href=\"https://github.com/OBKoro1/Brush_algorithm\" target=\"_blank\" rel=\"noopener noreferrer\">Star<OutboundLink/></a>支持我一下~</h3>\\n\\x3c!-- \\'特殊字符串：用于删除编译后的issue组件-OBKoro1 --\\x3e\\n'},{key:\"v-bcd26a411967f\",path:\"/algorithm/medium/867%E9%A2%98%E8%BD%AC%E7%BD%AE%E7%9F%A9%E9%98%B5.html\",lastUpdated:1593678455e3,title:\"867 题转置矩阵\",headers:[{level:2,title:\"867 题转置矩阵\",slug:\"_867-题转置矩阵\"},{level:3,title:\"题目链接\",slug:\"题目链接\"},{level:3,title:\"难度：中等\",slug:\"难度：中等\"},{level:3,title:\"思路分析：\",slug:\"思路分析：\"},{level:3,title:\"想\",slug:\"想\"},{level:3,title:\"一\",slug:\"一\"},{level:3,title:\"想\",slug:\"想-2\"},{level:3,title:\"再\",slug:\"再\"},{level:3,title:\"看\",slug:\"看\"},{level:3,title:\"答\",slug:\"答\"},{level:3,title:\"案\",slug:\"案\"},{level:3,title:\"想\",slug:\"想-3\"},{level:3,title:\"一\",slug:\"一-2\"},{level:3,title:\"想\",slug:\"想-4\"},{level:3,title:\"再\",slug:\"再-2\"},{level:3,title:\"看\",slug:\"看-2\"},{level:3,title:\"答\",slug:\"答-2\"},{level:3,title:\"案\",slug:\"案-2\"},{level:3,title:\"代码：\",slug:\"代码：\"},{level:3,title:\"鼓励我一下：\",slug:\"鼓励我一下：\"},{level:3,title:\"点个Star支持我一下~\",slug:\"点个star支持我一下\"}],excerpt:'<h2 id=\"_867-题转置矩阵\"><a class=\"header-anchor\" href=\"#_867-题转置矩阵\" aria-hidden=\"true\">#</a> 867 题转置矩阵</h2>\\n<h3 id=\"题目链接\"><a class=\"header-anchor\" href=\"#题目链接\" aria-hidden=\"true\">#</a> <a href=\"https://leetcode-cn.com/problems/transpose-matrix\" target=\"_blank\" rel=\"noopener noreferrer\">题目链接<OutboundLink/></a></h3>\\n<h3 id=\"难度：中等\"><a class=\"header-anchor\" href=\"#难度：中等\" aria-hidden=\"true\">#</a> 难度：中等</h3>\\n<h3 id=\"思路分析：\"><a class=\"header-anchor\" href=\"#思路分析：\" aria-hidden=\"true\">#</a> 思路分析：</h3>\\n<p>将一个长方形横放改为竖放 每列为一个数组。</p>\\n<h3 id=\"想\"><a class=\"header-anchor\" href=\"#想\" aria-hidden=\"true\">#</a> 想</h3>\\n<h3 id=\"一\"><a class=\"header-anchor\" href=\"#一\" aria-hidden=\"true\">#</a> 一</h3>\\n<h3 id=\"想-2\"><a class=\"header-anchor\" href=\"#想-2\" aria-hidden=\"true\">#</a> 想</h3>\\n<h3 id=\"再\"><a class=\"header-anchor\" href=\"#再\" aria-hidden=\"true\">#</a> 再</h3>\\n<h3 id=\"看\"><a class=\"header-anchor\" href=\"#看\" aria-hidden=\"true\">#</a> 看</h3>\\n<h3 id=\"答\"><a class=\"header-anchor\" href=\"#答\" aria-hidden=\"true\">#</a> 答</h3>\\n<h3 id=\"案\"><a class=\"header-anchor\" href=\"#案\" aria-hidden=\"true\">#</a> 案</h3>\\n<h3 id=\"想-3\"><a class=\"header-anchor\" href=\"#想-3\" aria-hidden=\"true\">#</a> 想</h3>\\n<h3 id=\"一-2\"><a class=\"header-anchor\" href=\"#一-2\" aria-hidden=\"true\">#</a> 一</h3>\\n<h3 id=\"想-4\"><a class=\"header-anchor\" href=\"#想-4\" aria-hidden=\"true\">#</a> 想</h3>\\n<h3 id=\"再-2\"><a class=\"header-anchor\" href=\"#再-2\" aria-hidden=\"true\">#</a> 再</h3>\\n<h3 id=\"看-2\"><a class=\"header-anchor\" href=\"#看-2\" aria-hidden=\"true\">#</a> 看</h3>\\n<h3 id=\"答-2\"><a class=\"header-anchor\" href=\"#答-2\" aria-hidden=\"true\">#</a> 答</h3>\\n<h3 id=\"案-2\"><a class=\"header-anchor\" href=\"#案-2\" aria-hidden=\"true\">#</a> 案</h3>\\n<h3 id=\"代码：\"><a class=\"header-anchor\" href=\"#代码：\" aria-hidden=\"true\">#</a> 代码：</h3>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code><span class=\"token comment\">// 将一个长方形横放改为竖放 每列为一个数组</span>\\n<span class=\"token keyword\">var</span> <span class=\"token function-variable function\">transpose</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token constant\">A</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n  <span class=\"token keyword\">let</span> result <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\\n  <span class=\"token comment\">// 横向遍历 长度</span>\\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token constant\">A</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n    <span class=\"token keyword\">let</span> row <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\\n    <span class=\"token comment\">// 纵向遍历 宽度</span>\\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> <span class=\"token constant\">A</span><span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n      <span class=\"token comment\">// 添加宽度的值</span>\\n      row<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token constant\">A</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\n    <span class=\"token punctuation\">}</span>\\n    result<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>row<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\n  <span class=\"token punctuation\">}</span>\\n  <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br><span class=\"line-number\">11</span><br><span class=\"line-number\">12</span><br><span class=\"line-number\">13</span><br><span class=\"line-number\">14</span><br><span class=\"line-number\">15</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<h3 id=\"鼓励我一下：\"><a class=\"header-anchor\" href=\"#鼓励我一下：\" aria-hidden=\"true\">#</a> 鼓励我一下：</h3>\\n<p>觉得还不错的话，给我的项目点个<a href=\"https://github.com/OBKoro1/Brush_algorithm\" target=\"_blank\" rel=\"noopener noreferrer\">star<OutboundLink/></a>吧\\n\\x3c!-- 特殊字符串：用于修改/删除markdown的结尾提示语-OBKoro1 --\\x3e</p>\\n<h3 id=\"点个star支持我一下\"><a class=\"header-anchor\" href=\"#点个star支持我一下\" aria-hidden=\"true\">#</a> 点个<a href=\"https://github.com/OBKoro1/Brush_algorithm\" target=\"_blank\" rel=\"noopener noreferrer\">Star<OutboundLink/></a>支持我一下~</h3>\\n\\x3c!-- \\'特殊字符串：用于删除编译后的issue组件-OBKoro1 --\\x3e\\n'},{key:\"v-559ed802b999e\",path:\"/algorithm/medium/93%E5%A4%8D%E5%8E%9FIP%E5%9C%B0%E5%9D%80.html\",lastUpdated:1593678455e3,title:\"93 复原 IP 地址\",headers:[{level:2,title:\"93 复原 IP 地址\",slug:\"_93-复原-ip-地址\"},{level:3,title:\"题目链接\",slug:\"题目链接\"},{level:3,title:\"难度：中等\",slug:\"难度：中等\"},{level:3,title:\"思路分析：\",slug:\"思路分析：\"},{level:3,title:\"想\",slug:\"想\"},{level:3,title:\"一\",slug:\"一\"},{level:3,title:\"想\",slug:\"想-2\"},{level:3,title:\"再\",slug:\"再\"},{level:3,title:\"看\",slug:\"看\"},{level:3,title:\"答\",slug:\"答\"},{level:3,title:\"案\",slug:\"案\"},{level:3,title:\"想\",slug:\"想-3\"},{level:3,title:\"一\",slug:\"一-2\"},{level:3,title:\"想\",slug:\"想-4\"},{level:3,title:\"再\",slug:\"再-2\"},{level:3,title:\"看\",slug:\"看-2\"},{level:3,title:\"答\",slug:\"答-2\"},{level:3,title:\"案\",slug:\"案-2\"},{level:3,title:\"代码：\",slug:\"代码：\"},{level:3,title:\"鼓励我一下：\",slug:\"鼓励我一下：\"},{level:3,title:\"点个Star支持我一下~\",slug:\"点个star支持我一下\"}],excerpt:'<h2 id=\"_93-复原-ip-地址\"><a class=\"header-anchor\" href=\"#_93-复原-ip-地址\" aria-hidden=\"true\">#</a> 93 复原 IP 地址</h2>\\n<h3 id=\"题目链接\"><a class=\"header-anchor\" href=\"#题目链接\" aria-hidden=\"true\">#</a> <a href=\"\">题目链接</a></h3>\\n<h3 id=\"难度：中等\"><a class=\"header-anchor\" href=\"#难度：中等\" aria-hidden=\"true\">#</a> 难度：中等</h3>\\n<h3 id=\"思路分析：\"><a class=\"header-anchor\" href=\"#思路分析：\" aria-hidden=\"true\">#</a> 思路分析：</h3>\\n<p>编程题，递归</p>\\n<h3 id=\"想\"><a class=\"header-anchor\" href=\"#想\" aria-hidden=\"true\">#</a> 想</h3>\\n<h3 id=\"一\"><a class=\"header-anchor\" href=\"#一\" aria-hidden=\"true\">#</a> 一</h3>\\n<h3 id=\"想-2\"><a class=\"header-anchor\" href=\"#想-2\" aria-hidden=\"true\">#</a> 想</h3>\\n<h3 id=\"再\"><a class=\"header-anchor\" href=\"#再\" aria-hidden=\"true\">#</a> 再</h3>\\n<h3 id=\"看\"><a class=\"header-anchor\" href=\"#看\" aria-hidden=\"true\">#</a> 看</h3>\\n<h3 id=\"答\"><a class=\"header-anchor\" href=\"#答\" aria-hidden=\"true\">#</a> 答</h3>\\n<h3 id=\"案\"><a class=\"header-anchor\" href=\"#案\" aria-hidden=\"true\">#</a> 案</h3>\\n<h3 id=\"想-3\"><a class=\"header-anchor\" href=\"#想-3\" aria-hidden=\"true\">#</a> 想</h3>\\n<h3 id=\"一-2\"><a class=\"header-anchor\" href=\"#一-2\" aria-hidden=\"true\">#</a> 一</h3>\\n<h3 id=\"想-4\"><a class=\"header-anchor\" href=\"#想-4\" aria-hidden=\"true\">#</a> 想</h3>\\n<h3 id=\"再-2\"><a class=\"header-anchor\" href=\"#再-2\" aria-hidden=\"true\">#</a> 再</h3>\\n<h3 id=\"看-2\"><a class=\"header-anchor\" href=\"#看-2\" aria-hidden=\"true\">#</a> 看</h3>\\n<h3 id=\"答-2\"><a class=\"header-anchor\" href=\"#答-2\" aria-hidden=\"true\">#</a> 答</h3>\\n<h3 id=\"案-2\"><a class=\"header-anchor\" href=\"#案-2\" aria-hidden=\"true\">#</a> 案</h3>\\n<h3 id=\"代码：\"><a class=\"header-anchor\" href=\"#代码：\" aria-hidden=\"true\">#</a> 代码：</h3>\\n<p><strong>递归</strong></p>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code><span class=\"token keyword\">var</span> <span class=\"token function-variable function\">restoreIpAddresses</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span>length <span class=\"token operator\">></span> <span class=\"token number\">12</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\\n  <span class=\"token keyword\">let</span> result <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\\n  <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\n  <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\\n<span class=\"token comment\">// 递归</span>\\n<span class=\"token keyword\">function</span> <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span>remain<span class=\"token punctuation\">,</span> temp<span class=\"token punctuation\">,</span> result<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n  <span class=\"token comment\">// 第四段</span>\\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>temp<span class=\"token punctuation\">.</span>length <span class=\"token operator\">===</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">regular</span><span class=\"token punctuation\">(</span>remain<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n      <span class=\"token comment\">// 合法即为正确的值</span>\\n      result<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token operator\">...</span>temp<span class=\"token punctuation\">,</span> remain<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">\".\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\n    <span class=\"token punctuation\">}</span>\\n    <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\\n  <span class=\"token punctuation\">}</span>\\n  <span class=\"token comment\">// 每段长度都可能为1/2/3</span>\\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n    <span class=\"token comment\">// 合法才可继续</span>\\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">regular</span><span class=\"token punctuation\">(</span>remain<span class=\"token punctuation\">.</span><span class=\"token function\">substr</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n      <span class=\"token keyword\">const</span> strArr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span>temp<span class=\"token punctuation\">,</span> remain<span class=\"token punctuation\">.</span><span class=\"token function\">substr</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 字符段</span>\\n      <span class=\"token keyword\">const</span> str <span class=\"token operator\">=</span> remain<span class=\"token punctuation\">.</span><span class=\"token function\">substr</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 剩下的字符串</span>\\n      <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">,</span> strArr<span class=\"token punctuation\">,</span> result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\n    <span class=\"token punctuation\">}</span>\\n  <span class=\"token punctuation\">}</span>\\n<span class=\"token punctuation\">}</span>\\n<span class=\"token comment\">// 验证合法性</span>\\n<span class=\"token keyword\">function</span> <span class=\"token function\">regular</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>s<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\\n  <span class=\"token keyword\">return</span> <span class=\"token number\">0</span> <span class=\"token operator\">&lt;=</span> <span class=\"token operator\">+</span>s <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">+</span>s <span class=\"token operator\">&lt;=</span> <span class=\"token number\">255</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span>length <span class=\"token operator\">></span> <span class=\"token number\">1</span> <span class=\"token operator\">?</span> <span class=\"token operator\">!</span><span class=\"token operator\">!</span><span class=\"token operator\">+</span>s<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\n<span class=\"token punctuation\">}</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br><span class=\"line-number\">11</span><br><span class=\"line-number\">12</span><br><span class=\"line-number\">13</span><br><span class=\"line-number\">14</span><br><span class=\"line-number\">15</span><br><span class=\"line-number\">16</span><br><span class=\"line-number\">17</span><br><span class=\"line-number\">18</span><br><span class=\"line-number\">19</span><br><span class=\"line-number\">20</span><br><span class=\"line-number\">21</span><br><span class=\"line-number\">22</span><br><span class=\"line-number\">23</span><br><span class=\"line-number\">24</span><br><span class=\"line-number\">25</span><br><span class=\"line-number\">26</span><br><span class=\"line-number\">27</span><br><span class=\"line-number\">28</span><br><span class=\"line-number\">29</span><br><span class=\"line-number\">30</span><br><span class=\"line-number\">31</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<h3 id=\"鼓励我一下：\"><a class=\"header-anchor\" href=\"#鼓励我一下：\" aria-hidden=\"true\">#</a> 鼓励我一下：</h3>\\n<p>觉得还不错的话，给我的项目点个<a href=\"https://github.com/OBKoro1/Brush_algorithm\" target=\"_blank\" rel=\"noopener noreferrer\">star<OutboundLink/></a>吧\\n\\x3c!-- 特殊字符串：用于修改/删除markdown的结尾提示语-OBKoro1 --\\x3e</p>\\n<h3 id=\"点个star支持我一下\"><a class=\"header-anchor\" href=\"#点个star支持我一下\" aria-hidden=\"true\">#</a> 点个<a href=\"https://github.com/OBKoro1/Brush_algorithm\" target=\"_blank\" rel=\"noopener noreferrer\">Star<OutboundLink/></a>支持我一下~</h3>\\n\\x3c!-- \\'特殊字符串：用于删除编译后的issue组件-OBKoro1 --\\x3e\\n'},{key:\"v-83a01ed5d9b04\",path:\"/algorithm/medium/%E4%B8%91%E6%95%B0.html\",lastUpdated:1564720698e3,title:\"丑数\",headers:[{level:2,title:\"丑数\",slug:\"丑数\"},{level:3,title:\"难度：中等\",slug:\"难度：中等\"},{level:3,title:\"描述：\",slug:\"描述：\"},{level:3,title:\"样例：\",slug:\"样例：\"},{level:3,title:\"思路分析：\",slug:\"思路分析：\"},{level:3,title:\"代码模板：\",slug:\"代码模板：\"},{level:3,title:\"想一想再看答案\",slug:\"想一想再看答案\"},{level:3,title:\"想一想再看答案\",slug:\"想一想再看答案-2\"},{level:3,title:\"想一想再看答案\",slug:\"想一想再看答案-3\"},{level:3,title:\"代码：\",slug:\"代码：\"},{level:3,title:\"点个Star支持我一下~\",slug:\"点个star支持我一下\"}],excerpt:'<h2 id=\"丑数\"><a class=\"header-anchor\" href=\"#丑数\" aria-hidden=\"true\">#</a> 丑数</h2>\\n<h3 id=\"难度：中等\"><a class=\"header-anchor\" href=\"#难度：中等\" aria-hidden=\"true\">#</a> 难度：中等</h3>\\n<h3 id=\"描述：\"><a class=\"header-anchor\" href=\"#描述：\" aria-hidden=\"true\">#</a> 描述：</h3>\\n<p>设计一个算法，找出只含素因子 2，3，5 的第 n 小的数。</p>\\n<p>符合条件的数如：1, 2, 3, 4, 5, 6, 8, 9, 10, 12...</p>\\n<h3 id=\"样例：\"><a class=\"header-anchor\" href=\"#样例：\" aria-hidden=\"true\">#</a> 样例：</h3>\\n<p>如果 n = 9， 返回 10</p>\\n<h3 id=\"思路分析：\"><a class=\"header-anchor\" href=\"#思路分析：\" aria-hidden=\"true\">#</a> 思路分析：</h3>\\n<p>这类题目就是找规律，找到规律就好写了。</p>\\n<p>我再提供多一些数据：<code>[1, 2, 3, 4, 5, 6, 8, 9, 10, 12, 15, 16, 18, 20, 24]</code></p>\\n<h3 id=\"代码模板：\"><a class=\"header-anchor\" href=\"#代码模板：\" aria-hidden=\"true\">#</a> 代码模板：</h3>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code><span class=\"token comment\">/**\\n * @param n: An integer\\n * @return: the nth prime number as description.\\n */</span>\\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">nthUglyNumber</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n  <span class=\"token comment\">// write your code here</span>\\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<h3 id=\"想一想再看答案\"><a class=\"header-anchor\" href=\"#想一想再看答案\" aria-hidden=\"true\">#</a> 想一想再看答案</h3>\\n<h3 id=\"想一想再看答案-2\"><a class=\"header-anchor\" href=\"#想一想再看答案-2\" aria-hidden=\"true\">#</a> 想一想再看答案</h3>\\n<h3 id=\"想一想再看答案-3\"><a class=\"header-anchor\" href=\"#想一想再看答案-3\" aria-hidden=\"true\">#</a> 想一想再看答案</h3>\\n<h3 id=\"代码：\"><a class=\"header-anchor\" href=\"#代码：\" aria-hidden=\"true\">#</a> 代码：</h3>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code><span class=\"token comment\">// [1, 2, 3, 4, 5, 6, 8, 9, 10, 12, 15, 16, 18, 20, 24]</span>\\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">nthUglyNumber</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n  <span class=\"token keyword\">let</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\\n  <span class=\"token keyword\">let</span> min<span class=\"token punctuation\">,</span>\\n    nex2<span class=\"token punctuation\">,</span>\\n    nex3<span class=\"token punctuation\">,</span>\\n    nex5<span class=\"token punctuation\">,</span>\\n    i2 <span class=\"token operator\">=</span> i3 <span class=\"token operator\">=</span> i5 <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n    <span class=\"token comment\">// 除了第一个数，每个数都是2、3、5的倍数，把它们的倍数找出来，数字较小添加进去</span>\\n    nex2 <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span>i2<span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\\n    nex3 <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span>i3<span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\\n    nex5 <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span>i5<span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span>\\n    min <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">min</span><span class=\"token punctuation\">(</span>nex2<span class=\"token punctuation\">,</span> nex3<span class=\"token punctuation\">,</span> nex5<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\n    <span class=\"token comment\">// 增加他们的倍数 为下次计算做准备</span>\\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>min <span class=\"token operator\">===</span> nex2<span class=\"token punctuation\">)</span> i2<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>min <span class=\"token operator\">==</span> nex3<span class=\"token punctuation\">)</span> i3<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>min <span class=\"token operator\">==</span> nex5<span class=\"token punctuation\">)</span> i5<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\\n    arr<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>min<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\n  <span class=\"token punctuation\">}</span>\\n  <span class=\"token keyword\">return</span> arr<span class=\"token punctuation\">[</span>arr<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\\n  <span class=\"token comment\">// return arr</span>\\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\\'输出\\'</span><span class=\"token punctuation\">,</span> <span class=\"token function\">nthUglyNumber</span><span class=\"token punctuation\">(</span><span class=\"token number\">9</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">nthUglyNumber</span><span class=\"token punctuation\">(</span><span class=\"token number\">15</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br><span class=\"line-number\">11</span><br><span class=\"line-number\">12</span><br><span class=\"line-number\">13</span><br><span class=\"line-number\">14</span><br><span class=\"line-number\">15</span><br><span class=\"line-number\">16</span><br><span class=\"line-number\">17</span><br><span class=\"line-number\">18</span><br><span class=\"line-number\">19</span><br><span class=\"line-number\">20</span><br><span class=\"line-number\">21</span><br><span class=\"line-number\">22</span><br><span class=\"line-number\">23</span><br><span class=\"line-number\">24</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e\\x3c!-- 特殊字符串：用于修改/删除markdown的结尾提示语-OBKoro1 --\\x3e\\n<h3 id=\"点个star支持我一下\"><a class=\"header-anchor\" href=\"#点个star支持我一下\" aria-hidden=\"true\">#</a> 点个<a href=\"https://github.com/OBKoro1/Brush_algorithm\" target=\"_blank\" rel=\"noopener noreferrer\">Star<OutboundLink/></a>支持我一下~</h3>\\n\\x3c!-- \\'特殊字符串：用于删除编译后的issue组件-OBKoro1 --\\x3e\\n'},{key:\"v-bcec00d5a55a7\",path:\"/algorithm/medium/%E5%A5%87%E6%95%B0%E6%9C%AA%E5%B0%8F%E4%BA%8E%E7%9B%B8%E9%82%BB%E5%81%B6%E6%95%B0%E4%B8%BA%E7%9A%84%E5%80%BC.html\",lastUpdated:1593678455e3,title:\"奇数未小于相邻偶数为的值\",headers:[{level:2,title:\"奇数未小于相邻偶数为的值\",slug:\"奇数未小于相邻偶数为的值\"},{level:3,title:\"难度：中等\",slug:\"难度：中等\"},{level:3,title:\"描述\",slug:\"描述\"},{level:3,title:\"样例\",slug:\"样例\"},{level:3,title:\"思路分析：\",slug:\"思路分析：\"},{level:3,title:\"想\",slug:\"想\"},{level:3,title:\"一\",slug:\"一\"},{level:3,title:\"想\",slug:\"想-2\"},{level:3,title:\"再\",slug:\"再\"},{level:3,title:\"看\",slug:\"看\"},{level:3,title:\"答\",slug:\"答\"},{level:3,title:\"案\",slug:\"案\"},{level:3,title:\"想\",slug:\"想-3\"},{level:3,title:\"一\",slug:\"一-2\"},{level:3,title:\"想\",slug:\"想-4\"},{level:3,title:\"再\",slug:\"再-2\"},{level:3,title:\"看\",slug:\"看-2\"},{level:3,title:\"答\",slug:\"答-2\"},{level:3,title:\"案\",slug:\"案-2\"},{level:3,title:\"代码：\",slug:\"代码：\"},{level:3,title:\"鼓励我一下：\",slug:\"鼓励我一下：\"},{level:3,title:\"点个Star支持我一下~\",slug:\"点个star支持我一下\"}],excerpt:'<h2 id=\"奇数未小于相邻偶数为的值\"><a class=\"header-anchor\" href=\"#奇数未小于相邻偶数为的值\" aria-hidden=\"true\">#</a> 奇数未小于相邻偶数为的值</h2>\\n<h3 id=\"难度：中等\"><a class=\"header-anchor\" href=\"#难度：中等\" aria-hidden=\"true\">#</a> 难度：中等</h3>\\n<h3 id=\"描述\"><a class=\"header-anchor\" href=\"#描述\" aria-hidden=\"true\">#</a> 描述</h3>\\n<p>给定一个数组排序，使得奇数位的值不大于相邻偶数位的值</p>\\n<h3 id=\"样例\"><a class=\"header-anchor\" href=\"#样例\" aria-hidden=\"true\">#</a> 样例</h3>\\n<p>[1, 2, 3, 4, 5, 6] 返回 [ 4, 1, 5, 2, 6, 3 ]</p>\\n<p>[1, 2, 3, 4, 5, 6, 7, 8, 9, 0] 返回 [ 5, 0, 6, 1, 7, 2, 8, 3, 9, 4 ]</p>\\n<h3 id=\"思路分析：\"><a class=\"header-anchor\" href=\"#思路分析：\" aria-hidden=\"true\">#</a> 思路分析：</h3>\\n<h3 id=\"想\"><a class=\"header-anchor\" href=\"#想\" aria-hidden=\"true\">#</a> 想</h3>\\n<h3 id=\"一\"><a class=\"header-anchor\" href=\"#一\" aria-hidden=\"true\">#</a> 一</h3>\\n<h3 id=\"想-2\"><a class=\"header-anchor\" href=\"#想-2\" aria-hidden=\"true\">#</a> 想</h3>\\n<h3 id=\"再\"><a class=\"header-anchor\" href=\"#再\" aria-hidden=\"true\">#</a> 再</h3>\\n<h3 id=\"看\"><a class=\"header-anchor\" href=\"#看\" aria-hidden=\"true\">#</a> 看</h3>\\n<h3 id=\"答\"><a class=\"header-anchor\" href=\"#答\" aria-hidden=\"true\">#</a> 答</h3>\\n<h3 id=\"案\"><a class=\"header-anchor\" href=\"#案\" aria-hidden=\"true\">#</a> 案</h3>\\n<h3 id=\"想-3\"><a class=\"header-anchor\" href=\"#想-3\" aria-hidden=\"true\">#</a> 想</h3>\\n<h3 id=\"一-2\"><a class=\"header-anchor\" href=\"#一-2\" aria-hidden=\"true\">#</a> 一</h3>\\n<h3 id=\"想-4\"><a class=\"header-anchor\" href=\"#想-4\" aria-hidden=\"true\">#</a> 想</h3>\\n<h3 id=\"再-2\"><a class=\"header-anchor\" href=\"#再-2\" aria-hidden=\"true\">#</a> 再</h3>\\n<h3 id=\"看-2\"><a class=\"header-anchor\" href=\"#看-2\" aria-hidden=\"true\">#</a> 看</h3>\\n<h3 id=\"答-2\"><a class=\"header-anchor\" href=\"#答-2\" aria-hidden=\"true\">#</a> 答</h3>\\n<h3 id=\"案-2\"><a class=\"header-anchor\" href=\"#案-2\" aria-hidden=\"true\">#</a> 案</h3>\\n<h3 id=\"代码：\"><a class=\"header-anchor\" href=\"#代码：\" aria-hidden=\"true\">#</a> 代码：</h3>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">sortArr</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n  <span class=\"token comment\">// 升序</span>\\n  arr<span class=\"token punctuation\">.</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\\n    a <span class=\"token operator\">-</span> b<span class=\"token punctuation\">;</span>\\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\n  <span class=\"token comment\">// 将第一个小值与第二个比它大的值交换，得左右两边都是比它大的值</span>\\n  <span class=\"token comment\">// 每次+2 间隔两个值交换一次</span>\\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> arr<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">+=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n    <span class=\"token keyword\">var</span> tmp <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\\n    arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\\n    arr<span class=\"token punctuation\">[</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> tmp<span class=\"token punctuation\">;</span>\\n  <span class=\"token punctuation\">}</span>\\n  <span class=\"token keyword\">return</span> arr<span class=\"token punctuation\">;</span>\\n<span class=\"token punctuation\">}</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br><span class=\"line-number\">11</span><br><span class=\"line-number\">12</span><br><span class=\"line-number\">13</span><br><span class=\"line-number\">14</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<h3 id=\"鼓励我一下：\"><a class=\"header-anchor\" href=\"#鼓励我一下：\" aria-hidden=\"true\">#</a> 鼓励我一下：</h3>\\n<p>觉得还不错的话，给我的项目点个<a href=\"https://github.com/OBKoro1/Brush_algorithm\" target=\"_blank\" rel=\"noopener noreferrer\">star<OutboundLink/></a>吧\\n\\x3c!-- 特殊字符串：用于修改/删除markdown的结尾提示语-OBKoro1 --\\x3e</p>\\n<h3 id=\"点个star支持我一下\"><a class=\"header-anchor\" href=\"#点个star支持我一下\" aria-hidden=\"true\">#</a> 点个<a href=\"https://github.com/OBKoro1/Brush_algorithm\" target=\"_blank\" rel=\"noopener noreferrer\">Star<OutboundLink/></a>支持我一下~</h3>\\n\\x3c!-- \\'特殊字符串：用于删除编译后的issue组件-OBKoro1 --\\x3e\\n'},{key:\"v-525316da3e2ea\",path:\"/algorithm/medium/%E6%91%86%E5%8A%A8%E5%BA%8F%E5%88%97.html\",lastUpdated:1572527461e3,title:\"摆动序列\",headers:[{level:2,title:\"摆动序列\",slug:\"摆动序列\"},{level:3,title:\"难度：中等\",slug:\"难度：中等\"},{level:3,title:\"摆动序列\",slug:\"摆动序列-2\"},{level:3,title:\"描述：\",slug:\"描述：\"},{level:3,title:\"样例：\",slug:\"样例：\"},{level:3,title:\"思路分析：\",slug:\"思路分析：\"},{level:3,title:\"代码模板：\",slug:\"代码模板：\"},{level:3,title:\"想\",slug:\"想\"},{level:3,title:\"一\",slug:\"一\"},{level:3,title:\"想\",slug:\"想-2\"},{level:3,title:\"再\",slug:\"再\"},{level:3,title:\"看\",slug:\"看\"},{level:3,title:\"答\",slug:\"答\"},{level:3,title:\"案\",slug:\"案\"},{level:3,title:\"代码：\",slug:\"代码：\"},{level:3,title:\"鼓励我一下：\",slug:\"鼓励我一下：\"},{level:3,title:\"点个Star支持我一下~\",slug:\"点个star支持我一下\"}],excerpt:'<h2 id=\"摆动序列\"><a class=\"header-anchor\" href=\"#摆动序列\" aria-hidden=\"true\">#</a> 摆动序列</h2>\\n<h3 id=\"难度：中等\"><a class=\"header-anchor\" href=\"#难度：中等\" aria-hidden=\"true\">#</a> 难度：中等</h3>\\n<h3 id=\"摆动序列-2\"><a class=\"header-anchor\" href=\"#摆动序列-2\" aria-hidden=\"true\">#</a> 摆动序列</h3>\\n<blockquote>\\n<p>如果连续数字之间的差严格地在正数和负数之间交替，则数字序列称为摆动序列。第一个差（如果存在的话）可能是正数或负数。少于两个元素的序列也是摆动序列。</p>\\n</blockquote>\\n<p>例如， <code>[1,7,4,9,2,5]</code> 是一个摆动序列，因为差值 <code>(6,-3,5,-7,3)</code>是正负交替出现的。相反, <code>[1,4,7,2,5]</code> 和 <code>[1,7,4,5,5]</code> 不是摆动序列，第一个序列是因为它的前两个差值都是正数，第二个序列是因为它的最后一个差值为零。</p>\\n<h3 id=\"描述：\"><a class=\"header-anchor\" href=\"#描述：\" aria-hidden=\"true\">#</a> 描述：</h3>\\n<p><strong>给定一个整数序列，返回作为摆动序列的最长子序列的长度</strong>。</p>\\n<p>通过从原始序列中删除一些（也可以不删除）元素来获得子序列，剩下的元素保持其原始顺序。</p>\\n<h3 id=\"样例：\"><a class=\"header-anchor\" href=\"#样例：\" aria-hidden=\"true\">#</a> 样例：</h3>\\n<h4 id=\"示例1：\"><a class=\"header-anchor\" href=\"#示例1：\" aria-hidden=\"true\">#</a> 示例1：</h4>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code>输入<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">9</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span>\\n输出<span class=\"token punctuation\">:</span> <span class=\"token number\">6</span> \\n解释<span class=\"token punctuation\">:</span> 整个序列均为摆动序列。\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<h4 id=\"示例2：\"><a class=\"header-anchor\" href=\"#示例2：\" aria-hidden=\"true\">#</a> 示例2：</h4>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code>输入<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">17</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span><span class=\"token number\">13</span><span class=\"token punctuation\">,</span><span class=\"token number\">15</span><span class=\"token punctuation\">,</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">16</span><span class=\"token punctuation\">,</span><span class=\"token number\">8</span><span class=\"token punctuation\">]</span>\\n输出<span class=\"token punctuation\">:</span> <span class=\"token number\">7</span>\\n解释<span class=\"token punctuation\">:</span> 这个序列包含几个长度为 <span class=\"token number\">7</span> 摆动序列，其中一个可为<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">17</span><span class=\"token punctuation\">,</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span><span class=\"token number\">13</span><span class=\"token punctuation\">,</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span><span class=\"token number\">16</span><span class=\"token punctuation\">,</span><span class=\"token number\">8</span><span class=\"token punctuation\">]</span>。\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<h4 id=\"示例3：\"><a class=\"header-anchor\" href=\"#示例3：\" aria-hidden=\"true\">#</a> 示例3：</h4>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code>输入<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span><span class=\"token number\">9</span><span class=\"token punctuation\">]</span>\\n输出<span class=\"token punctuation\">:</span> <span class=\"token number\">2</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<h3 id=\"思路分析：\"><a class=\"header-anchor\" href=\"#思路分析：\" aria-hidden=\"true\">#</a> 思路分析：</h3>\\n<ol>\\n<li>整数序列可以删除</li>\\n<li>序列要不断上升和下降才有效。</li>\\n</ol>\\n<h3 id=\"代码模板：\"><a class=\"header-anchor\" href=\"#代码模板：\" aria-hidden=\"true\">#</a> 代码模板：</h3>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">wiggleMaxLength</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n<span class=\"token punctuation\">}</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<h3 id=\"想\"><a class=\"header-anchor\" href=\"#想\" aria-hidden=\"true\">#</a> 想</h3>\\n<h3 id=\"一\"><a class=\"header-anchor\" href=\"#一\" aria-hidden=\"true\">#</a> 一</h3>\\n<h3 id=\"想-2\"><a class=\"header-anchor\" href=\"#想-2\" aria-hidden=\"true\">#</a> 想</h3>\\n<h3 id=\"再\"><a class=\"header-anchor\" href=\"#再\" aria-hidden=\"true\">#</a> 再</h3>\\n<h3 id=\"看\"><a class=\"header-anchor\" href=\"#看\" aria-hidden=\"true\">#</a> 看</h3>\\n<h3 id=\"答\"><a class=\"header-anchor\" href=\"#答\" aria-hidden=\"true\">#</a> 答</h3>\\n<h3 id=\"案\"><a class=\"header-anchor\" href=\"#案\" aria-hidden=\"true\">#</a> 案</h3>\\n<h3 id=\"代码：\"><a class=\"header-anchor\" href=\"#代码：\" aria-hidden=\"true\">#</a> 代码：</h3>\\n<ol>\\n<li>缓存上次的摆动方向, 只关注下一个正确的摆动方向。</li>\\n</ol>\\n<blockquote>\\n<p>当方向正确序列的长度就可以增加了，中间的连续上升/下降不用管。</p>\\n</blockquote>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">wiggleMaxLength</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">.</span>length <span class=\"token operator\">&lt;</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n        <span class=\"token keyword\">return</span> nums<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 小于2 直接返回</span>\\n    <span class=\"token punctuation\">}</span>\\n    <span class=\"token keyword\">let</span> length <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 默认每个数字为1</span>\\n    <span class=\"token keyword\">let</span> flag <span class=\"token operator\">=</span> <span class=\"token string\">\"begin\"</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 初始摆动方向</span>\\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> nums<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n        <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>flag<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n            <span class=\"token keyword\">case</span> <span class=\"token string\">\"begin\"</span><span class=\"token punctuation\">:</span>\\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> nums<span class=\"token punctuation\">[</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n                    flag <span class=\"token operator\">=</span> <span class=\"token string\">\"up\"</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 摆动方向</span>\\n                    length<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 初始两个值为摆动序列</span>\\n                <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> nums<span class=\"token punctuation\">[</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n                    flag <span class=\"token operator\">=</span> <span class=\"token string\">\"down\"</span><span class=\"token punctuation\">;</span>\\n                    length<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 初始两个值为摆动序列</span>\\n                <span class=\"token punctuation\">}</span>\\n                <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\\n            <span class=\"token keyword\">case</span> <span class=\"token string\">\"up\"</span><span class=\"token punctuation\">:</span>\\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> nums<span class=\"token punctuation\">[</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n                    <span class=\"token comment\">// 找到下一组下一个值比本身小的值</span>\\n                    flag <span class=\"token operator\">=</span> <span class=\"token string\">\"down\"</span><span class=\"token punctuation\">;</span>\\n                    length<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\\n                <span class=\"token punctuation\">}</span>\\n                <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\\n            <span class=\"token keyword\">case</span> <span class=\"token string\">\"down\"</span><span class=\"token punctuation\">:</span>\\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> nums<span class=\"token punctuation\">[</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n                    <span class=\"token comment\">// 找到下一组下一个值比本身大的值</span>\\n                    flag <span class=\"token operator\">=</span> <span class=\"token string\">\"up\"</span><span class=\"token punctuation\">;</span>\\n                    length<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\\n                <span class=\"token punctuation\">}</span>\\n                <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\\n        <span class=\"token punctuation\">}</span>\\n    <span class=\"token punctuation\">}</span>\\n    <span class=\"token keyword\">return</span> length<span class=\"token punctuation\">;</span>\\n<span class=\"token punctuation\">}</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br><span class=\"line-number\">11</span><br><span class=\"line-number\">12</span><br><span class=\"line-number\">13</span><br><span class=\"line-number\">14</span><br><span class=\"line-number\">15</span><br><span class=\"line-number\">16</span><br><span class=\"line-number\">17</span><br><span class=\"line-number\">18</span><br><span class=\"line-number\">19</span><br><span class=\"line-number\">20</span><br><span class=\"line-number\">21</span><br><span class=\"line-number\">22</span><br><span class=\"line-number\">23</span><br><span class=\"line-number\">24</span><br><span class=\"line-number\">25</span><br><span class=\"line-number\">26</span><br><span class=\"line-number\">27</span><br><span class=\"line-number\">28</span><br><span class=\"line-number\">29</span><br><span class=\"line-number\">30</span><br><span class=\"line-number\">31</span><br><span class=\"line-number\">32</span><br><span class=\"line-number\">33</span><br><span class=\"line-number\">34</span><br><span class=\"line-number\">35</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<ol start=\"2\">\\n<li>将上升和下降视为一组，当正确摆动过一次(上升和下降各出现一次)时，序列的长度+1。</li>\\n</ol>\\n<blockquote>\\n<p>连续摆动因为另一个变量没有变化，所以就会得到相同的结果，相当于跳过。</p>\\n</blockquote>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">wiggleMaxLength</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n    <span class=\"token keyword\">let</span> len <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">.</span>length\\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>len <span class=\"token operator\">&lt;</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> len <span class=\"token comment\">// 小于2 返回它本身的长度 大于2的数量 进入比较</span>\\n    <span class=\"token keyword\">let</span> up <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\\n    <span class=\"token keyword\">let</span> down <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> len<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n        <span class=\"token comment\">// 当出现连续 下降/上升时，另一个用于阶加的变量没有变化，所以会跳过连续 下降/上升</span>\\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> nums<span class=\"token punctuation\">[</span>i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n            up <span class=\"token operator\">=</span> down <span class=\"token operator\">+</span> <span class=\"token number\">1</span>\\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> nums<span class=\"token punctuation\">[</span>i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n            down <span class=\"token operator\">=</span> up <span class=\"token operator\">+</span> <span class=\"token number\">1</span>\\n        <span class=\"token punctuation\">}</span>\\n\\n    <span class=\"token punctuation\">}</span>\\n    <span class=\"token comment\">// 取下降和上升的最大值</span>\\n    <span class=\"token keyword\">return</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span>up<span class=\"token punctuation\">,</span> down<span class=\"token punctuation\">)</span>\\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br><span class=\"line-number\">11</span><br><span class=\"line-number\">12</span><br><span class=\"line-number\">13</span><br><span class=\"line-number\">14</span><br><span class=\"line-number\">15</span><br><span class=\"line-number\">16</span><br><span class=\"line-number\">17</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<h3 id=\"鼓励我一下：\"><a class=\"header-anchor\" href=\"#鼓励我一下：\" aria-hidden=\"true\">#</a> 鼓励我一下：</h3>\\n<p>觉得还不错的话，给我的项目点个<a href=\"https://github.com/OBKoro1/Brush_algorithm\" target=\"_blank\" rel=\"noopener noreferrer\">star<OutboundLink/></a>吧\\n\\x3c!-- 特殊字符串：用于修改/删除markdown的结尾提示语-OBKoro1 --\\x3e</p>\\n<h3 id=\"点个star支持我一下\"><a class=\"header-anchor\" href=\"#点个star支持我一下\" aria-hidden=\"true\">#</a> 点个<a href=\"https://github.com/OBKoro1/Brush_algorithm\" target=\"_blank\" rel=\"noopener noreferrer\">Star<OutboundLink/></a>支持我一下~</h3>\\n\\x3c!-- \\'特殊字符串：用于删除编译后的issue组件-OBKoro1 --\\x3e\\n'},{key:\"v-81a028de3e933\",path:\"/algorithm/medium/%E6%97%A0%E9%87%8D%E5%A4%8D%E5%AD%97%E7%AC%A6%E7%9A%84%E6%9C%80%E9%95%BF%E5%AD%90%E4%B8%B2.html\",lastUpdated:1565097263e3,title:\"无重复字符的最长子串\",headers:[{level:2,title:\"无重复字符的最长子串\",slug:\"无重复字符的最长子串\"},{level:3,title:\"难度：中等\",slug:\"难度：中等\"},{level:3,title:\"描述：\",slug:\"描述：\"},{level:3,title:\"样例：\",slug:\"样例：\"},{level:3,title:\"思路分析：\",slug:\"思路分析：\"},{level:3,title:\"代码模板：\",slug:\"代码模板：\"},{level:3,title:\"想\",slug:\"想\"},{level:3,title:\"一\",slug:\"一\"},{level:3,title:\"想\",slug:\"想-2\"},{level:3,title:\"再\",slug:\"再\"},{level:3,title:\"看\",slug:\"看\"},{level:3,title:\"答\",slug:\"答\"},{level:3,title:\"案\",slug:\"案\"},{level:3,title:\"代码：\",slug:\"代码：\"},{level:3,title:\"点个Star支持我一下~\",slug:\"点个star支持我一下\"}],excerpt:'<h2 id=\"无重复字符的最长子串\"><a class=\"header-anchor\" href=\"#无重复字符的最长子串\" aria-hidden=\"true\">#</a> 无重复字符的最长子串</h2>\\n<h3 id=\"难度：中等\"><a class=\"header-anchor\" href=\"#难度：中等\" aria-hidden=\"true\">#</a> 难度：中等</h3>\\n<h3 id=\"描述：\"><a class=\"header-anchor\" href=\"#描述：\" aria-hidden=\"true\">#</a> 描述：</h3>\\n<p>给定一个字符串，请你找出其中不含有重复字符的 最长子串 的长度。</p>\\n<h3 id=\"样例：\"><a class=\"header-anchor\" href=\"#样例：\" aria-hidden=\"true\">#</a> 样例：</h3>\\n<ul>\\n<li>输入: &quot;abcabcbb&quot;</li>\\n</ul>\\n<p>输出: 3</p>\\n<p>解释: 因为无重复字符的最长子串是 &quot;abc&quot;，所以其长度为 3。</p>\\n<ul>\\n<li>输入: &quot;bbbbb&quot;</li>\\n</ul>\\n<p>输出: 1</p>\\n<p>解释: 因为无重复字符的最长子串是 &quot;b&quot;，所以其长度为 1。</p>\\n<ul>\\n<li>输入: &quot;pwwkew&quot;</li>\\n</ul>\\n<p>输出: 3</p>\\n<p>解释: 因为无重复字符的最长子串是 &quot;wke&quot;，所以其长度为 3。</p>\\n<ul>\\n<li>输入: &quot;dvdf&quot;</li>\\n</ul>\\n<p>输出: 3</p>\\n<p>解释: 因为无重复字符的最长子串是 &quot;vdf&quot;，所以其长度为 3。</p>\\n<ul>\\n<li>输入: &quot;asjrgapa&quot;</li>\\n</ul>\\n<p>输出: 6</p>\\n<p>解释: 因为无重复字符的最长子串是 &quot;sjrgap&quot;，所以其长度为 6。</p>\\n<ul>\\n<li>输入: &quot;aabaab!bb&quot;</li>\\n</ul>\\n<p>输出: 3</p>\\n<p>解释: 因为无重复字符的最长子串是 &quot;ab!&quot;，所以其长度为 3。</p>\\n<ul>\\n<li>输入: &quot;abcb&quot;</li>\\n</ul>\\n<p>输出: 3</p>\\n<p>解释: 因为无重复字符的最长子串是 &quot;abc&quot;，所以其长度为 3。</p>\\n<ul>\\n<li>输入: &quot;asljlj&quot;</li>\\n</ul>\\n<p>输出: 4</p>\\n<p>解释: 因为无重复字符的最长子串是 &quot;aslj&quot;，所以其长度为 4。</p>\\n<ul>\\n<li>输入: &quot;qwnfenpglqdq&quot;</li>\\n</ul>\\n<p>输出: 8</p>\\n<p>解释: 因为无重复字符的最长子串是 &quot;fenpglqd&quot;，所以其长度为 8。</p>\\n<h3 id=\"思路分析：\"><a class=\"header-anchor\" href=\"#思路分析：\" aria-hidden=\"true\">#</a> 思路分析：</h3>\\n<p>关键在于在出现重复字符时，如何更新不重复字符的index</p>\\n<h3 id=\"代码模板：\"><a class=\"header-anchor\" href=\"#代码模板：\" aria-hidden=\"true\">#</a> 代码模板：</h3>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code><span class=\"token comment\">/**\\n * @param {string} s\\n * @return {number}\\n */</span>\\n<span class=\"token keyword\">var</span> <span class=\"token function-variable function\">lengthOfLongestSubstring</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n<span class=\"token punctuation\">}</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<h3 id=\"想\"><a class=\"header-anchor\" href=\"#想\" aria-hidden=\"true\">#</a> 想</h3>\\n<h3 id=\"一\"><a class=\"header-anchor\" href=\"#一\" aria-hidden=\"true\">#</a> 一</h3>\\n<h3 id=\"想-2\"><a class=\"header-anchor\" href=\"#想-2\" aria-hidden=\"true\">#</a> 想</h3>\\n<h3 id=\"再\"><a class=\"header-anchor\" href=\"#再\" aria-hidden=\"true\">#</a> 再</h3>\\n<h3 id=\"看\"><a class=\"header-anchor\" href=\"#看\" aria-hidden=\"true\">#</a> 看</h3>\\n<h3 id=\"答\"><a class=\"header-anchor\" href=\"#答\" aria-hidden=\"true\">#</a> 答</h3>\\n<h3 id=\"案\"><a class=\"header-anchor\" href=\"#案\" aria-hidden=\"true\">#</a> 案</h3>\\n<h3 id=\"代码：\"><a class=\"header-anchor\" href=\"#代码：\" aria-hidden=\"true\">#</a> 代码：</h3>\\n<ol>\\n<li>用对象储存字符的位置, 出现重复字符时更新不重复字符的index。</li>\\n</ol>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code><span class=\"token keyword\">var</span> <span class=\"token function-variable function\">lengthOfLongestSubstring</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n    <span class=\"token keyword\">let</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 用于储存字符出现的位置</span>\\n    <span class=\"token keyword\">let</span> res <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 最大值</span>\\n    <span class=\"token keyword\">let</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 不重复字符的index</span>\\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> s<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n        <span class=\"token comment\">// 当前值是否在对象中存储过</span>\\n        <span class=\"token keyword\">const</span> value <span class=\"token operator\">=</span> obj<span class=\"token punctuation\">[</span>s<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span>\\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>value <span class=\"token operator\">!==</span> undefined<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n            <span class=\"token comment\">// 更新上一次重复值的index</span>\\n            <span class=\"token comment\">// value + 1 跳过之前重复的字符</span>\\n            <span class=\"token comment\">// j: 之前不重复的index 重复字符 需要全部跳过</span>\\n            j <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span>value <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> j<span class=\"token punctuation\">)</span>\\n\\n        <span class=\"token punctuation\">}</span>\\n        <span class=\"token comment\">// 每个字符都计算一下最长不重复值 保存最大值</span>\\n        <span class=\"token comment\">// 不重复最长长度 = 当前index - 上一次重复值的index + index从0开始 长度从1开始</span>\\n        res <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">,</span> i <span class=\"token operator\">-</span> j <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\n        <span class=\"token comment\">// 存/更新 字符串index</span>\\n        obj<span class=\"token punctuation\">[</span>s<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> i\\n    <span class=\"token punctuation\">}</span>\\n    <span class=\"token keyword\">return</span> res<span class=\"token punctuation\">;</span>\\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br><span class=\"line-number\">11</span><br><span class=\"line-number\">12</span><br><span class=\"line-number\">13</span><br><span class=\"line-number\">14</span><br><span class=\"line-number\">15</span><br><span class=\"line-number\">16</span><br><span class=\"line-number\">17</span><br><span class=\"line-number\">18</span><br><span class=\"line-number\">19</span><br><span class=\"line-number\">20</span><br><span class=\"line-number\">21</span><br><span class=\"line-number\">22</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<ol start=\"2\">\\n<li>从左到右，一个字符一个字符搜索，看是否重复。</li>\\n</ol>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code><span class=\"token keyword\">var</span> <span class=\"token function-variable function\">lengthOfLongestSubstring</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n    <span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 不重复字符的index</span>\\n        res <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 更新无重复字符的长度</span>\\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> s<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n        <span class=\"token comment\">// 查找：不重复字符-当前index之间 有没有出现当前字符</span>\\n        <span class=\"token keyword\">let</span> index <span class=\"token operator\">=</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>index <span class=\"token operator\">===</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n            <span class=\"token comment\">// 更新无重复字符的长度：当前index-不重复字符的index + 长度从1开始算</span>\\n            res <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">,</span> j <span class=\"token operator\">-</span> i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\\n            <span class=\"token comment\">// 更新i = 不重复字符的index</span>\\n            <span class=\"token comment\">// 不重复字符的index = 原不重复的字符index + i-j中出现重复字符的index + 跳过该重复字符</span>\\n            i <span class=\"token operator\">=</span> i <span class=\"token operator\">+</span> index <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\\n        <span class=\"token punctuation\">}</span>\\n    <span class=\"token punctuation\">}</span>\\n    <span class=\"token keyword\">return</span> res<span class=\"token punctuation\">;</span>\\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br><span class=\"line-number\">11</span><br><span class=\"line-number\">12</span><br><span class=\"line-number\">13</span><br><span class=\"line-number\">14</span><br><span class=\"line-number\">15</span><br><span class=\"line-number\">16</span><br><span class=\"line-number\">17</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e\\x3c!-- 特殊字符串：用于修改/删除markdown的结尾提示语-OBKoro1 --\\x3e\\n<h3 id=\"点个star支持我一下\"><a class=\"header-anchor\" href=\"#点个star支持我一下\" aria-hidden=\"true\">#</a> 点个<a href=\"https://github.com/OBKoro1/Brush_algorithm\" target=\"_blank\" rel=\"noopener noreferrer\">Star<OutboundLink/></a>支持我一下~</h3>\\n\\x3c!-- \\'特殊字符串：用于删除编译后的issue组件-OBKoro1 --\\x3e\\n'},{key:\"v-6c667b7f2a594\",path:\"/algorithm/medium/%E7%AC%ACk%E5%A4%A7%E5%85%83%E7%B4%A0.html\",lastUpdated:1564720698e3,title:\"第 k 大元素\",headers:[{level:2,title:\"第 k 大元素\",slug:\"第-k-大元素\"},{level:3,title:\"难度：中等\",slug:\"难度：中等\"},{level:3,title:\"描述：\",slug:\"描述：\"},{level:3,title:\"样例：\",slug:\"样例：\"},{level:3,title:\"思路分析：\",slug:\"思路分析：\"},{level:3,title:\"代码模板：\",slug:\"代码模板：\"},{level:3,title:\"想一想再看答案\",slug:\"想一想再看答案\"},{level:3,title:\"想一想再看答案\",slug:\"想一想再看答案-2\"},{level:3,title:\"想一想再看答案\",slug:\"想一想再看答案-3\"},{level:3,title:\"代码：\",slug:\"代码：\"},{level:3,title:\"点个Star支持我一下~\",slug:\"点个star支持我一下\"}],excerpt:'<h2 id=\"第-k-大元素\"><a class=\"header-anchor\" href=\"#第-k-大元素\" aria-hidden=\"true\">#</a> 第 k 大元素</h2>\\n<h3 id=\"难度：中等\"><a class=\"header-anchor\" href=\"#难度：中等\" aria-hidden=\"true\">#</a> 难度：中等</h3>\\n<h3 id=\"描述：\"><a class=\"header-anchor\" href=\"#描述：\" aria-hidden=\"true\">#</a> 描述：</h3>\\n<p>在数组中找到第 k 大的元素</p>\\n<h3 id=\"样例：\"><a class=\"header-anchor\" href=\"#样例：\" aria-hidden=\"true\">#</a> 样例：</h3>\\n<p>给出数组 [9,3,2,4,8]，第三大的元素是 4</p>\\n<p>给出数组 [1,2,3,4,5]，第一大的元素是 5，第二大的元素是 4，第三大的元素是 3，以此类推</p>\\n<h3 id=\"思路分析：\"><a class=\"header-anchor\" href=\"#思路分析：\" aria-hidden=\"true\">#</a> 思路分析：</h3>\\n<h3 id=\"代码模板：\"><a class=\"header-anchor\" href=\"#代码模板：\" aria-hidden=\"true\">#</a> 代码模板：</h3>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code><span class=\"token comment\">/**\\n * @param n: An integer\\n * @param nums: An array\\n * @return: the Kth largest element\\n */</span>\\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">kthLargestElement</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">,</span> nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n  <span class=\"token comment\">// write your code here</span>\\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<h3 id=\"想一想再看答案\"><a class=\"header-anchor\" href=\"#想一想再看答案\" aria-hidden=\"true\">#</a> 想一想再看答案</h3>\\n<h3 id=\"想一想再看答案-2\"><a class=\"header-anchor\" href=\"#想一想再看答案-2\" aria-hidden=\"true\">#</a> 想一想再看答案</h3>\\n<h3 id=\"想一想再看答案-3\"><a class=\"header-anchor\" href=\"#想一想再看答案-3\" aria-hidden=\"true\">#</a> 想一想再看答案</h3>\\n<h3 id=\"代码：\"><a class=\"header-anchor\" href=\"#代码：\" aria-hidden=\"true\">#</a> 代码：</h3>\\n<ol>\\n<li>从大到小，移除n个最大值</li>\\n</ol>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">kthLargestElement</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">,</span> nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n  <span class=\"token keyword\">let</span> value<span class=\"token punctuation\">;</span>\\n  <span class=\"token comment\">// 遍历n次，移除n个最大值，最终value即为第n大元素</span>\\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n    <span class=\"token keyword\">let</span> item <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>nums<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 取出最大值</span>\\n    value <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">.</span><span class=\"token function\">splice</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 删除并保存最大值</span>\\n  <span class=\"token punctuation\">}</span>\\n  <span class=\"token keyword\">return</span> value<span class=\"token punctuation\">;</span>\\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>\\n  <span class=\"token string\">\\'输出\\'</span><span class=\"token punctuation\">,</span>\\n  <span class=\"token function\">kthLargestElement</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">9</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\\n  <span class=\"token function\">kthLargestElement</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br><span class=\"line-number\">11</span><br><span class=\"line-number\">12</span><br><span class=\"line-number\">13</span><br><span class=\"line-number\">14</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<ol start=\"2\">\\n<li>sort排序</li>\\n</ol>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">kthLargestElement</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">,</span> nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n  <span class=\"token comment\">// 降序</span>\\n  nums<span class=\"token punctuation\">.</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\\n    <span class=\"token keyword\">return</span> b <span class=\"token operator\">-</span> a<span class=\"token punctuation\">;</span>\\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\n  <span class=\"token keyword\">return</span> nums<span class=\"token punctuation\">[</span>n <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 第n大(数组从0开始)</span>\\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>\\n  <span class=\"token string\">\\'输出\\'</span><span class=\"token punctuation\">,</span>\\n  <span class=\"token function\">kthLargestElement</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">9</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\\n  <span class=\"token function\">kthLargestElement</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br><span class=\"line-number\">11</span><br><span class=\"line-number\">12</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e\\x3c!-- 特殊字符串：用于修改/删除markdown的结尾提示语-OBKoro1 --\\x3e\\n<h3 id=\"点个star支持我一下\"><a class=\"header-anchor\" href=\"#点个star支持我一下\" aria-hidden=\"true\">#</a> 点个<a href=\"https://github.com/OBKoro1/Brush_algorithm\" target=\"_blank\" rel=\"noopener noreferrer\">Star<OutboundLink/></a>支持我一下~</h3>\\n\\x3c!-- \\'特殊字符串：用于删除编译后的issue组件-OBKoro1 --\\x3e\\n'},{key:\"v-497019496c782\",path:\"/algorithm/medium/%E7%BB%9F%E8%AE%A1%E6%95%B0%E5%AD%97.html\",lastUpdated:1564720698e3,title:\"统计数字\",headers:[{level:2,title:\"统计数字\",slug:\"统计数字\"},{level:3,title:\"难度：中等\",slug:\"难度：中等\"},{level:3,title:\"描述：\",slug:\"描述：\"},{level:3,title:\"样例：\",slug:\"样例：\"},{level:3,title:\"思路分析：\",slug:\"思路分析：\"},{level:3,title:\"代码模板：\",slug:\"代码模板：\"},{level:3,title:\"想一想再看答案\",slug:\"想一想再看答案\"},{level:3,title:\"想一想再看答案\",slug:\"想一想再看答案-2\"},{level:3,title:\"想一想再看答案\",slug:\"想一想再看答案-3\"},{level:3,title:\"代码：\",slug:\"代码：\"},{level:3,title:\"点个Star支持我一下~\",slug:\"点个star支持我一下\"}],excerpt:'<h2 id=\"统计数字\"><a class=\"header-anchor\" href=\"#统计数字\" aria-hidden=\"true\">#</a> 统计数字</h2>\\n<h3 id=\"难度：中等\"><a class=\"header-anchor\" href=\"#难度：中等\" aria-hidden=\"true\">#</a> 难度：中等</h3>\\n<h3 id=\"描述：\"><a class=\"header-anchor\" href=\"#描述：\" aria-hidden=\"true\">#</a> 描述：</h3>\\n<p>计算数字 k 在 0 到 n 中的出现的次数，k 可能是 0~9 的一个值</p>\\n<h3 id=\"样例：\"><a class=\"header-anchor\" href=\"#样例：\" aria-hidden=\"true\">#</a> 样例：</h3>\\n<p>n=12，k=1</p>\\n<p>在 [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]，我们发现 1 出现了 5 次 (1, 10, 11, 12)</p>\\n<p>返回 5</p>\\n<h3 id=\"思路分析：\"><a class=\"header-anchor\" href=\"#思路分析：\" aria-hidden=\"true\">#</a> 思路分析：</h3>\\n<p>因为一个数可能会出现两次k,转成字符串来操作，遍历字符来匹配k。</p>\\n<p>如果可以的话，使用正则是更优解。</p>\\n<h3 id=\"代码模板：\"><a class=\"header-anchor\" href=\"#代码模板：\" aria-hidden=\"true\">#</a> 代码模板：</h3>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code><span class=\"token comment\">/**\\n * @param k: An integer\\n * @param n: An integer\\n * @return: An integer denote the count of digit k in 1..n\\n */</span>\\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">digitCounts</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>k<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n  <span class=\"token comment\">// write your code here</span>\\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<h3 id=\"想一想再看答案\"><a class=\"header-anchor\" href=\"#想一想再看答案\" aria-hidden=\"true\">#</a> 想一想再看答案</h3>\\n<h3 id=\"想一想再看答案-2\"><a class=\"header-anchor\" href=\"#想一想再看答案-2\" aria-hidden=\"true\">#</a> 想一想再看答案</h3>\\n<h3 id=\"想一想再看答案-3\"><a class=\"header-anchor\" href=\"#想一想再看答案-3\" aria-hidden=\"true\">#</a> 想一想再看答案</h3>\\n<h3 id=\"代码：\"><a class=\"header-anchor\" href=\"#代码：\" aria-hidden=\"true\">#</a> 代码：</h3>\\n<ol>\\n<li>遍历 n 的范围,遍历数字</li>\\n</ol>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">digitCounts</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>k<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n  <span class=\"token keyword\">let</span> count <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\\n  k <span class=\"token operator\">=</span> k<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\n  <span class=\"token comment\">// 遍历n的范围</span>\\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n    <span class=\"token keyword\">let</span> str <span class=\"token operator\">=</span> i<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 存字符</span>\\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> m <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> m <span class=\"token operator\">&lt;</span> str<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> m<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n      <span class=\"token comment\">//  遍历字符 计算出现两个k的情况</span>\\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">[</span>m<span class=\"token punctuation\">]</span> <span class=\"token operator\">===</span> k<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n        count<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\\n      <span class=\"token punctuation\">}</span>\\n    <span class=\"token punctuation\">}</span>\\n  <span class=\"token punctuation\">}</span>\\n  <span class=\"token keyword\">return</span> count<span class=\"token punctuation\">;</span>\\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\\'输出:\\'</span><span class=\"token punctuation\">,</span> <span class=\"token function\">digitCounts</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">12</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 5</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br><span class=\"line-number\">11</span><br><span class=\"line-number\">12</span><br><span class=\"line-number\">13</span><br><span class=\"line-number\">14</span><br><span class=\"line-number\">15</span><br><span class=\"line-number\">16</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<ol start=\"2\">\\n<li>将范围连接成一个字符串,遍历字符串</li>\\n</ol>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">digitCounts</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>k<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n  <span class=\"token keyword\">let</span> sum <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\\n    s <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span><span class=\"token function\">Array</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">keys</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">\\'\\'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 将数字范围转成数组再链接成字符串</span>\\n  <span class=\"token comment\">// 比如 s = \"0123456789101112\", n = 12</span>\\n  k <span class=\"token operator\">=</span> k<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 转字符用于判断</span>\\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> s<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">>=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n    <span class=\"token comment\">// 遍历字符串 判断是否与k相等</span>\\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">===</span> k<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n      sum<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\\n    <span class=\"token punctuation\">}</span>\\n  <span class=\"token punctuation\">}</span>\\n  <span class=\"token keyword\">return</span> sum<span class=\"token punctuation\">;</span>\\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\\'输出:\\'</span><span class=\"token punctuation\">,</span> <span class=\"token function\">digitCounts</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">12</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 5</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br><span class=\"line-number\">11</span><br><span class=\"line-number\">12</span><br><span class=\"line-number\">13</span><br><span class=\"line-number\">14</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<ol start=\"3\">\\n<li>最优：遍历范围，正则匹配</li>\\n</ol>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">digitCounts</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>k<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n  <span class=\"token keyword\">let</span> num <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\\n  <span class=\"token keyword\">let</span> reg <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RegExp</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>k<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">`</span></span><span class=\"token punctuation\">,</span> <span class=\"token string\">\\'g\\'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 正则 全局匹配k</span>\\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n    <span class=\"token keyword\">let</span> res <span class=\"token operator\">=</span> i<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">match</span><span class=\"token punctuation\">(</span>reg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 搜索i，返回一个匹配的数组</span>\\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n      num <span class=\"token operator\">=</span> num <span class=\"token operator\">+</span> res<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 匹配的数量</span>\\n    <span class=\"token punctuation\">}</span>\\n  <span class=\"token punctuation\">}</span>\\n  <span class=\"token keyword\">return</span> num<span class=\"token punctuation\">;</span>\\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\\'输出:\\'</span><span class=\"token punctuation\">,</span> <span class=\"token function\">digitCounts</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">12</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 5</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br><span class=\"line-number\">11</span><br><span class=\"line-number\">12</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e\\x3c!-- 特殊字符串：用于修改/删除markdown的结尾提示语-OBKoro1 --\\x3e\\n<h3 id=\"点个star支持我一下\"><a class=\"header-anchor\" href=\"#点个star支持我一下\" aria-hidden=\"true\">#</a> 点个<a href=\"https://github.com/OBKoro1/Brush_algorithm\" target=\"_blank\" rel=\"noopener noreferrer\">Star<OutboundLink/></a>支持我一下~</h3>\\n\\x3c!-- \\'特殊字符串：用于删除编译后的issue组件-OBKoro1 --\\x3e\\n'},{key:\"v-5b12c8fc0970a\",path:\"/algorithm/simple/%E4%B8%A2%E5%A4%B1%E7%9A%84%E6%95%B0.html\",lastUpdated:1564720698e3,title:\"丢失的数\",headers:[{level:2,title:\"丢失的数\",slug:\"丢失的数\"},{level:3,title:\"难度：简单\",slug:\"难度：简单\"},{level:3,title:\"描述：\",slug:\"描述：\"},{level:3,title:\"样例：\",slug:\"样例：\"},{level:3,title:\"思路分析：\",slug:\"思路分析：\"},{level:3,title:\"代码模板：\",slug:\"代码模板：\"},{level:3,title:\"想一想再看答案\",slug:\"想一想再看答案\"},{level:3,title:\"想一想再看答案\",slug:\"想一想再看答案-2\"},{level:3,title:\"想一想再看答案\",slug:\"想一想再看答案-3\"},{level:3,title:\"代码：\",slug:\"代码：\"},{level:3,title:\"点个Star支持我一下~\",slug:\"点个star支持我一下\"}],excerpt:'<h2 id=\"丢失的数\"><a class=\"header-anchor\" href=\"#丢失的数\" aria-hidden=\"true\">#</a> 丢失的数</h2>\\n<h3 id=\"难度：简单\"><a class=\"header-anchor\" href=\"#难度：简单\" aria-hidden=\"true\">#</a> 难度：简单</h3>\\n<h3 id=\"描述：\"><a class=\"header-anchor\" href=\"#描述：\" aria-hidden=\"true\">#</a> 描述：</h3>\\n<p>在数组 A 中，包含 0 到 n 的整数，其中缺失了一个数。请编写代码，以查找数组中缺失的整数。</p>\\n<h3 id=\"样例：\"><a class=\"header-anchor\" href=\"#样例：\" aria-hidden=\"true\">#</a> 样例：</h3>\\n<p>array = <code>[4,3,2,0,5]</code> return 1</p>\\n<p>array = <code>[0,1,2,3,4,7,6]</code> return 5</p>\\n<p>array = <code>[0,1,2,3]</code> return 4</p>\\n<h3 id=\"思路分析：\"><a class=\"header-anchor\" href=\"#思路分析：\" aria-hidden=\"true\">#</a> 思路分析：</h3>\\n<p>简单，不分析</p>\\n<h3 id=\"代码模板：\"><a class=\"header-anchor\" href=\"#代码模板：\" aria-hidden=\"true\">#</a> 代码模板：</h3>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">findMissing</span> <span class=\"token operator\">=</span> arr <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<h3 id=\"想一想再看答案\"><a class=\"header-anchor\" href=\"#想一想再看答案\" aria-hidden=\"true\">#</a> 想一想再看答案</h3>\\n<h3 id=\"想一想再看答案-2\"><a class=\"header-anchor\" href=\"#想一想再看答案-2\" aria-hidden=\"true\">#</a> 想一想再看答案</h3>\\n<h3 id=\"想一想再看答案-3\"><a class=\"header-anchor\" href=\"#想一想再看答案-3\" aria-hidden=\"true\">#</a> 想一想再看答案</h3>\\n<h3 id=\"代码：\"><a class=\"header-anchor\" href=\"#代码：\" aria-hidden=\"true\">#</a> 代码：</h3>\\n<p>遍历数组长度的n+1次(包括0)，对比有没有这个值即可</p>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">findMissing</span> <span class=\"token operator\">=</span> arr <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\\n  <span class=\"token keyword\">let</span> num <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">.</span>length <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> num<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n      <span class=\"token comment\">// i不在数组中 就找到这个值</span>\\n      <span class=\"token keyword\">return</span> i<span class=\"token punctuation\">;</span>\\n    <span class=\"token punctuation\">}</span>\\n  <span class=\"token punctuation\">}</span>\\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\\'输出\\'</span><span class=\"token punctuation\">,</span> <span class=\"token function\">findMissing</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//1</span>\\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">findMissing</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 5</span>\\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">findMissing</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 4</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br><span class=\"line-number\">11</span><br><span class=\"line-number\">12</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e\\x3c!-- 特殊字符串：用于修改/删除markdown的结尾提示语-OBKoro1 --\\x3e\\n<h3 id=\"点个star支持我一下\"><a class=\"header-anchor\" href=\"#点个star支持我一下\" aria-hidden=\"true\">#</a> 点个<a href=\"https://github.com/OBKoro1/Brush_algorithm\" target=\"_blank\" rel=\"noopener noreferrer\">Star<OutboundLink/></a>支持我一下~</h3>\\n\\x3c!-- \\'特殊字符串：用于删除编译后的issue组件-OBKoro1 --\\x3e\\n'},{key:\"v-acd6a17d68f3d\",path:\"/algorithm/simple/%E4%B8%A4%E4%B8%AA%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%98%AF%E5%8F%98%E4%BD%8D%E8%AF%8D.html\",lastUpdated:1564720698e3,title:\"两个字符串是变位词\",headers:[{level:2,title:\"两个字符串是变位词\",slug:\"两个字符串是变位词\"},{level:3,title:\"难度：简单\",slug:\"难度：简单\"},{level:3,title:\"描述：\",slug:\"描述：\"},{level:3,title:\"样例：\",slug:\"样例：\"},{level:3,title:\"思路分析：\",slug:\"思路分析：\"},{level:3,title:\"代码模板：\",slug:\"代码模板：\"},{level:3,title:\"想一想再看答案\",slug:\"想一想再看答案\"},{level:3,title:\"想一想再看答案\",slug:\"想一想再看答案-2\"},{level:3,title:\"想一想再看答案\",slug:\"想一想再看答案-3\"},{level:3,title:\"代码：\",slug:\"代码：\"},{level:3,title:\"点个Star支持我一下~\",slug:\"点个star支持我一下\"}],excerpt:'<h2 id=\"两个字符串是变位词\"><a class=\"header-anchor\" href=\"#两个字符串是变位词\" aria-hidden=\"true\">#</a> 两个字符串是变位词</h2>\\n<h3 id=\"难度：简单\"><a class=\"header-anchor\" href=\"#难度：简单\" aria-hidden=\"true\">#</a> 难度：简单</h3>\\n<h3 id=\"描述：\"><a class=\"header-anchor\" href=\"#描述：\" aria-hidden=\"true\">#</a> 描述：</h3>\\n<p>写出一个函数 <code>anagram(s, t)</code> 判断两个字符串是否可以通过改变字母的顺序变成一样的字符串。</p>\\n<h3 id=\"样例：\"><a class=\"header-anchor\" href=\"#样例：\" aria-hidden=\"true\">#</a> 样例：</h3>\\n<p>给出 s = &quot;abcd&quot;，t=&quot;dcab&quot;，返回 true.\\n给出 s = &quot;aacd&quot;, t = &quot;acdd&quot;, 返回 false.\\n给出 s = &quot;abcd&quot;, t = &quot;dcaba&quot;, 返回 false.\\n给出 s = &quot;abcd&quot;, t = &quot;abce&quot;, 返回 false.</p>\\n<h3 id=\"思路分析：\"><a class=\"header-anchor\" href=\"#思路分析：\" aria-hidden=\"true\">#</a> 思路分析：</h3>\\n<p>想出了两种解法：分别是用对象和用数组。</p>\\n<p>要注意出现重复字符串的情况：<code>aaccdd</code>这类的。</p>\\n<h3 id=\"代码模板：\"><a class=\"header-anchor\" href=\"#代码模板：\" aria-hidden=\"true\">#</a> 代码模板：</h3>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">anagram</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">,</span> t<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n<span class=\"token punctuation\">}</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<h3 id=\"想一想再看答案\"><a class=\"header-anchor\" href=\"#想一想再看答案\" aria-hidden=\"true\">#</a> 想一想再看答案</h3>\\n<h3 id=\"想一想再看答案-2\"><a class=\"header-anchor\" href=\"#想一想再看答案-2\" aria-hidden=\"true\">#</a> 想一想再看答案</h3>\\n<h3 id=\"想一想再看答案-3\"><a class=\"header-anchor\" href=\"#想一想再看答案-3\" aria-hidden=\"true\">#</a> 想一想再看答案</h3>\\n<h3 id=\"代码：\"><a class=\"header-anchor\" href=\"#代码：\" aria-hidden=\"true\">#</a> 代码：</h3>\\n<ol>\\n<li>用对象来接字符，将重复的字符的数量，比较第二个字符串的数量和值</li>\\n</ol>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">anagram</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">,</span> t<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span>length <span class=\"token operator\">===</span> t<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n        <span class=\"token keyword\">var</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> key <span class=\"token keyword\">of</span> s<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span> <span class=\"token operator\">===</span> undefined<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n                obj<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span> <span class=\"token comment\">// 初始化</span>\\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\\n                obj<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> obj<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span><span class=\"token operator\">+</span><span class=\"token number\">1</span> <span class=\"token comment\">// 相同的字符 增加数量</span>\\n            <span class=\"token punctuation\">}</span>\\n        <span class=\"token punctuation\">}</span>\\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> key <span class=\"token keyword\">of</span> t<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span> <span class=\"token operator\">===</span> undefined<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n                <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span> <span class=\"token comment\">// 出现没有值的情况 直接返回false</span>\\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\\n                obj<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> obj<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span><span class=\"token operator\">-</span><span class=\"token number\">1</span> <span class=\"token comment\">// 将值又减掉 最后全为0 才是正确</span>\\n            <span class=\"token punctuation\">}</span>\\n        <span class=\"token punctuation\">}</span>\\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> key <span class=\"token keyword\">in</span> obj<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span> <span class=\"token operator\">!==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span>\\n        <span class=\"token punctuation\">}</span>\\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span>  <span class=\"token comment\">// 每个字符一样 数量也相同 返回true </span>\\n    <span class=\"token punctuation\">}</span> \\n    <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span> <span class=\"token comment\">// 数量不同 返回false</span>\\n<span class=\"token punctuation\">}</span>\\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">anagram</span><span class=\"token punctuation\">(</span><span class=\"token string\">\\'abcd\\'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\\'dcab\\'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">anagram</span><span class=\"token punctuation\">(</span><span class=\"token string\">\\'aacd\\'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\\'acdd\\'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">anagram</span><span class=\"token punctuation\">(</span><span class=\"token string\">\\'abcd\\'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\\'dcaba\\'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">anagram</span><span class=\"token punctuation\">(</span><span class=\"token string\">\\'abcd\\'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\\'abce\\'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br><span class=\"line-number\">11</span><br><span class=\"line-number\">12</span><br><span class=\"line-number\">13</span><br><span class=\"line-number\">14</span><br><span class=\"line-number\">15</span><br><span class=\"line-number\">16</span><br><span class=\"line-number\">17</span><br><span class=\"line-number\">18</span><br><span class=\"line-number\">19</span><br><span class=\"line-number\">20</span><br><span class=\"line-number\">21</span><br><span class=\"line-number\">22</span><br><span class=\"line-number\">23</span><br><span class=\"line-number\">24</span><br><span class=\"line-number\">25</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<ol start=\"2\">\\n<li>一个字符串用来匹配，第二个字符串转数组，将找到的字符值设为<code>undefined</code></li>\\n</ol>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">anagram</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">,</span> t<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span>length <span class=\"token operator\">===</span> t<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\\n        t <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span>t<span class=\"token punctuation\">]</span> <span class=\"token comment\">// 一个字符串用来匹配</span>\\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> key <span class=\"token keyword\">of</span> s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\\n            <span class=\"token keyword\">let</span> index <span class=\"token operator\">=</span> t<span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>index <span class=\"token operator\">!==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\\n                t<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> undefined <span class=\"token comment\">// 找到那个值 设为undefined 下次有重复的 就不会再找到</span>\\n            <span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span>\\n                <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span> <span class=\"token comment\">// 没找到即为false</span>\\n            <span class=\"token punctuation\">}</span>\\n        <span class=\"token punctuation\">}</span>\\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span> <span class=\"token comment\">// 数量相等 会全都删光</span>\\n    <span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span>\\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span> <span class=\"token comment\">// 数量不等即为false</span>\\n    <span class=\"token punctuation\">}</span>\\n<span class=\"token punctuation\">}</span>\\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">anagram</span><span class=\"token punctuation\">(</span><span class=\"token string\">\\'abcd\\'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\\'dcab\\'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">anagram</span><span class=\"token punctuation\">(</span><span class=\"token string\">\\'aacd\\'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\\'acdd\\'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">anagram</span><span class=\"token punctuation\">(</span><span class=\"token string\">\\'abcd\\'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\\'dcaba\\'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">anagram</span><span class=\"token punctuation\">(</span><span class=\"token string\">\\'abcd\\'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\\'abce\\'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\\n\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br><span class=\"line-number\">11</span><br><span class=\"line-number\">12</span><br><span class=\"line-number\">13</span><br><span class=\"line-number\">14</span><br><span class=\"line-number\">15</span><br><span class=\"line-number\">16</span><br><span class=\"line-number\">17</span><br><span class=\"line-number\">18</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e\\x3c!-- 特殊字符串：用于修改/删除markdown的结尾提示语-OBKoro1 --\\x3e\\n<h3 id=\"点个star支持我一下\"><a class=\"header-anchor\" href=\"#点个star支持我一下\" aria-hidden=\"true\">#</a> 点个<a href=\"https://github.com/OBKoro1/Brush_algorithm\" target=\"_blank\" rel=\"noopener noreferrer\">Star<OutboundLink/></a>支持我一下~</h3>\\n\\x3c!-- \\'特殊字符串：用于删除编译后的issue组件-OBKoro1 --\\x3e\\n'},{key:\"v-11dad5cc3d8f\",path:\"/algorithm/simple/%E4%B8%A4%E6%95%B0%E4%B9%8B%E5%92%8C.html\",lastUpdated:1564720698e3,title:\"两数之和\",headers:[{level:2,title:\"两数之和\",slug:\"两数之和\"},{level:3,title:\"难度：简单\",slug:\"难度：简单\"},{level:3,title:\"描述：\",slug:\"描述：\"},{level:3,title:\"样例：\",slug:\"样例：\"},{level:3,title:\"思路分析：\",slug:\"思路分析：\"},{level:3,title:\"代码模板：\",slug:\"代码模板：\"},{level:3,title:\"想一想再看答案\",slug:\"想一想再看答案\"},{level:3,title:\"想一想再看答案\",slug:\"想一想再看答案-2\"},{level:3,title:\"想一想再看答案\",slug:\"想一想再看答案-3\"},{level:3,title:\"代码：\",slug:\"代码：\"},{level:3,title:\"点个Star支持我一下~\",slug:\"点个star支持我一下\"}],excerpt:'<h2 id=\"两数之和\"><a class=\"header-anchor\" href=\"#两数之和\" aria-hidden=\"true\">#</a> 两数之和</h2>\\n<h3 id=\"难度：简单\"><a class=\"header-anchor\" href=\"#难度：简单\" aria-hidden=\"true\">#</a> 难度：简单</h3>\\n<h3 id=\"描述：\"><a class=\"header-anchor\" href=\"#描述：\" aria-hidden=\"true\">#</a> 描述：</h3>\\n<p>给一个整数数组，找到两个数使得他们的和等于一个给定的数 target。</p>\\n<p>你需要实现的函数 twoSum 需要返回这两个数的下标, 并且第一个下标小于第二个下标。注意这里下标的范围是 0 到 n-1。</p>\\n<h3 id=\"样例：\"><a class=\"header-anchor\" href=\"#样例：\" aria-hidden=\"true\">#</a> 样例：</h3>\\n<p>给出 numbers = [2, 7, 11, 15], target = 9, 返回 [0, 1].</p>\\n<p>给出 numbers = [2, 33, 11, 2], target = 4, 返回 [0, 3].</p>\\n<h3 id=\"思路分析：\"><a class=\"header-anchor\" href=\"#思路分析：\" aria-hidden=\"true\">#</a> 思路分析：</h3>\\n<p><code>target</code>减去每个元素的值，得出来的值，就是我们要搜索的值。</p>\\n<h3 id=\"代码模板：\"><a class=\"header-anchor\" href=\"#代码模板：\" aria-hidden=\"true\">#</a> 代码模板：</h3>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code><span class=\"token comment\">/**\\n * @param numbers: An array of Integer\\n * @param target: target = numbers[index1] + numbers[index2]\\n * @return: [index1, index2] (index1 &lt; index2)\\n */</span>\\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">twoSum</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>numbers<span class=\"token punctuation\">,</span> target<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<h3 id=\"想一想再看答案\"><a class=\"header-anchor\" href=\"#想一想再看答案\" aria-hidden=\"true\">#</a> 想一想再看答案</h3>\\n<h3 id=\"想一想再看答案-2\"><a class=\"header-anchor\" href=\"#想一想再看答案-2\" aria-hidden=\"true\">#</a> 想一想再看答案</h3>\\n<h3 id=\"想一想再看答案-3\"><a class=\"header-anchor\" href=\"#想一想再看答案-3\" aria-hidden=\"true\">#</a> 想一想再看答案</h3>\\n<h3 id=\"代码：\"><a class=\"header-anchor\" href=\"#代码：\" aria-hidden=\"true\">#</a> 代码：</h3>\\n<ol>\\n<li>转成对象：</li>\\n</ol>\\n<p>这是别人的一种解法，比下面的解法复杂点，可以看看，扩展一下思路。</p>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code><span class=\"token comment\">/**\\n * @param numbers: An array of Integer\\n * @param target: target = numbers[index1] + numbers[index2]\\n * @return: [index1, index2] (index1 &lt; index2)\\n */</span>\\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">twoSum</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>numbers<span class=\"token punctuation\">,</span> target<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n  <span class=\"token keyword\">let</span> map <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\\n  <span class=\"token comment\">// key : the complement (target - num)</span>\\n  <span class=\"token comment\">// value: index for that num</span>\\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> numbers<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n    <span class=\"token keyword\">const</span> num <span class=\"token operator\">=</span> numbers<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>map<span class=\"token punctuation\">[</span>num<span class=\"token punctuation\">]</span> <span class=\"token operator\">!==</span> undefined<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n      <span class=\"token comment\">// 找到值</span>\\n      <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span>map<span class=\"token punctuation\">[</span>num<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 第一次保存的index 和 刚找到的下标 即结果。</span>\\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\\n      <span class=\"token comment\">// 第一次进入 保存 要搜索的值和index</span>\\n      map<span class=\"token punctuation\">[</span>target <span class=\"token operator\">-</span> num<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 第一次</span>\\n    <span class=\"token punctuation\">}</span>\\n  <span class=\"token punctuation\">}</span>\\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">twoSum</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">11</span><span class=\"token punctuation\">,</span> <span class=\"token number\">15</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">twoSum</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">33</span><span class=\"token punctuation\">,</span> <span class=\"token number\">11</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br><span class=\"line-number\">11</span><br><span class=\"line-number\">12</span><br><span class=\"line-number\">13</span><br><span class=\"line-number\">14</span><br><span class=\"line-number\">15</span><br><span class=\"line-number\">16</span><br><span class=\"line-number\">17</span><br><span class=\"line-number\">18</span><br><span class=\"line-number\">19</span><br><span class=\"line-number\">20</span><br><span class=\"line-number\">21</span><br><span class=\"line-number\">22</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<ol start=\"2\">\\n<li>双循环</li>\\n</ol>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">twoSum</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>numbers<span class=\"token punctuation\">,</span> target<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> index <span class=\"token keyword\">of</span> numbers<span class=\"token punctuation\">.</span><span class=\"token function\">keys</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n    <span class=\"token keyword\">let</span> res <span class=\"token operator\">=</span> target <span class=\"token operator\">-</span> numbers<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 要搜索的值</span>\\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> numbers<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">></span> index<span class=\"token punctuation\">;</span> i<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n      <span class=\"token comment\">// 倒序查找，跳过已经遍历过的值</span>\\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>res <span class=\"token operator\">===</span> numbers<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 搜索到了 即找到</span>\\n    <span class=\"token punctuation\">}</span>\\n  <span class=\"token punctuation\">}</span>\\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">twoSum</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">11</span><span class=\"token punctuation\">,</span> <span class=\"token number\">15</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">twoSum</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">33</span><span class=\"token punctuation\">,</span> <span class=\"token number\">11</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<ol start=\"3\">\\n<li>indexOf()</li>\\n</ol>\\n<p><code>indexOf</code>的第二个参数是开始搜索的位置，也可以跳过前面已经搜索过的值。</p>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">twoSum</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>numbers<span class=\"token punctuation\">,</span> target<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> index <span class=\"token keyword\">of</span> numbers<span class=\"token punctuation\">.</span><span class=\"token function\">keys</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n    <span class=\"token keyword\">let</span> res <span class=\"token operator\">=</span> target <span class=\"token operator\">-</span> numbers<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 相减</span>\\n    <span class=\"token keyword\">let</span> search <span class=\"token operator\">=</span> numbers<span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">,</span> index <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 跳过前面已经搜索过的，防止2+2=4 搜索两个2在同一个位置</span>\\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>search <span class=\"token operator\">!==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n      <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">,</span> search<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 直接返回值</span>\\n    <span class=\"token punctuation\">}</span>\\n  <span class=\"token punctuation\">}</span>\\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">twoSum</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">11</span><span class=\"token punctuation\">,</span> <span class=\"token number\">15</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">twoSum</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">33</span><span class=\"token punctuation\">,</span> <span class=\"token number\">11</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e\\x3c!-- 特殊字符串：用于修改/删除markdown的结尾提示语-OBKoro1 --\\x3e\\n<h3 id=\"点个star支持我一下\"><a class=\"header-anchor\" href=\"#点个star支持我一下\" aria-hidden=\"true\">#</a> 点个<a href=\"https://github.com/OBKoro1/Brush_algorithm\" target=\"_blank\" rel=\"noopener noreferrer\">Star<OutboundLink/></a>支持我一下~</h3>\\n\\x3c!-- \\'特殊字符串：用于删除编译后的issue组件-OBKoro1 --\\x3e\\n'},{key:\"v-ab6c422cc0d03\",path:\"/algorithm/simple/%E4%B8%AD%E4%BD%8D%E6%95%B0.html\",lastUpdated:1564720698e3,title:\"中位数\",headers:[{level:2,title:\"中位数\",slug:\"中位数\"},{level:3,title:\"难度：简单\",slug:\"难度：简单\"},{level:3,title:\"描述：\",slug:\"描述：\"},{level:3,title:\"样例：\",slug:\"样例：\"},{level:3,title:\"思路分析：\",slug:\"思路分析：\"},{level:3,title:\"代码模板：\",slug:\"代码模板：\"},{level:3,title:\"想一想再看答案\",slug:\"想一想再看答案\"},{level:3,title:\"想一想再看答案\",slug:\"想一想再看答案-2\"},{level:3,title:\"想一想再看答案\",slug:\"想一想再看答案-3\"},{level:3,title:\"代码：\",slug:\"代码：\"},{level:3,title:\"点个Star支持我一下~\",slug:\"点个star支持我一下\"}],excerpt:'<h2 id=\"中位数\"><a class=\"header-anchor\" href=\"#中位数\" aria-hidden=\"true\">#</a> 中位数</h2>\\n<h3 id=\"难度：简单\"><a class=\"header-anchor\" href=\"#难度：简单\" aria-hidden=\"true\">#</a> 难度：简单</h3>\\n<h3 id=\"描述：\"><a class=\"header-anchor\" href=\"#描述：\" aria-hidden=\"true\">#</a> 描述：</h3>\\n<p>给定一个未排序的整数数组，找到其中位数。</p>\\n<p>中位数是排序后数组的中间值，如果数组的个数是偶数个，则返回排序后数组的第 N/2 个数。</p>\\n<h3 id=\"样例：\"><a class=\"header-anchor\" href=\"#样例：\" aria-hidden=\"true\">#</a> 样例：</h3>\\n<p>给出数组[4, 5, 1, 2, 3]， 返回 3</p>\\n<p>给出数组[7, 9, 4, 5]，返回 5</p>\\n<h3 id=\"思路分析：\"><a class=\"header-anchor\" href=\"#思路分析：\" aria-hidden=\"true\">#</a> 思路分析：</h3>\\n<ol>\\n<li>升序排序数组</li>\\n<li>模拟几个数组的返回值，找到里面的规律，找出数组中对应元素。</li>\\n</ol>\\n<h3 id=\"代码模板：\"><a class=\"header-anchor\" href=\"#代码模板：\" aria-hidden=\"true\">#</a> 代码模板：</h3>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code><span class=\"token comment\">/**\\n * @param nums: A list of integers\\n * @return: An integer denotes the middle number of the array\\n */</span>\\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">median</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<h3 id=\"想一想再看答案\"><a class=\"header-anchor\" href=\"#想一想再看答案\" aria-hidden=\"true\">#</a> 想一想再看答案</h3>\\n<h3 id=\"想一想再看答案-2\"><a class=\"header-anchor\" href=\"#想一想再看答案-2\" aria-hidden=\"true\">#</a> 想一想再看答案</h3>\\n<h3 id=\"想一想再看答案-3\"><a class=\"header-anchor\" href=\"#想一想再看答案-3\" aria-hidden=\"true\">#</a> 想一想再看答案</h3>\\n<h3 id=\"代码：\"><a class=\"header-anchor\" href=\"#代码：\" aria-hidden=\"true\">#</a> 代码：</h3>\\n<ol>\\n<li>判断奇数偶数，找到对应的下标</li>\\n</ol>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code><span class=\"token comment\">/**\\n * @param nums: A list of integers\\n * @return: An integer denotes the middle number of the array\\n */</span>\\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">median</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n  nums<span class=\"token punctuation\">.</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\\n    <span class=\"token keyword\">return</span> a <span class=\"token operator\">-</span> b<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 升序排序</span>\\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\n  <span class=\"token keyword\">var</span> num <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 保存数组长度</span>\\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>num <span class=\"token operator\">%</span> <span class=\"token number\">2</span> <span class=\"token operator\">!==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n    <span class=\"token comment\">// 判断奇数偶数</span>\\n    <span class=\"token keyword\">return</span> nums<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span>num <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">2</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 奇数转偶数</span>\\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\\n    <span class=\"token keyword\">return</span> nums<span class=\"token punctuation\">[</span>num <span class=\"token operator\">/</span> <span class=\"token number\">2</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 减一 对应数组下标</span>\\n  <span class=\"token punctuation\">}</span>\\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br><span class=\"line-number\">11</span><br><span class=\"line-number\">12</span><br><span class=\"line-number\">13</span><br><span class=\"line-number\">14</span><br><span class=\"line-number\">15</span><br><span class=\"line-number\">16</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<ol start=\"2\">\\n<li>奇数上舍入，找到下标</li>\\n</ol>\\n<p>两种写法一样，但无疑第二种写法更为优雅。</p>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code><span class=\"token comment\">/**\\n * @param nums: A list of integers\\n * @return: An integer denotes the middle number of the array\\n */</span>\\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">median</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n  nums<span class=\"token punctuation\">.</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>v1<span class=\"token punctuation\">,</span> v2<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> v1 <span class=\"token operator\">-</span> v2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\n  <span class=\"token keyword\">return</span> nums<span class=\"token punctuation\">[</span>Math<span class=\"token punctuation\">.</span><span class=\"token function\">ceil</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">.</span>length <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// </span>\\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e\\x3c!-- 特殊字符串：用于修改/删除markdown的结尾提示语-OBKoro1 --\\x3e\\n<h3 id=\"点个star支持我一下\"><a class=\"header-anchor\" href=\"#点个star支持我一下\" aria-hidden=\"true\">#</a> 点个<a href=\"https://github.com/OBKoro1/Brush_algorithm\" target=\"_blank\" rel=\"noopener noreferrer\">Star<OutboundLink/></a>支持我一下~</h3>\\n\\x3c!-- \\'特殊字符串：用于删除编译后的issue组件-OBKoro1 --\\x3e\\n'},{key:\"v-3570c91f8c071\",path:\"/algorithm/simple/%E5%88%86%E8%A7%A3%E8%B4%A8%E5%9B%A0%E6%95%B0.html\",lastUpdated:1564720698e3,title:\"分解质因数\",headers:[{level:3,title:\"难度：简单\",slug:\"难度：简单\"},{level:3,title:\"质因数的定义：\",slug:\"质因数的定义：\"},{level:3,title:\"描述：\",slug:\"描述：\"},{level:3,title:\"样例：\",slug:\"样例：\"},{level:3,title:\"题目分析：\",slug:\"题目分析：\"},{level:3,title:\"代码：\",slug:\"代码：\"},{level:3,title:\"点个Star支持我一下~\",slug:\"点个star支持我一下\"}],excerpt:'<h1 id=\"分解质因数\"><a class=\"header-anchor\" href=\"#分解质因数\" aria-hidden=\"true\">#</a> 分解质因数</h1>\\n<h3 id=\"难度：简单\"><a class=\"header-anchor\" href=\"#难度：简单\" aria-hidden=\"true\">#</a> 难度：简单</h3>\\n<h3 id=\"质因数的定义：\"><a class=\"header-anchor\" href=\"#质因数的定义：\" aria-hidden=\"true\">#</a> 质因数的定义：</h3>\\n<p>能整除给定正整数的质数。</p>\\n<p>百度百科：<a href=\"https://baike.baidu.com/item/%E8%B4%A8%E5%9B%A0%E6%95%B0#reference-%5B1%5D-341369-wrap\" target=\"_blank\" rel=\"noopener noreferrer\">质因数<OutboundLink/></a></p>\\n<h3 id=\"描述：\"><a class=\"header-anchor\" href=\"#描述：\" aria-hidden=\"true\">#</a> 描述：</h3>\\n<ol>\\n<li>将一个整数分解为若干质因数之乘积</li>\\n<li>你需要从小到大排列质因子</li>\\n</ol>\\n<h3 id=\"样例：\"><a class=\"header-anchor\" href=\"#样例：\" aria-hidden=\"true\">#</a> 样例：</h3>\\n<ul>\\n<li>给出 <code>10</code>, 返回 <code>[2, 5]</code></li>\\n<li>给出 <code>660</code>, 返回 <code>[2, 2, 3, 5, 11]</code></li>\\n</ul>\\n<h3 id=\"题目分析：\"><a class=\"header-anchor\" href=\"#题目分析：\" aria-hidden=\"true\">#</a> 题目分析：</h3>\\n<p>从小到大排列质因子，需要将同一个质因子整除干净。</p>\\n<p>比如：20 可以被 2 整除两次。</p>\\n<p>提示：需要两层循环。</p>\\n<h3 id=\"代码：\"><a class=\"header-anchor\" href=\"#代码：\" aria-hidden=\"true\">#</a> 代码：</h3>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code><span class=\"token comment\">// 分解质因数</span>\\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">primeFactorization</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n  <span class=\"token keyword\">let</span> res <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\\n  <span class=\"token comment\">// 不需要判定i是否为质数，如果i不为质数，且能整除num时，num早被i的因数所除。故能整除num的i必是质数。</span>\\n  <span class=\"token comment\">// i * i > num 退出循环 num一开始会在第二层循环被i整除成比较小的数字</span>\\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">*</span> i <span class=\"token operator\">&lt;=</span> num<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>num <span class=\"token operator\">%</span> i <span class=\"token operator\">===</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n      <span class=\"token comment\">// 直到有余数退出循环</span>\\n      num <span class=\"token operator\">=</span> num <span class=\"token operator\">/</span> i<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 改变num</span>\\n      res<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 没有余数 能整除 这一步会找出所有质因数 不会出现4的那种情况</span>\\n    <span class=\"token punctuation\">}</span>\\n  <span class=\"token punctuation\">}</span>\\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>num <span class=\"token operator\">!==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> res<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// num到最后也是质因数</span>\\n  <span class=\"token keyword\">return</span> res<span class=\"token punctuation\">;</span>\\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br><span class=\"line-number\">11</span><br><span class=\"line-number\">12</span><br><span class=\"line-number\">13</span><br><span class=\"line-number\">14</span><br><span class=\"line-number\">15</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e\\x3c!-- 特殊字符串：用于修改/删除markdown的结尾提示语-OBKoro1 --\\x3e\\n<h3 id=\"点个star支持我一下\"><a class=\"header-anchor\" href=\"#点个star支持我一下\" aria-hidden=\"true\">#</a> 点个<a href=\"https://github.com/OBKoro1/Brush_algorithm\" target=\"_blank\" rel=\"noopener noreferrer\">Star<OutboundLink/></a>支持我一下~</h3>\\n\\x3c!-- \\'特殊字符串：用于删除编译后的issue组件-OBKoro1 --\\x3e\\n'},{key:\"v-d11e7a9e057d5\",path:\"/algorithm/simple/%E5%88%A0%E9%99%A4%E5%85%83%E7%B4%A0.html\",lastUpdated:1564720698e3,title:\"原地删除数组元素\",headers:[{level:2,title:\"原地删除数组元素\",slug:\"原地删除数组元素\"},{level:3,title:\"难度：简单\",slug:\"难度：简单\"},{level:3,title:\"描述：\",slug:\"描述：\"},{level:3,title:\"样例：\",slug:\"样例：\"},{level:3,title:\"代码模板：\",slug:\"代码模板：\"},{level:3,title:\"想一想再看答案\",slug:\"想一想再看答案\"},{level:3,title:\"想一想再看答案\",slug:\"想一想再看答案-2\"},{level:3,title:\"想一想再看答案\",slug:\"想一想再看答案-3\"},{level:3,title:\"代码：\",slug:\"代码：\"},{level:3,title:\"点个Star支持我一下~\",slug:\"点个star支持我一下\"}],excerpt:'<h2 id=\"原地删除数组元素\"><a class=\"header-anchor\" href=\"#原地删除数组元素\" aria-hidden=\"true\">#</a> 原地删除数组元素</h2>\\n<h3 id=\"难度：简单\"><a class=\"header-anchor\" href=\"#难度：简单\" aria-hidden=\"true\">#</a> 难度：简单</h3>\\n<h3 id=\"描述：\"><a class=\"header-anchor\" href=\"#描述：\" aria-hidden=\"true\">#</a> 描述：</h3>\\n<p>给定一个数组和一个值，在原地删除与值相同的数字，返回新数组的长度。</p>\\n<p>元素的顺序可以改变，并且对新的数组不会有影响。</p>\\n<h3 id=\"样例：\"><a class=\"header-anchor\" href=\"#样例：\" aria-hidden=\"true\">#</a> 样例：</h3>\\n<p>给出一个数组 [0,4,4,0,0,2,4,4]，和值 4</p>\\n<p>返回 4 并且 4 个元素的新数组为[0,0,0,2]</p>\\n<h3 id=\"代码模板：\"><a class=\"header-anchor\" href=\"#代码模板：\" aria-hidden=\"true\">#</a> 代码模板：</h3>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">removeElement</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">,</span> ele<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<h3 id=\"想一想再看答案\"><a class=\"header-anchor\" href=\"#想一想再看答案\" aria-hidden=\"true\">#</a> 想一想再看答案</h3>\\n<h3 id=\"想一想再看答案-2\"><a class=\"header-anchor\" href=\"#想一想再看答案-2\" aria-hidden=\"true\">#</a> 想一想再看答案</h3>\\n<h3 id=\"想一想再看答案-3\"><a class=\"header-anchor\" href=\"#想一想再看答案-3\" aria-hidden=\"true\">#</a> 想一想再看答案</h3>\\n<h3 id=\"代码：\"><a class=\"header-anchor\" href=\"#代码：\" aria-hidden=\"true\">#</a> 代码：</h3>\\n<ol>\\n<li>保存遍历次数，匹配元素，然后删除</li>\\n</ol>\\n<p>切勿直接使用数组的<code>length</code>属性，因为被删除后<code>length</code>属性会减少，导致遍历提前结束，删除不彻底。</p>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">removeElement</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">,</span> ele<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\\n  <span class=\"token keyword\">let</span> num <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 保存遍历的次数</span>\\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> index <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> index <span class=\"token operator\">&lt;</span> num<span class=\"token punctuation\">;</span> index<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n    <span class=\"token keyword\">let</span> find <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span>ele<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>find <span class=\"token operator\">!==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n      arr<span class=\"token punctuation\">.</span><span class=\"token function\">splice</span><span class=\"token punctuation\">(</span>find<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 原地删除</span>\\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\\n      <span class=\"token keyword\">return</span> arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 找不到即退出</span>\\n    <span class=\"token punctuation\">}</span>\\n  <span class=\"token punctuation\">}</span>\\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br><span class=\"line-number\">11</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<ol start=\"2\">\\n<li>遍历数组，匹配元素，赋值为<code>null</code>/<code>undefined</code>，再过滤掉</li>\\n</ol>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">removeElement</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">,</span> ele<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> index <span class=\"token keyword\">of</span> arr<span class=\"token punctuation\">.</span><span class=\"token function\">keys</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n    <span class=\"token keyword\">let</span> find <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span>ele<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>find <span class=\"token operator\">!==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n      arr<span class=\"token punctuation\">[</span>find<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\\n      <span class=\"token keyword\">return</span> arr<span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">=></span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 将假值过滤掉</span>\\n    <span class=\"token punctuation\">}</span>\\n  <span class=\"token punctuation\">}</span>\\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<ol start=\"3\">\\n<li>直接过滤</li>\\n</ol>\\n<p>在写出上个方法之后，想到可以直接过滤掉，最简洁。但还是把另外两个方法放上来，当个思路参考一下！</p>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">removeElement</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">,</span> ele<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\\n  <span class=\"token keyword\">return</span> arr<span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">=></span> x <span class=\"token operator\">!==</span> ele<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 使用过滤将值不等于ele的直接过滤出来，返回长度</span>\\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e\\x3c!-- 特殊字符串：用于修改/删除markdown的结尾提示语-OBKoro1 --\\x3e\\n<h3 id=\"点个star支持我一下\"><a class=\"header-anchor\" href=\"#点个star支持我一下\" aria-hidden=\"true\">#</a> 点个<a href=\"https://github.com/OBKoro1/Brush_algorithm\" target=\"_blank\" rel=\"noopener noreferrer\">Star<OutboundLink/></a>支持我一下~</h3>\\n\\x3c!-- \\'特殊字符串：用于删除编译后的issue组件-OBKoro1 --\\x3e\\n'},{key:\"v-4941535a5f25b\",path:\"/algorithm/simple/%E5%88%A4%E6%96%AD%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84%E5%BE%AA%E7%8E%AF%E7%A7%BB%E5%8A%A8.html\",lastUpdated:1564720698e3,title:\"判断字符串的循环移动\",headers:[{level:2,title:\"判断字符串的循环移动\",slug:\"判断字符串的循环移动\"},{level:3,title:\"难度：简单\",slug:\"难度：简单\"},{level:3,title:\"描述：\",slug:\"描述：\"},{level:3,title:\"样例：\",slug:\"样例：\"},{level:3,title:\"思路分析：\",slug:\"思路分析：\"},{level:3,title:\"代码模板：\",slug:\"代码模板：\"},{level:3,title:\"想一想再看答案\",slug:\"想一想再看答案\"},{level:3,title:\"想一想再看答案\",slug:\"想一想再看答案-2\"},{level:3,title:\"想一想再看答案\",slug:\"想一想再看答案-3\"},{level:3,title:\"代码：\",slug:\"代码：\"},{level:3,title:\"点个Star支持我一下~\",slug:\"点个star支持我一下\"}],excerpt:'<h2 id=\"判断字符串的循环移动\"><a class=\"header-anchor\" href=\"#判断字符串的循环移动\" aria-hidden=\"true\">#</a> 判断字符串的循环移动</h2>\\n<h3 id=\"难度：简单\"><a class=\"header-anchor\" href=\"#难度：简单\" aria-hidden=\"true\">#</a> 难度：简单</h3>\\n<h3 id=\"描述：\"><a class=\"header-anchor\" href=\"#描述：\" aria-hidden=\"true\">#</a> 描述：</h3>\\n<p>可以检验某个单词是否为另一个单词的子字符串。给定 s1 和 s2，请设计一种方法来检验 s2 是否为 s1 的循环移动后的字符串。</p>\\n<h3 id=\"样例：\"><a class=\"header-anchor\" href=\"#样例：\" aria-hidden=\"true\">#</a> 样例：</h3>\\n<p>s1 = <code>waterbottle</code>;\\ns2 = <code>erbottlewat</code>;\\n返回<code>true</code>;</p>\\n<p>s1 = <code>apple</code>;\\ns2 = <code>ppale</code>;\\n返回<code>false</code>;</p>\\n<h3 id=\"思路分析：\"><a class=\"header-anchor\" href=\"#思路分析：\" aria-hidden=\"true\">#</a> 思路分析：</h3>\\n<p>将其中一个字符串转成数组来操作，然后再转成字符，回头来比较字符串。</p>\\n<h3 id=\"代码模板：\"><a class=\"header-anchor\" href=\"#代码模板：\" aria-hidden=\"true\">#</a> 代码模板：</h3>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code><span class=\"token comment\">/**\\n * @param s1: the first string\\n * @param s2: the socond string\\n * @return: true if s2 is a rotation of s1 or false\\n */</span>\\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">isRotation</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>s1<span class=\"token punctuation\">,</span> s2<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<h3 id=\"想一想再看答案\"><a class=\"header-anchor\" href=\"#想一想再看答案\" aria-hidden=\"true\">#</a> 想一想再看答案</h3>\\n<h3 id=\"想一想再看答案-2\"><a class=\"header-anchor\" href=\"#想一想再看答案-2\" aria-hidden=\"true\">#</a> 想一想再看答案</h3>\\n<h3 id=\"想一想再看答案-3\"><a class=\"header-anchor\" href=\"#想一想再看答案-3\" aria-hidden=\"true\">#</a> 想一想再看答案</h3>\\n<h3 id=\"代码：\"><a class=\"header-anchor\" href=\"#代码：\" aria-hidden=\"true\">#</a> 代码：</h3>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code><span class=\"token comment\">// 将最后的值拿出来 再放到第一位上去</span>\\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">isRotation</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">,</span> t<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span>length <span class=\"token operator\">===</span> t<span class=\"token punctuation\">.</span>length <span class=\"token operator\">&amp;&amp;</span> s <span class=\"token operator\">&amp;&amp;</span> t<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> s<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n      t <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span>t<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 转数组</span>\\n      <span class=\"token keyword\">let</span> pop <span class=\"token operator\">=</span> t<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 拿最后一个元素</span>\\n      t<span class=\"token punctuation\">.</span><span class=\"token function\">unshift</span><span class=\"token punctuation\">(</span>pop<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 添加到第一个元素</span>\\n      t <span class=\"token operator\">=</span> t<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">\\'\\'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 转字符</span>\\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>t <span class=\"token operator\">===</span> s<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 比较</span>\\n    <span class=\"token punctuation\">}</span>\\n  <span class=\"token punctuation\">}</span>\\n  <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 字符串长度相等 并且有值</span>\\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>\\n  <span class=\"token string\">\\'输出：\\'</span><span class=\"token punctuation\">,</span>\\n  <span class=\"token function\">isRotation</span><span class=\"token punctuation\">(</span><span class=\"token string\">\\'waterbottle\\'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\\'erbottlewat\\'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\\n  <span class=\"token function\">isRotation</span><span class=\"token punctuation\">(</span><span class=\"token string\">\\'apple\\'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\\'ppale\\'</span><span class=\"token punctuation\">)</span>\\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br><span class=\"line-number\">11</span><br><span class=\"line-number\">12</span><br><span class=\"line-number\">13</span><br><span class=\"line-number\">14</span><br><span class=\"line-number\">15</span><br><span class=\"line-number\">16</span><br><span class=\"line-number\">17</span><br><span class=\"line-number\">18</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e\\x3c!-- 特殊字符串：用于修改/删除markdown的结尾提示语-OBKoro1 --\\x3e\\n<h3 id=\"点个star支持我一下\"><a class=\"header-anchor\" href=\"#点个star支持我一下\" aria-hidden=\"true\">#</a> 点个<a href=\"https://github.com/OBKoro1/Brush_algorithm\" target=\"_blank\" rel=\"noopener noreferrer\">Star<OutboundLink/></a>支持我一下~</h3>\\n\\x3c!-- \\'特殊字符串：用于删除编译后的issue组件-OBKoro1 --\\x3e\\n'},{key:\"v-5d7b9d8a49f0e\",path:\"/algorithm/simple/%E5%8F%8D%E8%BD%AC%E6%95%B4%E6%95%B0.html\",lastUpdated:1564720698e3,title:\"反转整数\",headers:[{level:2,title:\"反转整数\",slug:\"反转整数\"},{level:3,title:\"描述\",slug:\"描述\"},{level:3,title:\"样例：\",slug:\"样例：\"},{level:3,title:\"这题很简单,自己想一下！\",slug:\"这题很简单-自己想一下！\"},{level:3,title:\"这题很简单,自己想一下！\",slug:\"这题很简单-自己想一下！-2\"},{level:3,title:\"这题很简单,自己想一下！\",slug:\"这题很简单-自己想一下！-3\"},{level:3,title:\"解法：\",slug:\"解法：\"},{level:3,title:\"提示:\",slug:\"提示\"},{level:3,title:\"code:\",slug:\"code\"},{level:3,title:\"转数组操作运行效率也更高点：\",slug:\"转数组操作运行效率也更高点：\"},{level:3,title:\"点个Star支持我一下~\",slug:\"点个star支持我一下\"}],excerpt:'<h2 id=\"反转整数\"><a class=\"header-anchor\" href=\"#反转整数\" aria-hidden=\"true\">#</a> 反转整数</h2>\\n<h3 id=\"描述\"><a class=\"header-anchor\" href=\"#描述\" aria-hidden=\"true\">#</a> 描述</h3>\\n<p>将一个整数中的数字进行颠倒，当颠倒后的整数溢出时，返回 0 (标记为 32 位整数)。</p>\\n<h3 id=\"样例：\"><a class=\"header-anchor\" href=\"#样例：\" aria-hidden=\"true\">#</a> 样例：</h3>\\n<p>给定 x = 123，返回 321</p>\\n<p>给定 x = -123，返回 -321</p>\\n<p>给定 x = 1534236469， 返回 0</p>\\n<hr>\\n<h3 id=\"这题很简单-自己想一下！\"><a class=\"header-anchor\" href=\"#这题很简单-自己想一下！\" aria-hidden=\"true\">#</a> 这题很简单,自己想一下！</h3>\\n<h3 id=\"这题很简单-自己想一下！-2\"><a class=\"header-anchor\" href=\"#这题很简单-自己想一下！-2\" aria-hidden=\"true\">#</a> 这题很简单,自己想一下！</h3>\\n<h3 id=\"这题很简单-自己想一下！-3\"><a class=\"header-anchor\" href=\"#这题很简单-自己想一下！-3\" aria-hidden=\"true\">#</a> 这题很简单,自己想一下！</h3>\\n<p>给</p>\\n<p>你</p>\\n<p>点</p>\\n<p>时</p>\\n<p>间</p>\\n<p>想</p>\\n<p>一</p>\\n<p>下</p>\\n<hr>\\n<h3 id=\"解法：\"><a class=\"header-anchor\" href=\"#解法：\" aria-hidden=\"true\">#</a> 解法：</h3>\\n<ol>\\n<li>最优：转字符串 再转数组进行操作</li>\\n<li>看到有人用四则运算+遍历反转整数，会把这个解法放到下面</li>\\n</ol>\\n<h3 id=\"提示\"><a class=\"header-anchor\" href=\"#提示\" aria-hidden=\"true\">#</a> 提示:</h3>\\n<p>整数溢出的值为<code>Math.pow(2, 31) - 1</code>和<code>Math.pow(-2, 31) + 1</code>，转为数字：<code>2147483647</code>和<code>-2147483647</code></p>\\n<p>这部分跟位操作符，二进制有关，有兴趣可以去搜下。</p>\\n<h3 id=\"code\"><a class=\"header-anchor\" href=\"#code\" aria-hidden=\"true\">#</a> code:</h3>\\n<ol>\\n<li>转数组操作：</li>\\n</ol>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">reverseInteger</span> <span class=\"token operator\">=</span> n <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n    n <span class=\"token operator\">=</span> n<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">\\'-\\'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 负数提取数字</span>\\n    n <span class=\"token operator\">=</span> <span class=\"token string\">\\'-\\'</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span>n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">reverse</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">\\'\\'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\n    n <span class=\"token operator\">=</span> <span class=\"token operator\">+</span>n<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 转数字</span>\\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\\n    n <span class=\"token operator\">=</span> n<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 转字符</span>\\n    n <span class=\"token operator\">=</span> <span class=\"token operator\">+</span><span class=\"token punctuation\">[</span><span class=\"token operator\">...</span>n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">reverse</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">\\'\\'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 转为数组 颠倒数组 再合字符 最后转数字</span>\\n  <span class=\"token punctuation\">}</span>\\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">>=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">pow</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">31</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span> <span class=\"token operator\">||</span> n <span class=\"token operator\">&lt;=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">pow</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">31</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n    <span class=\"token comment\">// 判断溢出</span>\\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\\n  <span class=\"token punctuation\">}</span>\\n  <span class=\"token keyword\">return</span> n<span class=\"token punctuation\">;</span>\\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br><span class=\"line-number\">11</span><br><span class=\"line-number\">12</span><br><span class=\"line-number\">13</span><br><span class=\"line-number\">14</span><br><span class=\"line-number\">15</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<ol start=\"2\">\\n<li>遍历，一位一位颠倒：</li>\\n</ol>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">reverseInteger</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">===</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\\n  <span class=\"token keyword\">let</span> res <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\\n  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">!==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n    <span class=\"token comment\">// 从个位起一位一位的颠倒</span>\\n    res <span class=\"token operator\">=</span> res <span class=\"token operator\">*</span> <span class=\"token number\">10</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">%</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\n    n <span class=\"token operator\">=</span> <span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">/</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// n除以10， 一位数转化完成 到最后小于1 被转成0 退出循环</span>\\n  <span class=\"token punctuation\">}</span>\\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>res <span class=\"token operator\">>=</span> <span class=\"token number\">2147483647</span> <span class=\"token operator\">||</span> res <span class=\"token operator\">&lt;=</span> <span class=\"token operator\">-</span><span class=\"token number\">2147483647</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\\n  <span class=\"token punctuation\">}</span>\\n  <span class=\"token keyword\">return</span> res<span class=\"token punctuation\">;</span>\\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br><span class=\"line-number\">11</span><br><span class=\"line-number\">12</span><br><span class=\"line-number\">13</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<h3 id=\"转数组操作运行效率也更高点：\"><a class=\"header-anchor\" href=\"#转数组操作运行效率也更高点：\" aria-hidden=\"true\">#</a> 转数组操作运行效率也更高点：</h3>\\n<p><img src=\"https://github.com/OBKoro1/articleImg_src/blob/master/weibo_img_move/005Y4rCogy1fujnet3b8vj318z0kh41p.jpg?raw=true\" alt=\"\">\\n\\x3c!-- 特殊字符串：用于修改/删除markdown的结尾提示语-OBKoro1 --\\x3e</p>\\n<h3 id=\"点个star支持我一下\"><a class=\"header-anchor\" href=\"#点个star支持我一下\" aria-hidden=\"true\">#</a> 点个<a href=\"https://github.com/OBKoro1/Brush_algorithm\" target=\"_blank\" rel=\"noopener noreferrer\">Star<OutboundLink/></a>支持我一下~</h3>\\n\\x3c!-- \\'特殊字符串：用于删除编译后的issue组件-OBKoro1 --\\x3e\\n'},{key:\"v-b140ab4af4df2\",path:\"/algorithm/simple/%E5%90%88%E5%B9%B6%E6%8E%92%E5%BA%8F%E6%95%B0%E7%BB%84.html\",lastUpdated:1564720698e3,title:\"合并排序数组\",headers:[{level:2,title:\"合并排序数组\",slug:\"合并排序数组\"},{level:3,title:\"难度：简单\",slug:\"难度：简单\"},{level:3,title:\"描述：\",slug:\"描述：\"},{level:3,title:\"样例：\",slug:\"样例：\"},{level:3,title:\"题目分析：\",slug:\"题目分析：\"},{level:3,title:\"sort排序\",slug:\"sort排序\"},{level:3,title:\"先对比完一个数组：\",slug:\"先对比完一个数组：\"},{level:3,title:\"点个Star支持我一下~\",slug:\"点个star支持我一下\"}],excerpt:'<h2 id=\"合并排序数组\"><a class=\"header-anchor\" href=\"#合并排序数组\" aria-hidden=\"true\">#</a> 合并排序数组</h2>\\n<h3 id=\"难度：简单\"><a class=\"header-anchor\" href=\"#难度：简单\" aria-hidden=\"true\">#</a> 难度：简单</h3>\\n<h3 id=\"描述：\"><a class=\"header-anchor\" href=\"#描述：\" aria-hidden=\"true\">#</a> 描述：</h3>\\n<p>合并<strong>两个排序的整数数组 A 和 B 变成一个新的排序数组</strong>。</p>\\n<h3 id=\"样例：\"><a class=\"header-anchor\" href=\"#样例：\" aria-hidden=\"true\">#</a> 样例：</h3>\\n<p>给出<code>A=[1,2,3,4]</code>，<code>B=[2,4,5,6]</code>，返回 <code>[1,2,2,3,4,4,5,6]</code></p>\\n<h3 id=\"题目分析：\"><a class=\"header-anchor\" href=\"#题目分析：\" aria-hidden=\"true\">#</a> 题目分析：</h3>\\n<p>注意 A 和 B 本来就是排序好的数组，最简单的就是用<code>sort</code>排序了。</p>\\n<h3 id=\"sort排序\"><a class=\"header-anchor\" href=\"#sort排序\" aria-hidden=\"true\">#</a> <code>sort</code>排序</h3>\\n<ol>\\n<li>把两个数组合并成一个数组</li>\\n<li>用 sort 升序进行排序。</li>\\n</ol>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">mergeSortedArray</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token constant\">A</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">B</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n  <span class=\"token keyword\">let</span> newArr <span class=\"token operator\">=</span> <span class=\"token constant\">A</span><span class=\"token punctuation\">.</span><span class=\"token function\">concat</span><span class=\"token punctuation\">(</span><span class=\"token constant\">B</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 合并数组</span>\\n  <span class=\"token keyword\">return</span> newArr<span class=\"token punctuation\">.</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\\n    <span class=\"token keyword\">return</span> a <span class=\"token operator\">-</span> b<span class=\"token punctuation\">;</span> <span class=\"token comment\">// sort排序</span>\\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<h3 id=\"先对比完一个数组：\"><a class=\"header-anchor\" href=\"#先对比完一个数组：\" aria-hidden=\"true\">#</a> 先对比完一个数组：</h3>\\n<ol>\\n<li>\\n<p><strong>初始两个变量分别对应一个数组</strong>，进入循环</p>\\n</li>\\n<li>\\n<p><strong>i 和 j 不会同时递增</strong>，只在对应数组元素打败另一数组元素时才会递增，只要打败一个即可，因为两个数组一开始就是排序好的</p>\\n</li>\\n<li>\\n<p><strong>i 和 j 必须有一个超过对应数组长度</strong>(这样至少有一个数组的元素被逐一比较过)</p>\\n</li>\\n<li>\\n<p>如果一个数组那边超过长度，会退出循环，但是可能由一方的长度还有剩余（比如一个元素打败另一数组的所有元素），所以我们需要<strong>将长度有剩余的数组剩下的元素全都 push 到新数组中</strong>(因为一开始就排序好的，后面出场的只会更强)</p>\\n</li>\\n</ol>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">mergeSortedArray</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token constant\">A</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">B</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n  <span class=\"token keyword\">var</span> i<span class=\"token punctuation\">,</span> j<span class=\"token punctuation\">;</span>\\n  <span class=\"token keyword\">var</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token constant\">A</span><span class=\"token punctuation\">.</span>length <span class=\"token operator\">&amp;&amp;</span> j <span class=\"token operator\">&lt;</span> <span class=\"token constant\">B</span><span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n    <span class=\"token comment\">// i或者j必须有一个超过对应数组长度 才退出循环 所以至少有一个数组的元素被逐一比较</span>\\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">A</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> <span class=\"token constant\">B</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n      <span class=\"token comment\">// 下面两种写法是一样的</span>\\n      arr<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token constant\">A</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\n      i<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\\n      arr<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token constant\">B</span><span class=\"token punctuation\">[</span>j<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 这里会先把j赋值给B[j]， 然后再j++</span>\\n    <span class=\"token punctuation\">}</span>\\n  <span class=\"token punctuation\">}</span>\\n\\n  <span class=\"token comment\">// 上面至少有一个数组已经比较了每个元素 如果还有一方长度有剩余 直接push进来就可以(AB一开始就是排序好的数组)</span>\\n  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">&lt;</span> <span class=\"token constant\">A</span><span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n    arr<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token constant\">A</span><span class=\"token punctuation\">[</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\n  <span class=\"token punctuation\">}</span>\\n  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>j <span class=\"token operator\">&lt;</span> <span class=\"token constant\">B</span><span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n    arr<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token constant\">B</span><span class=\"token punctuation\">[</span>j<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\n  <span class=\"token punctuation\">}</span>\\n  <span class=\"token keyword\">return</span> arr<span class=\"token punctuation\">;</span>\\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br><span class=\"line-number\">11</span><br><span class=\"line-number\">12</span><br><span class=\"line-number\">13</span><br><span class=\"line-number\">14</span><br><span class=\"line-number\">15</span><br><span class=\"line-number\">16</span><br><span class=\"line-number\">17</span><br><span class=\"line-number\">18</span><br><span class=\"line-number\">19</span><br><span class=\"line-number\">20</span><br><span class=\"line-number\">21</span><br><span class=\"line-number\">22</span><br><span class=\"line-number\">23</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e\\x3c!-- 特殊字符串：用于修改/删除markdown的结尾提示语-OBKoro1 --\\x3e\\n<h3 id=\"点个star支持我一下\"><a class=\"header-anchor\" href=\"#点个star支持我一下\" aria-hidden=\"true\">#</a> 点个<a href=\"https://github.com/OBKoro1/Brush_algorithm\" target=\"_blank\" rel=\"noopener noreferrer\">Star<OutboundLink/></a>支持我一下~</h3>\\n\\x3c!-- \\'特殊字符串：用于删除编译后的issue组件-OBKoro1 --\\x3e\\n'},{key:\"v-f80afe28637db\",path:\"/algorithm/simple/%E5%9B%9E%E6%96%87.html\",lastUpdated:1564720698e3,title:\"删除一个字母的回文\",headers:[{level:2,title:\"删除一个字母的回文\",slug:\"删除一个字母的回文\"},{level:3,title:\"描述\",slug:\"描述\"},{level:3,title:\"样例：\",slug:\"样例：\"},{level:3,title:\"题目分析：\",slug:\"题目分析：\"},{level:3,title:\"code:\",slug:\"code\"},{level:3,title:\"点个Star支持我一下~\",slug:\"点个star支持我一下\"}],excerpt:'<h2 id=\"删除一个字母的回文\"><a class=\"header-anchor\" href=\"#删除一个字母的回文\" aria-hidden=\"true\">#</a> 删除一个字母的回文</h2>\\n<h3 id=\"描述\"><a class=\"header-anchor\" href=\"#描述\" aria-hidden=\"true\">#</a> 描述</h3>\\n<p>给定非空字符串 s，您最多可以删除一个字符。判断是否可以成为回文。</p>\\n<p>该字符串仅包含小写字符 a-z,字符串的最大长度为 50000。</p>\\n<h3 id=\"样例：\"><a class=\"header-anchor\" href=\"#样例：\" aria-hidden=\"true\">#</a> 样例：</h3>\\n<p>Given s = &quot;aba&quot; return true</p>\\n<p>Given s = &quot;abca&quot; return true // delete c</p>\\n<h3 id=\"题目分析：\"><a class=\"header-anchor\" href=\"#题目分析：\" aria-hidden=\"true\">#</a> 题目分析：</h3>\\n<ul>\\n<li>如果单单是回文的话，就很简单了:</li>\\n</ul>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code>s <span class=\"token operator\">===</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span>s<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">reverse</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">\\'\\'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 翻转字符串与原字符相比</span>\\n<span class=\"token comment\">// 实际上这里做了很多步操作，字符转数组 翻转数组 再转字符串，所以这里性能也不是很好</span>\\n<span class=\"token comment\">// 如果对性能要求比较高的话，还是通过循环从两侧向中间逐一比较，会更好一点</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<ul>\\n<li>题目中还有一个要求：删除一个字符，也就是允许一个字符的不同。</li>\\n<li>下面我们的解法主体思路就是<strong>通过循环，从两侧向中间比较</strong>，然后解决当出现不同的情况，如何<strong>保证只允许出现一个不同</strong>。</li>\\n</ul>\\n<h3 id=\"code\"><a class=\"header-anchor\" href=\"#code\" aria-hidden=\"true\">#</a> code:</h3>\\n<ol>\\n<li>出现一处不同 将值传入一个新函数，再进行判断字符串：</li>\\n</ol>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">validPalindrome</span> <span class=\"token operator\">=</span> s <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\\n  <span class=\"token keyword\">let</span> left <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\\n  <span class=\"token keyword\">let</span> right <span class=\"token operator\">=</span> s<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\\n  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>left <span class=\"token operator\">&lt;</span> right<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">[</span>left<span class=\"token punctuation\">]</span> <span class=\"token operator\">!==</span> s<span class=\"token punctuation\">[</span>right<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n      <span class=\"token comment\">// 左右两边字符都要尝试一下 一边返回true即可</span>\\n      <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\\n        <span class=\"token function\">isSubPalindrom</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">,</span> left <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> right<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token function\">isSubPalindrom</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">,</span> left<span class=\"token punctuation\">,</span> right <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\\n      <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\n    <span class=\"token punctuation\">}</span>\\n    left<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\\n    right<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\\n  <span class=\"token punctuation\">}</span>\\n  <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 循环结束返回true</span>\\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">isSubPalindrom</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">,</span> left<span class=\"token punctuation\">,</span> right<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\\n  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>left <span class=\"token operator\">&lt;</span> right<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">[</span>left<span class=\"token punctuation\">]</span> <span class=\"token operator\">!==</span> s<span class=\"token punctuation\">[</span>right<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n      <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 再有不同之处 返回false</span>\\n    <span class=\"token punctuation\">}</span>\\n    left<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\\n    right<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\\n  <span class=\"token punctuation\">}</span>\\n  <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 循环结束一直相等返回true</span>\\n  <span class=\"token comment\">// 并且left不小于right 直接返回right，说明不同之处只有一个</span>\\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>\\n  <span class=\"token string\">\\'回文验证:\\'</span><span class=\"token punctuation\">,</span>\\n  <span class=\"token function\">validPalindrome</span><span class=\"token punctuation\">(</span><span class=\"token string\">\\'abaacaaa\\'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\\n  <span class=\"token function\">validPalindrome</span><span class=\"token punctuation\">(</span><span class=\"token string\">\\'ab\\'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\\n  <span class=\"token function\">validPalindrome</span><span class=\"token punctuation\">(</span><span class=\"token string\">\\'abc\\'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\\n  <span class=\"token function\">validPalindrome</span><span class=\"token punctuation\">(</span><span class=\"token string\">\\'aabsjdbaa\\'</span><span class=\"token punctuation\">)</span>\\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br><span class=\"line-number\">11</span><br><span class=\"line-number\">12</span><br><span class=\"line-number\">13</span><br><span class=\"line-number\">14</span><br><span class=\"line-number\">15</span><br><span class=\"line-number\">16</span><br><span class=\"line-number\">17</span><br><span class=\"line-number\">18</span><br><span class=\"line-number\">19</span><br><span class=\"line-number\">20</span><br><span class=\"line-number\">21</span><br><span class=\"line-number\">22</span><br><span class=\"line-number\">23</span><br><span class=\"line-number\">24</span><br><span class=\"line-number\">25</span><br><span class=\"line-number\">26</span><br><span class=\"line-number\">27</span><br><span class=\"line-number\">28</span><br><span class=\"line-number\">29</span><br><span class=\"line-number\">30</span><br><span class=\"line-number\">31</span><br><span class=\"line-number\">32</span><br><span class=\"line-number\">33</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<p>这个写好之后，我在想能不能通过递归的形式来解决，<strong>为什么要创建第二个函数</strong>？</p>\\n<ol start=\"2\">\\n<li>递归解法：</li>\\n</ol>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code><span class=\"token keyword\">const</span> validPalindrome <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">,</span> left <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> right <span class=\"token operator\">=</span> s<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> type <span class=\"token operator\">=</span> <span class=\"token string\">\\'first\\'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>type <span class=\"token operator\">===</span> <span class=\"token string\">\\'first\\'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n    <span class=\"token comment\">// 第一次进入允许出现一次不同</span>\\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>left <span class=\"token operator\">&lt;</span> right<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">[</span>left<span class=\"token punctuation\">]</span> <span class=\"token operator\">!==</span> s<span class=\"token punctuation\">[</span>right<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\\n          <span class=\"token function\">validPalindrome</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">,</span> left <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> right<span class=\"token punctuation\">,</span> <span class=\"token string\">\\'second\\'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span>\\n          <span class=\"token function\">validPalindrome</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">,</span> left<span class=\"token punctuation\">,</span> right <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\\'second\\'</span><span class=\"token punctuation\">)</span>\\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 左右两边都尝试一下 一边返回true即可</span>\\n      <span class=\"token punctuation\">}</span>\\n      left<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\\n      right<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\\n    <span class=\"token punctuation\">}</span>\\n    <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 循环结束返回true</span>\\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\\n    <span class=\"token comment\">// 第二次 再有不同之处 返回false</span>\\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>left <span class=\"token operator\">&lt;</span> right<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">[</span>left<span class=\"token punctuation\">]</span> <span class=\"token operator\">!==</span> s<span class=\"token punctuation\">[</span>right<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\\n      <span class=\"token punctuation\">}</span>\\n      left<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\\n      right<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\\n    <span class=\"token punctuation\">}</span>\\n    <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 循环结束一直相等返回true</span>\\n    <span class=\"token comment\">// 并且left不小于right 直接返回right，说明不同之处只有一个</span>\\n  <span class=\"token punctuation\">}</span>\\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>\\n  <span class=\"token string\">\\'回文验证:\\'</span><span class=\"token punctuation\">,</span>\\n  <span class=\"token function\">validPalindrome</span><span class=\"token punctuation\">(</span><span class=\"token string\">\\'abaacaaa\\'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\\n  <span class=\"token function\">validPalindrome</span><span class=\"token punctuation\">(</span><span class=\"token string\">\\'ab\\'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\\n  <span class=\"token function\">validPalindrome</span><span class=\"token punctuation\">(</span><span class=\"token string\">\\'abc\\'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\\n  <span class=\"token function\">validPalindrome</span><span class=\"token punctuation\">(</span><span class=\"token string\">\\'aabsjdbaa\\'</span><span class=\"token punctuation\">)</span>\\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br><span class=\"line-number\">11</span><br><span class=\"line-number\">12</span><br><span class=\"line-number\">13</span><br><span class=\"line-number\">14</span><br><span class=\"line-number\">15</span><br><span class=\"line-number\">16</span><br><span class=\"line-number\">17</span><br><span class=\"line-number\">18</span><br><span class=\"line-number\">19</span><br><span class=\"line-number\">20</span><br><span class=\"line-number\">21</span><br><span class=\"line-number\">22</span><br><span class=\"line-number\">23</span><br><span class=\"line-number\">24</span><br><span class=\"line-number\">25</span><br><span class=\"line-number\">26</span><br><span class=\"line-number\">27</span><br><span class=\"line-number\">28</span><br><span class=\"line-number\">29</span><br><span class=\"line-number\">30</span><br><span class=\"line-number\">31</span><br><span class=\"line-number\">32</span><br><span class=\"line-number\">33</span><br><span class=\"line-number\">34</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<p>相对于上个解法这里就是多设置了一个变量，然后将两方区分开来，但是这样递归我还是觉得太傻了，所以在想你<strong>能不能通过设置变量来处理</strong>？出现两次不同即失败。</p>\\n<ol start=\"3\">\\n<li>设置一个变量允许一次不同</li>\\n</ol>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">validPalindrome</span> <span class=\"token operator\">=</span> s <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\\n  <span class=\"token keyword\">let</span> removed <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> <span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">,</span> j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> j<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">,</span> j<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n    <span class=\"token comment\">// 从两侧向中间递减 i- j-1 减到最后 i>j i=j 退出循环</span>\\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">!==</span> s<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n      <span class=\"token comment\">// 如果两侧不相同</span>\\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>removed<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n        <span class=\"token comment\">// 只允许一次不同</span>\\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\\n      <span class=\"token punctuation\">}</span>\\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">===</span> s<span class=\"token punctuation\">[</span>j <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n        <span class=\"token comment\">// 转数组删除一个不同元素 下次直接return</span>\\n        <span class=\"token comment\">// s = [...s].splice(j, 1);</span>\\n        <span class=\"token comment\">// s = s.join(\\'\\'); // 处理过的字符串</span>\\n        j<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\\n        removed <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\\n      <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">[</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">===</span> s<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n        <span class=\"token comment\">// s = [...s].splice(i, 1);</span>\\n        <span class=\"token comment\">// s = s.join(\\'\\'); // 处理过的字符串</span>\\n        i<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\\n        removed <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\\n      <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\\n        <span class=\"token comment\">// 上面两个else 右边-1 或左边+1相不相等 如果两边也不相等即false</span>\\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\\n      <span class=\"token punctuation\">}</span>\\n    <span class=\"token punctuation\">}</span>\\n  <span class=\"token punctuation\">}</span>\\n  <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>\\n  <span class=\"token string\">\\'回文验证:\\'</span><span class=\"token punctuation\">,</span>\\n  <span class=\"token function\">validPalindrome</span><span class=\"token punctuation\">(</span><span class=\"token string\">\\'abaacaaa\\'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\\n  <span class=\"token function\">validPalindrome</span><span class=\"token punctuation\">(</span><span class=\"token string\">\\'ab\\'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\\n  <span class=\"token function\">validPalindrome</span><span class=\"token punctuation\">(</span><span class=\"token string\">\\'abc\\'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\\n  <span class=\"token function\">validPalindrome</span><span class=\"token punctuation\">(</span><span class=\"token string\">\\'aabsjdbaa\\'</span><span class=\"token punctuation\">)</span>\\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br><span class=\"line-number\">11</span><br><span class=\"line-number\">12</span><br><span class=\"line-number\">13</span><br><span class=\"line-number\">14</span><br><span class=\"line-number\">15</span><br><span class=\"line-number\">16</span><br><span class=\"line-number\">17</span><br><span class=\"line-number\">18</span><br><span class=\"line-number\">19</span><br><span class=\"line-number\">20</span><br><span class=\"line-number\">21</span><br><span class=\"line-number\">22</span><br><span class=\"line-number\">23</span><br><span class=\"line-number\">24</span><br><span class=\"line-number\">25</span><br><span class=\"line-number\">26</span><br><span class=\"line-number\">27</span><br><span class=\"line-number\">28</span><br><span class=\"line-number\">29</span><br><span class=\"line-number\">30</span><br><span class=\"line-number\">31</span><br><span class=\"line-number\">32</span><br><span class=\"line-number\">33</span><br><span class=\"line-number\">34</span><br><span class=\"line-number\">35</span><br><span class=\"line-number\">36</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<p>2018.8.12\\n\\x3c!-- 特殊字符串：用于修改/删除markdown的结尾提示语-OBKoro1 --\\x3e</p>\\n<h3 id=\"点个star支持我一下\"><a class=\"header-anchor\" href=\"#点个star支持我一下\" aria-hidden=\"true\">#</a> 点个<a href=\"https://github.com/OBKoro1/Brush_algorithm\" target=\"_blank\" rel=\"noopener noreferrer\">Star<OutboundLink/></a>支持我一下~</h3>\\n\\x3c!-- \\'特殊字符串：用于删除编译后的issue组件-OBKoro1 --\\x3e\\n'},{key:\"v-c65ec11e2961c\",path:\"/algorithm/simple/%E5%A5%87%E5%81%B6%E5%88%86%E5%89%B2%E6%95%B0%E7%BB%84.html\",lastUpdated:1564720698e3,title:\"奇偶分割数组\",headers:[{level:2,title:\"奇偶分割数组\",slug:\"奇偶分割数组\"},{level:3,title:\"难度：简单\",slug:\"难度：简单\"},{level:3,title:\"描述：\",slug:\"描述：\"},{level:3,title:\"样例：\",slug:\"样例：\"},{level:3,title:\"增加一下难度：\",slug:\"增加一下难度：\"},{level:3,title:\"思路分析：\",slug:\"思路分析：\"},{level:3,title:\"代码模板：\",slug:\"代码模板：\"},{level:3,title:\"想一想再看答案\",slug:\"想一想再看答案\"},{level:3,title:\"想一想再看答案\",slug:\"想一想再看答案-2\"},{level:3,title:\"想一想再看答案\",slug:\"想一想再看答案-3\"},{level:3,title:\"代码：\",slug:\"代码：\"},{level:3,title:\"点个Star支持我一下~\",slug:\"点个star支持我一下\"}],excerpt:'<h2 id=\"奇偶分割数组\"><a class=\"header-anchor\" href=\"#奇偶分割数组\" aria-hidden=\"true\">#</a> 奇偶分割数组</h2>\\n<h3 id=\"难度：简单\"><a class=\"header-anchor\" href=\"#难度：简单\" aria-hidden=\"true\">#</a> 难度：简单</h3>\\n<h3 id=\"描述：\"><a class=\"header-anchor\" href=\"#描述：\" aria-hidden=\"true\">#</a> 描述：</h3>\\n<p>分割一个整数数组，使得奇数在前偶数在后。</p>\\n<h3 id=\"样例：\"><a class=\"header-anchor\" href=\"#样例：\" aria-hidden=\"true\">#</a> 样例：</h3>\\n<p>给定 [1, 2, 3, 4]，返回 [1, 3, 2, 4]。</p>\\n<h3 id=\"增加一下难度：\"><a class=\"header-anchor\" href=\"#增加一下难度：\" aria-hidden=\"true\">#</a> 增加一下难度：</h3>\\n<p>给定乱序数组：[2, 5, 1, 6, 3, 4]，返回[1, 3, 5, 2, 4, 6]</p>\\n<h3 id=\"思路分析：\"><a class=\"header-anchor\" href=\"#思路分析：\" aria-hidden=\"true\">#</a> 思路分析：</h3>\\n<p>排序好的数组：找到奇数进行操作。</p>\\n<p>乱序的数组：使用<code>sort</code>方法进行排序+提取奇数</p>\\n<h3 id=\"代码模板：\"><a class=\"header-anchor\" href=\"#代码模板：\" aria-hidden=\"true\">#</a> 代码模板：</h3>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">partitionArray</span> <span class=\"token operator\">=</span> arr <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<h3 id=\"想一想再看答案\"><a class=\"header-anchor\" href=\"#想一想再看答案\" aria-hidden=\"true\">#</a> 想一想再看答案</h3>\\n<h3 id=\"想一想再看答案-2\"><a class=\"header-anchor\" href=\"#想一想再看答案-2\" aria-hidden=\"true\">#</a> 想一想再看答案</h3>\\n<h3 id=\"想一想再看答案-3\"><a class=\"header-anchor\" href=\"#想一想再看答案-3\" aria-hidden=\"true\">#</a> 想一想再看答案</h3>\\n<h3 id=\"代码：\"><a class=\"header-anchor\" href=\"#代码：\" aria-hidden=\"true\">#</a> 代码：</h3>\\n<ol>\\n<li>排序好的数组找到奇数进行操作</li>\\n</ol>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">partitionArray</span> <span class=\"token operator\">=</span> arr <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\\n  <span class=\"token keyword\">let</span> num <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\\n   <span class=\"token comment\">// 其实如果是乱序数组，可以在这里使用sort将数组排序好再走下面那部分也可以</span>\\n  <span class=\"token comment\">// 倒序遍历</span>\\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> num<span class=\"token punctuation\">;</span> i <span class=\"token operator\">>=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">%</span> <span class=\"token number\">2</span> <span class=\"token operator\">!==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n      <span class=\"token keyword\">let</span> item <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">.</span><span class=\"token function\">splice</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 将当前值取出来</span>\\n      arr<span class=\"token punctuation\">.</span><span class=\"token function\">unshift</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 添加到首位</span>\\n    <span class=\"token punctuation\">}</span>\\n  <span class=\"token punctuation\">}</span>\\n  <span class=\"token keyword\">return</span> arr<span class=\"token punctuation\">;</span>\\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\\'输出\\'</span><span class=\"token punctuation\">,</span> <span class=\"token function\">partitionArray</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br><span class=\"line-number\">11</span><br><span class=\"line-number\">12</span><br><span class=\"line-number\">13</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<ol start=\"2\">\\n<li>乱序数组,排序+取奇数偶数</li>\\n</ol>\\n<p>这种方法无疑是更好的解决方法，事实上涉及排序最好都是使用<code>sort</code>进行排序，对 sort 不熟的，可以看下之前写的这篇<a href=\"http://obkoro1.com/web_accumulate/accumulate/JS/%E6%95%B0%E7%BB%84API%E8%A7%A3%E6%9E%90%E5%90%88%E9%9B%86.html\" target=\"_blank\" rel=\"noopener noreferrer\">数组 API 解析合集<OutboundLink/></a></p>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">partitionArray</span> <span class=\"token operator\">=</span> arr <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\\n  <span class=\"token keyword\">return</span> arr<span class=\"token punctuation\">.</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>a <span class=\"token operator\">%</span> <span class=\"token number\">2</span> <span class=\"token operator\">!==</span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> b <span class=\"token operator\">%</span> <span class=\"token number\">2</span> <span class=\"token operator\">!==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n      <span class=\"token comment\">// 当两个数都是奇数的情况下 按大小排序</span>\\n      <span class=\"token keyword\">return</span> a <span class=\"token operator\">-</span> b<span class=\"token punctuation\">;</span>\\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>a <span class=\"token operator\">%</span> <span class=\"token number\">2</span> <span class=\"token operator\">===</span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> b <span class=\"token operator\">%</span> <span class=\"token number\">2</span> <span class=\"token operator\">===</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n      <span class=\"token comment\">// 当两个数都是偶数的情况下也是按大小排序</span>\\n      <span class=\"token keyword\">return</span> a <span class=\"token operator\">-</span> b<span class=\"token punctuation\">;</span>\\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>a <span class=\"token operator\">%</span> <span class=\"token number\">2</span> <span class=\"token operator\">!==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n      <span class=\"token comment\">// 当a是奇数 要排在b的前面</span>\\n      <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>b <span class=\"token operator\">%</span> <span class=\"token number\">2</span> <span class=\"token operator\">!==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n      <span class=\"token comment\">// 当b是奇数 排在a的前面</span>\\n      <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\\n    <span class=\"token punctuation\">}</span>\\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>\\n  <span class=\"token string\">\\'输出\\'</span><span class=\"token punctuation\">,</span>\\n  <span class=\"token function\">partitionArray</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\\n  <span class=\"token function\">partitionArray</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br><span class=\"line-number\">11</span><br><span class=\"line-number\">12</span><br><span class=\"line-number\">13</span><br><span class=\"line-number\">14</span><br><span class=\"line-number\">15</span><br><span class=\"line-number\">16</span><br><span class=\"line-number\">17</span><br><span class=\"line-number\">18</span><br><span class=\"line-number\">19</span><br><span class=\"line-number\">20</span><br><span class=\"line-number\">21</span><br><span class=\"line-number\">22</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e\\x3c!-- 特殊字符串：用于修改/删除markdown的结尾提示语-OBKoro1 --\\x3e\\n<h3 id=\"点个star支持我一下\"><a class=\"header-anchor\" href=\"#点个star支持我一下\" aria-hidden=\"true\">#</a> 点个<a href=\"https://github.com/OBKoro1/Brush_algorithm\" target=\"_blank\" rel=\"noopener noreferrer\">Star<OutboundLink/></a>支持我一下~</h3>\\n\\x3c!-- \\'特殊字符串：用于删除编译后的issue组件-OBKoro1 --\\x3e\\n'},{key:\"v-9fb27d43ccbad\",path:\"/algorithm/simple/%E5%A7%93%E5%90%8D%E5%8E%BB%E9%87%8D.html\",lastUpdated:1564720698e3,title:\"姓名去重\",headers:[{level:2,title:\"姓名去重\",slug:\"姓名去重\"},{level:3,title:\"描述\",slug:\"描述\"},{level:3,title:\"说明：\",slug:\"说明：\"},{level:3,title:\"样例：\",slug:\"样例：\"},{level:3,title:\"这题很简单,自己想一下！\",slug:\"这题很简单-自己想一下！\"},{level:3,title:\"这题很简单,自己想一下！\",slug:\"这题很简单-自己想一下！-2\"},{level:3,title:\"这题很简单,自己想一下！\",slug:\"这题很简单-自己想一下！-3\"},{level:3,title:\"题目分析：\",slug:\"题目分析：\"},{level:3,title:\"code:\",slug:\"code\"},{level:3,title:\"题目比较简单，就不放代码(上面就是)了。\",slug:\"题目比较简单，就不放代码-上面就是-了。\"},{level:3,title:\"点个Star支持我一下~\",slug:\"点个star支持我一下\"}],excerpt:'<h2 id=\"姓名去重\"><a class=\"header-anchor\" href=\"#姓名去重\" aria-hidden=\"true\">#</a> 姓名去重</h2>\\n<h3 id=\"描述\"><a class=\"header-anchor\" href=\"#描述\" aria-hidden=\"true\">#</a> 描述</h3>\\n<p>给一串名字，将他们去重之后返回。两个名字重复是说在忽略大小写的情况下是一样的。</p>\\n<h3 id=\"说明：\"><a class=\"header-anchor\" href=\"#说明：\" aria-hidden=\"true\">#</a> 说明：</h3>\\n<p>你可以假设名字只包含大小写字母和空格。</p>\\n<h3 id=\"样例：\"><a class=\"header-anchor\" href=\"#样例：\" aria-hidden=\"true\">#</a> 样例：</h3>\\n<p>给出：</p>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code><span class=\"token punctuation\">[</span>\\n  <span class=\"token string\">\\'James\\'</span><span class=\"token punctuation\">,</span>\\n  <span class=\"token string\">\\'james\\'</span><span class=\"token punctuation\">,</span>\\n  <span class=\"token string\">\\'Bill Gates\\'</span><span class=\"token punctuation\">,</span>\\n  <span class=\"token string\">\\'bill Gates\\'</span><span class=\"token punctuation\">,</span>\\n  <span class=\"token string\">\\'Hello World\\'</span><span class=\"token punctuation\">,</span>\\n  <span class=\"token string\">\\'HELLO WORLD\\'</span><span class=\"token punctuation\">,</span>\\n  <span class=\"token string\">\\'Helloworld\\'</span>\\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<p>返回：</p>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code><span class=\"token punctuation\">[</span><span class=\"token string\">\\'james\\'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\\'bill gates\\'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\\'hello world\\'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\\'helloworld\\'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<hr>\\n<h3 id=\"这题很简单-自己想一下！\"><a class=\"header-anchor\" href=\"#这题很简单-自己想一下！\" aria-hidden=\"true\">#</a> 这题很简单,自己想一下！</h3>\\n<h3 id=\"这题很简单-自己想一下！-2\"><a class=\"header-anchor\" href=\"#这题很简单-自己想一下！-2\" aria-hidden=\"true\">#</a> 这题很简单,自己想一下！</h3>\\n<h3 id=\"这题很简单-自己想一下！-3\"><a class=\"header-anchor\" href=\"#这题很简单-自己想一下！-3\" aria-hidden=\"true\">#</a> 这题很简单,自己想一下！</h3>\\n<p>给</p>\\n<p>你</p>\\n<p>点</p>\\n<p>时</p>\\n<p>间</p>\\n<p>想</p>\\n<p>一</p>\\n<p>下</p>\\n<hr>\\n<h3 id=\"题目分析：\"><a class=\"header-anchor\" href=\"#题目分析：\" aria-hidden=\"true\">#</a> 题目分析：</h3>\\n<ul>\\n<li>思路就是：去重和转小写</li>\\n</ul>\\n<h3 id=\"code\"><a class=\"header-anchor\" href=\"#code\" aria-hidden=\"true\">#</a> code:</h3>\\n<p>题目基本就像下面这样解了，其他的不过是循环的方法，去重的方法不同，事实上都大同小异。</p>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">nameDeduplication</span> <span class=\"token operator\">=</span> names <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\\n  names<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">,</span> index<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\\n    names<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> value<span class=\"token punctuation\">.</span><span class=\"token function\">toLowerCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 全部转小写</span>\\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Set</span><span class=\"token punctuation\">(</span>names<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 去重</span>\\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<p>再讲一个坑吧：</p>\\n<p>题目描述的时候说是输出是这样的：</p>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code>    <span class=\"token punctuation\">[</span><span class=\"token string\">\"james\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"bill gates\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"hello world\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"helloworld\"</span><span class=\"token punctuation\">]</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<p>当我把代码提交之后，告诉我，期望答案是这样的：</p>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code>    <span class=\"token punctuation\">[</span><span class=\"token string\">\"bill gates\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"hello world\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"helloworld\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"james\"</span><span class=\"token punctuation\">]</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<p>一般来说不会这么坑：</p>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code>    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Set</span><span class=\"token punctuation\">(</span>names<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 我在后面加了一个sort方法就符合他们的预期答案了。。</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<h3 id=\"题目比较简单，就不放代码-上面就是-了。\"><a class=\"header-anchor\" href=\"#题目比较简单，就不放代码-上面就是-了。\" aria-hidden=\"true\">#</a> 题目比较简单，就不放代码(上面就是)了。</h3>\\n<p>2018.8.16\\n\\x3c!-- 特殊字符串：用于修改/删除markdown的结尾提示语-OBKoro1 --\\x3e</p>\\n<h3 id=\"点个star支持我一下\"><a class=\"header-anchor\" href=\"#点个star支持我一下\" aria-hidden=\"true\">#</a> 点个<a href=\"https://github.com/OBKoro1/Brush_algorithm\" target=\"_blank\" rel=\"noopener noreferrer\">Star<OutboundLink/></a>支持我一下~</h3>\\n\\x3c!-- \\'特殊字符串：用于删除编译后的issue组件-OBKoro1 --\\x3e\\n'},{key:\"v-871251bdfd826\",path:\"/algorithm/simple/%E5%AD%90%E6%95%B0%E7%BB%84%E4%B9%8B%E5%92%8C.html\",lastUpdated:1564720698e3,title:\"找到和为零的子数组\",headers:[{level:2,title:\"找到和为零的子数组\",slug:\"找到和为零的子数组\"},{level:3,title:\"难度：简单\",slug:\"难度：简单\"},{level:3,title:\"描述：\",slug:\"描述：\"},{level:3,title:\"样例：\",slug:\"样例：\"},{level:3,title:\"代码模板：\",slug:\"代码模板：\"},{level:3,title:\"想一想再看答案\",slug:\"想一想再看答案\"},{level:3,title:\"想一想再看答案\",slug:\"想一想再看答案-2\"},{level:3,title:\"想一想再看答案\",slug:\"想一想再看答案-3\"},{level:3,title:\"代码：\",slug:\"代码：\"},{level:3,title:\"点个Star支持我一下~\",slug:\"点个star支持我一下\"}],excerpt:'<h2 id=\"找到和为零的子数组\"><a class=\"header-anchor\" href=\"#找到和为零的子数组\" aria-hidden=\"true\">#</a> 找到和为零的子数组</h2>\\n<h3 id=\"难度：简单\"><a class=\"header-anchor\" href=\"#难度：简单\" aria-hidden=\"true\">#</a> 难度：简单</h3>\\n<h3 id=\"描述：\"><a class=\"header-anchor\" href=\"#描述：\" aria-hidden=\"true\">#</a> 描述：</h3>\\n<p>给定一个整数数组，找到和为零的子数组。你的代码应该返回满足要求的子数组的起始位置和结束位置</p>\\n<h3 id=\"样例：\"><a class=\"header-anchor\" href=\"#样例：\" aria-hidden=\"true\">#</a> 样例：</h3>\\n<p>给出 <code>[-3, 1, 2, -3, 4]</code>，返回<code>[0, 2]</code> 或者 <code>[1, 3]</code></p>\\n<h3 id=\"代码模板：\"><a class=\"header-anchor\" href=\"#代码模板：\" aria-hidden=\"true\">#</a> 代码模板：</h3>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code><span class=\"token comment\">/**\\n * @param nums: A list of integers\\n * @return: A list of integers includes the index of the first number and the index of the last number\\n */</span>\\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">subarraySum</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<h3 id=\"想一想再看答案\"><a class=\"header-anchor\" href=\"#想一想再看答案\" aria-hidden=\"true\">#</a> 想一想再看答案</h3>\\n<h3 id=\"想一想再看答案-2\"><a class=\"header-anchor\" href=\"#想一想再看答案-2\" aria-hidden=\"true\">#</a> 想一想再看答案</h3>\\n<h3 id=\"想一想再看答案-3\"><a class=\"header-anchor\" href=\"#想一想再看答案-3\" aria-hidden=\"true\">#</a> 想一想再看答案</h3>\\n<h3 id=\"代码：\"><a class=\"header-anchor\" href=\"#代码：\" aria-hidden=\"true\">#</a> 代码：</h3>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">subarraySum</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n  <span class=\"token keyword\">let</span> <span class=\"token punctuation\">[</span>total<span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 和,结果</span>\\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> nums<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n    res <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\\n    res<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 保存起始位置</span>\\n    <span class=\"token comment\">// 需要第二层循环 可能第一个元素直到最后和也不是0 那么需要从第二个元素再找 以此类推</span>\\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> j <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> nums<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n      total <span class=\"token operator\">=</span> total <span class=\"token operator\">-</span> nums<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 不断减去每个元素 直到结果为0</span>\\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>total <span class=\"token operator\">===</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n        res<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> j<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 保存第二个下标</span>\\n        <span class=\"token keyword\">return</span> res<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 返回起始和结束的下标</span>\\n      <span class=\"token punctuation\">}</span>\\n    <span class=\"token punctuation\">}</span>\\n  <span class=\"token punctuation\">}</span>\\n  <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 没找到</span>\\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">subarraySum</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br><span class=\"line-number\">11</span><br><span class=\"line-number\">12</span><br><span class=\"line-number\">13</span><br><span class=\"line-number\">14</span><br><span class=\"line-number\">15</span><br><span class=\"line-number\">16</span><br><span class=\"line-number\">17</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e\\x3c!-- 特殊字符串：用于修改/删除markdown的结尾提示语-OBKoro1 --\\x3e\\n<h3 id=\"点个star支持我一下\"><a class=\"header-anchor\" href=\"#点个star支持我一下\" aria-hidden=\"true\">#</a> 点个<a href=\"https://github.com/OBKoro1/Brush_algorithm\" target=\"_blank\" rel=\"noopener noreferrer\">Star<OutboundLink/></a>支持我一下~</h3>\\n\\x3c!-- \\'特殊字符串：用于删除编译后的issue组件-OBKoro1 --\\x3e\\n'},{key:\"v-97ee951e9d6b2\",path:\"/algorithm/simple/%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%8E%8B%E7%BC%A9.html\",lastUpdated:1564720698e3,title:\"字符串压缩\",headers:[{level:2,title:\"字符串压缩\",slug:\"字符串压缩\"},{level:3,title:\"难度：简单\",slug:\"难度：简单\"},{level:3,title:\"描述：\",slug:\"描述：\"},{level:3,title:\"样例：\",slug:\"样例：\"},{level:3,title:\"思路分析：\",slug:\"思路分析：\"},{level:3,title:\"代码模板：\",slug:\"代码模板：\"},{level:3,title:\"想一想再看答案\",slug:\"想一想再看答案\"},{level:3,title:\"想一想再看答案\",slug:\"想一想再看答案-2\"},{level:3,title:\"想一想再看答案\",slug:\"想一想再看答案-3\"},{level:3,title:\"代码：\",slug:\"代码：\"},{level:3,title:\"点个Star支持我一下~\",slug:\"点个star支持我一下\"}],excerpt:'<h2 id=\"字符串压缩\"><a class=\"header-anchor\" href=\"#字符串压缩\" aria-hidden=\"true\">#</a> 字符串压缩</h2>\\n<h3 id=\"难度：简单\"><a class=\"header-anchor\" href=\"#难度：简单\" aria-hidden=\"true\">#</a> 难度：简单</h3>\\n<h3 id=\"描述：\"><a class=\"header-anchor\" href=\"#描述：\" aria-hidden=\"true\">#</a> 描述：</h3>\\n<p>设计一种方法，通过给重复字符计数来进行基本的字符串压缩。</p>\\n<p>例如，字符串 aabcccccaaa 可压缩为 a2b1c5a3 。而如果压缩后的字符数不小于原始的字符数，则返回原始的字符串。</p>\\n<p>可以假设字符串仅包括 a-z 的字母。</p>\\n<h3 id=\"样例：\"><a class=\"header-anchor\" href=\"#样例：\" aria-hidden=\"true\">#</a> 样例：</h3>\\n<p>str=<code>aabcccccaaa</code> 返回 <code>a2b1c5a3</code></p>\\n<p>str=<code>aabbcc</code> 返回 <code>aabbcc</code></p>\\n<p>str=<code>aaaa</code> 返回 <code>a4</code></p>\\n<h3 id=\"思路分析：\"><a class=\"header-anchor\" href=\"#思路分析：\" aria-hidden=\"true\">#</a> 思路分析：</h3>\\n<p>解题思路：取出字符串，判断重复停止，添加到新字符串中。</p>\\n<p>注：需判断压缩后的字符串长度和原始字符串长度。</p>\\n<h3 id=\"代码模板：\"><a class=\"header-anchor\" href=\"#代码模板：\" aria-hidden=\"true\">#</a> 代码模板：</h3>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">compress</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>originalString<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<h3 id=\"想一想再看答案\"><a class=\"header-anchor\" href=\"#想一想再看答案\" aria-hidden=\"true\">#</a> 想一想再看答案</h3>\\n<h3 id=\"想一想再看答案-2\"><a class=\"header-anchor\" href=\"#想一想再看答案-2\" aria-hidden=\"true\">#</a> 想一想再看答案</h3>\\n<h3 id=\"想一想再看答案-3\"><a class=\"header-anchor\" href=\"#想一想再看答案-3\" aria-hidden=\"true\">#</a> 想一想再看答案</h3>\\n<h3 id=\"代码：\"><a class=\"header-anchor\" href=\"#代码：\" aria-hidden=\"true\">#</a> 代码：</h3>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code><span class=\"token comment\">// 取出字符串，判断重复停止，添加到新字符串中</span>\\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">compress</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>originalString<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>originalString<span class=\"token punctuation\">.</span>length <span class=\"token operator\">&lt;=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> originalString<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 直接返回源字符串</span>\\n  <span class=\"token keyword\">let</span> newStr <span class=\"token operator\">=</span> <span class=\"token string\">\\'\\'</span><span class=\"token punctuation\">;</span>\\n  <span class=\"token keyword\">let</span> s <span class=\"token operator\">=</span> originalString<span class=\"token punctuation\">.</span><span class=\"token function\">charAt</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\n  <span class=\"token keyword\">let</span> num <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 跳过第一个</span>\\n  <span class=\"token keyword\">let</span> total <span class=\"token operator\">=</span> originalString<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>\\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> total<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n    <span class=\"token keyword\">let</span> nowS <span class=\"token operator\">=</span> originalString<span class=\"token punctuation\">.</span><span class=\"token function\">charAt</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nowS <span class=\"token operator\">===</span> s<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n      num <span class=\"token operator\">=</span> num <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 增加数量</span>\\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span> <span class=\"token operator\">===</span> total<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n        newStr <span class=\"token operator\">+=</span> <span class=\"token template-string\"><span class=\"token string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>s<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>num<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">`</span></span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 遍历结束时，拼接最后的字符串</span>\\n      <span class=\"token punctuation\">}</span>\\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\\n      newStr <span class=\"token operator\">+=</span> <span class=\"token template-string\"><span class=\"token string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>s<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>num<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">`</span></span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 拼接字符串</span>\\n      num <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 重置为1</span>\\n      s <span class=\"token operator\">=</span> nowS<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 转为下一个字符s</span>\\n    <span class=\"token punctuation\">}</span>\\n  <span class=\"token punctuation\">}</span>\\n  <span class=\"token comment\">// 生成的字符串长度大于等于源字符串 返回源字符串 否则返回生成的字符串</span>\\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>newStr<span class=\"token punctuation\">.</span>length <span class=\"token operator\">>=</span> originalString<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n    <span class=\"token keyword\">return</span> originalString<span class=\"token punctuation\">;</span>\\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\\n    <span class=\"token keyword\">return</span> newStr<span class=\"token punctuation\">;</span>\\n  <span class=\"token punctuation\">}</span>\\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>\\n  <span class=\"token string\">\\'输出：\\'</span><span class=\"token punctuation\">,</span>\\n  <span class=\"token function\">compress</span><span class=\"token punctuation\">(</span><span class=\"token string\">\\'aabcccccaaa\\'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// a2b1c5a3</span>\\n  <span class=\"token function\">compress</span><span class=\"token punctuation\">(</span><span class=\"token string\">\\'aabbcc\\'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// aabbcc</span>\\n  <span class=\"token function\">compress</span><span class=\"token punctuation\">(</span><span class=\"token string\">\\'aaaa\\'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// a4</span>\\n  <span class=\"token function\">compress</span><span class=\"token punctuation\">(</span><span class=\"token string\">\\'a\\'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// a</span>\\n  <span class=\"token function\">compress</span><span class=\"token punctuation\">(</span><span class=\"token string\">\\'\\'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// \\'\\'</span>\\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br><span class=\"line-number\">11</span><br><span class=\"line-number\">12</span><br><span class=\"line-number\">13</span><br><span class=\"line-number\">14</span><br><span class=\"line-number\">15</span><br><span class=\"line-number\">16</span><br><span class=\"line-number\">17</span><br><span class=\"line-number\">18</span><br><span class=\"line-number\">19</span><br><span class=\"line-number\">20</span><br><span class=\"line-number\">21</span><br><span class=\"line-number\">22</span><br><span class=\"line-number\">23</span><br><span class=\"line-number\">24</span><br><span class=\"line-number\">25</span><br><span class=\"line-number\">26</span><br><span class=\"line-number\">27</span><br><span class=\"line-number\">28</span><br><span class=\"line-number\">29</span><br><span class=\"line-number\">30</span><br><span class=\"line-number\">31</span><br><span class=\"line-number\">32</span><br><span class=\"line-number\">33</span><br><span class=\"line-number\">34</span><br><span class=\"line-number\">35</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e\\x3c!-- 特殊字符串：用于修改/删除markdown的结尾提示语-OBKoro1 --\\x3e\\n<h3 id=\"点个star支持我一下\"><a class=\"header-anchor\" href=\"#点个star支持我一下\" aria-hidden=\"true\">#</a> 点个<a href=\"https://github.com/OBKoro1/Brush_algorithm\" target=\"_blank\" rel=\"noopener noreferrer\">Star<OutboundLink/></a>支持我一下~</h3>\\n\\x3c!-- \\'特殊字符串：用于删除编译后的issue组件-OBKoro1 --\\x3e\\n'},{key:\"v-72af94c4a6b07\",path:\"/algorithm/simple/%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%AF%86%E9%92%A5%E6%A0%BC%E5%BC%8F.html\",lastUpdated:1564720698e3,title:\"字符串密钥格式\",headers:[{level:2,title:\"字符串密钥格式\",slug:\"字符串密钥格式\"},{level:3,title:\"难度：简单\",slug:\"难度：简单\"},{level:3,title:\"描述：\",slug:\"描述：\"},{level:3,title:\"样例：\",slug:\"样例：\"},{level:3,title:\"思路分析：\",slug:\"思路分析：\"},{level:3,title:\"代码：\",slug:\"代码：\"},{level:3,title:\"点个Star支持我一下~\",slug:\"点个star支持我一下\"}],excerpt:'<h2 id=\"字符串密钥格式\"><a class=\"header-anchor\" href=\"#字符串密钥格式\" aria-hidden=\"true\">#</a> 字符串密钥格式</h2>\\n<h3 id=\"难度：简单\"><a class=\"header-anchor\" href=\"#难度：简单\" aria-hidden=\"true\">#</a> 难度：简单</h3>\\n<h3 id=\"描述：\"><a class=\"header-anchor\" href=\"#描述：\" aria-hidden=\"true\">#</a> 描述：</h3>\\n<ol>\\n<li>\\n<p>给定字符串 S(非空)，字符串 S 仅由字母数字字符（a-z 和/或 A-Z 和/或 0-9）和短划线（ - ）组成。</p>\\n</li>\\n<li>\\n<p>给定正整数 K，我们希望重新格式化字符串，使得<strong>每个组包含正好的 K 个字符</strong>，但<strong>第一个组可能比 K 短</strong>，但仍必须包含至少一个字符。</p>\\n</li>\\n<li>\\n<p>必须在<strong>两个组之间插入短划线</strong>，并且所有<strong>小写字母都应转换为大写</strong></p>\\n</li>\\n</ol>\\n<h3 id=\"样例：\"><a class=\"header-anchor\" href=\"#样例：\" aria-hidden=\"true\">#</a> 样例：</h3>\\n<p>Input: S = &quot;5F3Z-2e-9-w&quot;, K = 4</p>\\n<p>Output: &quot;5F3Z-2E9W&quot;</p>\\n<p>Input: S = &quot;2-5g-3-J&quot;, K = 2</p>\\n<p>Output: &quot;2-5G-3J&quot;</p>\\n<h3 id=\"思路分析：\"><a class=\"header-anchor\" href=\"#思路分析：\" aria-hidden=\"true\">#</a> 思路分析：</h3>\\n<p>处理字符串通常需要转成数组来处理，仔细观察输出和规则，总结规律。</p>\\n<h3 id=\"代码：\"><a class=\"header-anchor\" href=\"#代码：\" aria-hidden=\"true\">#</a> 代码：</h3>\\n<ol>\\n<li>\\n<p>去掉<code>-</code>，等下用<code>join</code>连接。</p>\\n</li>\\n<li>\\n<p>字符串长度不能被K整除的话，需取余，将不能整除的部分拿出来。</p>\\n</li>\\n<li>\\n<p>然后每隔几个<code>K</code>每割一下字符串，这里用了正则，返回一个数组。</p>\\n</li>\\n<li>\\n<p>再跟之前被拿出来的部分，合并成一个数组。</p>\\n</li>\\n<li>\\n<p>用<code>join</code>将数组转成字符串。</p>\\n</li>\\n</ol>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">licenseKeyFormatting</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token constant\">S</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">K</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n  <span class=\"token constant\">S</span> <span class=\"token operator\">=</span> <span class=\"token constant\">S</span><span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token regex\">/-/g</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\\'\\'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 去掉所有的-</span>\\n  <span class=\"token keyword\">let</span> total <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span><span class=\"token constant\">S</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 字符串总数</span>\\n  <span class=\"token keyword\">let</span> num <span class=\"token operator\">=</span> total <span class=\"token operator\">%</span> <span class=\"token constant\">K</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 取余</span>\\n  <span class=\"token keyword\">let</span> strArr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 字符串剩余的放在这个数组中</span>\\n  <span class=\"token comment\">// 字符串余数</span>\\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>num <span class=\"token operator\">!==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n    <span class=\"token keyword\">var</span> str <span class=\"token operator\">=</span> <span class=\"token string\">\\'\\'</span><span class=\"token punctuation\">;</span>\\n    <span class=\"token keyword\">var</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span><span class=\"token constant\">S</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\\n    <span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> item <span class=\"token keyword\">of</span> arr<span class=\"token punctuation\">.</span><span class=\"token function\">keys</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n      i<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\\n      str <span class=\"token operator\">+=</span> arr<span class=\"token punctuation\">[</span>item<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 有多少个余数就将多少个字符 添加到字符串中</span>\\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">===</span> num<span class=\"token punctuation\">)</span> <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\\n    <span class=\"token punctuation\">}</span>\\n    arr<span class=\"token punctuation\">.</span><span class=\"token function\">splice</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 删除已被添加的字符</span>\\n    <span class=\"token constant\">S</span> <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">\\'\\'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// S重新变为字符串 用于下面操作</span>\\n    strArr<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> str<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 添加到数组 等下用于连接</span>\\n  <span class=\"token punctuation\">}</span>\\n  <span class=\"token keyword\">let</span> spliceNum <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token string\">`\\\\\\\\w{</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token constant\">K</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">}`</span></span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 几个字符串为一个间隔</span>\\n  <span class=\"token keyword\">let</span> reg <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RegExp</span><span class=\"token punctuation\">(</span>spliceNum<span class=\"token punctuation\">,</span> <span class=\"token string\">\\'gim\\'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\n  <span class=\"token keyword\">let</span> strArr2 <span class=\"token operator\">=</span> <span class=\"token constant\">S</span><span class=\"token punctuation\">.</span><span class=\"token function\">match</span><span class=\"token punctuation\">(</span>reg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 切割字符串返回数组</span>\\n  strArr <span class=\"token operator\">=</span> strArr<span class=\"token punctuation\">.</span><span class=\"token function\">concat</span><span class=\"token punctuation\">(</span>strArr2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 连接余数数组和切割的数组</span>\\n  <span class=\"token constant\">S</span> <span class=\"token operator\">=</span> strArr<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">\\'-\\'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toUpperCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 连接字符串 并转为大写</span>\\n  <span class=\"token keyword\">return</span> <span class=\"token constant\">S</span><span class=\"token punctuation\">;</span>\\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>\\n  <span class=\"token function\">licenseKeyFormatting</span><span class=\"token punctuation\">(</span><span class=\"token string\">\\'5F3Z-2e-9-w\\'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\\n  <span class=\"token function\">licenseKeyFormatting</span><span class=\"token punctuation\">(</span><span class=\"token string\">\\'2-5g-3-J\\'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br><span class=\"line-number\">11</span><br><span class=\"line-number\">12</span><br><span class=\"line-number\">13</span><br><span class=\"line-number\">14</span><br><span class=\"line-number\">15</span><br><span class=\"line-number\">16</span><br><span class=\"line-number\">17</span><br><span class=\"line-number\">18</span><br><span class=\"line-number\">19</span><br><span class=\"line-number\">20</span><br><span class=\"line-number\">21</span><br><span class=\"line-number\">22</span><br><span class=\"line-number\">23</span><br><span class=\"line-number\">24</span><br><span class=\"line-number\">25</span><br><span class=\"line-number\">26</span><br><span class=\"line-number\">27</span><br><span class=\"line-number\">28</span><br><span class=\"line-number\">29</span><br><span class=\"line-number\">30</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e\\x3c!-- 特殊字符串：用于修改/删除markdown的结尾提示语-OBKoro1 --\\x3e\\n<h3 id=\"点个star支持我一下\"><a class=\"header-anchor\" href=\"#点个star支持我一下\" aria-hidden=\"true\">#</a> 点个<a href=\"https://github.com/OBKoro1/Brush_algorithm\" target=\"_blank\" rel=\"noopener noreferrer\">Star<OutboundLink/></a>支持我一下~</h3>\\n\\x3c!-- \\'特殊字符串：用于删除编译后的issue组件-OBKoro1 --\\x3e\\n'},{key:\"v-09bff5d9fd0d7\",path:\"/algorithm/simple/%E6%90%9C%E7%B4%A2%E4%BA%8C%E7%BB%B4%E7%9F%A9%E9%98%B5.html\",lastUpdated:1564720698e3,title:\"搜索二维矩阵\",headers:[{level:2,title:\"搜索二维矩阵\",slug:\"搜索二维矩阵\"},{level:3,title:\"难度：简单\",slug:\"难度：简单\"},{level:3,title:\"描述：\",slug:\"描述：\"},{level:3,title:\"样例：\",slug:\"样例：\"},{level:3,title:\"题目分析：\",slug:\"题目分析：\"},{level:3,title:\"代码：\",slug:\"代码：\"},{level:3,title:\"点个Star支持我一下~\",slug:\"点个star支持我一下\"}],excerpt:'<h2 id=\"搜索二维矩阵\"><a class=\"header-anchor\" href=\"#搜索二维矩阵\" aria-hidden=\"true\">#</a> 搜索二维矩阵</h2>\\n<h3 id=\"难度：简单\"><a class=\"header-anchor\" href=\"#难度：简单\" aria-hidden=\"true\">#</a> 难度：简单</h3>\\n<h3 id=\"描述：\"><a class=\"header-anchor\" href=\"#描述：\" aria-hidden=\"true\">#</a> 描述：</h3>\\n<p>写出一个高效的算法来搜索 m × n 矩阵中的值。</p>\\n<p>这个矩阵具有以下特性：</p>\\n<ol>\\n<li>每行中的整数从左到右是从小到大排序的。</li>\\n<li>每行的第一个数大于上一行的最后一个整数。</li>\\n</ol>\\n<h3 id=\"样例：\"><a class=\"header-anchor\" href=\"#样例：\" aria-hidden=\"true\">#</a> 样例：</h3>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code><span class=\"token punctuation\">[</span>\\n  <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\\n  <span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">11</span><span class=\"token punctuation\">,</span> <span class=\"token number\">16</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\\n  <span class=\"token punctuation\">[</span><span class=\"token number\">23</span><span class=\"token punctuation\">,</span> <span class=\"token number\">30</span><span class=\"token punctuation\">,</span> <span class=\"token number\">34</span><span class=\"token punctuation\">,</span> <span class=\"token number\">50</span><span class=\"token punctuation\">]</span>\\n<span class=\"token punctuation\">]</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<p>给出 <code>target = 3</code>，返回 <code>true</code></p>\\n<h3 id=\"题目分析：\"><a class=\"header-anchor\" href=\"#题目分析：\" aria-hidden=\"true\">#</a> 题目分析：</h3>\\n<p>双循环找出是否有这个值，根据第二个特性，我们可以跳过一些第二层循环，算法更具效率。</p>\\n<h3 id=\"代码：\"><a class=\"header-anchor\" href=\"#代码：\" aria-hidden=\"true\">#</a> 代码：</h3>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code><span class=\"token comment\">/**\\n * @param matrix: matrix, a list of lists of integers\\n * @param target: An integer\\n * @return: a boolean, indicate whether matrix contains target\\n */</span>\\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">searchMatrix</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>matrix<span class=\"token punctuation\">,</span> target<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> key <span class=\"token keyword\">of</span> matrix<span class=\"token punctuation\">.</span><span class=\"token function\">keys</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// 遍历外层数组</span>\\n    <span class=\"token keyword\">let</span> value <span class=\"token operator\">=</span> matrix<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 拿到每行元素</span>\\n    <span class=\"token comment\">// 判断target是否在当前行中，跳过其他不必要循环</span>\\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>target <span class=\"token operator\">&lt;=</span> value<span class=\"token punctuation\">[</span>value<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> \\n      <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> item <span class=\"token keyword\">of</span> value<span class=\"token punctuation\">.</span><span class=\"token function\">keys</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// 遍历行中元素 </span>\\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>target <span class=\"token operator\">===</span> value<span class=\"token punctuation\">[</span>item<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// 找到值</span>\\n          <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>target <span class=\"token operator\">&lt;</span> value<span class=\"token punctuation\">[</span>item<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  <span class=\"token comment\">// 值超过target即找不到(因为是排序的)</span>\\n          <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\\n        <span class=\"token punctuation\">}</span>\\n      <span class=\"token punctuation\">}</span>\\n    <span class=\"token punctuation\">}</span>\\n  <span class=\"token punctuation\">}</span>\\n  <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 没有找到即返回false</span>\\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br><span class=\"line-number\">11</span><br><span class=\"line-number\">12</span><br><span class=\"line-number\">13</span><br><span class=\"line-number\">14</span><br><span class=\"line-number\">15</span><br><span class=\"line-number\">16</span><br><span class=\"line-number\">17</span><br><span class=\"line-number\">18</span><br><span class=\"line-number\">19</span><br><span class=\"line-number\">20</span><br><span class=\"line-number\">21</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e\\x3c!-- 特殊字符串：用于修改/删除markdown的结尾提示语-OBKoro1 --\\x3e\\n<h3 id=\"点个star支持我一下\"><a class=\"header-anchor\" href=\"#点个star支持我一下\" aria-hidden=\"true\">#</a> 点个<a href=\"https://github.com/OBKoro1/Brush_algorithm\" target=\"_blank\" rel=\"noopener noreferrer\">Star<OutboundLink/></a>支持我一下~</h3>\\n\\x3c!-- \\'特殊字符串：用于删除编译后的issue组件-OBKoro1 --\\x3e\\n'},{key:\"v-cf845969280bf\",path:\"/algorithm/simple/%E6%9C%80%E5%A4%A7%E5%AD%90%E6%95%B0%E7%BB%84.html\",lastUpdated:1564720698e3,title:\"最大子数组\",headers:[{level:2,title:\"最大子数组\",slug:\"最大子数组\"},{level:3,title:\"难度：简单\",slug:\"难度：简单\"},{level:3,title:\"描述：\",slug:\"描述：\"},{level:3,title:\"样例：\",slug:\"样例：\"},{level:3,title:\"思路分析：\",slug:\"思路分析：\"},{level:3,title:\"代码：\",slug:\"代码：\"},{level:3,title:\"最大和的数组：\",slug:\"最大和的数组：\"},{level:3,title:\"点个Star支持我一下~\",slug:\"点个star支持我一下\"}],excerpt:'<h2 id=\"最大子数组\"><a class=\"header-anchor\" href=\"#最大子数组\" aria-hidden=\"true\">#</a> 最大子数组</h2>\\n<h3 id=\"难度：简单\"><a class=\"header-anchor\" href=\"#难度：简单\" aria-hidden=\"true\">#</a> 难度：简单</h3>\\n<h3 id=\"描述：\"><a class=\"header-anchor\" href=\"#描述：\" aria-hidden=\"true\">#</a> 描述：</h3>\\n<p>给定一个整数数组，找到一个具有最大和的子数组，返回其最大和。</p>\\n<h3 id=\"样例：\"><a class=\"header-anchor\" href=\"#样例：\" aria-hidden=\"true\">#</a> 样例：</h3>\\n<p>给出数组[−2,2,−3,4,−1,2,1,−5,3]，符合要求的子数组为[4,−1,2,1]，其最大和为 6</p>\\n<h3 id=\"思路分析：\"><a class=\"header-anchor\" href=\"#思路分析：\" aria-hidden=\"true\">#</a> 思路分析：</h3>\\n<p>本题只要找出最大和即可，保存两个值，一个为元素之间相加的值(需比较元素相加的值与当前元素的大小)，一个为最大值。</p>\\n<h3 id=\"代码：\"><a class=\"header-anchor\" href=\"#代码：\" aria-hidden=\"true\">#</a> 代码：</h3>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code><span class=\"token comment\">/**\\n * @param nums: A list of integers\\n * @return: A integer indicate the sum of max subarray\\n */</span>\\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">maxSubArray</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n  <span class=\"token keyword\">let</span> max <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 初始化最大值</span>\\n  <span class=\"token keyword\">let</span> newMax <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 数组元素相加的缓存值</span>\\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> nums<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n    newMax <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span>newMax <span class=\"token operator\">+</span> nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 相加是否大于当前值</span>\\n    max <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span>newMax<span class=\"token punctuation\">,</span> max<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 与最大值相比</span>\\n  <span class=\"token punctuation\">}</span>\\n  <span class=\"token keyword\">return</span> max<span class=\"token punctuation\">;</span>\\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br><span class=\"line-number\">11</span><br><span class=\"line-number\">12</span><br><span class=\"line-number\">13</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<p>第二种方法更难理解点，可以扩展一下思路：</p>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code><span class=\"token comment\">/**\\n * @param nums: A list of integers\\n * @return: A integer indicate the sum of max subarray\\n */</span>\\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">maxSubArray</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n  <span class=\"token keyword\">var</span> nSum <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 数组元素相加的缓存值</span>\\n  <span class=\"token keyword\">var</span> nMax <span class=\"token operator\">=</span> nSum<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 初始化最大值</span>\\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> nums<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n    <span class=\"token keyword\">var</span> curNum <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 当前元素</span>\\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>curNum <span class=\"token operator\">>=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> nSum <span class=\"token operator\">=</span> nSum <span class=\"token operator\">></span> <span class=\"token number\">0</span> <span class=\"token operator\">?</span> nSum <span class=\"token operator\">+</span> curNum <span class=\"token punctuation\">:</span> curNum<span class=\"token punctuation\">;</span>\\n    <span class=\"token comment\">// 如果两个值都大于0 两个值相加。否则就取后一个大于0的</span>\\n    <span class=\"token keyword\">else</span> nSum <span class=\"token operator\">=</span> nSum <span class=\"token operator\">&lt;</span> curNum <span class=\"token operator\">?</span> curNum <span class=\"token punctuation\">:</span> nSum <span class=\"token operator\">+</span> curNum<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 如果新加的值小于0 判断结果是否大于新加的值 小于的话就改为新加的值</span>\\n    nMax <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span>nMax<span class=\"token punctuation\">,</span> nSum<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 最大值与数组元素相加值比较</span>\\n  <span class=\"token punctuation\">}</span>\\n  <span class=\"token keyword\">return</span> nMax<span class=\"token punctuation\">;</span>\\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br><span class=\"line-number\">11</span><br><span class=\"line-number\">12</span><br><span class=\"line-number\">13</span><br><span class=\"line-number\">14</span><br><span class=\"line-number\">15</span><br><span class=\"line-number\">16</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<h3 id=\"最大和的数组：\"><a class=\"header-anchor\" href=\"#最大和的数组：\" aria-hidden=\"true\">#</a> 最大和的数组：</h3>\\n<p>如果你想把最大和的数组都找出来，你需要保存数组的开始下标和结束下标，这里我演示了第一个方法，下面那个方法也是一样：</p>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">maxSubArray</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n  <span class=\"token keyword\">let</span> max <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\\n    num<span class=\"token punctuation\">:</span> nums<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\\n    start<span class=\"token punctuation\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\\n    end<span class=\"token punctuation\">:</span> <span class=\"token number\">1</span> <span class=\"token comment\">// 结束的下标 后面要切割数组 需比当前下标+1.把当前值也切割</span>\\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\\n  <span class=\"token keyword\">let</span> newMax <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\\n    num<span class=\"token punctuation\">:</span> nums<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\\n    start<span class=\"token punctuation\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\\n    end<span class=\"token punctuation\">:</span> <span class=\"token number\">1</span>\\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> nums<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>newMax<span class=\"token punctuation\">.</span>num <span class=\"token operator\">+</span> nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n      <span class=\"token comment\">// 相加大于当前值 缓存改值和结束下标</span>\\n      newMax<span class=\"token punctuation\">.</span>num <span class=\"token operator\">=</span> newMax<span class=\"token punctuation\">.</span>num <span class=\"token operator\">+</span> nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\\n      newMax<span class=\"token punctuation\">.</span>end <span class=\"token operator\">=</span> i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\\n      <span class=\"token comment\">// 小于当前值 重置start end</span>\\n      newMax<span class=\"token punctuation\">.</span>num <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\\n      newMax<span class=\"token punctuation\">.</span>start <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span>\\n      newMax<span class=\"token punctuation\">.</span>end <span class=\"token operator\">=</span> i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\\n    <span class=\"token punctuation\">}</span>\\n    <span class=\"token comment\">// 最大值被超过 把值赋给最大值</span>\\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>max<span class=\"token punctuation\">.</span>num <span class=\"token operator\">&lt;</span> newMax<span class=\"token punctuation\">.</span>num<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n      max<span class=\"token punctuation\">.</span>num <span class=\"token operator\">=</span> newMax<span class=\"token punctuation\">.</span>num<span class=\"token punctuation\">;</span>\\n      max<span class=\"token punctuation\">.</span>start <span class=\"token operator\">=</span> newMax<span class=\"token punctuation\">.</span>start<span class=\"token punctuation\">;</span>\\n      max<span class=\"token punctuation\">.</span>end <span class=\"token operator\">=</span> newMax<span class=\"token punctuation\">.</span>end<span class=\"token punctuation\">;</span>\\n    <span class=\"token punctuation\">}</span>\\n  <span class=\"token punctuation\">}</span>\\n  <span class=\"token keyword\">let</span> arr <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span>max<span class=\"token punctuation\">.</span>start<span class=\"token punctuation\">,</span> max<span class=\"token punctuation\">.</span>end<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 找出最大和的子数组</span>\\n  <span class=\"token keyword\">return</span> max<span class=\"token punctuation\">.</span>num<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 子数组的最大和</span>\\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br><span class=\"line-number\">11</span><br><span class=\"line-number\">12</span><br><span class=\"line-number\">13</span><br><span class=\"line-number\">14</span><br><span class=\"line-number\">15</span><br><span class=\"line-number\">16</span><br><span class=\"line-number\">17</span><br><span class=\"line-number\">18</span><br><span class=\"line-number\">19</span><br><span class=\"line-number\">20</span><br><span class=\"line-number\">21</span><br><span class=\"line-number\">22</span><br><span class=\"line-number\">23</span><br><span class=\"line-number\">24</span><br><span class=\"line-number\">25</span><br><span class=\"line-number\">26</span><br><span class=\"line-number\">27</span><br><span class=\"line-number\">28</span><br><span class=\"line-number\">29</span><br><span class=\"line-number\">30</span><br><span class=\"line-number\">31</span><br><span class=\"line-number\">32</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e\\x3c!-- 特殊字符串：用于修改/删除markdown的结尾提示语-OBKoro1 --\\x3e\\n<h3 id=\"点个star支持我一下\"><a class=\"header-anchor\" href=\"#点个star支持我一下\" aria-hidden=\"true\">#</a> 点个<a href=\"https://github.com/OBKoro1/Brush_algorithm\" target=\"_blank\" rel=\"noopener noreferrer\">Star<OutboundLink/></a>支持我一下~</h3>\\n\\x3c!-- \\'特殊字符串：用于删除编译后的issue组件-OBKoro1 --\\x3e\\n'},{key:\"v-e5482046e7dfb\",path:\"/algorithm/simple/%E6%9C%80%E9%95%BF%E5%8D%95%E8%AF%8D.html\",lastUpdated:1564720698e3,title:\"数组中的最长单词\",headers:[{level:2,title:\"数组中的最长单词\",slug:\"数组中的最长单词\"},{level:3,title:\"难度：简单\",slug:\"难度：简单\"},{level:3,title:\"描述：\",slug:\"描述：\"},{level:3,title:\"样例：\",slug:\"样例：\"},{level:3,title:\"思路分析：\",slug:\"思路分析：\"},{level:3,title:\"代码模板：\",slug:\"代码模板：\"},{level:3,title:\"想一想再看答案\",slug:\"想一想再看答案\"},{level:3,title:\"想一想再看答案\",slug:\"想一想再看答案-2\"},{level:3,title:\"想一想再看答案\",slug:\"想一想再看答案-3\"},{level:3,title:\"代码：\",slug:\"代码：\"},{level:3,title:\"点个Star支持我一下~\",slug:\"点个star支持我一下\"}],excerpt:'<h2 id=\"数组中的最长单词\"><a class=\"header-anchor\" href=\"#数组中的最长单词\" aria-hidden=\"true\">#</a> 数组中的最长单词</h2>\\n<h3 id=\"难度：简单\"><a class=\"header-anchor\" href=\"#难度：简单\" aria-hidden=\"true\">#</a> 难度：简单</h3>\\n<h3 id=\"描述：\"><a class=\"header-anchor\" href=\"#描述：\" aria-hidden=\"true\">#</a> 描述：</h3>\\n<p>给一个数组，找出其中所有最长的单词。</p>\\n<h3 id=\"样例：\"><a class=\"header-anchor\" href=\"#样例：\" aria-hidden=\"true\">#</a> 样例：</h3>\\n<ol>\\n<li></li>\\n</ol>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code><span class=\"token punctuation\">[</span>\\n  <span class=\"token string\">\"dog\"</span><span class=\"token punctuation\">,</span>\\n  <span class=\"token string\">\"google\"</span><span class=\"token punctuation\">,</span>\\n  <span class=\"token string\">\"facebook\"</span><span class=\"token punctuation\">,</span>\\n  <span class=\"token string\">\"internationalization\"</span><span class=\"token punctuation\">,</span>\\n  <span class=\"token string\">\"blabla\"</span>\\n<span class=\"token punctuation\">]</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<p>最长的单词集合为 <code>[&quot;internationalization&quot;]</code></p>\\n<ol start=\"2\">\\n<li></li>\\n</ol>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code><span class=\"token punctuation\">[</span>\\n  <span class=\"token string\">\"like\"</span><span class=\"token punctuation\">,</span>\\n  <span class=\"token string\">\"love\"</span><span class=\"token punctuation\">,</span>\\n  <span class=\"token string\">\"hate\"</span><span class=\"token punctuation\">,</span>\\n  <span class=\"token string\">\"yes\"</span>\\n<span class=\"token punctuation\">]</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<p>最长的单词集合为 <code>[&quot;like&quot;, &quot;love&quot;, &quot;hate&quot;]</code></p>\\n<h3 id=\"思路分析：\"><a class=\"header-anchor\" href=\"#思路分析：\" aria-hidden=\"true\">#</a> 思路分析：</h3>\\n<p>主要要注意一下第二个栗子中描述的情况，建议保存当前字符最大的长度，然后及时更新。</p>\\n<h3 id=\"代码模板：\"><a class=\"header-anchor\" href=\"#代码模板：\" aria-hidden=\"true\">#</a> 代码模板：</h3>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Solution</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\\n<span class=\"token punctuation\">}</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<h3 id=\"想一想再看答案\"><a class=\"header-anchor\" href=\"#想一想再看答案\" aria-hidden=\"true\">#</a> 想一想再看答案</h3>\\n<h3 id=\"想一想再看答案-2\"><a class=\"header-anchor\" href=\"#想一想再看答案-2\" aria-hidden=\"true\">#</a> 想一想再看答案</h3>\\n<h3 id=\"想一想再看答案-3\"><a class=\"header-anchor\" href=\"#想一想再看答案-3\" aria-hidden=\"true\">#</a> 想一想再看答案</h3>\\n<h3 id=\"代码：\"><a class=\"header-anchor\" href=\"#代码：\" aria-hidden=\"true\">#</a> 代码：</h3>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Solution</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\\n    <span class=\"token keyword\">let</span> store <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\\n        arr<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 保存最长单词的数组</span>\\n        max<span class=\"token punctuation\">:</span> <span class=\"token number\">1</span> <span class=\"token comment\">// 字符串最大长度</span>\\n    <span class=\"token punctuation\">}</span>\\n    arr<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span>val <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\\n        <span class=\"token comment\">// 当前值的长度 超过或等于 最大字符串长度</span>\\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>val<span class=\"token punctuation\">.</span>length <span class=\"token operator\">>=</span> store<span class=\"token punctuation\">.</span>max<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>val<span class=\"token punctuation\">.</span>length <span class=\"token operator\">===</span> store<span class=\"token punctuation\">.</span>max<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n                <span class=\"token comment\">// 长度一样 将值添加进去</span>\\n                <span class=\"token keyword\">return</span> store<span class=\"token punctuation\">.</span>arr<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 退出循环</span>\\n            <span class=\"token punctuation\">}</span>\\n            store<span class=\"token punctuation\">.</span>arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 最大值比之前的大，清空原数组</span>\\n            store<span class=\"token punctuation\">.</span>arr<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 添加到数组</span>\\n            store<span class=\"token punctuation\">.</span>max <span class=\"token operator\">=</span> val<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 更新最大值</span>\\n        <span class=\"token punctuation\">}</span>\\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\n    <span class=\"token keyword\">return</span> store<span class=\"token punctuation\">.</span>arr<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 返回数组</span>\\n<span class=\"token punctuation\">}</span>\\n<span class=\"token keyword\">let</span> data1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\\n    <span class=\"token string\">\"like\"</span><span class=\"token punctuation\">,</span>\\n    <span class=\"token string\">\"love\"</span><span class=\"token punctuation\">,</span>\\n    <span class=\"token string\">\"yes\"</span><span class=\"token punctuation\">,</span>\\n    <span class=\"token string\">\"hate\"</span>\\n<span class=\"token punctuation\">]</span>\\n<span class=\"token keyword\">let</span> data2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\\n    <span class=\"token string\">\"dog\"</span><span class=\"token punctuation\">,</span>\\n    <span class=\"token string\">\"google\"</span><span class=\"token punctuation\">,</span>\\n    <span class=\"token string\">\"facebook\"</span><span class=\"token punctuation\">,</span>\\n    <span class=\"token string\">\"internationalization\"</span><span class=\"token punctuation\">,</span>\\n    <span class=\"token string\">\"blabla\"</span>\\n<span class=\"token punctuation\">]</span>\\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">Solution</span><span class=\"token punctuation\">(</span>data1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">Solution</span><span class=\"token punctuation\">(</span>data2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br><span class=\"line-number\">11</span><br><span class=\"line-number\">12</span><br><span class=\"line-number\">13</span><br><span class=\"line-number\">14</span><br><span class=\"line-number\">15</span><br><span class=\"line-number\">16</span><br><span class=\"line-number\">17</span><br><span class=\"line-number\">18</span><br><span class=\"line-number\">19</span><br><span class=\"line-number\">20</span><br><span class=\"line-number\">21</span><br><span class=\"line-number\">22</span><br><span class=\"line-number\">23</span><br><span class=\"line-number\">24</span><br><span class=\"line-number\">25</span><br><span class=\"line-number\">26</span><br><span class=\"line-number\">27</span><br><span class=\"line-number\">28</span><br><span class=\"line-number\">29</span><br><span class=\"line-number\">30</span><br><span class=\"line-number\">31</span><br><span class=\"line-number\">32</span><br><span class=\"line-number\">33</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e\\x3c!-- 特殊字符串：用于修改/删除markdown的结尾提示语-OBKoro1 --\\x3e\\n<h3 id=\"点个star支持我一下\"><a class=\"header-anchor\" href=\"#点个star支持我一下\" aria-hidden=\"true\">#</a> 点个<a href=\"https://github.com/OBKoro1/Brush_algorithm\" target=\"_blank\" rel=\"noopener noreferrer\">Star<OutboundLink/></a>支持我一下~</h3>\\n\\x3c!-- \\'特殊字符串：用于删除编译后的issue组件-OBKoro1 --\\x3e\\n'},{key:\"v-10885e748864\",path:\"/algorithm/simple/%E6%A3%80%E6%B5%8B2%E7%9A%84%E5%B9%82%E6%AC%A1.html\",lastUpdated:1564720698e3,title:\"检测2的幂次\",headers:[{level:2,title:\"检测2的幂次\",slug:\"检测2的幂次\"},{level:3,title:\"难度：简单\",slug:\"难度：简单\"},{level:3,title:\"描述：\",slug:\"描述：\"},{level:3,title:\"样例：\",slug:\"样例：\"},{level:3,title:\"思路分析：\",slug:\"思路分析：\"},{level:3,title:\"代码模板：\",slug:\"代码模板：\"},{level:3,title:\"想一想再看答案\",slug:\"想一想再看答案\"},{level:3,title:\"想一想再看答案\",slug:\"想一想再看答案-2\"},{level:3,title:\"想一想再看答案\",slug:\"想一想再看答案-3\"},{level:3,title:\"代码：\",slug:\"代码：\"},{level:3,title:\"点个Star支持我一下~\",slug:\"点个star支持我一下\"}],excerpt:'<h2 id=\"检测2的幂次\"><a class=\"header-anchor\" href=\"#检测2的幂次\" aria-hidden=\"true\">#</a> 检测2的幂次</h2>\\n<h3 id=\"难度：简单\"><a class=\"header-anchor\" href=\"#难度：简单\" aria-hidden=\"true\">#</a> 难度：简单</h3>\\n<h3 id=\"描述：\"><a class=\"header-anchor\" href=\"#描述：\" aria-hidden=\"true\">#</a> 描述：</h3>\\n<p>检测整数 n 是否是 2 的幂次</p>\\n<h3 id=\"样例：\"><a class=\"header-anchor\" href=\"#样例：\" aria-hidden=\"true\">#</a> 样例：</h3>\\n<p>n=8，返回 true;</p>\\n<p>n=10，返回 false.</p>\\n<h3 id=\"思路分析：\"><a class=\"header-anchor\" href=\"#思路分析：\" aria-hidden=\"true\">#</a> 思路分析：</h3>\\n<p>使用<code>Math.pow()</code>来检测当前值是否为2的幂次</p>\\n<h3 id=\"代码模板：\"><a class=\"header-anchor\" href=\"#代码模板：\" aria-hidden=\"true\">#</a> 代码模板：</h3>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code><span class=\"token comment\">/**\\n * @param n: An integer\\n * @return: True or false\\n */</span>\\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">checkPowerOf2</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n<span class=\"token punctuation\">}</span>\\n\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<h3 id=\"想一想再看答案\"><a class=\"header-anchor\" href=\"#想一想再看答案\" aria-hidden=\"true\">#</a> 想一想再看答案</h3>\\n<h3 id=\"想一想再看答案-2\"><a class=\"header-anchor\" href=\"#想一想再看答案-2\" aria-hidden=\"true\">#</a> 想一想再看答案</h3>\\n<h3 id=\"想一想再看答案-3\"><a class=\"header-anchor\" href=\"#想一想再看答案-3\" aria-hidden=\"true\">#</a> 想一想再看答案</h3>\\n<h3 id=\"代码：\"><a class=\"header-anchor\" href=\"#代码：\" aria-hidden=\"true\">#</a> 代码：</h3>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">checkPowerOf2</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n    <span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\\n    <span class=\"token comment\">// 一步步增加2的幂次 并对比</span>\\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">&lt;</span> <span class=\"token number\">32</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n        <span class=\"token keyword\">let</span> multiple <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">pow</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 当前幂次</span>\\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">===</span> multiple<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n            <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span> <span class=\"token comment\">// 是2的幂次</span>\\n        <span class=\"token punctuation\">}</span>\\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>multiple <span class=\"token operator\">></span> n<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// n小于当前幂次 return false 取消无 用遍历 缩短运行时间</span>\\n        i<span class=\"token operator\">++</span>\\n    <span class=\"token punctuation\">}</span>\\n    <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span>\\n<span class=\"token punctuation\">}</span>\\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">checkPowerOf2</span><span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token function\">checkPowerOf2</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br><span class=\"line-number\">11</span><br><span class=\"line-number\">12</span><br><span class=\"line-number\">13</span><br><span class=\"line-number\">14</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e\\x3c!-- 特殊字符串：用于修改/删除markdown的结尾提示语-OBKoro1 --\\x3e\\n<h3 id=\"点个star支持我一下\"><a class=\"header-anchor\" href=\"#点个star支持我一下\" aria-hidden=\"true\">#</a> 点个<a href=\"https://github.com/OBKoro1/Brush_algorithm\" target=\"_blank\" rel=\"noopener noreferrer\">Star<OutboundLink/></a>支持我一下~</h3>\\n\\x3c!-- \\'特殊字符串：用于删除编译后的issue组件-OBKoro1 --\\x3e\\n'},{key:\"v-5e5c675738c7\",path:\"/algorithm/simple/%E6%AF%94%E8%BE%83%E5%AD%97%E7%AC%A6%E4%B8%B2.html\",lastUpdated:1564720698e3,title:\"比较字符串\",headers:[{level:2,title:\"比较字符串\",slug:\"比较字符串\"},{level:3,title:\"难度：简单\",slug:\"难度：简单\"},{level:3,title:\"描述：\",slug:\"描述：\"},{level:3,title:\"样例：\",slug:\"样例：\"},{level:3,title:\"代码模板：\",slug:\"代码模板：\"},{level:3,title:\"思路分析：\",slug:\"思路分析：\"},{level:3,title:\"想一想再看答案\",slug:\"想一想再看答案\"},{level:3,title:\"想一想再看答案\",slug:\"想一想再看答案-2\"},{level:3,title:\"想一想再看答案\",slug:\"想一想再看答案-3\"},{level:3,title:\"代码：\",slug:\"代码：\"},{level:3,title:\"点个Star支持我一下~\",slug:\"点个star支持我一下\"}],excerpt:'<h2 id=\"比较字符串\"><a class=\"header-anchor\" href=\"#比较字符串\" aria-hidden=\"true\">#</a> 比较字符串</h2>\\n<h3 id=\"难度：简单\"><a class=\"header-anchor\" href=\"#难度：简单\" aria-hidden=\"true\">#</a> 难度：简单</h3>\\n<h3 id=\"描述：\"><a class=\"header-anchor\" href=\"#描述：\" aria-hidden=\"true\">#</a> 描述：</h3>\\n<p>比较两个字符串 A 和 B，确定 A 中是否包含 B 中所有的字符。字符串 A 和 B 中的字符都是 大写字母</p>\\n<h3 id=\"样例：\"><a class=\"header-anchor\" href=\"#样例：\" aria-hidden=\"true\">#</a> 样例：</h3>\\n<p>给出 A = &quot;ABCD&quot; B = &quot;ACD&quot;，返回 true</p>\\n<p>给出 A = &quot;ABCD&quot; B = &quot;AABC&quot;， 返回 false</p>\\n<h3 id=\"代码模板：\"><a class=\"header-anchor\" href=\"#代码模板：\" aria-hidden=\"true\">#</a> 代码模板：</h3>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code><span class=\"token comment\">/**\\n * @param A: A string\\n * @param B: A string\\n * @return: if string A contains all of the characters in B return true else return false\\n */</span>\\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">compareStrings</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token constant\">A</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">B</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<h3 id=\"思路分析：\"><a class=\"header-anchor\" href=\"#思路分析：\" aria-hidden=\"true\">#</a> 思路分析：</h3>\\n<p>将字符串转成数组来处理</p>\\n<h3 id=\"想一想再看答案\"><a class=\"header-anchor\" href=\"#想一想再看答案\" aria-hidden=\"true\">#</a> 想一想再看答案</h3>\\n<h3 id=\"想一想再看答案-2\"><a class=\"header-anchor\" href=\"#想一想再看答案-2\" aria-hidden=\"true\">#</a> 想一想再看答案</h3>\\n<h3 id=\"想一想再看答案-3\"><a class=\"header-anchor\" href=\"#想一想再看答案-3\" aria-hidden=\"true\">#</a> 想一想再看答案</h3>\\n<h3 id=\"代码：\"><a class=\"header-anchor\" href=\"#代码：\" aria-hidden=\"true\">#</a> 代码：</h3>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">compareStrings</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token constant\">A</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">B</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n  <span class=\"token punctuation\">[</span><span class=\"token constant\">A</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">B</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token operator\">...</span><span class=\"token constant\">A</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span><span class=\"token constant\">B</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 转成数组操作</span>\\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> index <span class=\"token keyword\">of</span> <span class=\"token constant\">B</span><span class=\"token punctuation\">.</span><span class=\"token function\">keys</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">A</span><span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">B</span><span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n      <span class=\"token comment\">// B数组元素和A数组元素成功匹配</span>\\n      <span class=\"token constant\">A</span><span class=\"token punctuation\">.</span><span class=\"token function\">splice</span><span class=\"token punctuation\">(</span>find<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 删除A数组中已匹配到的，保持数量相等</span>\\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\\n      <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// B数组中有A不包含的字符串</span>\\n    <span class=\"token punctuation\">}</span>\\n  <span class=\"token punctuation\">}</span>\\n  <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">compareStrings</span><span class=\"token punctuation\">(</span><span class=\"token string\">\\'ABCD\\'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\\'ACD\\'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">compareStrings</span><span class=\"token punctuation\">(</span><span class=\"token string\">\\'ABC\\'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\\'A\\'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br><span class=\"line-number\">11</span><br><span class=\"line-number\">12</span><br><span class=\"line-number\">13</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e\\x3c!-- 特殊字符串：用于修改/删除markdown的结尾提示语-OBKoro1 --\\x3e\\n<h3 id=\"点个star支持我一下\"><a class=\"header-anchor\" href=\"#点个star支持我一下\" aria-hidden=\"true\">#</a> 点个<a href=\"https://github.com/OBKoro1/Brush_algorithm\" target=\"_blank\" rel=\"noopener noreferrer\">Star<OutboundLink/></a>支持我一下~</h3>\\n\\x3c!-- \\'特殊字符串：用于删除编译后的issue组件-OBKoro1 --\\x3e\\n'},{key:\"v-130b14bbbe15c\",path:\"/algorithm/simple/%E7%88%AC%E6%A5%BC%E6%A2%AF.html\",lastUpdated:1564720698e3,title:\"爬楼梯\",headers:[{level:2,title:\"爬楼梯\",slug:\"爬楼梯\"},{level:3,title:\"难度：简单\",slug:\"难度：简单\"},{level:3,title:\"描述：\",slug:\"描述：\"},{level:3,title:\"样例：\",slug:\"样例：\"},{level:3,title:\"思路分析：\",slug:\"思路分析：\"},{level:3,title:\"代码模板：\",slug:\"代码模板：\"},{level:3,title:\"想一想再看答案\",slug:\"想一想再看答案\"},{level:3,title:\"想一想再看答案\",slug:\"想一想再看答案-2\"},{level:3,title:\"想一想再看答案\",slug:\"想一想再看答案-3\"},{level:3,title:\"规律：\",slug:\"规律：\"},{level:3,title:\"代码：\",slug:\"代码：\"},{level:3,title:\"点个Star支持我一下~\",slug:\"点个star支持我一下\"}],excerpt:'<h2 id=\"爬楼梯\"><a class=\"header-anchor\" href=\"#爬楼梯\" aria-hidden=\"true\">#</a> 爬楼梯</h2>\\n<h3 id=\"难度：简单\"><a class=\"header-anchor\" href=\"#难度：简单\" aria-hidden=\"true\">#</a> 难度：简单</h3>\\n<h3 id=\"描述：\"><a class=\"header-anchor\" href=\"#描述：\" aria-hidden=\"true\">#</a> 描述：</h3>\\n<p>假设你正在爬楼梯，需要 n 步你才能到达顶部。但每次你只能爬一步或者两步，你能有多少种不同的方法爬到楼顶部？</p>\\n<h3 id=\"样例：\"><a class=\"header-anchor\" href=\"#样例：\" aria-hidden=\"true\">#</a> 样例：</h3>\\n<p>比如 n=3，1+1+1=1+2=2+1=3，共有 3 种不同的方法</p>\\n<p>返回 3</p>\\n<h3 id=\"思路分析：\"><a class=\"header-anchor\" href=\"#思路分析：\" aria-hidden=\"true\">#</a> 思路分析：</h3>\\n<p>这类题我们首先要来找其中的规律，找到了里面的规律，剩下的就好办了。</p>\\n<p>我再列举出几个结果：</p>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code><span class=\"token number\">0</span> <span class=\"token operator\">=</span><span class=\"token number\">0</span> <span class=\"token number\">0</span>种方法\\n<span class=\"token number\">1</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span> 种方法\\n<span class=\"token number\">2</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token operator\">+</span><span class=\"token number\">1</span> <span class=\"token operator\">=</span><span class=\"token number\">2</span> <span class=\"token number\">2</span>种方法\\n<span class=\"token number\">3</span><span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token operator\">+</span><span class=\"token number\">2</span><span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token operator\">+</span><span class=\"token number\">1</span> <span class=\"token number\">3</span>种方法\\n<span class=\"token number\">4</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token operator\">*</span><span class=\"token number\">4</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token operator\">+</span><span class=\"token number\">2</span><span class=\"token operator\">+</span><span class=\"token number\">1</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token operator\">+</span><span class=\"token number\">2</span> <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token operator\">+</span><span class=\"token number\">1</span> <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token operator\">+</span><span class=\"token number\">2</span> <span class=\"token number\">5</span>种方法\\n<span class=\"token number\">5</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token operator\">*</span><span class=\"token number\">5</span> <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token operator\">+</span><span class=\"token number\">2</span> <span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token operator\">+</span><span class=\"token number\">2</span><span class=\"token operator\">+</span><span class=\"token number\">1</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token operator\">+</span><span class=\"token number\">2</span><span class=\"token operator\">+</span><span class=\"token number\">2</span> <span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token operator\">+</span><span class=\"token number\">2</span><span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token operator\">+</span><span class=\"token number\">1</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token operator\">+</span><span class=\"token number\">2</span><span class=\"token operator\">+</span><span class=\"token number\">1</span> <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token operator\">+</span><span class=\"token number\">1</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token operator\">+</span><span class=\"token number\">2</span> <span class=\"token number\">8</span>种方法\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<p>想一下他们的规律，试着自己做出来。</p>\\n<h3 id=\"代码模板：\"><a class=\"header-anchor\" href=\"#代码模板：\" aria-hidden=\"true\">#</a> 代码模板：</h3>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code><span class=\"token comment\">/**\\n * @param n: An integer\\n * @return: An integer\\n */</span>\\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">climbStairs</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<h3 id=\"想一想再看答案\"><a class=\"header-anchor\" href=\"#想一想再看答案\" aria-hidden=\"true\">#</a> 想一想再看答案</h3>\\n<h3 id=\"想一想再看答案-2\"><a class=\"header-anchor\" href=\"#想一想再看答案-2\" aria-hidden=\"true\">#</a> 想一想再看答案</h3>\\n<h3 id=\"想一想再看答案-3\"><a class=\"header-anchor\" href=\"#想一想再看答案-3\" aria-hidden=\"true\">#</a> 想一想再看答案</h3>\\n<h3 id=\"规律：\"><a class=\"header-anchor\" href=\"#规律：\" aria-hidden=\"true\">#</a> 规律：</h3>\\n<p>这道题的规律实际上跟之前做的<a href=\"http://obkoro1.com/web_accumulate/algorithm/induction/%E6%9F%A5%E6%89%BE%E6%96%90%E6%B3%A2%E7%BA%B3%E5%A5%91%E6%95%B0%E5%88%97%E4%B8%AD%E7%AC%ACN%E4%B8%AA%E6%95%B0.html\" target=\"_blank\" rel=\"noopener noreferrer\">查找斐波纳契数列中第 N 个数<OutboundLink/></a>中的规律有点类似。</p>\\n<div class=\"tip custom-block\"><p class=\"custom-block-title\">斐波纳契数列中第 N 个数的规律</p>\\n<p>前 2 个数是 0 和 1,第 i 个数是第 i-1 个数和第 i-2 个数的和。</p>\\n</div>\\n<p><strong>本题中的规律是</strong>：</p>\\n<p>除了 1 阶楼梯和 2 阶楼梯是一种和两种方法之外，第 n 阶的楼梯的方法是第 i-1 阶楼梯和第 i-2 阶楼梯所用方法的和。</p>\\n<h3 id=\"代码：\"><a class=\"header-anchor\" href=\"#代码：\" aria-hidden=\"true\">#</a> 代码：</h3>\\n<p><strong>解题的核心就是逐步推导，推导出n前面的两个值</strong>。</p>\\n<ol>\\n<li>数组：</li>\\n</ol>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">climbStairs</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n  <span class=\"token keyword\">let</span> dp <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 初始数组 前面三个没有规律</span>\\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n    dp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> dp<span class=\"token punctuation\">[</span>i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> dp<span class=\"token punctuation\">[</span>i <span class=\"token operator\">-</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 从3开始都是可以由前面两个元素相加推导出来</span>\\n  <span class=\"token punctuation\">}</span>\\n  <span class=\"token keyword\">return</span> dp<span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">climbStairs</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">climbStairs</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">climbStairs</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<ol start=\"2\">\\n<li>递归：</li>\\n</ol>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">climbStairs</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n  <span class=\"token keyword\">function</span> <span class=\"token function\">item</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n    <span class=\"token comment\">// 循环退出条件</span>\\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">===</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">===</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\\n    <span class=\"token keyword\">return</span> <span class=\"token function\">item</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token function\">item</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">-</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 将递归到1个楼梯和两个楼梯 最后反推到n个楼梯</span>\\n  <span class=\"token punctuation\">}</span>\\n  <span class=\"token keyword\">return</span> <span class=\"token function\">item</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">climbStairs</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">climbStairs</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">climbStairs</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<ol start=\"3\">\\n<li>交换变量：</li>\\n</ol>\\n<p>实际上我们只需要 n 之前的两个值，就可以求出 n 所用的方法，所以我们没必要将 n 之前的所有值都推导出来。</p>\\n<p>所以我们只需要保存这两个值，然后再求出第三个值就可以了。</p>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">climbStairs</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n  <span class=\"token comment\">// 前两个值的返回结果</span>\\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">===</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">===</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\\n  <span class=\"token keyword\">let</span> a <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 1阶楼梯</span>\\n    b <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 2阶楼梯</span>\\n    c<span class=\"token punctuation\">;</span>\\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n    c <span class=\"token operator\">=</span> a <span class=\"token operator\">+</span> b<span class=\"token punctuation\">;</span> <span class=\"token comment\">// n的结果</span>\\n    <span class=\"token comment\">// 为了后续推导，不断保存前两个值</span>\\n    a <span class=\"token operator\">=</span> b<span class=\"token punctuation\">;</span>\\n    b <span class=\"token operator\">=</span> c<span class=\"token punctuation\">;</span>\\n  <span class=\"token punctuation\">}</span>\\n  <span class=\"token keyword\">return</span> c<span class=\"token punctuation\">;</span>\\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">climbStairs</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">climbStairs</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">climbStairs</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br><span class=\"line-number\">11</span><br><span class=\"line-number\">12</span><br><span class=\"line-number\">13</span><br><span class=\"line-number\">14</span><br><span class=\"line-number\">15</span><br><span class=\"line-number\">16</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<p>实际上，我们也可以使用 ES6 的交换变量方法，而不用声明第三个变量：</p>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">climbStairs</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n  <span class=\"token comment\">// 前两个值的返回结果</span>\\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">===</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">===</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\\n  <span class=\"token keyword\">let</span> a <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\\n    b <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n    <span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>b<span class=\"token punctuation\">,</span> b <span class=\"token operator\">+</span> a<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\\n  <span class=\"token punctuation\">}</span>\\n  <span class=\"token keyword\">return</span> b<span class=\"token punctuation\">;</span>\\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">climbStairs</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">climbStairs</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">climbStairs</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br><span class=\"line-number\">11</span><br><span class=\"line-number\">12</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e\\x3c!-- 特殊字符串：用于修改/删除markdown的结尾提示语-OBKoro1 --\\x3e\\n<h3 id=\"点个star支持我一下\"><a class=\"header-anchor\" href=\"#点个star支持我一下\" aria-hidden=\"true\">#</a> 点个<a href=\"https://github.com/OBKoro1/Brush_algorithm\" target=\"_blank\" rel=\"noopener noreferrer\">Star<OutboundLink/></a>支持我一下~</h3>\\n\\x3c!-- \\'特殊字符串：用于删除编译后的issue组件-OBKoro1 --\\x3e\\n'},{key:\"v-68bdce4bd5361\",path:\"/algorithm/simple/%E7%88%AC%E6%A5%BC%E6%A2%AF2.html\",lastUpdated:1564720698e3,title:\"爬楼梯 2\",headers:[{level:2,title:\"爬楼梯 2\",slug:\"爬楼梯-2\"},{level:3,title:\"难度：简单\",slug:\"难度：简单\"},{level:3,title:\"描述：\",slug:\"描述：\"},{level:3,title:\"样例：\",slug:\"样例：\"},{level:3,title:\"思路分析：\",slug:\"思路分析：\"},{level:3,title:\"代码模板：\",slug:\"代码模板：\"},{level:3,title:\"想一想再看答案\",slug:\"想一想再看答案\"},{level:3,title:\"想一想再看答案\",slug:\"想一想再看答案-2\"},{level:3,title:\"想一想再看答案\",slug:\"想一想再看答案-3\"},{level:3,title:\"规律\",slug:\"规律\"},{level:3,title:\"代码：\",slug:\"代码：\"},{level:3,title:\"点个Star支持我一下~\",slug:\"点个star支持我一下\"}],excerpt:'<h2 id=\"爬楼梯-2\"><a class=\"header-anchor\" href=\"#爬楼梯-2\" aria-hidden=\"true\">#</a> 爬楼梯 2</h2>\\n<h3 id=\"难度：简单\"><a class=\"header-anchor\" href=\"#难度：简单\" aria-hidden=\"true\">#</a> 难度：简单</h3>\\n<h3 id=\"描述：\"><a class=\"header-anchor\" href=\"#描述：\" aria-hidden=\"true\">#</a> 描述：</h3>\\n<p>一个小孩爬一个 n 层台阶的楼梯。他可以每次跳 1 步， 2 步 或者 3 步。实现一个方法来统计总共有多少种不同的方式爬到最顶层的台阶</p>\\n<blockquote>\\n<p>本题跟<a href=\"http://obkoro1.com/web_accumulate/algorithm/simple/%E7%88%AC%E6%A5%BC%E6%A2%AF.html\" target=\"_blank\" rel=\"noopener noreferrer\">爬楼梯<OutboundLink/></a>一毛一样，只是多了可以一次跳三步，所以尽量自己做出来</p>\\n</blockquote>\\n<h3 id=\"样例：\"><a class=\"header-anchor\" href=\"#样例：\" aria-hidden=\"true\">#</a> 样例：</h3>\\n<p>n = 3，1 + 1 + 1 = 2 + 1 = 1 + 2 = 3 = 3，共有 4 种方法</p>\\n<h3 id=\"思路分析：\"><a class=\"header-anchor\" href=\"#思路分析：\" aria-hidden=\"true\">#</a> 思路分析：</h3>\\n<p>这类题我们首先要来找其中的规律，找到了里面的规律，剩下的就好办了。</p>\\n<p>我再列举出几个结果：</p>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code><span class=\"token number\">1</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1</span> <span class=\"token comment\">// 1种方法</span>\\n<span class=\"token number\">2</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token operator\">=</span><span class=\"token number\">2</span> <span class=\"token comment\">// 2种方法</span>\\n<span class=\"token number\">3</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span> <span class=\"token operator\">=</span> <span class=\"token number\">2</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span> <span class=\"token operator\">+</span> <span class=\"token number\">2</span> <span class=\"token operator\">=</span> <span class=\"token number\">3</span> <span class=\"token operator\">=</span> <span class=\"token number\">3</span> <span class=\"token comment\">// 4种方法</span>\\n<span class=\"token number\">4</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token operator\">+</span><span class=\"token number\">2</span><span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token operator\">+</span><span class=\"token number\">3</span> <span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token operator\">+</span><span class=\"token number\">2</span><span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token operator\">+</span><span class=\"token number\">1</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token operator\">+</span><span class=\"token number\">2</span><span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token operator\">+</span><span class=\"token number\">1</span>  <span class=\"token comment\">// 7种方法</span>\\n<span class=\"token number\">5</span>：<span class=\"token number\">1</span> <span class=\"token operator\">*</span> <span class=\"token number\">5</span> <span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token operator\">+</span><span class=\"token number\">2</span><span class=\"token operator\">+</span><span class=\"token number\">2</span> <span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token operator\">+</span><span class=\"token number\">2</span> <span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token operator\">+</span><span class=\"token number\">2</span><span class=\"token operator\">+</span><span class=\"token number\">1</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token operator\">+</span><span class=\"token number\">3</span> <span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token operator\">+</span><span class=\"token number\">3</span><span class=\"token operator\">+</span><span class=\"token number\">1</span> <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token operator\">+</span><span class=\"token number\">1</span> <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token operator\">+</span><span class=\"token number\">2</span> <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token operator\">+</span><span class=\"token number\">3</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token operator\">+</span><span class=\"token number\">2</span> <span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token operator\">+</span><span class=\"token number\">2</span><span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token operator\">+</span><span class=\"token number\">1</span> <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token operator\">+</span><span class=\"token number\">1</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token operator\">+</span><span class=\"token number\">2</span><span class=\"token operator\">+</span><span class=\"token number\">1</span>  <span class=\"token comment\">// 13种方法</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<p>查找样例中的规律：<a href=\"http://obkoro1.com/web_accumulate/algorithm/simple/%E7%88%AC%E6%A5%BC%E6%A2%AF.html\" target=\"_blank\" rel=\"noopener noreferrer\">爬楼梯<OutboundLink/></a></p>\\n<h3 id=\"代码模板：\"><a class=\"header-anchor\" href=\"#代码模板：\" aria-hidden=\"true\">#</a> 代码模板：</h3>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code><span class=\"token comment\">/**\\n * @param n: An integer\\n * @return: An integer\\n */</span>\\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">climbStairs2</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<h3 id=\"想一想再看答案\"><a class=\"header-anchor\" href=\"#想一想再看答案\" aria-hidden=\"true\">#</a> 想一想再看答案</h3>\\n<h3 id=\"想一想再看答案-2\"><a class=\"header-anchor\" href=\"#想一想再看答案-2\" aria-hidden=\"true\">#</a> 想一想再看答案</h3>\\n<h3 id=\"想一想再看答案-3\"><a class=\"header-anchor\" href=\"#想一想再看答案-3\" aria-hidden=\"true\">#</a> 想一想再看答案</h3>\\n<h3 id=\"规律\"><a class=\"header-anchor\" href=\"#规律\" aria-hidden=\"true\">#</a> 规律</h3>\\n<p>除了前 3 阶楼梯是没有规律的，第 n 阶的楼梯的方法是第 i-1 、第 i-2 和第 i-3 阶楼梯所用方法的和。</p>\\n<p>规律都给你总结好了，再给你个机会自己做出来。</p>\\n<h3 id=\"代码：\"><a class=\"header-anchor\" href=\"#代码：\" aria-hidden=\"true\">#</a> 代码：</h3>\\n<p><strong>解题的核心就是逐步推导，推导出 n 前面的两个值</strong>。</p>\\n<ol>\\n<li>递归</li>\\n</ol>\\n<p>因为做过一遍，最先想起来的就是递归。</p>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">climbStairs2</span> <span class=\"token operator\">=</span> n <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\\n  <span class=\"token keyword\">let</span> <span class=\"token function-variable function\">everyStairs</span> <span class=\"token operator\">=</span> k <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\\n    <span class=\"token comment\">// 循环退出条件</span>\\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>k <span class=\"token operator\">===</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>k <span class=\"token operator\">===</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>k <span class=\"token operator\">===</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span>\\n    <span class=\"token keyword\">return</span> <span class=\"token function\">everyStairs</span><span class=\"token punctuation\">(</span>k <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token function\">everyStairs</span><span class=\"token punctuation\">(</span>k <span class=\"token operator\">-</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token function\">everyStairs</span><span class=\"token punctuation\">(</span>k <span class=\"token operator\">-</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 三个值相加求出k所用的方法</span>\\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\\n  <span class=\"token keyword\">return</span> <span class=\"token function\">everyStairs</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\\'输出\\'</span><span class=\"token punctuation\">,</span> <span class=\"token function\">climbStairs2</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">climbStairs2</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">climbStairs2</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br><span class=\"line-number\">11</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<ol start=\"2\">\\n<li>交换变量</li>\\n</ol>\\n<p>实际上我们只需要 n 之前的三个值，就可以求出 n 所用的方法，所以我们没必要将 n 之前的所有值都推导出来。</p>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">climbStairs2</span> <span class=\"token operator\">=</span> k <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>k <span class=\"token operator\">===</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>k <span class=\"token operator\">===</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>k <span class=\"token operator\">===</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span>\\n  <span class=\"token keyword\">let</span> <span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 前三阶楼梯</span>\\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n    <span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>b<span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">,</span> a <span class=\"token operator\">+</span> b <span class=\"token operator\">+</span> c<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 交换变量 更新前两个值，推导k的值</span>\\n  <span class=\"token punctuation\">}</span>\\n  <span class=\"token keyword\">return</span> c<span class=\"token punctuation\">;</span>\\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\\'输出\\'</span><span class=\"token punctuation\">,</span> <span class=\"token function\">climbStairs2</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">climbStairs2</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">climbStairs2</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br><span class=\"line-number\">11</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<ol start=\"3\">\\n<li>数组形式：</li>\\n</ol>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">climbStairs2</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n  <span class=\"token keyword\">let</span> dp <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 初始数组 前面三个没有规律</span>\\n  <span class=\"token comment\">// 从第4阶楼梯开始推导   </span>\\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n    dp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> dp<span class=\"token punctuation\">[</span>i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> dp<span class=\"token punctuation\">[</span>i <span class=\"token operator\">-</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> dp<span class=\"token punctuation\">[</span>i <span class=\"token operator\">-</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 从3开始都是可以由前面3个元素相加推导出来</span>\\n  <span class=\"token punctuation\">}</span>\\n  <span class=\"token keyword\">return</span> dp<span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e\\x3c!-- 特殊字符串：用于修改/删除markdown的结尾提示语-OBKoro1 --\\x3e\\n<h3 id=\"点个star支持我一下\"><a class=\"header-anchor\" href=\"#点个star支持我一下\" aria-hidden=\"true\">#</a> 点个<a href=\"https://github.com/OBKoro1/Brush_algorithm\" target=\"_blank\" rel=\"noopener noreferrer\">Star<OutboundLink/></a>支持我一下~</h3>\\n\\x3c!-- \\'特殊字符串：用于删除编译后的issue组件-OBKoro1 --\\x3e\\n'},{key:\"v-d7bfc3581248d\",path:\"/algorithm/simple/%E7%9B%B8%E4%BA%B2%E6%95%B0.html\",lastUpdated:1564720698e3,title:\"相亲数\",headers:[{level:2,title:\"相亲数\",slug:\"相亲数\"},{level:3,title:\"难度：简单\",slug:\"难度：简单\"},{level:3,title:\"描述：\",slug:\"描述：\"},{level:3,title:\"样例：\",slug:\"样例：\"},{level:3,title:\"思路分析：\",slug:\"思路分析：\"},{level:3,title:\"代码模板：\",slug:\"代码模板：\"},{level:3,title:\"想一想再看答案\",slug:\"想一想再看答案\"},{level:3,title:\"想一想再看答案\",slug:\"想一想再看答案-2\"},{level:3,title:\"想一想再看答案\",slug:\"想一想再看答案-3\"},{level:3,title:\"代码：\",slug:\"代码：\"},{level:3,title:\"点个Star支持我一下~\",slug:\"点个star支持我一下\"}],excerpt:'<h2 id=\"相亲数\"><a class=\"header-anchor\" href=\"#相亲数\" aria-hidden=\"true\">#</a> 相亲数</h2>\\n<h3 id=\"难度：简单\"><a class=\"header-anchor\" href=\"#难度：简单\" aria-hidden=\"true\">#</a> 难度：简单</h3>\\n<h3 id=\"描述：\"><a class=\"header-anchor\" href=\"#描述：\" aria-hidden=\"true\">#</a> 描述：</h3>\\n<p>一对整数是相亲数是说他们各自的所有有效因子（除了自己以外的因子）之和等于另外一个数。比如(220, 284)就是一对相亲数。</p>\\n<ul>\\n<li>220 的所有因子：1+2+4+5+10+11+20+22+44+55+110 = 284</li>\\n<li>284 的所有因子：1+2+4+71+142 = 220</li>\\n</ul>\\n<p>给出整数 k，求 1~k 之间的所有相亲数对。</p>\\n<h3 id=\"样例：\"><a class=\"header-anchor\" href=\"#样例：\" aria-hidden=\"true\">#</a> 样例：</h3>\\n<p>给出 <code>300</code>, 返回 <code>[[220, 284]]</code></p>\\n<h3 id=\"思路分析：\"><a class=\"header-anchor\" href=\"#思路分析：\" aria-hidden=\"true\">#</a> 思路分析：</h3>\\n<p>因素：给出一个数，能整除该数的的除数都是这个数的因素。</p>\\n<p>计算出每个数的因素和，将其存起来，然后再去判断是否为相亲数</p>\\n<h3 id=\"代码模板：\"><a class=\"header-anchor\" href=\"#代码模板：\" aria-hidden=\"true\">#</a> 代码模板：</h3>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">amicablePair</span> <span class=\"token operator\">=</span> k <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<h3 id=\"想一想再看答案\"><a class=\"header-anchor\" href=\"#想一想再看答案\" aria-hidden=\"true\">#</a> 想一想再看答案</h3>\\n<h3 id=\"想一想再看答案-2\"><a class=\"header-anchor\" href=\"#想一想再看答案-2\" aria-hidden=\"true\">#</a> 想一想再看答案</h3>\\n<h3 id=\"想一想再看答案-3\"><a class=\"header-anchor\" href=\"#想一想再看答案-3\" aria-hidden=\"true\">#</a> 想一想再看答案</h3>\\n<h3 id=\"代码：\"><a class=\"header-anchor\" href=\"#代码：\" aria-hidden=\"true\">#</a> 代码：</h3>\\n<p>事实上我们要做的只有两步：</p>\\n<ol>\\n<li>遍历 1~k 求出每个数的因素和，并用对象存储起来,遍历对象，判断相亲数</li>\\n</ol>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">amicablePair</span> <span class=\"token operator\">=</span> k <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\\n  <span class=\"token keyword\">let</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\\n  <span class=\"token comment\">// 遍历整个范围，包括k</span>\\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> k<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n    <span class=\"token keyword\">let</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\\n    <span class=\"token comment\">// 求每个数的因数</span>\\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> j <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> i<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n      <span class=\"token comment\">// 能整除 没有余数的 除数都是因数</span>\\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">%</span> j <span class=\"token operator\">===</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n        arr<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\n      <span class=\"token punctuation\">}</span>\\n    <span class=\"token punctuation\">}</span>\\n    <span class=\"token comment\">// 计算因数和</span>\\n    <span class=\"token keyword\">let</span> total <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">.</span><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\\n      <span class=\"token keyword\">return</span> a <span class=\"token operator\">+</span> b<span class=\"token punctuation\">;</span>\\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\n    obj<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> total<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 储存每个数的相亲数</span>\\n  <span class=\"token punctuation\">}</span>\\n  <span class=\"token keyword\">let</span> res <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 结果</span>\\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> key <span class=\"token keyword\">in</span> obj<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n    <span class=\"token comment\">// 顺序 当属性的值比属性大时才进入 此处也可防止重复添加</span>\\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> key<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n      <span class=\"token comment\">// 判断相亲数</span>\\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>key <span class=\"token operator\">===</span> <span class=\"token template-string\"><span class=\"token string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>obj<span class=\"token punctuation\">[</span>obj<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">`</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n        res<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">,</span> obj<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 按顺序添加</span>\\n      <span class=\"token punctuation\">}</span>\\n    <span class=\"token punctuation\">}</span>\\n  <span class=\"token punctuation\">}</span>\\n  <span class=\"token keyword\">return</span> res<span class=\"token punctuation\">;</span>\\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\\'输出\\'</span><span class=\"token punctuation\">,</span> <span class=\"token function\">amicablePair</span><span class=\"token punctuation\">(</span><span class=\"token number\">300</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br><span class=\"line-number\">11</span><br><span class=\"line-number\">12</span><br><span class=\"line-number\">13</span><br><span class=\"line-number\">14</span><br><span class=\"line-number\">15</span><br><span class=\"line-number\">16</span><br><span class=\"line-number\">17</span><br><span class=\"line-number\">18</span><br><span class=\"line-number\">19</span><br><span class=\"line-number\">20</span><br><span class=\"line-number\">21</span><br><span class=\"line-number\">22</span><br><span class=\"line-number\">23</span><br><span class=\"line-number\">24</span><br><span class=\"line-number\">25</span><br><span class=\"line-number\">26</span><br><span class=\"line-number\">27</span><br><span class=\"line-number\">28</span><br><span class=\"line-number\">29</span><br><span class=\"line-number\">30</span><br><span class=\"line-number\">31</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<ol start=\"2\">\\n<li>在求因素和的时候，直接判断是否有对应的相亲数</li>\\n</ol>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">amicablePair</span> <span class=\"token operator\">=</span> k <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\\n  <span class=\"token keyword\">let</span> res <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\\n  <span class=\"token comment\">// 遍历整个范围，包括k</span>\\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> k<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n    <span class=\"token keyword\">let</span> total <span class=\"token operator\">=</span> <span class=\"token function\">totalFn</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\n    <span class=\"token comment\">// i的因素和需要比i小 才能push 防止重复添加</span>\\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>total <span class=\"token operator\">></span> i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n      <span class=\"token keyword\">let</span> total2 <span class=\"token operator\">=</span> <span class=\"token function\">totalFn</span><span class=\"token punctuation\">(</span>total<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 求 i的因素和 的因素和</span>\\n      <span class=\"token comment\">// 判断相亲数：i是否与i的因素和的因素和相等</span>\\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">===</span> total2<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n        res<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> total<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\n      <span class=\"token punctuation\">}</span>\\n    <span class=\"token punctuation\">}</span>\\n  <span class=\"token punctuation\">}</span>\\n  <span class=\"token comment\">// 计算一个数的因素和</span>\\n  <span class=\"token keyword\">function</span> <span class=\"token function\">totalFn</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n    <span class=\"token keyword\">let</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\\n    <span class=\"token comment\">// 求每个数的因数</span>\\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> j <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> num<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n      <span class=\"token comment\">// 能整除 没有余数的 除数都是因数</span>\\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>num <span class=\"token operator\">%</span> j <span class=\"token operator\">===</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n        arr<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\n      <span class=\"token punctuation\">}</span>\\n    <span class=\"token punctuation\">}</span>\\n    <span class=\"token comment\">// 计算因数和</span>\\n    <span class=\"token keyword\">let</span> total <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">.</span><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\\n      <span class=\"token keyword\">return</span> a <span class=\"token operator\">+</span> b<span class=\"token punctuation\">;</span>\\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\n    <span class=\"token keyword\">return</span> total<span class=\"token punctuation\">;</span>\\n  <span class=\"token punctuation\">}</span>\\n  <span class=\"token keyword\">return</span> res<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 结果</span>\\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br><span class=\"line-number\">11</span><br><span class=\"line-number\">12</span><br><span class=\"line-number\">13</span><br><span class=\"line-number\">14</span><br><span class=\"line-number\">15</span><br><span class=\"line-number\">16</span><br><span class=\"line-number\">17</span><br><span class=\"line-number\">18</span><br><span class=\"line-number\">19</span><br><span class=\"line-number\">20</span><br><span class=\"line-number\">21</span><br><span class=\"line-number\">22</span><br><span class=\"line-number\">23</span><br><span class=\"line-number\">24</span><br><span class=\"line-number\">25</span><br><span class=\"line-number\">26</span><br><span class=\"line-number\">27</span><br><span class=\"line-number\">28</span><br><span class=\"line-number\">29</span><br><span class=\"line-number\">30</span><br><span class=\"line-number\">31</span><br><span class=\"line-number\">32</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e\\x3c!-- 特殊字符串：用于修改/删除markdown的结尾提示语-OBKoro1 --\\x3e\\n<h3 id=\"点个star支持我一下\"><a class=\"header-anchor\" href=\"#点个star支持我一下\" aria-hidden=\"true\">#</a> 点个<a href=\"https://github.com/OBKoro1/Brush_algorithm\" target=\"_blank\" rel=\"noopener noreferrer\">Star<OutboundLink/></a>支持我一下~</h3>\\n\\x3c!-- \\'特殊字符串：用于删除编译后的issue组件-OBKoro1 --\\x3e\\n'},{key:\"v-89b73c6d6add9\",path:\"/algorithm/simple/%E7%AC%AC%E4%B8%80%E4%B8%AA%E5%8F%AA%E5%87%BA%E7%8E%B0%E4%B8%80%E6%AC%A1%E7%9A%84%E5%AD%97%E7%AC%A6.html\",lastUpdated:1564720698e3,title:\"第一个只出现一次的字符\",headers:[{level:2,title:\"第一个只出现一次的字符\",slug:\"第一个只出现一次的字符\"},{level:3,title:\"难度：简单\",slug:\"难度：简单\"},{level:3,title:\"描述：\",slug:\"描述：\"},{level:3,title:\"样例：\",slug:\"样例：\"},{level:3,title:\"思路分析：\",slug:\"思路分析：\"},{level:3,title:\"代码模板：\",slug:\"代码模板：\"},{level:3,title:\"想一想再看答案\",slug:\"想一想再看答案\"},{level:3,title:\"想一想再看答案\",slug:\"想一想再看答案-2\"},{level:3,title:\"想一想再看答案\",slug:\"想一想再看答案-3\"},{level:3,title:\"代码：\",slug:\"代码：\"},{level:3,title:\"点个Star支持我一下~\",slug:\"点个star支持我一下\"}],excerpt:'<h2 id=\"第一个只出现一次的字符\"><a class=\"header-anchor\" href=\"#第一个只出现一次的字符\" aria-hidden=\"true\">#</a> 第一个只出现一次的字符</h2>\\n<h3 id=\"难度：简单\"><a class=\"header-anchor\" href=\"#难度：简单\" aria-hidden=\"true\">#</a> 难度：简单</h3>\\n<h3 id=\"描述：\"><a class=\"header-anchor\" href=\"#描述：\" aria-hidden=\"true\">#</a> 描述：</h3>\\n<p>给出一个字符串，找出第一个只出现一次的字符。</p>\\n<h3 id=\"样例：\"><a class=\"header-anchor\" href=\"#样例：\" aria-hidden=\"true\">#</a> 样例：</h3>\\n<p>对于 <code>aabc</code>, <code>b</code>为第一个只出现一次的字符.</p>\\n<p>对于 <code>abaccdeff</code>, <code>b</code>为第一个只出现一次的字符.</p>\\n<h3 id=\"思路分析：\"><a class=\"header-anchor\" href=\"#思路分析：\" aria-hidden=\"true\">#</a> 思路分析：</h3>\\n<p>可以用对象保存字符出现的次数。</p>\\n<h3 id=\"代码模板：\"><a class=\"header-anchor\" href=\"#代码模板：\" aria-hidden=\"true\">#</a> 代码模板：</h3>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">firstUniqChar</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<h3 id=\"想一想再看答案\"><a class=\"header-anchor\" href=\"#想一想再看答案\" aria-hidden=\"true\">#</a> 想一想再看答案</h3>\\n<h3 id=\"想一想再看答案-2\"><a class=\"header-anchor\" href=\"#想一想再看答案-2\" aria-hidden=\"true\">#</a> 想一想再看答案</h3>\\n<h3 id=\"想一想再看答案-3\"><a class=\"header-anchor\" href=\"#想一想再看答案-3\" aria-hidden=\"true\">#</a> 想一想再看答案</h3>\\n<h3 id=\"代码：\"><a class=\"header-anchor\" href=\"#代码：\" aria-hidden=\"true\">#</a> 代码：</h3>\\n<ol>\\n<li>将值删除，用 indexOf 查找还有没有相同字符，并查找之前删过的字符</li>\\n</ol>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">firstUniqChar</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n  str <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span>str<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\\n  <span class=\"token keyword\">let</span> num <span class=\"token operator\">=</span> str<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 保存遍历次数</span>\\n  <span class=\"token keyword\">let</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 保存被删元素</span>\\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> num<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n    <span class=\"token keyword\">let</span> item <span class=\"token operator\">=</span> str<span class=\"token punctuation\">.</span><span class=\"token function\">splice</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 删除第一个值</span>\\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span> <span class=\"token operator\">&amp;&amp;</span> obj<span class=\"token punctuation\">[</span>item<span class=\"token punctuation\">]</span> <span class=\"token operator\">===</span> undefined<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n      <span class=\"token comment\">// 当前数组中没有 并且对象中也没有</span>\\n      <span class=\"token keyword\">return</span> item<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 找到</span>\\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\\n      obj<span class=\"token punctuation\">[</span>item<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> item<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 出现的字符串，用对象保存起来。</span>\\n    <span class=\"token punctuation\">}</span>\\n  <span class=\"token punctuation\">}</span>\\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\\'输出：\\'</span><span class=\"token punctuation\">,</span> <span class=\"token function\">firstUniqChar</span><span class=\"token punctuation\">(</span><span class=\"token string\">\\'abaccdeff\\'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">firstUniqChar</span><span class=\"token punctuation\">(</span><span class=\"token string\">\\'aabc\\'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br><span class=\"line-number\">11</span><br><span class=\"line-number\">12</span><br><span class=\"line-number\">13</span><br><span class=\"line-number\">14</span><br><span class=\"line-number\">15</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<ol start=\"2\">\\n<li>\\n<p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/indexOf#%E5%8F%82%E6%95%B0\" target=\"_blank\" rel=\"noopener noreferrer\">indexOf 的第二个参数<OutboundLink/></a>，从当前值往后搜索，并查找之前已经查过的字符</p>\\n<p>想起了<code>indexOf</code>的第二个参数，省了一步删除的操作。</p>\\n</li>\\n</ol>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">firstUniqChar</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n  str <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span>str<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\\n  <span class=\"token keyword\">let</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> <span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">]</span> <span class=\"token keyword\">of</span> str<span class=\"token punctuation\">.</span><span class=\"token function\">entries</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> index <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span> <span class=\"token operator\">&amp;&amp;</span> obj<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span> <span class=\"token operator\">===</span> undefined<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n      <span class=\"token comment\">// 跳过这个元素，当后面没有 并且前面也没有</span>\\n      <span class=\"token keyword\">return</span> key<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 找到</span>\\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\\n      obj<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> key<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 前面出现过 存起来</span>\\n    <span class=\"token punctuation\">}</span>\\n  <span class=\"token punctuation\">}</span>\\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\\'输出：\\'</span><span class=\"token punctuation\">,</span> <span class=\"token function\">firstUniqChar</span><span class=\"token punctuation\">(</span><span class=\"token string\">\\'abaccdeff\\'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">firstUniqChar</span><span class=\"token punctuation\">(</span><span class=\"token string\">\\'aabc\\'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br><span class=\"line-number\">11</span><br><span class=\"line-number\">12</span><br><span class=\"line-number\">13</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<ol start=\"3\">\\n<li>记录字符出现的次数，遍历字符串，第一个只出现一次的字符，就是要找的值。</li>\\n</ol>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">firstUniqChar</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n  <span class=\"token keyword\">var</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 用对象</span>\\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> str<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n    <span class=\"token keyword\">var</span> code <span class=\"token operator\">=</span> str<span class=\"token punctuation\">.</span><span class=\"token function\">charCodeAt</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\n    <span class=\"token comment\">// 记录出现的次数</span>\\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">[</span>code<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> undefined<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n      obj<span class=\"token punctuation\">[</span>code<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\\n      obj<span class=\"token punctuation\">[</span>code<span class=\"token punctuation\">]</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\\n    <span class=\"token punctuation\">}</span>\\n  <span class=\"token punctuation\">}</span>\\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> str<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n    <span class=\"token comment\">// 遍历字符串出现的顺序(保证第一次出现重复)，当出现为1时，即找到</span>\\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">[</span>str<span class=\"token punctuation\">.</span><span class=\"token function\">charCodeAt</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n      <span class=\"token keyword\">return</span> str<span class=\"token punctuation\">.</span><span class=\"token function\">charAt</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\n    <span class=\"token punctuation\">}</span>\\n  <span class=\"token punctuation\">}</span>\\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br><span class=\"line-number\">11</span><br><span class=\"line-number\">12</span><br><span class=\"line-number\">13</span><br><span class=\"line-number\">14</span><br><span class=\"line-number\">15</span><br><span class=\"line-number\">16</span><br><span class=\"line-number\">17</span><br><span class=\"line-number\">18</span><br><span class=\"line-number\">19</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e\\x3c!-- 特殊字符串：用于修改/删除markdown的结尾提示语-OBKoro1 --\\x3e\\n<h3 id=\"点个star支持我一下\"><a class=\"header-anchor\" href=\"#点个star支持我一下\" aria-hidden=\"true\">#</a> 点个<a href=\"https://github.com/OBKoro1/Brush_algorithm\" target=\"_blank\" rel=\"noopener noreferrer\">Star<OutboundLink/></a>支持我一下~</h3>\\n\\x3c!-- \\'特殊字符串：用于删除编译后的issue组件-OBKoro1 --\\x3e\\n'},{key:\"v-af6df9e2ca53e\",path:\"/algorithm/simple/%E8%90%BD%E5%8D%95%E7%9A%84%E6%95%B0.html\",lastUpdated:1564720698e3,title:\"落单的数\",headers:[{level:2,title:\"落单的数\",slug:\"落单的数\"},{level:3,title:\"难度：简单\",slug:\"难度：简单\"},{level:3,title:\"描述：\",slug:\"描述：\"},{level:3,title:\"样例：\",slug:\"样例：\"},{level:3,title:\"思路分析：\",slug:\"思路分析：\"},{level:3,title:\"代码模板：\",slug:\"代码模板：\"},{level:3,title:\"想一想再看答案\",slug:\"想一想再看答案\"},{level:3,title:\"想一想再看答案\",slug:\"想一想再看答案-2\"},{level:3,title:\"想一想再看答案\",slug:\"想一想再看答案-3\"},{level:3,title:\"代码：\",slug:\"代码：\"},{level:3,title:\"点个Star支持我一下~\",slug:\"点个star支持我一下\"}],excerpt:'<h2 id=\"落单的数\"><a class=\"header-anchor\" href=\"#落单的数\" aria-hidden=\"true\">#</a> 落单的数</h2>\\n<h3 id=\"难度：简单\"><a class=\"header-anchor\" href=\"#难度：简单\" aria-hidden=\"true\">#</a> 难度：简单</h3>\\n<h3 id=\"描述：\"><a class=\"header-anchor\" href=\"#描述：\" aria-hidden=\"true\">#</a> 描述：</h3>\\n<p>给出 2*n + 1 个的数字，除其中一个数字之外其他每个数字均出现两次，找到这个数字。</p>\\n<h3 id=\"样例：\"><a class=\"header-anchor\" href=\"#样例：\" aria-hidden=\"true\">#</a> 样例：</h3>\\n<p>给出 <code>[1,2,2,1,3,4,3]</code>，返回 <code>4</code></p>\\n<p>给出 <code>[7, 10001, 10002, 10003, 10001, 10002, 10003, 10004, 7, 10004, 91985345, 2, 2, 3, 4, 5, 5, 4, 3, 11, 91985345]</code>,返回<code>11</code></p>\\n<h3 id=\"思路分析：\"><a class=\"header-anchor\" href=\"#思路分析：\" aria-hidden=\"true\">#</a> 思路分析：</h3>\\n<p>有很多解决方式，建议用<code>indexOf</code>来查找是否有值。</p>\\n<h3 id=\"代码模板：\"><a class=\"header-anchor\" href=\"#代码模板：\" aria-hidden=\"true\">#</a> 代码模板：</h3>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code><span class=\"token comment\">/**\\n * @param A: An integer array\\n * @return: An integer\\n */</span>\\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">singleNumber</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">A</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n<span class=\"token punctuation\">}</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<h3 id=\"想一想再看答案\"><a class=\"header-anchor\" href=\"#想一想再看答案\" aria-hidden=\"true\">#</a> 想一想再看答案</h3>\\n<h3 id=\"想一想再看答案-2\"><a class=\"header-anchor\" href=\"#想一想再看答案-2\" aria-hidden=\"true\">#</a> 想一想再看答案</h3>\\n<h3 id=\"想一想再看答案-3\"><a class=\"header-anchor\" href=\"#想一想再看答案-3\" aria-hidden=\"true\">#</a> 想一想再看答案</h3>\\n<h3 id=\"代码：\"><a class=\"header-anchor\" href=\"#代码：\" aria-hidden=\"true\">#</a> 代码：</h3>\\n<ol>\\n<li>转对象，如果第二次出现，删除该值，最后只剩一个值</li>\\n</ol>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">singleNumber</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">A</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n    <span class=\"token keyword\">let</span> <span class=\"token punctuation\">[</span>obj<span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> index <span class=\"token keyword\">of</span> <span class=\"token constant\">A</span><span class=\"token punctuation\">.</span><span class=\"token function\">keys</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">[</span><span class=\"token constant\">A</span><span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">!==</span> undefined<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// 判断出现次数</span>\\n            <span class=\"token comment\">// 第二次出现 </span>\\n            <span class=\"token keyword\">let</span> test <span class=\"token operator\">=</span> <span class=\"token constant\">A</span><span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\\n            <span class=\"token keyword\">delete</span> res<span class=\"token punctuation\">[</span>obj<span class=\"token punctuation\">[</span><span class=\"token constant\">A</span><span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 删除数组元素 变为undefined</span>\\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\\n            <span class=\"token comment\">// 第一次出现</span>\\n            res<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token constant\">A</span><span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 数组元素添加进去</span>\\n            obj<span class=\"token punctuation\">[</span><span class=\"token constant\">A</span><span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> res<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 保存下标 用于等下删除第二次出现的元素</span>\\n        <span class=\"token punctuation\">}</span>\\n    <span class=\"token punctuation\">}</span>\\n    <span class=\"token keyword\">return</span> <span class=\"token function\">Number</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">\\'\\'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 转成字符串 最终只有一个值输出</span>\\n<span class=\"token punctuation\">}</span>\\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">singleNumber</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">singleNumber</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10001</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10002</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10003</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10001</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10002</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10003</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10004</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10004</span><span class=\"token punctuation\">,</span> <span class=\"token number\">91985345</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">11</span><span class=\"token punctuation\">,</span> <span class=\"token number\">91985345</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br><span class=\"line-number\">11</span><br><span class=\"line-number\">12</span><br><span class=\"line-number\">13</span><br><span class=\"line-number\">14</span><br><span class=\"line-number\">15</span><br><span class=\"line-number\">16</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<ol start=\"2\">\\n<li>查找该值的前后是否有该值，如果没有，即找到落单的值</li>\\n</ol>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">singleNumber</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">A</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n    <span class=\"token keyword\">var</span> b <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token constant\">A</span><span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n        <span class=\"token keyword\">var</span> v <span class=\"token operator\">=</span> <span class=\"token constant\">A</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span>\\n        <span class=\"token comment\">// 如果b数组中没有v(没有push过 代表前面没有v)并且A数组在后面也没有该值(也就是后面也没有v)</span>\\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token constant\">A</span><span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">,</span> i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n            <span class=\"token keyword\">return</span> v <span class=\"token comment\">// 前面没有v 后面也没有v 即是唯一的值</span>\\n        <span class=\"token punctuation\">}</span>\\n        b<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 添加v</span>\\n    <span class=\"token punctuation\">}</span>\\n<span class=\"token punctuation\">}</span>\\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">singleNumber</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">singleNumber</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10001</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10002</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10003</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10001</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10002</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10003</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10004</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10004</span><span class=\"token punctuation\">,</span> <span class=\"token number\">91985345</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">11</span><span class=\"token punctuation\">,</span> <span class=\"token number\">91985345</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br><span class=\"line-number\">11</span><br><span class=\"line-number\">12</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<ol start=\"3\">\\n<li>转成本地变量操作，将该值删除，再查找是否有该值，如果没有即找到该值</li>\\n</ol>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">singleNumber</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">A</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token constant\">A</span><span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n        <span class=\"token keyword\">var</span> s <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">concat</span><span class=\"token punctuation\">(</span><span class=\"token constant\">A</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//  转成本地变量</span>\\n        s<span class=\"token punctuation\">.</span><span class=\"token function\">splice</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 将该值删除</span>\\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">A</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// 被删过一次 再查找是否还有这个值</span>\\n            <span class=\"token keyword\">return</span> <span class=\"token constant\">A</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token comment\">// 如果没有的话 即找到该值</span>\\n        <span class=\"token punctuation\">}</span>\\n    <span class=\"token punctuation\">}</span>\\n<span class=\"token punctuation\">}</span>\\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">singleNumber</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">singleNumber</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10001</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10002</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10003</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10001</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10002</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10003</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10004</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10004</span><span class=\"token punctuation\">,</span> <span class=\"token number\">91985345</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">11</span><span class=\"token punctuation\">,</span> <span class=\"token number\">91985345</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e\\x3c!-- 特殊字符串：用于修改/删除markdown的结尾提示语-OBKoro1 --\\x3e\\n<h3 id=\"点个star支持我一下\"><a class=\"header-anchor\" href=\"#点个star支持我一下\" aria-hidden=\"true\">#</a> 点个<a href=\"https://github.com/OBKoro1/Brush_algorithm\" target=\"_blank\" rel=\"noopener noreferrer\">Star<OutboundLink/></a>支持我一下~</h3>\\n\\x3c!-- \\'特殊字符串：用于删除编译后的issue组件-OBKoro1 --\\x3e\\n'},{key:\"v-63829c8ab0948\",path:\"/algorithm/template.html\",lastUpdated:1593678455e3,title:\"标题\",headers:[{level:2,title:\"标题\",slug:\"标题\"},{level:3,title:\"题目链接\",slug:\"题目链接\"},{level:3,title:\"难度：中等\",slug:\"难度：中等\"},{level:3,title:\"思路分析：\",slug:\"思路分析：\"},{level:3,title:\"想\",slug:\"想\"},{level:3,title:\"一\",slug:\"一\"},{level:3,title:\"想\",slug:\"想-2\"},{level:3,title:\"再\",slug:\"再\"},{level:3,title:\"看\",slug:\"看\"},{level:3,title:\"答\",slug:\"答\"},{level:3,title:\"案\",slug:\"案\"},{level:3,title:\"想\",slug:\"想-3\"},{level:3,title:\"一\",slug:\"一-2\"},{level:3,title:\"想\",slug:\"想-4\"},{level:3,title:\"再\",slug:\"再-2\"},{level:3,title:\"看\",slug:\"看-2\"},{level:3,title:\"答\",slug:\"答-2\"},{level:3,title:\"案\",slug:\"案-2\"},{level:3,title:\"代码：\",slug:\"代码：\"},{level:3,title:\"鼓励我一下：\",slug:\"鼓励我一下：\"}]},{key:\"v-bdbe32e2a263c\",path:\"/codeBlack/Object.create%E5%AE%9E%E7%8E%B0.html\",lastUpdated:156671489e4,title:\"Object.create实现\",headers:[{level:2,title:\"Object.create实现\",slug:\"object-create实现\"},{level:3,title:\"关键思路：\",slug:\"关键思路：\"},{level:3,title:\"代码：\",slug:\"代码：\"},{level:3,title:\"修改原对象的属性会影响新对象的原型：\",slug:\"修改原对象的属性会影响新对象的原型：\"},{level:3,title:\"点个Star支持我一下~\",slug:\"点个star支持我一下\"}],excerpt:'<h2 id=\"object-create实现\"><a class=\"header-anchor\" href=\"#object-create实现\" aria-hidden=\"true\">#</a> Object.create实现</h2>\\n<h3 id=\"关键思路：\"><a class=\"header-anchor\" href=\"#关键思路：\" aria-hidden=\"true\">#</a> 关键思路：</h3>\\n<p>将传入的对象作为新对象原型</p>\\n<h3 id=\"代码：\"><a class=\"header-anchor\" href=\"#代码：\" aria-hidden=\"true\">#</a> 代码：</h3>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">myCreate</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n  <span class=\"token keyword\">function</span> <span class=\"token constant\">F</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\\n  <span class=\"token constant\">F</span><span class=\"token punctuation\">.</span>prototype <span class=\"token operator\">=</span> obj\\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">F</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\\n<span class=\"token punctuation\">}</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<h3 id=\"修改原对象的属性会影响新对象的原型：\"><a class=\"header-anchor\" href=\"#修改原对象的属性会影响新对象的原型：\" aria-hidden=\"true\">#</a> 修改原对象的属性会影响新对象的原型：</h3>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code><span class=\"token keyword\">var</span> obj1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> p<span class=\"token punctuation\">:</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\\n<span class=\"token keyword\">var</span> obj2 <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span>obj1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\nobj1<span class=\"token punctuation\">.</span>p <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\\'obj\\'</span><span class=\"token punctuation\">,</span> obj1<span class=\"token punctuation\">,</span> obj2<span class=\"token punctuation\">,</span><span class=\"token punctuation\">)</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e\\x3c!-- 特殊字符串：用于修改/删除markdown的结尾提示语-OBKoro1 --\\x3e\\n<h3 id=\"点个star支持我一下\"><a class=\"header-anchor\" href=\"#点个star支持我一下\" aria-hidden=\"true\">#</a> 点个<a href=\"https://github.com/OBKoro1/codeBlack\" target=\"_blank\" rel=\"noopener noreferrer\">Star<OutboundLink/></a>支持我一下~</h3>\\n\\x3c!-- \\'特殊字符串：用于删除编译后的issue组件-OBKoro1 --\\x3e\\n'},{key:\"v-ac2e2ae425d77\",path:\"/codeBlack/\",lastUpdated:1564720698e3,title:\"开箱即用的代码块\",headers:[{level:2,title:\"开箱即用的代码块\",slug:\"开箱即用的代码块\"},{level:3,title:\"来社区关注我,不错过最新文章：\",slug:\"来社区关注我-不错过最新文章：\"},{level:3,title:\"点个Star支持我一下~\",slug:\"点个star支持我一下\"}],excerpt:'\\x3c!--\\n * @Github: https://github.com/OBKoro1\\n * @Author: OBKoro1\\n * @Date: 2019-07-30 18:11:31\\n * @LastEditors: OBKoro1\\n * @LastEditTime: 2019-08-01 19:51:15\\n * @Description: 代码块readme\\n --\\x3e\\n<h2 id=\"开箱即用的代码块\"><a class=\"header-anchor\" href=\"#开箱即用的代码块\" aria-hidden=\"true\">#</a> 开箱即用的代码块</h2>\\n<p>一直以来我都有做笔记的习惯，每次有学到新的东西，我都会记在自己的有道云笔记上，久而久之就记录了很多比较小的代码块/知识点。</p>\\n<p>这类代码块/知识点，因为比较小，一段话，一段代码就能说清楚, 很难整理成一个博客,这里就是用来记录这些东西的。</p>\\n<p>这类代码块也通常比较偏，所以在今后积累的比较多了，这也是很有价值的内容，可以快速学习到很多内容！</p>\\n<p>如果对这个项目有兴趣的话,可以给我的<a href=\"https://github.com/OBKoro1/codeBlack\" target=\"_blank\" rel=\"noopener noreferrer\">项目<OutboundLink/></a>点个Star。</p>\\n<h3 id=\"来社区关注我-不错过最新文章：\"><a class=\"header-anchor\" href=\"#来社区关注我-不错过最新文章：\" aria-hidden=\"true\">#</a> 来社区关注我,不错过最新文章：</h3>\\n<ul>\\n<li>\\n<p><a href=\"https://juejin.im/user/58714f0eb123db4a2eb95372/posts\" target=\"_blank\" rel=\"noopener noreferrer\">掘金<OutboundLink/></a></p>\\n</li>\\n<li>\\n<p><a href=\"https://segmentfault.com/u/obkoro1/articles\" target=\"_blank\" rel=\"noopener noreferrer\">segmentfault<OutboundLink/></a></p>\\n</li>\\n<li>\\n<p><a href=\"https://github.com/OBKoro1/articleImg_src/blob/master/juejin/1631b6f52f7e7015.jpeg?raw=true\" target=\"_blank\" rel=\"noopener noreferrer\">微信公众号<OutboundLink/></a>\\n\\x3c!-- 特殊字符串：用于修改/删除markdown的结尾提示语-OBKoro1 --\\x3e</p>\\n</li>\\n</ul>\\n<h3 id=\"点个star支持我一下\"><a class=\"header-anchor\" href=\"#点个star支持我一下\" aria-hidden=\"true\">#</a> 点个<a href=\"https://github.com/OBKoro1/codeBlack\" target=\"_blank\" rel=\"noopener noreferrer\">Star<OutboundLink/></a>支持我一下~</h3>\\n\\x3c!-- \\'特殊字符串：用于删除编译后的issue组件-OBKoro1 --\\x3e\\n'},{key:\"v-51d93680924cc\",path:\"/codeBlack/fixed%E7%9A%84%E4%BB%8E%E7%88%B6%E5%8E%9F%E5%88%99.html\",lastUpdated:1577170569e3,title:\"fixed 从父原则导致 z-index 无效\",headers:[{level:2,title:\"fixed 从父原则导致 z-index 无效\",slug:\"fixed-从父原则导致-z-index-无效\"},{level:3,title:\"什么是从父原则:\",slug:\"什么是从父原则\"},{level:3,title:\"什么情况下出现从父原则\",slug:\"什么情况下出现从父原则\"},{level:3,title:\"这样说有点干，来看一下示例。\",slug:\"这样说有点干，来看一下示例。\"},{level:3,title:\"codepen\",slug:\"codepen\"},{level:3,title:\"代码：\",slug:\"代码：\"},{level:3,title:\"点个Star支持我一下~\",slug:\"点个star支持我一下\"}],excerpt:'<h2 id=\"fixed-从父原则导致-z-index-无效\"><a class=\"header-anchor\" href=\"#fixed-从父原则导致-z-index-无效\" aria-hidden=\"true\">#</a> fixed 从父原则导致 z-index 无效</h2>\\n<h3 id=\"什么是从父原则\"><a class=\"header-anchor\" href=\"#什么是从父原则\" aria-hidden=\"true\">#</a> 什么是从父原则:</h3>\\n<ol>\\n<li>子元素在与父辈元素比较的时候，用父辈的 z-index 去比较</li>\\n<li>在与同级元素比较的时候，才有自己的 z-index 去比较</li>\\n</ol>\\n<h3 id=\"什么情况下出现从父原则\"><a class=\"header-anchor\" href=\"#什么情况下出现从父原则\" aria-hidden=\"true\">#</a> 什么情况下出现从父原则</h3>\\n<ol>\\n<li>父元素通过<code>fixed absolute relative</code>定位的元素, 子元素也是<code>fixed absolute relative</code>定位的元素。</li>\\n<li>在父元素上设置了<code>z-index</code></li>\\n<li>跟父元素同级的元素也是通过<code>fixed absolute relative</code>定位的元素，并且设定了<code>z-index</code></li>\\n</ol>\\n<h3 id=\"这样说有点干，来看一下示例。\"><a class=\"header-anchor\" href=\"#这样说有点干，来看一下示例。\" aria-hidden=\"true\">#</a> 这样说有点干，来看一下示例。</h3>\\n<p>示例中带有详细的注释，可以自己动手调一调，就明白啦~</p>\\n<h3 id=\"codepen\"><a class=\"header-anchor\" href=\"#codepen\" aria-hidden=\"true\">#</a> codepen</h3>\\n<p><a href=\"https://codepen.io/OBKoro1/pen/gObWVPE\" target=\"_blank\" rel=\"noopener noreferrer\">fixed 从父原则<OutboundLink/></a></p>\\n<h3 id=\"代码：\"><a class=\"header-anchor\" href=\"#代码：\" aria-hidden=\"true\">#</a> 代码：</h3>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-html line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-html\"><code><span class=\"token comment\">&lt;!--\\n * Author: OBKoro1\\n * Date: 2019-12-24 13:55:54\\n * LastEditors: OBKoro1\\n * LastEditTime: 2019-12-24 14:52:04\\n * FilePath: /test/index.html\\n * Description: fixed 从父原则\\n * https://github.com/OBKoro1\\n --\\x3e</span>\\n<span class=\"token doctype\">&lt;!DOCTYPE html></span>\\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span> <span class=\"token attr-name\">lang</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>en<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>head</span><span class=\"token punctuation\">></span></span>\\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">charset</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>UTF-8<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>viewport<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">content</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>width=device-width, initial-scale=1.0<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">http-equiv</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>X-UA-Compatible<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">content</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>ie=edge<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>title</span><span class=\"token punctuation\">></span></span>Document<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>title</span><span class=\"token punctuation\">></span></span>\\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>style</span><span class=\"token punctuation\">></span></span><span class=\"token style language-css\">\\n      <span class=\"token selector\">body,\\n      html</span> <span class=\"token punctuation\">{</span>\\n        <span class=\"token property\">margin</span><span class=\"token punctuation\">:</span> 0<span class=\"token punctuation\">;</span>\\n        <span class=\"token property\">padding</span><span class=\"token punctuation\">:</span> 0<span class=\"token punctuation\">;</span>\\n      <span class=\"token punctuation\">}</span>\\n      <span class=\"token selector\">#father1</span> <span class=\"token punctuation\">{</span>\\n        <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 50px<span class=\"token punctuation\">;</span>\\n        <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 50px<span class=\"token punctuation\">;</span>\\n        <span class=\"token property\">background</span><span class=\"token punctuation\">:</span> red<span class=\"token punctuation\">;</span>\\n        <span class=\"token property\">position</span><span class=\"token punctuation\">:</span> absolute<span class=\"token punctuation\">;</span>\\n        <span class=\"token comment\">/* position: fixed; */</span>\\n        <span class=\"token comment\">/* position: relative; */</span>\\n        <span class=\"token property\">bottom</span><span class=\"token punctuation\">:</span> 0<span class=\"token punctuation\">;</span>\\n        <span class=\"token property\">right</span><span class=\"token punctuation\">:</span> 0<span class=\"token punctuation\">;</span>\\n        <span class=\"token comment\">/* TODO: 比father2大 将覆盖father2 */</span>\\n        <span class=\"token property\">z-index</span><span class=\"token punctuation\">:</span> 3<span class=\"token punctuation\">;</span>\\n      <span class=\"token punctuation\">}</span>\\n      <span class=\"token selector\">#son1</span> <span class=\"token punctuation\">{</span>\\n        <span class=\"token comment\">/* 子元素在与父辈元素比较的时候，用父辈的z-index去比较。*/</span>\\n        <span class=\"token comment\">/* 在与同级元素比较的时候，才有自己的z-index去比较  */</span>\\n        <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 100vw<span class=\"token punctuation\">;</span>\\n        <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 100vh<span class=\"token punctuation\">;</span>\\n        <span class=\"token property\">background</span><span class=\"token punctuation\">:</span> orange<span class=\"token punctuation\">;</span>\\n        <span class=\"token comment\">/* position: absolute; */</span>\\n        <span class=\"token comment\">/* position: fixed; */</span>\\n        <span class=\"token property\">position</span><span class=\"token punctuation\">:</span> relative<span class=\"token punctuation\">;</span>\\n        <span class=\"token property\">top</span><span class=\"token punctuation\">:</span> 0<span class=\"token punctuation\">;</span>\\n        <span class=\"token property\">left</span><span class=\"token punctuation\">:</span> 0<span class=\"token punctuation\">;</span>\\n        <span class=\"token property\">z-index</span><span class=\"token punctuation\">:</span> 10<span class=\"token punctuation\">;</span>\\n      <span class=\"token punctuation\">}</span>\\n      <span class=\"token selector\">#son2</span> <span class=\"token punctuation\">{</span>\\n        <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 100px<span class=\"token punctuation\">;</span>\\n        <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 100px<span class=\"token punctuation\">;</span>\\n        <span class=\"token property\">background</span><span class=\"token punctuation\">:</span> black<span class=\"token punctuation\">;</span>\\n        <span class=\"token property\">position</span><span class=\"token punctuation\">:</span> fixed<span class=\"token punctuation\">;</span>\\n        <span class=\"token property\">top</span><span class=\"token punctuation\">:</span> 0<span class=\"token punctuation\">;</span>\\n        <span class=\"token property\">left</span><span class=\"token punctuation\">:</span> 0<span class=\"token punctuation\">;</span>\\n        <span class=\"token property\">color</span><span class=\"token punctuation\">:</span> #fff<span class=\"token punctuation\">;</span>\\n        <span class=\"token property\">z-index</span><span class=\"token punctuation\">:</span> 8<span class=\"token punctuation\">;</span>\\n        <span class=\"token comment\">/* TODO: 打开将覆盖son1 因为比它们是同级，且son2 z-index比较大 */</span>\\n        <span class=\"token comment\">/* z-index: 100; */</span>\\n      <span class=\"token punctuation\">}</span>\\n      <span class=\"token selector\">.father2</span> <span class=\"token punctuation\">{</span>\\n        <span class=\"token comment\">/* TODO: 出现从父原则的情况: 在fixed的父元素设relative和z-index */</span>\\n        <span class=\"token comment\">/* position: fixed; */</span>\\n        <span class=\"token comment\">/* position: relative; */</span>\\n        <span class=\"token property\">position</span><span class=\"token punctuation\">:</span> fixed<span class=\"token punctuation\">;</span>\\n        <span class=\"token property\">z-index</span><span class=\"token punctuation\">:</span> 1<span class=\"token punctuation\">;</span>\\n        <span class=\"token comment\">/* TODO: 打开将覆盖father1 因为son1和father1不同级,然后father2比father1的z-index大 */</span>\\n        <span class=\"token comment\">/* z-index: 10; */</span>\\n      <span class=\"token punctuation\">}</span>\\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>style</span><span class=\"token punctuation\">></span></span>\\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">></span></span>\\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">></span></span>\\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>father1<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>father1<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>father2<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>son1<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>子元素1<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>son2<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>子元素2<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span>\\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">></span></span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br><span class=\"line-number\">11</span><br><span class=\"line-number\">12</span><br><span class=\"line-number\">13</span><br><span class=\"line-number\">14</span><br><span class=\"line-number\">15</span><br><span class=\"line-number\">16</span><br><span class=\"line-number\">17</span><br><span class=\"line-number\">18</span><br><span class=\"line-number\">19</span><br><span class=\"line-number\">20</span><br><span class=\"line-number\">21</span><br><span class=\"line-number\">22</span><br><span class=\"line-number\">23</span><br><span class=\"line-number\">24</span><br><span class=\"line-number\">25</span><br><span class=\"line-number\">26</span><br><span class=\"line-number\">27</span><br><span class=\"line-number\">28</span><br><span class=\"line-number\">29</span><br><span class=\"line-number\">30</span><br><span class=\"line-number\">31</span><br><span class=\"line-number\">32</span><br><span class=\"line-number\">33</span><br><span class=\"line-number\">34</span><br><span class=\"line-number\">35</span><br><span class=\"line-number\">36</span><br><span class=\"line-number\">37</span><br><span class=\"line-number\">38</span><br><span class=\"line-number\">39</span><br><span class=\"line-number\">40</span><br><span class=\"line-number\">41</span><br><span class=\"line-number\">42</span><br><span class=\"line-number\">43</span><br><span class=\"line-number\">44</span><br><span class=\"line-number\">45</span><br><span class=\"line-number\">46</span><br><span class=\"line-number\">47</span><br><span class=\"line-number\">48</span><br><span class=\"line-number\">49</span><br><span class=\"line-number\">50</span><br><span class=\"line-number\">51</span><br><span class=\"line-number\">52</span><br><span class=\"line-number\">53</span><br><span class=\"line-number\">54</span><br><span class=\"line-number\">55</span><br><span class=\"line-number\">56</span><br><span class=\"line-number\">57</span><br><span class=\"line-number\">58</span><br><span class=\"line-number\">59</span><br><span class=\"line-number\">60</span><br><span class=\"line-number\">61</span><br><span class=\"line-number\">62</span><br><span class=\"line-number\">63</span><br><span class=\"line-number\">64</span><br><span class=\"line-number\">65</span><br><span class=\"line-number\">66</span><br><span class=\"line-number\">67</span><br><span class=\"line-number\">68</span><br><span class=\"line-number\">69</span><br><span class=\"line-number\">70</span><br><span class=\"line-number\">71</span><br><span class=\"line-number\">72</span><br><span class=\"line-number\">73</span><br><span class=\"line-number\">74</span><br><span class=\"line-number\">75</span><br><span class=\"line-number\">76</span><br><span class=\"line-number\">77</span><br><span class=\"line-number\">78</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e\\x3c!-- 特殊字符串：用于修改/删除markdown的结尾提示语-OBKoro1 --\\x3e\\n<h3 id=\"点个star支持我一下\"><a class=\"header-anchor\" href=\"#点个star支持我一下\" aria-hidden=\"true\">#</a> 点个<a href=\"https://github.com/OBKoro1/codeBlack\" target=\"_blank\" rel=\"noopener noreferrer\">Star<OutboundLink/></a>支持我一下~</h3>\\n\\x3c!-- \\'特殊字符串：用于删除编译后的issue组件-OBKoro1 --\\x3e\\n'},{key:\"v-52436b5f6813a\",path:\"/codeBlack/instanceof%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86.html\",lastUpdated:1571895536e3,title:\"instanceof实现原理\",headers:[{level:2,title:\"instanceof实现原理\",slug:\"instanceof实现原理\"},{level:3,title:\"思路\",slug:\"思路\"},{level:3,title:\"代码：\",slug:\"代码：\"},{level:3,title:\"点个Star支持我一下~\",slug:\"点个star支持我一下\"}],excerpt:'<h2 id=\"instanceof实现原理\"><a class=\"header-anchor\" href=\"#instanceof实现原理\" aria-hidden=\"true\">#</a> instanceof实现原理</h2>\\n<h3 id=\"思路\"><a class=\"header-anchor\" href=\"#思路\" aria-hidden=\"true\">#</a> 思路</h3>\\n<p>右边变量的原型存在于左边变量的原型链上</p>\\n<p>关于原型链不太懂的同学可以看一下，我的这篇文章：<a href=\"https://juejin.im/post/5d622f14f265da03a1486408\" target=\"_blank\" rel=\"noopener noreferrer\">JS基础-函数、对象和原型、原型链的关系<OutboundLink/></a></p>\\n<h3 id=\"代码：\"><a class=\"header-anchor\" href=\"#代码：\" aria-hidden=\"true\">#</a> 代码：</h3>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">myInstanceOf</span><span class=\"token punctuation\">(</span>left<span class=\"token punctuation\">,</span> right<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n  <span class=\"token keyword\">let</span> leftValue <span class=\"token operator\">=</span> left<span class=\"token punctuation\">.</span>__proto__\\n  <span class=\"token keyword\">let</span> rightValue <span class=\"token operator\">=</span> right<span class=\"token punctuation\">.</span>prototype\\n  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>leftValue <span class=\"token operator\">===</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n      <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span>\\n    <span class=\"token punctuation\">}</span>\\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>leftValue <span class=\"token operator\">===</span> rightValue<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n      <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span>\\n    <span class=\"token punctuation\">}</span>\\n    leftValue <span class=\"token operator\">=</span> leftValue<span class=\"token punctuation\">.</span>__proto__\\n  <span class=\"token punctuation\">}</span>\\n<span class=\"token punctuation\">}</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br><span class=\"line-number\">11</span><br><span class=\"line-number\">12</span><br><span class=\"line-number\">13</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e\\x3c!-- 特殊字符串：用于修改/删除markdown的结尾提示语-OBKoro1 --\\x3e\\n<h3 id=\"点个star支持我一下\"><a class=\"header-anchor\" href=\"#点个star支持我一下\" aria-hidden=\"true\">#</a> 点个<a href=\"https://github.com/OBKoro1/codeBlack\" target=\"_blank\" rel=\"noopener noreferrer\">Star<OutboundLink/></a>支持我一下~</h3>\\n\\x3c!-- \\'特殊字符串：用于删除编译后的issue组件-OBKoro1 --\\x3e\\n'},{key:\"v-a5591f4d86869\",path:\"/codeBlack/temlate.html\",lastUpdated:156671489e4,title:\"标题\",headers:[{level:2,title:\"标题\",slug:\"标题\"},{level:3,title:\"codepen\",slug:\"codepen\"},{level:3,title:\"代码：\",slug:\"代码：\"},{level:3,title:\"点个Star支持我一下~\",slug:\"点个star支持我一下\"}],excerpt:'<h2 id=\"标题\"><a class=\"header-anchor\" href=\"#标题\" aria-hidden=\"true\">#</a> 标题</h2>\\n<h3 id=\"codepen\"><a class=\"header-anchor\" href=\"#codepen\" aria-hidden=\"true\">#</a> codepen</h3>\\n<p><a href=\"https://codepen.io/OBKoro1/pen/XoaRyg\" target=\"_blank\" rel=\"noopener noreferrer\">demo<OutboundLink/></a></p>\\n<h3 id=\"代码：\"><a class=\"header-anchor\" href=\"#代码：\" aria-hidden=\"true\">#</a> 代码：</h3>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code></code></pre>\\n<div class=\"line-numbers-wrapper\"></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e\\x3c!-- 特殊字符串：用于修改/删除markdown的结尾提示语-OBKoro1 --\\x3e\\n<h3 id=\"点个star支持我一下\"><a class=\"header-anchor\" href=\"#点个star支持我一下\" aria-hidden=\"true\">#</a> 点个<a href=\"https://github.com/OBKoro1/codeBlack\" target=\"_blank\" rel=\"noopener noreferrer\">Star<OutboundLink/></a>支持我一下~</h3>\\n\\x3c!-- \\'特殊字符串：用于删除编译后的issue组件-OBKoro1 --\\x3e\\n'},{key:\"v-40918b6f1709b\",path:\"/codeBlack/vuex%E4%B8%89%E6%AD%A5.html\",lastUpdated:1564720698e3,title:\"Vuex 的使用入门-极简使用\",headers:[{level:2,title:\"Vuex 的使用入门-极简使用\",slug:\"vuex-的使用入门-极简使用\"},{level:3,title:\"1. 安装 Vuex 包\",slug:\"_1-安装-vuex-包\"},{level:3,title:\"2. 新建一个store.js文件:\",slug:\"_2-新建一个store-js文件\"},{level:3,title:\"3. 引入到main.js入口文件中 - 最后一步\",slug:\"_3-引入到main-js入口文件中-最后一步\"},{level:3,title:\"在组件中使用 vuex：\",slug:\"在组件中使用-vuex：\"},{level:3,title:\"在 js 文件中使用 vuex:\",slug:\"在-js-文件中使用-vuex\"},{level:3,title:\"小结\",slug:\"小结\"},{level:3,title:\"点个Star支持我一下~\",slug:\"点个star支持我一下\"}],excerpt:'<h2 id=\"vuex-的使用入门-极简使用\"><a class=\"header-anchor\" href=\"#vuex-的使用入门-极简使用\" aria-hidden=\"true\">#</a> Vuex 的使用入门-极简使用</h2>\\n<p>vuex 是为了解决复杂项目组件之间的数据通信的一个全局状态管理机制，相信很多人都听说过这个东西。有部分人还没有在项目中使用<code>Vuex</code>管理过数据状态，实际上<code>Vuex</code>的起步使用非常之简单，看完本文之后，赶紧在项目中用起来吧！</p>\\n<h3 id=\"_1-安装-vuex-包\"><a class=\"header-anchor\" href=\"#_1-安装-vuex-包\" aria-hidden=\"true\">#</a> 1. 安装 Vuex 包</h3>\\n\\x3c!--beforebegin--\\x3e<div class=\"language- line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-text\"><code>npm install vuex --save\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<h3 id=\"_2-新建一个store-js文件\"><a class=\"header-anchor\" href=\"#_2-新建一个store-js文件\" aria-hidden=\"true\">#</a> 2. 新建一个<code>store.js</code>文件:</h3>\\n<p>Vuex 必需的内容都在下面这个文件中，文件中做了详细的注释，注意其中的异步操作<code>actions</code>和同步操作<code>mutations</code>。</p>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code><span class=\"token comment\">// store.js</span>\\n<span class=\"token comment\">// 引入vue 和 vuex</span>\\n<span class=\"token keyword\">import</span> Vue <span class=\"token keyword\">from</span> <span class=\"token string\">\\'vue\\'</span><span class=\"token punctuation\">;</span>\\n<span class=\"token keyword\">import</span> Vuex <span class=\"token keyword\">from</span> <span class=\"token string\">\\'vuex\\'</span><span class=\"token punctuation\">;</span>\\nVue<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span>Vuex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 使用vuex插件,跟router一样</span>\\n<span class=\"token comment\">// 直接导出 一个 Store 的实例</span>\\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Vuex<span class=\"token punctuation\">.</span>Store</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\\n  <span class=\"token comment\">// 这里是要读取或者写入数据的地方,跟组件里的data项一样</span>\\n  state<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\\n    name<span class=\"token punctuation\">:</span> <span class=\"token string\">\\'oldName\\'</span>\\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\\n  <span class=\"token comment\">// 通过actions的commit触发mutations来修改state的数据</span>\\n  <span class=\"token comment\">// 这里可以包含任意的异步操作，只要最后</span>\\n  actions<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\\n    <span class=\"token comment\">// 第一个参数是用于触发mutations，第二个参数是使用的地方传过来的数据</span>\\n    <span class=\"token function\">nameAction</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> commit <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n      <span class=\"token comment\">// do something 可以是ajax、promise等异步操作</span>\\n      <span class=\"token function\">commit</span><span class=\"token punctuation\">(</span><span class=\"token string\">\\'updateName\\'</span><span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\n    <span class=\"token punctuation\">}</span>\\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\\n  <span class=\"token comment\">// 同步操作直接修改state里面的数据</span>\\n  mutations<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\\n    <span class=\"token comment\">// 第一个参数是上面的state数据,第二个参数是commit传过来的数据,用以修改state数据。</span>\\n    <span class=\"token function\">updateName</span><span class=\"token punctuation\">(</span>state<span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n      state<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> data<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 更改state里的数据</span>\\n    <span class=\"token punctuation\">}</span>\\n  <span class=\"token punctuation\">}</span>\\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br><span class=\"line-number\">11</span><br><span class=\"line-number\">12</span><br><span class=\"line-number\">13</span><br><span class=\"line-number\">14</span><br><span class=\"line-number\">15</span><br><span class=\"line-number\">16</span><br><span class=\"line-number\">17</span><br><span class=\"line-number\">18</span><br><span class=\"line-number\">19</span><br><span class=\"line-number\">20</span><br><span class=\"line-number\">21</span><br><span class=\"line-number\">22</span><br><span class=\"line-number\">23</span><br><span class=\"line-number\">24</span><br><span class=\"line-number\">25</span><br><span class=\"line-number\">26</span><br><span class=\"line-number\">27</span><br><span class=\"line-number\">28</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<h3 id=\"_3-引入到main-js入口文件中-最后一步\"><a class=\"header-anchor\" href=\"#_3-引入到main-js入口文件中-最后一步\" aria-hidden=\"true\">#</a> 3. 引入到<code>main.js</code>入口文件中 - 最后一步</h3>\\n<p>这是最后一步了，做完这步，然后我们就可以在项目中使用<code>Vuex</code>了。</p>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code><span class=\"token comment\">// main.js</span>\\n<span class=\"token keyword\">import</span> Vue <span class=\"token keyword\">from</span> <span class=\"token string\">\\'vue\\'</span><span class=\"token punctuation\">;</span>\\n<span class=\"token keyword\">import</span> App <span class=\"token keyword\">from</span> <span class=\"token string\">\\'./App\\'</span><span class=\"token punctuation\">;</span>\\n<span class=\"token keyword\">import</span> store <span class=\"token keyword\">from</span> <span class=\"token string\">\\'./store\\'</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 引入store</span>\\n\\n<span class=\"token keyword\">new</span> <span class=\"token class-name\">Vue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\\n  el<span class=\"token punctuation\">:</span> <span class=\"token string\">\\'#app\\'</span><span class=\"token punctuation\">,</span>\\n  store<span class=\"token punctuation\">,</span> <span class=\"token comment\">// 挂载在Vue的配置项中</span>\\n  components<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> App <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\\n  template<span class=\"token punctuation\">:</span> <span class=\"token string\">\\'&lt;App/>\\'</span>\\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br><span class=\"line-number\">11</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<h3 id=\"在组件中使用-vuex：\"><a class=\"header-anchor\" href=\"#在组件中使用-vuex：\" aria-hidden=\"true\">#</a> 在组件中使用 vuex：</h3>\\n<p>在组件中的使用如下，省略了<code>template</code>部分:</p>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code><span class=\"token comment\">// 组件中</span>\\n<span class=\"token operator\">&lt;</span>script<span class=\"token operator\">></span>\\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">{</span>\\n  <span class=\"token function\">mounted</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\\'vuex的数据\\'</span>，<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$store<span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span>\\n  <span class=\"token punctuation\">}</span>\\n  methods<span class=\"token punctuation\">:</span><span class=\"token punctuation\">{</span>\\n    <span class=\"token function\">changeName</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n      <span class=\"token comment\">// commit只接受一个参数，\\b数据多的话，就用对象传递</span>\\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$store<span class=\"token punctuation\">.</span><span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token string\">\\'nameAction\\'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\\'传过去的新名字\\'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 先触发actions，再由commit触发mutations来修改数据</span>\\n  <span class=\"token punctuation\">}</span>\\n<span class=\"token punctuation\">}</span>\\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">></span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br><span class=\"line-number\">11</span><br><span class=\"line-number\">12</span><br><span class=\"line-number\">13</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<h3 id=\"在-js-文件中使用-vuex\"><a class=\"header-anchor\" href=\"#在-js-文件中使用-vuex\" aria-hidden=\"true\">#</a> 在 js 文件中使用 vuex:</h3>\\n<p>使用方式是一样的，只是调用的\\b名字，稍微有些改变。</p>\\n<p><strong>重复引用问题：</strong></p>\\n<p>现在项目中基本使用的都是Webpack打包，所以我们不用担心重复引用的问题。</p>\\n<p>webpack会记忆你之前有没有引用过这个文件/包，整个项目只会引用一次。</p>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code><span class=\"token comment\">// some.js</span>\\n<span class=\"token keyword\">import</span> store <span class=\"token keyword\">from</span> <span class=\"token string\">\\'./store\\'</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 引入vuex</span>\\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\\'vuex的数据\\'</span><span class=\"token punctuation\">,</span> store<span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\nstore<span class=\"token punctuation\">.</span><span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token string\">\\'nameAction\\'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\\'传过去的新名字\\'</span><span class=\"token punctuation\">)</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<h3 id=\"小结\"><a class=\"header-anchor\" href=\"#小结\" aria-hidden=\"true\">#</a> 小结</h3>\\n<p>实际上使用 Vuex 只需要<code>store.js</code>文件,然后再把文件引到<code>main.js</code>入门文件中，挂在<code>new Vue</code>的配置项中即可使用。</p>\\n<p>如此之简单，快点来试试吧！\\n\\x3c!-- 特殊字符串：用于修改/删除markdown的结尾提示语-OBKoro1 --\\x3e</p>\\n<h3 id=\"点个star支持我一下\"><a class=\"header-anchor\" href=\"#点个star支持我一下\" aria-hidden=\"true\">#</a> 点个<a href=\"https://github.com/OBKoro1/codeBlack\" target=\"_blank\" rel=\"noopener noreferrer\">Star<OutboundLink/></a>支持我一下~</h3>\\n\\x3c!-- \\'特殊字符串：用于删除编译后的issue组件-OBKoro1 --\\x3e\\n'},{key:\"v-29bf2598ef869\",path:\"/codeBlack/vue%E5%B0%8F%E6%8A%80%E5%B7%A7.html\",lastUpdated:1564720698e3,title:\"vue 小技巧&小问题1\",headers:[{level:2,title:\"vue 小技巧&小问题1\",slug:\"vue-小技巧-小问题1\"},{level:3,title:\"路由变化页面数据不刷新问题\",slug:\"路由变化页面数据不刷新问题\"},{level:3,title:\"setTimeout/setInterval 无法用 this 访问 VUe 实例\",slug:\"settimeout-setinterval-无法用-this-访问-vue-实例\"},{level:3,title:\"setInterval 路由跳转继续运行并没有销毁\",slug:\"setinterval-路由跳转继续运行并没有销毁\"},{level:3,title:\"vue 滚动行为(浏览器回退记忆位置)用法\",slug:\"vue-滚动行为-浏览器回退记忆位置-用法\"},{level:3,title:\"vue 路由拦截浏览器后退实现草稿保存类似需求\",slug:\"vue-路由拦截浏览器后退实现草稿保存类似需求\"},{level:3,title:\"v-once 只渲染元素和组件一次，优化更新渲染性能\",slug:\"v-once-只渲染元素和组件一次，优化更新渲染性能\"},{level:3,title:\"vue 风格指南推荐：\",slug:\"vue-风格指南推荐：\"},{level:3,title:\"点个Star支持我一下~\",slug:\"点个star支持我一下\"}],excerpt:'<h2 id=\"vue-小技巧-小问题1\"><a class=\"header-anchor\" href=\"#vue-小技巧-小问题1\" aria-hidden=\"true\">#</a> vue 小技巧&amp;小问题1</h2>\\n<h3 id=\"路由变化页面数据不刷新问题\"><a class=\"header-anchor\" href=\"#路由变化页面数据不刷新问题\" aria-hidden=\"true\">#</a> 路由变化页面数据不刷新问题</h3>\\n<blockquote>\\n<p>场景：比如文章详情数据，依赖路由的<code>params</code>参数获取的(ajax 写在 created 生命周期里面)，因为路由懒加载的关系，退出页面再进入另一个文章页面并不会运行 created 组件生命周期，导致文章数据还是上一个文章的数据。</p>\\n</blockquote>\\n<p><strong>解决方法：watch 监听路由是否变化</strong></p>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code>     watch<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\\n      <span class=\"token string\">\\'$route\\'</span> <span class=\"token punctuation\">(</span>to<span class=\"token punctuation\">,</span> <span class=\"token keyword\">from</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// 监听路由是否变化</span>\\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$route<span class=\"token punctuation\">.</span>params<span class=\"token punctuation\">.</span>articleId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token comment\">// 是否有文章id</span>\\n          <span class=\"token comment\">// 获取文章数据</span>\\n        <span class=\"token punctuation\">}</span>\\n      <span class=\"token punctuation\">}</span>\\n    <span class=\"token punctuation\">}</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<h3 id=\"settimeout-setinterval-无法用-this-访问-vue-实例\"><a class=\"header-anchor\" href=\"#settimeout-setinterval-无法用-this-访问-vue-实例\" aria-hidden=\"true\">#</a> setTimeout/setInterval 无法用 this 访问 VUe 实例</h3>\\n<p><strong>场景</strong>：</p>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code>      <span class=\"token function\">mounted</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\\n            <span class=\"token comment\">// this指向改变</span>\\n            <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// setInterval同理</span>\\n              console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 此时this指向Window对象</span>\\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\n        <span class=\"token punctuation\">}</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<p><strong>解决方法：使用箭头函数</strong></p>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code><span class=\"token comment\">// 箭头函数访问this实例</span>\\n<span class=\"token comment\">// 因为箭头函数本身没有绑定this 继承上一个不是箭头函数的函数的this</span>\\n<span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">500</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\n<span class=\"token comment\">// 使用变量保存this指向 通过变量访问this实例</span>\\n<span class=\"token keyword\">let</span> self <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\\n<span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 使用self变量访问this实例</span>\\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<h3 id=\"setinterval-路由跳转继续运行并没有销毁\"><a class=\"header-anchor\" href=\"#setinterval-路由跳转继续运行并没有销毁\" aria-hidden=\"true\">#</a> setInterval 路由跳转继续运行并没有销毁</h3>\\n<p><strong>场景</strong>：</p>\\n<p>比如一些弹幕，走马灯文字，这类需要定时调用的，<strong>路由跳转之后，因为组件已经销毁了，但是 setInterval 还没有销毁</strong>，还在继续后台调用，控制台会不断报错，如果运算量大的话，无法及时清除，会导致严重的页面卡顿。</p>\\n<p><strong>解决办法：在组件生命周期 beforeDestroy 停止 setInterval</strong></p>\\n<p>组件销毁前执行的钩子函数，跟其他生命周期钩子函数的用法相同。</p>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code><span class=\"token function\">beforeDestroy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\\n    <span class=\"token comment\">//我通常是把setInterval()定时器赋值给this实例，然后就可以像下面这么暂停。</span>\\n   <span class=\"token function\">clearInterval</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>intervalid<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<h3 id=\"vue-滚动行为-浏览器回退记忆位置-用法\"><a class=\"header-anchor\" href=\"#vue-滚动行为-浏览器回退记忆位置-用法\" aria-hidden=\"true\">#</a> vue 滚动行为(浏览器回退记忆位置)用法</h3>\\n<p>这个我当时做的时候以为很难，后来做好了才发现就是一个设置而已（前提是要开启路由的 History 模式），下面做一个简单的分享。</p>\\n<p><strong>路由设置</strong></p>\\n<ol>\\n<li>要使用这一功能，首先需要开启 vue-router 的 <a href=\"https://router.vuejs.org/zh-cn/essentials/history-mode.html\" target=\"_blank\" rel=\"noopener noreferrer\">history 模式<OutboundLink/></a></li>\\n</ol>\\n<p>如果之前一直使用的是<code>hash</code>模式(默认模式)，项目已经开发了一段时间，然后转 history 模式很可能会遇到：<a href=\"https://juejin.im/post/5a3f629cf265da430d5839ed\" target=\"_blank\" rel=\"noopener noreferrer\">这些问题<OutboundLink/></a></p>\\n<ol start=\"2\">\\n<li>滚动行为具体设置如下：</li>\\n</ol>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code>        <span class=\"token keyword\">const</span> router <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">VueRouter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\\n          mode<span class=\"token punctuation\">:</span> <span class=\"token string\">\\'history\\'</span><span class=\"token punctuation\">,</span>\\n        <span class=\"token function\">scrollBehavior</span> <span class=\"token punctuation\">(</span>to<span class=\"token punctuation\">,</span> <span class=\"token keyword\">from</span><span class=\"token punctuation\">,</span> savedPosition<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>savedPosition<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// 如果savedPosition存在，滚动条会自动跳到记录的值的地方</span>\\n              <span class=\"token keyword\">return</span> savedPosition\\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\\n              <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span> x<span class=\"token punctuation\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">:</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">}</span><span class=\"token comment\">// savedPosition也是一个记录x轴和y轴位置的对象</span>\\n             <span class=\"token punctuation\">}</span>\\n            <span class=\"token punctuation\">}</span>，\\n          routes<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span><span class=\"token punctuation\">]</span>\\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br><span class=\"line-number\">11</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<p><a href=\"https://router.vuejs.org/zh-cn/advanced/scroll-behavior.html\" target=\"_blank\" rel=\"noopener noreferrer\">vue 滚动行为文档<OutboundLink/></a>，可以进到这里看看更详细的信息。</p>\\n<h3 id=\"vue-路由拦截浏览器后退实现草稿保存类似需求\"><a class=\"header-anchor\" href=\"#vue-路由拦截浏览器后退实现草稿保存类似需求\" aria-hidden=\"true\">#</a> vue 路由拦截浏览器后退实现草稿保存类似需求</h3>\\n<p><strong>场景</strong>：</p>\\n<p>为了防止用户突然离开，没有保存已输入的信息。</p>\\n<p><strong>用法</strong>：</p>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code>    <span class=\"token comment\">//在路由组件中：</span>\\n    <span class=\"token function\">mounted</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\\n    <span class=\"token function\">beforeRouteLeave</span> <span class=\"token punctuation\">(</span>to<span class=\"token punctuation\">,</span> <span class=\"token keyword\">from</span><span class=\"token punctuation\">,</span> next<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n      <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>用户已经输入信息<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\\n        <span class=\"token comment\">// 出现弹窗提醒保存草稿，或者自动后台为其保存</span>\\n      <span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span>\\n        <span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 用户离开</span>\\n      <span class=\"token punctuation\">}</span>\\n    <span class=\"token punctuation\">}</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<p>类似的还有<code>beforeEach</code>、<code>beforeRouteUpdate</code>，也分为全局钩子和组件钩子，见<a href=\"https://router.vuejs.org/zh-cn/advanced/navigation-guards.html\" target=\"_blank\" rel=\"noopener noreferrer\">路由文档<OutboundLink/></a>。</p>\\n<h3 id=\"v-once-只渲染元素和组件一次，优化更新渲染性能\"><a class=\"header-anchor\" href=\"#v-once-只渲染元素和组件一次，优化更新渲染性能\" aria-hidden=\"true\">#</a> v-once 只渲染元素和组件一次，优化更新渲染性能</h3>\\n<p>觉得<a href=\"https://cn.vuejs.org/v2/api/#v-cloak\" target=\"_blank\" rel=\"noopener noreferrer\">v-once<OutboundLink/></a>这个 api 蛮 6 的，应该很多小伙伴都没有注意到这个 api。</p>\\n<p><strong>文档介绍</strong>：</p>\\n<p><img src=\"https://github.com/OBKoro1/articleImg_src/blob/master/juejin/160ffd6c2dcf70e1?raw=true\" alt=\"v-once文档介绍\"></p>\\n<p>这个 api 在我看来主要用于那些一次性渲染，并且不会再有操作更改这些渲染的值，这样就可以优化双向绑定的更新性能。</p>\\n<p><a href=\"https://cn.vuejs.org/v2/guide/components.html#%E5%AF%B9%E4%BD%8E%E5%BC%80%E9%94%80%E7%9A%84%E9%9D%99%E6%80%81%E7%BB%84%E4%BB%B6%E4%BD%BF%E7%94%A8-v-once\" target=\"_blank\" rel=\"noopener noreferrer\">文档<OutboundLink/></a>推荐：对低开销的静态组件使用 v-once</p>\\n<p>尽管在 Vue 中渲染 HTML 很快，不过当组件中包含大量静态内容时，可以考虑使用 v-once 将渲染结果缓存起来，就像这样：</p>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code>    Vue<span class=\"token punctuation\">.</span><span class=\"token function\">component</span><span class=\"token punctuation\">(</span><span class=\"token string\">\\'terms-of-service\\'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\\n      template<span class=\"token punctuation\">:</span> <span class=\"token string\">\\'\\\\\\n        &lt;div v-once>\\\\\\n          &lt;h1>Terms of Service&lt;/h1>\\\\\\n          ...很多静态内容...\\\\\\n        &lt;/div>\\\\\\n      \\'</span>\\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<h3 id=\"vue-风格指南推荐：\"><a class=\"header-anchor\" href=\"#vue-风格指南推荐：\" aria-hidden=\"true\">#</a> vue 风格指南推荐：</h3>\\n<p>vue 框架还有一个<a href=\"https://cn.vuejs.org/v2/style-guide/\" target=\"_blank\" rel=\"noopener noreferrer\">风格指南<OutboundLink/></a>推荐，如下图所示，大家也可以学习一波。</p>\\n<p><img src=\"https://github.com/OBKoro1/articleImg_src/blob/master/juejin/160fff0ec0147156?raw=true\" alt=\"vue风格指南\">\\n\\x3c!-- 特殊字符串：用于修改/删除markdown的结尾提示语-OBKoro1 --\\x3e</p>\\n<h3 id=\"点个star支持我一下\"><a class=\"header-anchor\" href=\"#点个star支持我一下\" aria-hidden=\"true\">#</a> 点个<a href=\"https://github.com/OBKoro1/codeBlack\" target=\"_blank\" rel=\"noopener noreferrer\">Star<OutboundLink/></a>支持我一下~</h3>\\n\\x3c!-- \\'特殊字符串：用于删除编译后的issue组件-OBKoro1 --\\x3e\\n'},{key:\"v-9543a3f8da732\",path:\"/codeBlack/%E4%BD%A0%E6%88%96%E8%AE%B8%E4%B8%8D%E7%9F%A5%E9%81%93Vue%E7%9A%84%E8%BF%99%E4%BA%9B%E5%B0%8F%E6%8A%80%E5%B7%A7.html\",lastUpdated:1564720698e3,title:\"vue 小技巧&小问题2\",headers:[{level:2,title:\"vue 小技巧&小问题2\",slug:\"vue-小技巧-小问题2\"},{level:3,title:\"文章内容总结:\",slug:\"文章内容总结\"},{level:3,title:\"组件style的scoped:\",slug:\"组件style的scoped\"},{level:3,title:\"Vue 数组/对象更新 视图不更新\",slug:\"vue-数组-对象更新-视图不更新\"},{level:3,title:\"vue filters 过滤器的使用:\",slug:\"vue-filters-过滤器的使用\"},{level:3,title:\"列表渲染相关\",slug:\"列表渲染相关\"},{level:3,title:\"深度watch与watch立即触发回调\",slug:\"深度watch与watch立即触发回调\"},{level:3,title:\"这些情况下不要使用箭头函数:\",slug:\"这些情况下不要使用箭头函数\"},{level:3,title:\"路由懒加载写法:\",slug:\"路由懒加载写法\"},{level:3,title:\"路由的项目启动页和404页面\",slug:\"路由的项目启动页和404页面\"},{level:3,title:\"Vue调试神器:vue-devtools\",slug:\"vue调试神器-vue-devtools\"},{level:3,title:\"前几个月也写过一篇类似的:\",slug:\"前几个月也写过一篇类似的\"},{level:2,title:\"结语\",slug:\"结语\"},{level:3,title:\"点个Star支持我一下~\",slug:\"点个star支持我一下\"}],excerpt:'<h2 id=\"vue-小技巧-小问题2\"><a class=\"header-anchor\" href=\"#vue-小技巧-小问题2\" aria-hidden=\"true\">#</a> vue 小技巧&amp;小问题2</h2>\\n<p>用Vue开发一个网页并不难，但是也经常会遇到一些问题，其实大部分的问题都在文档中有所提及，再不然我们通过谷歌也能成功搜索到问题的答案，为了帮助小伙伴们提前踩坑，在遇到问题的时候，心里大概有个谱知道该如何去解决问题。这篇文章是将自己知道的一些小技巧，结合查阅资料整理成的一篇文章。</p>\\n<h3 id=\"文章内容总结\"><a class=\"header-anchor\" href=\"#文章内容总结\" aria-hidden=\"true\">#</a> 文章内容总结:</h3>\\n<ol>\\n<li>组件style的scoped</li>\\n<li>Vue 数组/对象更新 视图不更新</li>\\n<li>vue filters 过滤器的使用</li>\\n<li>列表渲染相关</li>\\n<li>深度watch与watch立即触发回调</li>\\n<li>这些情况下不要使用箭头函数</li>\\n<li>路由懒加载写法</li>\\n<li>路由的项目启动页和404页面</li>\\n<li>Vue调试神器:vue-devtools</li>\\n</ol>\\n<hr>\\n<h3 id=\"组件style的scoped\"><a class=\"header-anchor\" href=\"#组件style的scoped\" aria-hidden=\"true\">#</a> 组件style的scoped:</h3>\\n<p>问题：在组件中用js动态创建的dom，添加样式不生效。</p>\\n<p><strong>场景</strong>:</p>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-html line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-html\"><code><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>template</span><span class=\"token punctuation\">></span></span>\\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>test<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>template</span><span class=\"token punctuation\">></span></span>\\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">></span></span><span class=\"token script language-javascript\">\\n    <span class=\"token keyword\">let</span> a<span class=\"token operator\">=</span>document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">\\'.test\\'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\n    <span class=\"token keyword\">let</span> newDom<span class=\"token operator\">=</span>document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"div\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 创建dom</span>\\n    newDom<span class=\"token punctuation\">.</span><span class=\"token function\">setAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"class\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"testAdd\"</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 添加样式</span>\\n    a<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>newDom<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 插入dom</span>\\n</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span>\\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>style</span> <span class=\"token attr-name\">scoped</span><span class=\"token punctuation\">></span></span><span class=\"token style language-css\">\\n<span class=\"token selector\">.test</span><span class=\"token punctuation\">{</span>\\n    <span class=\"token property\">background</span><span class=\"token punctuation\">:</span>blue<span class=\"token punctuation\">;</span>\\n    <span class=\"token property\">height</span><span class=\"token punctuation\">:</span>100px<span class=\"token punctuation\">;</span>\\n    <span class=\"token property\">width</span><span class=\"token punctuation\">:</span>100px<span class=\"token punctuation\">;</span>\\n<span class=\"token punctuation\">}</span>\\n<span class=\"token selector\">.testAdd</span><span class=\"token punctuation\">{</span>\\n    <span class=\"token property\">background</span><span class=\"token punctuation\">:</span>red<span class=\"token punctuation\">;</span>\\n    <span class=\"token property\">height</span><span class=\"token punctuation\">:</span>100px<span class=\"token punctuation\">;</span>\\n    <span class=\"token property\">width</span><span class=\"token punctuation\">:</span>100px<span class=\"token punctuation\">;</span>\\n<span class=\"token punctuation\">}</span>\\n</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>style</span><span class=\"token punctuation\">></span></span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br><span class=\"line-number\">11</span><br><span class=\"line-number\">12</span><br><span class=\"line-number\">13</span><br><span class=\"line-number\">14</span><br><span class=\"line-number\">15</span><br><span class=\"line-number\">16</span><br><span class=\"line-number\">17</span><br><span class=\"line-number\">18</span><br><span class=\"line-number\">19</span><br><span class=\"line-number\">20</span><br><span class=\"line-number\">21</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<p><strong>结果</strong>：</p>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-css line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-css\"><code><span class=\"token selector\">// test生效   testAdd 不生效\\n&lt;div data-v-1b971ada class=\"test\">&lt;div class=\"testAdd\">&lt;/div>&lt;/div>\\n\\n.test[data-v-1b971ada]</span><span class=\"token punctuation\">{</span> // 注意data-v-1b971ada\\n    <span class=\"token property\">background</span><span class=\"token punctuation\">:</span>blue<span class=\"token punctuation\">;</span>\\n    <span class=\"token property\">height</span><span class=\"token punctuation\">:</span>100px<span class=\"token punctuation\">;</span>\\n    <span class=\"token property\">width</span><span class=\"token punctuation\">:</span>100px<span class=\"token punctuation\">;</span>\\n<span class=\"token punctuation\">}</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<p><strong>原因</strong>:</p>\\n<p>当 <code>&lt;style&gt;</code> 标签有 <a href=\"https://vue-loader-v14.vuejs.org/zh-cn/features/scoped-css.html\" target=\"_blank\" rel=\"noopener noreferrer\">scoped<OutboundLink/></a> 属性时，它的 CSS 只作用于当前组件中的元素。</p>\\n<p>它会<strong>为组件中所有的标签和class样式添加一个<code>scoped</code>标识</strong>，就像上面结果中的<code>data-v-1b971ada</code>。</p>\\n<p>所以原因就很清楚了：因为动态添加的dom没有<code>scoped</code>添加的标识，<strong>没有跟<code>testAdd</code>的样式匹配起来</strong>，导致样式失效。</p>\\n<p><strong>解决方式</strong></p>\\n<ul>\\n<li>推荐：去掉该组件的scoped</li>\\n</ul>\\n<p>每个组件的css并不会很多，当设计到动态添加dom，并为dom添加样式的时候，就可以去掉scoped，会比下面的方法方便很多。</p>\\n<ul>\\n<li>可以动态添加style</li>\\n</ul>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code><span class=\"token comment\">// 上面的栗子可以这样添加样式</span>\\nnewDom<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>height<span class=\"token operator\">=</span><span class=\"token string\">\\'100px\\'</span><span class=\"token punctuation\">;</span>\\nnewDom<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>width<span class=\"token operator\">=</span><span class=\"token string\">\\'100px\\'</span><span class=\"token punctuation\">;</span>\\nnewDom<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>background<span class=\"token operator\">=</span><span class=\"token string\">\\'red\\'</span><span class=\"token punctuation\">;</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<hr>\\n<h3 id=\"vue-数组-对象更新-视图不更新\"><a class=\"header-anchor\" href=\"#vue-数组-对象更新-视图不更新\" aria-hidden=\"true\">#</a> Vue 数组/对象更新 视图不更新</h3>\\n<p>很多时候，我们习惯于这样操作数组和对象:</p>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code><span class=\"token function\">data</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// data数据</span>\\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\\n        arr<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\\n        obj<span class=\"token punctuation\">:</span><span class=\"token punctuation\">{</span>\\n            a<span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\\n            b<span class=\"token punctuation\">:</span> <span class=\"token number\">2</span>\\n        <span class=\"token punctuation\">}</span>\\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\\n<span class=\"token comment\">// 数据更新 数组视图不更新</span>\\n<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>arr<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\\'OBKoro1\\'</span><span class=\"token punctuation\">;</span>\\n<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>arr<span class=\"token punctuation\">.</span>length <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// [\\'OBKoro1\\'];</span>\\n<span class=\"token comment\">// 数据更新 对象视图不更新</span>\\n<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>obj<span class=\"token punctuation\">.</span>c <span class=\"token operator\">=</span> <span class=\"token string\">\\'OBKoro1\\'</span><span class=\"token punctuation\">;</span>\\n<span class=\"token keyword\">delete</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>obj<span class=\"token punctuation\">.</span>a<span class=\"token punctuation\">;</span>\\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// {b:2,c:\\'OBKoro1\\'}</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br><span class=\"line-number\">11</span><br><span class=\"line-number\">12</span><br><span class=\"line-number\">13</span><br><span class=\"line-number\">14</span><br><span class=\"line-number\">15</span><br><span class=\"line-number\">16</span><br><span class=\"line-number\">17</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<p>由于js的限制，Vue 不能检测以上数组的变动，以及对象的添加/删除，很多人会因为像上面这样操作，出现视图没有更新的问题。</p>\\n<p><strong>解决方式:</strong></p>\\n<ol>\\n<li><strong>this.$set(你要改变的数组/对象，你要改变的位置/key，你要改成什么value)</strong></li>\\n</ol>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$<span class=\"token keyword\">set</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>arr<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"OBKoro1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 改变数组</span>\\n<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$<span class=\"token keyword\">set</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>obj<span class=\"token punctuation\">,</span> <span class=\"token string\">\"c\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"OBKoro1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 改变对象</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<p>如果还是不懂的话，可以看看这个codepen<a href=\"https://codepen.io/OBKoro1/pen/oyjdbZ\" target=\"_blank\" rel=\"noopener noreferrer\">demo<OutboundLink/></a>。</p>\\n<ol start=\"2\">\\n<li><strong>数组原生方法触发视图更新</strong>:</li>\\n</ol>\\n<p>Vue可以监测到数组变化的，<strong>数组原生方法</strong>:</p>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code><span class=\"token function\">splice</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>、 <span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token function\">、pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token function\">、shift</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token function\">、unshift</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token function\">、sort</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token function\">、reverse</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<p>意思是<strong>使用这些方法不用我们再进行额外的操作，视图自动进行更新</strong>。</p>\\n<p>推荐使用<code>splice</code>方法会比较好自定义,因为slice可以在数组的任何位置进行删除/添加操作，这部分可以看看我前几天写的一篇文章:<a href=\"https://juejin.im/post/5b0903b26fb9a07a9d70c7e0?utm_source=gold_browser_extension#heading-7\" target=\"_blank\" rel=\"noopener noreferrer\">【干货】js 数组详细操作方法及解析合集<OutboundLink/></a></p>\\n<ol start=\"3\">\\n<li><strong>替换数组/对象</strong></li>\\n</ol>\\n<p>比方说:你想遍历这个数组/对象，对每个元素进行处理，然后触发视图更新。</p>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code><span class=\"token comment\">// 文档中的栗子: filter遍历数组，返回一个新数组，用新数组替换旧数组</span>\\nexample1<span class=\"token punctuation\">.</span>items <span class=\"token operator\">=</span> example1<span class=\"token punctuation\">.</span>items<span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n    <span class=\"token keyword\">return</span> item<span class=\"token punctuation\">.</span>message<span class=\"token punctuation\">.</span><span class=\"token function\">match</span><span class=\"token punctuation\">(</span><span class=\"token regex\">/Foo/</span><span class=\"token punctuation\">)</span>\\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<p><strong>举一反三</strong>：可以先把这个数组/对象保存在一个变量中，然后对这个变量进行遍历，等遍历结束后再用<strong>变量替换对象/数组</strong>。</p>\\n<p><strong>并不会重新渲染整个列表</strong>:</p>\\n<p>Vue 为了使得 DOM 元素得到最大范围的重用而实现了一些智能的、启发式的方法，所以用一个含有相同元素的数组去替换原来的数组是非常高效的操作。</p>\\n<p>如果你还是很困惑，可以看看<a href=\"https://cn.vuejs.org/v2/guide/list.html#%E6%95%B0%E7%BB%84%E6%9B%B4%E6%96%B0%E6%A3%80%E6%B5%8B\" target=\"_blank\" rel=\"noopener noreferrer\">Vue文档<OutboundLink/></a>中关于这部分的解释。</p>\\n<hr>\\n<h3 id=\"vue-filters-过滤器的使用\"><a class=\"header-anchor\" href=\"#vue-filters-过滤器的使用\" aria-hidden=\"true\">#</a> vue filters 过滤器的使用:</h3>\\n<p>过滤器，通常用于后台管理系统，或者一些约定类型，过滤。Vue过滤器用法是很简单，但是很多朋友可能都没有用过，这里稍微讲解一下。</p>\\n<p><strong>在html模板中的两种用法</strong>：</p>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-html line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-html\"><code><span class=\"token comment\">&lt;!-- 在双花括号中 --\\x3e</span>\\n{{ message | filterTest }}\\n<span class=\"token comment\">&lt;!-- 在 `v-bind` 中 --\\x3e</span>\\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">:id</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>message | filterTest<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<p><strong>在组件<code>script</code>中的用法</strong>:</p>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">{</span>    \\n        <span class=\"token function\">data</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\\n            message<span class=\"token punctuation\">:</span><span class=\"token number\">1</span>   \\n        <span class=\"token punctuation\">}</span>\\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\\n    filters<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>  \\n        <span class=\"token function\">filterTest</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n            <span class=\"token comment\">// value在这里是message的值</span>\\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>value<span class=\"token operator\">===</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\\n                <span class=\"token keyword\">return</span> <span class=\"token string\">\\'最后输出这个值\\'</span><span class=\"token punctuation\">;</span>\\n            <span class=\"token punctuation\">}</span>\\n        <span class=\"token punctuation\">}</span>\\n    <span class=\"token punctuation\">}</span>\\n<span class=\"token punctuation\">}</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br><span class=\"line-number\">11</span><br><span class=\"line-number\">12</span><br><span class=\"line-number\">13</span><br><span class=\"line-number\">14</span><br><span class=\"line-number\">15</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<p>用法就是上面讲的这样，可以自己在组件中试一试就知道了，很简单很好用的。</p>\\n<p>如果不想自己试，可以点这个<a href=\"https://codepen.io/OBKoro1/pen/rKxBMw\" target=\"_blank\" rel=\"noopener noreferrer\">demo<OutboundLink/></a>里面修改代码就可以了，demo中包括<strong>过滤器串联</strong>、<strong>过滤器传参</strong>。</p>\\n<p>推荐看Vue<a href=\"https://cn.vuejs.org/v2/guide/filters.html\" target=\"_blank\" rel=\"noopener noreferrer\">过滤器<OutboundLink/></a>文档，你会更了解它的。</p>\\n<hr>\\n<h3 id=\"列表渲染相关\"><a class=\"header-anchor\" href=\"#列表渲染相关\" aria-hidden=\"true\">#</a> 列表渲染相关</h3>\\n<p><strong>v-for循环绑定model:</strong></p>\\n<p>input在v-for中可以像如下这么进行绑定，我敢打赌很多人不知道。</p>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code><span class=\"token comment\">// 数据    </span>\\n<span class=\"token function\">data</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n    <span class=\"token keyword\">return</span><span class=\"token punctuation\">{</span>\\n        obj<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\\n            ob<span class=\"token punctuation\">:</span> <span class=\"token string\">\"OB\"</span><span class=\"token punctuation\">,</span>\\n            koro1<span class=\"token punctuation\">:</span> <span class=\"token string\">\"Koro1\"</span>\\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\\n        model<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\\n            ob<span class=\"token punctuation\">:</span> <span class=\"token string\">\"默认ob\"</span><span class=\"token punctuation\">,</span>\\n            koro1<span class=\"token punctuation\">:</span> <span class=\"token string\">\"默认koro1\"</span>\\n        <span class=\"token punctuation\">}</span>   \\n    <span class=\"token punctuation\">}</span>\\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\\n<span class=\"token comment\">// html模板</span>\\n<span class=\"token operator\">&lt;</span>div v<span class=\"token operator\">-</span><span class=\"token keyword\">for</span><span class=\"token operator\">=</span><span class=\"token string\">\"(value,key) in obj\"</span><span class=\"token operator\">></span>\\n    <span class=\"token operator\">&lt;</span>input type<span class=\"token operator\">=</span><span class=\"token string\">\"text\"</span> v<span class=\"token operator\">-</span>model<span class=\"token operator\">=</span><span class=\"token string\">\"model[key]\"</span><span class=\"token operator\">></span>\\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\\n<span class=\"token comment\">// input就跟数据绑定在一起了，那两个默认数据也会在input中显示</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br><span class=\"line-number\">11</span><br><span class=\"line-number\">12</span><br><span class=\"line-number\">13</span><br><span class=\"line-number\">14</span><br><span class=\"line-number\">15</span><br><span class=\"line-number\">16</span><br><span class=\"line-number\">17</span><br><span class=\"line-number\">18</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<p>为此，我做了个<a href=\"https://codepen.io/OBKoro1/pen/gKPOgw\" target=\"_blank\" rel=\"noopener noreferrer\">demo<OutboundLink/></a>,你可以点进去试试。</p>\\n<p><strong>一段取值的v-for</strong></p>\\n<p>如果我们有一段重复的html模板要渲染，又没有数据关联，我们可以:</p>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-html line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-html\"><code><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">v-for</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>n in 5<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span><span class=\"token punctuation\">></span></span>这里会被渲染5次，渲染模板{{n}}<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">></span></span>\\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<p><strong>v-if尽量不要与v-for在同一节点使用</strong>:</p>\\n<p>v-for 的优先级比 v-if 更高,如果它们处于同一节点的话，那么每一个循环都会运行一遍v-if。</p>\\n<p>如果你想根据循环中的<strong>每一项的数据来判断是否渲染，那么你这样做是对的</strong>:</p>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-html line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-html\"><code><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span> <span class=\"token attr-name\">v-for</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>todo in todos<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">v-if</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>todo.type===1<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\\n    {{ todo }}\\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<p>如果你想要根据<strong>某些条件跳过循环，而又跟将要渲染的每一项数据没有关系的话，你可以将v-if放在v-for的父节点</strong>：</p>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-html line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-html\"><code>// 根据elseData是否为true 来判断是否渲染，跟每个元素没有关系    \\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ul</span> <span class=\"token attr-name\">v-if</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>elseData<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span> <span class=\"token attr-name\">v-for</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>todo in todos<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\\n    {{ todo }}\\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span>\\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ul</span><span class=\"token punctuation\">></span></span>\\n// 数组是否有数据 跟每个元素没有关系\\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ul</span> <span class=\"token attr-name\">v-if</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>todos.length<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span> <span class=\"token attr-name\">v-for</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>todo in todos<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\\n    {{ todo }}\\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span>\\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ul</span><span class=\"token punctuation\">></span></span>\\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span> <span class=\"token attr-name\">v-else</span><span class=\"token punctuation\">></span></span>No todos left!<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br><span class=\"line-number\">11</span><br><span class=\"line-number\">12</span><br><span class=\"line-number\">13</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<p>如上，正确使用v-for与v-if优先级的关系，可以为你节省大量的性能。</p>\\n<hr>\\n<h3 id=\"深度watch与watch立即触发回调\"><a class=\"header-anchor\" href=\"#深度watch与watch立即触发回调\" aria-hidden=\"true\">#</a> 深度watch与watch立即触发回调</h3>\\n<p>watch很多人都在用，但是这watch中的这两个选项<code>deep</code>、<code>immediate</code>，或许不是很多人都知道，我猜。</p>\\n<p><strong>选项：deep</strong></p>\\n<p>在选项参数中指定 <code>deep: true</code>，可以监听对象中属性的变化。</p>\\n<p><strong>选项：immediate</strong></p>\\n<p>在选项参数中指定 immediate: true, 将立即以表达式的当前值触发回调，也就是立即触发一次。</p>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code>watch<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\\n    obj<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\\n        <span class=\"token function\">handler</span><span class=\"token punctuation\">(</span>val<span class=\"token punctuation\">,</span> oldVal<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\\'属性发生变化触发这个回调\\'</span><span class=\"token punctuation\">,</span>val<span class=\"token punctuation\">,</span> oldVal<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\\n        deep<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span> <span class=\"token comment\">// 监听这个对象中的每一个属性变化</span>\\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\\n    step<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// 属性</span>\\n        <span class=\"token comment\">//watch</span>\\n        <span class=\"token function\">handler</span><span class=\"token punctuation\">(</span>val<span class=\"token punctuation\">,</span> oldVal<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"默认立即触发一次\"</span><span class=\"token punctuation\">,</span> val<span class=\"token punctuation\">,</span> oldVal<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\\n        immediate<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span> <span class=\"token comment\">// 默认立即触发一次</span>\\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br><span class=\"line-number\">11</span><br><span class=\"line-number\">12</span><br><span class=\"line-number\">13</span><br><span class=\"line-number\">14</span><br><span class=\"line-number\">15</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<p>这两个选项可以同时使用，另外：是的，又有一个<a href=\"https://codepen.io/OBKoro1/pen/QxyWMa\" target=\"_blank\" rel=\"noopener noreferrer\">demo<OutboundLink/></a>。</p>\\n<p>还有下面这一点需要注意。</p>\\n<hr>\\n<h3 id=\"这些情况下不要使用箭头函数\"><a class=\"header-anchor\" href=\"#这些情况下不要使用箭头函数\" aria-hidden=\"true\">#</a> 这些情况下不要使用箭头函数:</h3>\\n<ul>\\n<li>不应该使用箭头函数来定义一个生命周期方法</li>\\n<li>不应该使用箭头函数来定义 method 函数</li>\\n<li>不应该使用箭头函数来定义计算属性函数</li>\\n<li>不应该对 data 属性使用箭头函数</li>\\n<li>不应该使用箭头函数来定义 watcher 函数</li>\\n</ul>\\n<p>示例：</p>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code><span class=\"token comment\">// 上面watch的栗子：</span>\\nhandler<span class=\"token punctuation\">:</span><span class=\"token punctuation\">(</span>val<span class=\"token punctuation\">,</span> oldVal<span class=\"token punctuation\">)</span><span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// 可以执行</span>\\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"默认触发一次\"</span><span class=\"token punctuation\">,</span> val<span class=\"token punctuation\">,</span> oldVal<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\\n<span class=\"token comment\">// method：</span>\\nmethods<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\\n    plus<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// 可以执行</span>\\n        <span class=\"token comment\">// do something</span>\\n    <span class=\"token punctuation\">}</span>\\n<span class=\"token punctuation\">}</span>\\n<span class=\"token comment\">// 生命周期:</span>\\ncreated<span class=\"token punctuation\">:</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">{</span> <span class=\"token comment\">// 可以执行</span>\\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\\'lala\\'</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>obj<span class=\"token punctuation\">)</span> \\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br><span class=\"line-number\">11</span><br><span class=\"line-number\">12</span><br><span class=\"line-number\">13</span><br><span class=\"line-number\">14</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<p>是的，没错，这些都能执行。</p>\\n<p><strong>but</strong>:</p>\\n<p>箭头函数绑定了父级作用域的上下文，<strong>this 将不会按照期望指向 Vue 实例</strong>。</p>\\n<p>也就是说，你<strong>不能使用this来访问你组件中的data数据以及method方法了</strong>。</p>\\n<p>this将会指向undefined。</p>\\n<hr>\\n<h3 id=\"路由懒加载写法\"><a class=\"header-anchor\" href=\"#路由懒加载写法\" aria-hidden=\"true\">#</a> 路由懒加载写法:</h3>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code><span class=\"token comment\">// 我所采用的方法，个人感觉比较简洁一些，少了一步引入赋值。</span>\\n<span class=\"token keyword\">const</span> router <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">VueRouter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\\n    routes<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>\\n    path<span class=\"token punctuation\">:</span> <span class=\"token string\">\\'/app\\'</span><span class=\"token punctuation\">,</span>\\n    component<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">import</span><span class=\"token punctuation\">(</span><span class=\"token string\">\\'./app\\'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>  <span class=\"token comment\">// 引入组件</span>\\n    <span class=\"token punctuation\">]</span>\\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\\n<span class=\"token comment\">// Vue路由文档的写法:</span>\\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">app</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">import</span><span class=\"token punctuation\">(</span><span class=\"token string\">\\'./app.vue\\'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 引入组件</span>\\n<span class=\"token keyword\">const</span> router <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">VueRouter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\\n    routes<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>\\n    <span class=\"token punctuation\">{</span> path<span class=\"token punctuation\">:</span> <span class=\"token string\">\\'/app\\'</span><span class=\"token punctuation\">,</span> component<span class=\"token punctuation\">:</span> app <span class=\"token punctuation\">}</span>\\n    <span class=\"token punctuation\">]</span>\\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br><span class=\"line-number\">11</span><br><span class=\"line-number\">12</span><br><span class=\"line-number\">13</span><br><span class=\"line-number\">14</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<p>文档的写法在于问题在于：如果我们的路由比较多的话，是不是要在路由上方引入赋值十几行组件？</p>\\n<p>第一种跟第二种方法相比就是把引入赋值的一步，直接写在<code>component</code>上面，本质上是一样的。两种方式都可以的，大家自由选择哈。</p>\\n<hr>\\n<h3 id=\"路由的项目启动页和404页面\"><a class=\"header-anchor\" href=\"#路由的项目启动页和404页面\" aria-hidden=\"true\">#</a> 路由的项目启动页和404页面</h3>\\n<p>实际上这也就是一个设置而已:</p>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Router</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\\n    routes<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>\\n    <span class=\"token punctuation\">{</span>\\n        path<span class=\"token punctuation\">:</span> <span class=\"token string\">\\'/\\'</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 项目启动页</span>\\n        redirect<span class=\"token punctuation\">:</span><span class=\"token string\">\\'/login\\'</span>  <span class=\"token comment\">// 重定向到下方声明的路由 </span>\\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\\n    <span class=\"token punctuation\">{</span>\\n        path<span class=\"token punctuation\">:</span> <span class=\"token string\">\\'*\\'</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 404 页面 </span>\\n        component<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">import</span><span class=\"token punctuation\">(</span><span class=\"token string\">\\'./notFind\\'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 或者使用component也可以的</span>\\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\\n    <span class=\"token punctuation\">]</span>\\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br><span class=\"line-number\">11</span><br><span class=\"line-number\">12</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<p>比如你的域名为:<code>www.baidu.com</code></p>\\n<p>项目启动页指的是: 当你进入<code>www.baidu.com</code>，会自动跳转到login登录页。</p>\\n<p>404页面指的是: 当进入一个没有 声明/没有匹配 的路由页面时就会跳转到404页面。</p>\\n<p>比如进入<code>www.baidu.com/testRouter</code>,就会自动跳转到<code>notFind</code>页面。</p>\\n<p>当你没有声明一个404页面，进入<code>www.baidu.com/testRouter</code>，显示的页面是一片空白。</p>\\n<hr>\\n<h3 id=\"vue调试神器-vue-devtools\"><a class=\"header-anchor\" href=\"#vue调试神器-vue-devtools\" aria-hidden=\"true\">#</a> Vue调试神器:vue-devtools</h3>\\n<p>每次调试的时候，写一堆<code>console</code>是否很烦？想要<strong>更快知道组件/Vuex内数据的变化</strong>？</p>\\n<p>那么这款<strong>尤大开发</strong>的调试神器:vue-devtools，你真的要了解一下了。</p>\\n<p>这波稳赚不赔，真的能提高开发效率。</p>\\n<p><strong>安装方法</strong>：</p>\\n<ul>\\n<li>谷歌商店+科学上网,搜索vue-devtools即可安装。</li>\\n<li>不会科学上网？<a href=\"https://segmentfault.com/a/1190000009682735\" target=\"_blank\" rel=\"noopener noreferrer\">手动安装<OutboundLink/></a></li>\\n</ul>\\n<p><strong>安装之后</strong>：</p>\\n<p>在chrome开发者工具中会看一个vue的一栏，如下对我们网页应用内数据变化，组件层级等信息能够有更准确快速的了解。</p>\\n<p><img src=\"https://github.com/OBKoro1/articleImg_src/blob/master/juejin/163c50e5198f6b8c?raw=true\" alt=\"\"></p>\\n<hr>\\n<h3 id=\"前几个月也写过一篇类似的\"><a class=\"header-anchor\" href=\"#前几个月也写过一篇类似的\" aria-hidden=\"true\">#</a> 前几个月也写过一篇类似的:</h3>\\n<p><a href=\"https://juejin.im/post/5a587b46f265da3e3b7a7677\" target=\"_blank\" rel=\"noopener noreferrer\">Vue 实践过程中的几个问题<OutboundLink/></a></p>\\n<hr>\\n<h2 id=\"结语\"><a class=\"header-anchor\" href=\"#结语\" aria-hidden=\"true\">#</a> 结语</h2>\\n<p>本文的内容很多都在Vue文档里面有过说明，推荐大家可以多看看Vue文档，不止看教程篇，还有文档的Api什么的，也都可以看。然后其实还有两三点想写的，因为预计篇幅都会比较长一点，所以准备留到以后的文章里面吧~\\n\\x3c!-- 特殊字符串：用于修改/删除markdown的结尾提示语-OBKoro1 --\\x3e</p>\\n<h3 id=\"点个star支持我一下\"><a class=\"header-anchor\" href=\"#点个star支持我一下\" aria-hidden=\"true\">#</a> 点个<a href=\"https://github.com/OBKoro1/codeBlack\" target=\"_blank\" rel=\"noopener noreferrer\">Star<OutboundLink/></a>支持我一下~</h3>\\n\\x3c!-- \\'特殊字符串：用于删除编译后的issue组件-OBKoro1 --\\x3e\\n'},{key:\"v-91c1585a7b00c\",path:\"/codeBlack/%E5%88%A4%E6%96%AD%E7%94%A8%E6%88%B7%E6%B5%8F%E8%A7%88%E5%99%A8.html\",lastUpdated:1564720698e3,title:\"判断用户浏览器\",headers:[{level:3,title:\"navigator.userAgent\",slug:\"navigator-useragent\"},{level:3,title:\"判断方式：\",slug:\"判断方式：\"},{level:3,title:\"示例:判断QQ和微信内置浏览器\",slug:\"示例-判断qq和微信内置浏览器\"},{level:3,title:\"点个Star支持我一下~\",slug:\"点个star支持我一下\"}],excerpt:'<h1 id=\"判断用户浏览器\"><a class=\"header-anchor\" href=\"#判断用户浏览器\" aria-hidden=\"true\">#</a> 判断用户浏览器</h1>\\n<h3 id=\"navigator-useragent\"><a class=\"header-anchor\" href=\"#navigator-useragent\" aria-hidden=\"true\">#</a> navigator.userAgent</h3>\\n<p>判断用户所使用的浏览器主要用到的 api 是<a href=\"http://www.w3school.com.cn/htmldom/prop_nav_useragent.asp\" target=\"_blank\" rel=\"noopener noreferrer\">navigator.userAgent<OutboundLink/></a>，这是一个只读的字符串，声明了浏览器用于 HTTP 请求的用户代理头的值，<strong>不同浏览器的<code>userAgent</code>值都不相同，所以我们可以根据这个字符串来判断用户是从哪个浏览器进入</strong>。</p>\\n<h3 id=\"判断方式：\"><a class=\"header-anchor\" href=\"#判断方式：\" aria-hidden=\"true\">#</a> 判断方式：</h3>\\n<p>下面两个是刚做的 demo 获取的值，仔细观察下面两个字符串，会发现有些值是不一样的，并且浏览器特有的，依据这个我们就可以作为不同浏览器的判断条件。</p>\\n<h4 id=\"qq-内置浏览器的-useragent-值：\"><a class=\"header-anchor\" href=\"#qq-内置浏览器的-useragent-值：\" aria-hidden=\"true\">#</a> QQ 内置浏览器的 userAgent 值：</h4>\\n<p>mozilla/5.0 (iphone; cpu iphone os 11_1_2 like mac os x) applewebkit/604.3.5 (khtml, like gecko) mobile/15b202 qq/7.5.8.422 v1_iph_sq_7.5.8_1_app_a pixel/1080 core/uiwebview device/apple(iphone 8plus) nettype/wifi qbwebviewtype/1</p>\\n<h4 id=\"微信内置浏览器的-useragent-值：\"><a class=\"header-anchor\" href=\"#微信内置浏览器的-useragent-值：\" aria-hidden=\"true\">#</a> 微信内置浏览器的 userAgent 值：</h4>\\n<p>mozilla/5.0 (iphone; cpu iphone os 11_1_2 like mac os x) applewebkit/604.3.5 (khtml, like gecko) mobile/15b202 micromessenger/6.6.6 nettype/wifi language/zh_cn</p>\\n<h3 id=\"示例-判断qq和微信内置浏览器\"><a class=\"header-anchor\" href=\"#示例-判断qq和微信内置浏览器\" aria-hidden=\"true\">#</a> 示例:判断QQ和微信内置浏览器</h3>\\n<p>使用方式，直接使用这个 api 读取值，然后<strong>根据事先观察<code>userAgent</code>字符串的不同之处</strong>来判断：</p>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code><span class=\"token keyword\">let</span> url <span class=\"token operator\">=</span> navigator<span class=\"token punctuation\">.</span>userAgent<span class=\"token punctuation\">.</span><span class=\"token function\">toLowerCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\n<span class=\"token comment\">//使用toLowerCase将字符串全部转为小写 方便我们判断使用</span>\\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\\'15b202 qq\\'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n  <span class=\"token comment\">//单独判断QQ内置浏览器</span>\\n  <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">\\'QQ APP 内置浏览器，做你想做的操作\\'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\n<span class=\"token punctuation\">}</span>\\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\\'micromessenger\\'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n  <span class=\"token comment\">//单独判断微信内置浏览器</span>\\n  <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">\\'微信内置浏览器，做你想做的操作\\'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\n<span class=\"token punctuation\">}</span>\\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\\'15b202\\'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n  <span class=\"token comment\">//判断微信内置浏览器，QQ内置浏览器</span>\\n  <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">\\'QQ和微信内置浏览器，做你想做的操作\\'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\n<span class=\"token punctuation\">}</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br><span class=\"line-number\">11</span><br><span class=\"line-number\">12</span><br><span class=\"line-number\">13</span><br><span class=\"line-number\">14</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<p>上面判断了微信和 QQ 的内置浏览器，如果有更多不同的需求的话，可以按照上面的方式，先获取<code>userAgent</code>的字符串，然后再根据观察，使用<code>indexOf</code>判断是否含有指定的字符，来对不同浏览器进行不同的操作。</p>\\n<p>以上2018.5.5\\n\\x3c!-- 特殊字符串：用于修改/删除markdown的结尾提示语-OBKoro1 --\\x3e</p>\\n<h3 id=\"点个star支持我一下\"><a class=\"header-anchor\" href=\"#点个star支持我一下\" aria-hidden=\"true\">#</a> 点个<a href=\"https://github.com/OBKoro1/codeBlack\" target=\"_blank\" rel=\"noopener noreferrer\">Star<OutboundLink/></a>支持我一下~</h3>\\n\\x3c!-- \\'特殊字符串：用于删除编译后的issue组件-OBKoro1 --\\x3e\\n'},{key:\"v-6ef25ad4e1462\",path:\"/codeBlack/%E5%88%B7%E6%96%B0%E4%BF%9D%E5%AD%98%E8%AF%B7%E6%B1%82.html\",lastUpdated:1571895536e3,title:\"跳转/刷新保存请求/console\",headers:[{level:2,title:\"跳转/刷新保存请求/console\",slug:\"跳转-刷新保存请求-console\"},{level:3,title:\"页面跳转/刷新太快了，看不到保存的数据\",slug:\"页面跳转-刷新太快了，看不到保存的数据\"},{level:3,title:\"这是一个设置\",slug:\"这是一个设置\"},{level:3,title:\"点个Star支持我一下~\",slug:\"点个star支持我一下\"}],excerpt:'<h2 id=\"跳转-刷新保存请求-console\"><a class=\"header-anchor\" href=\"#跳转-刷新保存请求-console\" aria-hidden=\"true\">#</a> 跳转/刷新保存请求/console</h2>\\n<h3 id=\"页面跳转-刷新太快了，看不到保存的数据\"><a class=\"header-anchor\" href=\"#页面跳转-刷新太快了，看不到保存的数据\" aria-hidden=\"true\">#</a> 页面跳转/刷新太快了，看不到保存的数据</h3>\\n<p>有时候我们在页面跳转之前会发送一些请求，打印一些数据，但是因为页面跳转的太快了，导致还未看清发生了什么就已经离开了该页面。</p>\\n<h3 id=\"这是一个设置\"><a class=\"header-anchor\" href=\"#这是一个设置\" aria-hidden=\"true\">#</a> 这是一个设置</h3>\\n<p>打开控制台，console和network有一个设置：<code>Preseve log</code>，把对应的设置勾上就可以保存对应的数据了。</p>\\n<p>查看数据和设置都在控制台上,使用起来非常方便，而不用切换到编辑器中去修改代码打<code>debugger</code>, 不使用了还要去掉。\\n\\x3c!-- 特殊字符串：用于修改/删除markdown的结尾提示语-OBKoro1 --\\x3e</p>\\n<h3 id=\"点个star支持我一下\"><a class=\"header-anchor\" href=\"#点个star支持我一下\" aria-hidden=\"true\">#</a> 点个<a href=\"https://github.com/OBKoro1/codeBlack\" target=\"_blank\" rel=\"noopener noreferrer\">Star<OutboundLink/></a>支持我一下~</h3>\\n\\x3c!-- \\'特殊字符串：用于删除编译后的issue组件-OBKoro1 --\\x3e\\n'},{key:\"v-fe24d6022f561\",path:\"/codeBlack/%E5%8D%95%E8%A1%8C%E5%A4%9A%E8%A1%8C%E6%96%87%E6%9C%AC%E6%BA%A2%E5%87%BA.html\",lastUpdated:1564720698e3,title:\"单行、多行文本溢出\",headers:[{level:2,title:\"单行、多行文本溢出\",slug:\"单行、多行文本溢出\"},{level:3,title:\"codepen\",slug:\"codepen\"},{level:3,title:\"代码\",slug:\"代码\"},{level:3,title:\"点个Star支持我一下~\",slug:\"点个star支持我一下\"}],excerpt:'<h2 id=\"单行、多行文本溢出\"><a class=\"header-anchor\" href=\"#单行、多行文本溢出\" aria-hidden=\"true\">#</a> 单行、多行文本溢出</h2>\\n<p>老早之前的技能了，整理笔记发现的，不知道的可以看下：</p>\\n<h3 id=\"codepen\"><a class=\"header-anchor\" href=\"#codepen\" aria-hidden=\"true\">#</a> <a href=\"https://codepen.io/OBKoro1/pen/aPBBvM\" target=\"_blank\" rel=\"noopener noreferrer\">codepen<OutboundLink/></a></h3>\\n<h3 id=\"代码\"><a class=\"header-anchor\" href=\"#代码\" aria-hidden=\"true\">#</a> 代码</h3>\\n<p><strong>html:</strong></p>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-html line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-html\"><code><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>one<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>单行文本溢出显示省略号<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span>\\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>moreLine<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>多行文本溢出显示省略号 啦啦啦啦啦啦 哈哈哈哈<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<p><strong>css:</strong></p>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-css line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-css\"><code><span class=\"token selector\">.one</span><span class=\"token punctuation\">{</span>\\n  <span class=\"token property\">width</span><span class=\"token punctuation\">:</span>100px<span class=\"token punctuation\">;</span> <span class=\"token comment\">/* 记住要限定宽度 */</span>\\n  <span class=\"token property\">overflow</span><span class=\"token punctuation\">:</span> hidden<span class=\"token punctuation\">;</span>\\n  <span class=\"token property\">text-overflow</span><span class=\"token punctuation\">:</span> ellipsis<span class=\"token punctuation\">;</span>\\n  <span class=\"token property\">white-space</span><span class=\"token punctuation\">:</span> nowrap<span class=\"token punctuation\">;</span>\\n<span class=\"token punctuation\">}</span>\\n<span class=\"token selector\">.moreLine</span><span class=\"token punctuation\">{</span>\\n  <span class=\"token property\">width</span><span class=\"token punctuation\">:</span>100px<span class=\"token punctuation\">;</span> <span class=\"token comment\">/* 记住要限定宽度 */</span>\\n<span class=\"token comment\">/*   height:300px; */</span>  <span class=\"token comment\">/* 也要限制高度，这边是自适应了 */</span>\\n  <span class=\"token property\">display</span><span class=\"token punctuation\">:</span> -webkit-box<span class=\"token punctuation\">;</span>\\n  <span class=\"token property\">-webkit-box-orient</span><span class=\"token punctuation\">:</span> vertical<span class=\"token punctuation\">;</span>\\n  <span class=\"token property\">-webkit-line-clamp</span><span class=\"token punctuation\">:</span> 3<span class=\"token punctuation\">;</span>  <span class=\"token comment\">/* 限定几行文字溢出 */</span>\\n  <span class=\"token property\">overflow</span><span class=\"token punctuation\">:</span> hidden<span class=\"token punctuation\">;</span>\\n\\n<span class=\"token punctuation\">}</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br><span class=\"line-number\">11</span><br><span class=\"line-number\">12</span><br><span class=\"line-number\">13</span><br><span class=\"line-number\">14</span><br><span class=\"line-number\">15</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e\\x3c!-- 特殊字符串：用于修改/删除markdown的结尾提示语-OBKoro1 --\\x3e\\n<h3 id=\"点个star支持我一下\"><a class=\"header-anchor\" href=\"#点个star支持我一下\" aria-hidden=\"true\">#</a> 点个<a href=\"https://github.com/OBKoro1/codeBlack\" target=\"_blank\" rel=\"noopener noreferrer\">Star<OutboundLink/></a>支持我一下~</h3>\\n\\x3c!-- \\'特殊字符串：用于删除编译后的issue组件-OBKoro1 --\\x3e\\n'},{key:\"v-fbb7f6d6c264a\",path:\"/codeBlack/%E5%A4%9A%E7%BB%B4%E6%95%B0%E7%BB%84%E5%B1%95%E5%BC%80.html\",lastUpdated:1564720698e3,title:\"多维数组展开\",headers:[{level:3,title:\"原理：\",slug:\"原理：\"},{level:3,title:\"代码：\",slug:\"代码：\"},{level:3,title:\"点个Star支持我一下~\",slug:\"点个star支持我一下\"}],excerpt:'<h1 id=\"多维数组展开\"><a class=\"header-anchor\" href=\"#多维数组展开\" aria-hidden=\"true\">#</a> 多维数组展开</h1>\\n<h3 id=\"原理：\"><a class=\"header-anchor\" href=\"#原理：\" aria-hidden=\"true\">#</a> 原理：</h3>\\n<ul>\\n<li>利用reduce累加，将数组平铺。</li>\\n<li>判断每次传入的第二个参数是否为数组，如果是数组的话，递归。</li>\\n<li>然后每层都平铺，一层一层用<code>concat</code>连接成一个数组</li>\\n</ul>\\n<h3 id=\"代码：\"><a class=\"header-anchor\" href=\"#代码：\" aria-hidden=\"true\">#</a> 代码：</h3>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">flatten</span> <span class=\"token operator\">=</span> arr <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\\n  <span class=\"token keyword\">return</span> arr<span class=\"token punctuation\">.</span><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>flat<span class=\"token punctuation\">,</span> next<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>flat<span class=\"token punctuation\">,</span> next<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// flat:初始值或累加的值 next:当前值</span>\\n    <span class=\"token keyword\">return</span> flat<span class=\"token punctuation\">.</span><span class=\"token function\">concat</span><span class=\"token punctuation\">(</span>Array<span class=\"token punctuation\">.</span><span class=\"token function\">isArray</span><span class=\"token punctuation\">(</span>next<span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> <span class=\"token function\">flatten</span><span class=\"token punctuation\">(</span>next<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">:</span> next<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\n    <span class=\"token comment\">// 判断当前元素是否为数组 决定是否递归 将值返回到下次循环</span>\\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\\n<span class=\"token comment\">// 运行示例：</span>\\n<span class=\"token keyword\">let</span> nestedArr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 四维数组 展开</span>\\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">flatten</span><span class=\"token punctuation\">(</span>nestedArr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [1,2,3,4,5,6,7]</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e\\x3c!-- 特殊字符串：用于修改/删除markdown的结尾提示语-OBKoro1 --\\x3e\\n<h3 id=\"点个star支持我一下\"><a class=\"header-anchor\" href=\"#点个star支持我一下\" aria-hidden=\"true\">#</a> 点个<a href=\"https://github.com/OBKoro1/codeBlack\" target=\"_blank\" rel=\"noopener noreferrer\">Star<OutboundLink/></a>支持我一下~</h3>\\n\\x3c!-- \\'特殊字符串：用于删除编译后的issue组件-OBKoro1 --\\x3e\\n'},{key:\"v-2ea6fe7dfd4d\",path:\"/codeBlack/%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%BB%91%E5%AE%9A%E7%82%B9%E5%87%BB%E4%BA%8B%E4%BB%B6.html\",lastUpdated:1564720698e3,title:\"html字符串绑定点击事件\",headers:[{level:2,title:\"html字符串绑定点击事件\",slug:\"html字符串绑定点击事件\"},{level:3,title:\"点个Star支持我一下~\",slug:\"点个star支持我一下\"}],excerpt:'<h2 id=\"html字符串绑定点击事件\"><a class=\"header-anchor\" href=\"#html字符串绑定点击事件\" aria-hidden=\"true\">#</a> html字符串绑定点击事件</h2>\\n<p>像<code>htmls</code>字符串可以加很多事件了，可以以变量的形式，添加<code>dom</code>，<code>function</code>等等，知道一下这个东西，以后说不定用得着。</p>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code><span class=\"token comment\">// html 部分</span>\\n<span class=\"token operator\">&lt;</span>div id<span class=\"token operator\">=</span><span class=\"token string\">\"aa\"</span><span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\\n<span class=\"token comment\">// js部分</span>\\n<span class=\"token keyword\">function</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\\'执行函数\\'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\n<span class=\"token punctuation\">}</span>\\n<span class=\"token keyword\">const</span> htmls <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token string\">`&lt;div onclick=\"test()\">插入的html&lt;/div>`</span></span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 可以以变量的形式添加dom、函数等等</span>\\n<span class=\"token keyword\">let</span> a <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">\\'#aa\\'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\na<span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> htmls<span class=\"token punctuation\">;</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e\\x3c!-- 特殊字符串：用于修改/删除markdown的结尾提示语-OBKoro1 --\\x3e\\n<h3 id=\"点个star支持我一下\"><a class=\"header-anchor\" href=\"#点个star支持我一下\" aria-hidden=\"true\">#</a> 点个<a href=\"https://github.com/OBKoro1/codeBlack\" target=\"_blank\" rel=\"noopener noreferrer\">Star<OutboundLink/></a>支持我一下~</h3>\\n\\x3c!-- \\'特殊字符串：用于删除编译后的issue组件-OBKoro1 --\\x3e\\n'},{key:\"v-24acd10a67072\",path:\"/codeBlack/%E6%89%A7%E8%A1%8Cshell%E5%91%BD%E4%BB%A4%E8%A1%8C.html\",lastUpdated:1564739121e3,title:\"论如何在node使用命令行\",headers:[{level:2,title:\"论如何在node使用命令行\",slug:\"论如何在node使用命令行\"},{level:3,title:\"项目代码一键上传\",slug:\"项目代码一键上传\"},{level:3,title:\"启动node进程时传入参数：\",slug:\"启动node进程时传入参数：\"},{level:3,title:\"deploy.js\",slug:\"deploy-js\"},{level:3,title:\"代码：\",slug:\"代码：\"},{level:3,title:\"点个Star支持我一下~\",slug:\"点个star支持我一下\"}],excerpt:'<h2 id=\"论如何在node使用命令行\"><a class=\"header-anchor\" href=\"#论如何在node使用命令行\" aria-hidden=\"true\">#</a> 论如何在node使用命令行</h2>\\n<p>演示一下如何在node中使用<code>git add .</code>等命令行。</p>\\n<h3 id=\"项目代码一键上传\"><a class=\"header-anchor\" href=\"#项目代码一键上传\" aria-hidden=\"true\">#</a> 项目代码一键上传</h3>\\n<p>在项目根目录创建<code>deploy.js</code>, 使用<code>node</code>运行该文件：</p>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code>node deploy<span class=\"token punctuation\">.</span>js <span class=\"token string\">\\'参数1\\'</span> <span class=\"token string\">\\'参数2\\'</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<p>对的, 启动node进程是可以传入参数的：</p>\\n<h3 id=\"启动node进程时传入参数：\"><a class=\"header-anchor\" href=\"#启动node进程时传入参数：\" aria-hidden=\"true\">#</a> 启动node进程时传入参数：</h3>\\n<p><a href=\"http://nodejs.cn/api/process/process_argv.html\" target=\"_blank\" rel=\"noopener noreferrer\">process.argv<OutboundLink/></a>是<code>node</code>自带的属性，这是一个数组,数组的前两个元素是默认值：</p>\\n<ol>\\n<li><code>process.argv[0]</code>: <code>process.execPath</code>(返回启动 Node.js 进程的可执行文件的绝对路径名)</li>\\n<li><code>process.argv[1]</code>: 正在执行的 JavaScript 文件的路径</li>\\n<li><code>process.argv[2]、process.argv[3]...</code>: 这里是传入的参数</li>\\n</ol>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code><span class=\"token comment\">// process.argv</span>\\n<span class=\"token punctuation\">[</span> <span class=\"token string\">\\'/usr/local/bin/node\\'</span><span class=\"token punctuation\">,</span>\\n  <span class=\"token string\">\\'/Users/obkoro1/work/itemName/deploy.js\\'</span><span class=\"token punctuation\">,</span>\\n  <span class=\"token string\">\\'参数1\\'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\\'参数2\\'</span> <span class=\"token punctuation\">]</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<h3 id=\"deploy-js\"><a class=\"header-anchor\" href=\"#deploy-js\" aria-hidden=\"true\">#</a> deploy.js</h3>\\n<p>执行命令行主要是靠node自带模块：<code>child_process</code>的<a href=\"http://nodejs.cn/api/child_process.html#child_process_child_process_execsync_command_options\" target=\"_blank\" rel=\"noopener noreferrer\">execSync<OutboundLink/></a>方法来创建一个子进程运行命令。</p>\\n<p>运行方法如上所示，拷贝下面的代码来试一试就知道了。</p>\\n<h3 id=\"代码：\"><a class=\"header-anchor\" href=\"#代码：\" aria-hidden=\"true\">#</a> 代码：</h3>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code><span class=\"token comment\">// deploy.js</span>\\n<span class=\"token comment\">// node内置模块 同步执行命令行</span>\\n<span class=\"token keyword\">const</span> execSync <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\\'child_process\\'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>execSync<span class=\"token punctuation\">;</span> \\n<span class=\"token keyword\">const</span> commitParam <span class=\"token operator\">=</span> process<span class=\"token punctuation\">.</span>argv<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token comment\">// commit 参数</span>\\n<span class=\"token function\">myExecSync</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token string\">`git add . &amp;&amp; git commit -m </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>commitParam<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> &amp;&amp; git pull &amp;&amp; git push`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\n\\n<span class=\"token comment\">/**\\n * @description: 同步执行命令行\\n * @param {string} cmd 字符串\\n * @Date: 2019-08-02 17:43:41\\n */</span>\\n<span class=\"token keyword\">function</span> <span class=\"token function\">myExecSync</span><span class=\"token punctuation\">(</span>cmd<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n  <span class=\"token comment\">// 除了该方法直到子进程完全关闭后才返回 执行完毕 返回</span>\\n  <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\\n    <span class=\"token keyword\">var</span> output <span class=\"token operator\">=</span> <span class=\"token function\">execSync</span><span class=\"token punctuation\">(</span>\\n      cmd<span class=\"token punctuation\">,</span>\\n      <span class=\"token punctuation\">{</span>\\n        encoding<span class=\"token punctuation\">:</span> <span class=\"token string\">\\'utf8\\'</span><span class=\"token punctuation\">,</span>\\n        timeout<span class=\"token punctuation\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\\n        maxBuffer<span class=\"token punctuation\">:</span> <span class=\"token number\">200</span> <span class=\"token operator\">*</span> <span class=\"token number\">1024</span><span class=\"token punctuation\">,</span>\\n        killSignal<span class=\"token punctuation\">:</span> <span class=\"token string\">\\'SIGTERM\\'</span><span class=\"token punctuation\">,</span>\\n        cwd<span class=\"token punctuation\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>\\n        env<span class=\"token punctuation\">:</span> <span class=\"token keyword\">null</span>\\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\\n      <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">,</span> stdout<span class=\"token punctuation\">,</span> stderr<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n        <span class=\"token comment\">// 进程错误时 回调</span>\\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n          console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token string\">`执行命令</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>cmd<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">出错:</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>err<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\n          <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\\n        <span class=\"token punctuation\">}</span>\\n      <span class=\"token punctuation\">}</span>\\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">err</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token string\">`执行命令</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>cmd<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">出错:</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>err<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\n  <span class=\"token punctuation\">}</span>\\n<span class=\"token punctuation\">}</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br><span class=\"line-number\">11</span><br><span class=\"line-number\">12</span><br><span class=\"line-number\">13</span><br><span class=\"line-number\">14</span><br><span class=\"line-number\">15</span><br><span class=\"line-number\">16</span><br><span class=\"line-number\">17</span><br><span class=\"line-number\">18</span><br><span class=\"line-number\">19</span><br><span class=\"line-number\">20</span><br><span class=\"line-number\">21</span><br><span class=\"line-number\">22</span><br><span class=\"line-number\">23</span><br><span class=\"line-number\">24</span><br><span class=\"line-number\">25</span><br><span class=\"line-number\">26</span><br><span class=\"line-number\">27</span><br><span class=\"line-number\">28</span><br><span class=\"line-number\">29</span><br><span class=\"line-number\">30</span><br><span class=\"line-number\">31</span><br><span class=\"line-number\">32</span><br><span class=\"line-number\">33</span><br><span class=\"line-number\">34</span><br><span class=\"line-number\">35</span><br><span class=\"line-number\">36</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e\\x3c!-- 特殊字符串：用于修改/删除markdown的结尾提示语-OBKoro1 --\\x3e\\n<h3 id=\"点个star支持我一下\"><a class=\"header-anchor\" href=\"#点个star支持我一下\" aria-hidden=\"true\">#</a> 点个<a href=\"https://github.com/OBKoro1/codeBlack\" target=\"_blank\" rel=\"noopener noreferrer\">Star<OutboundLink/></a>支持我一下~</h3>\\n\\x3c!-- \\'特殊字符串：用于删除编译后的issue组件-OBKoro1 --\\x3e\\n'},{key:\"v-d923cba653c3b\",path:\"/codeBlack/%E6%95%B0%E7%BB%84%E4%BA%A4%E9%9B%86%E5%B7%AE%E9%9B%86.html\",lastUpdated:1564720698e3,title:\"数组交集差集并集\",headers:[{level:2,title:\"数组交集差集并集\",slug:\"数组交集差集并集\"},{level:3,title:\"交集、差集和并集是什么鬼？\",slug:\"交集、差集和并集是什么鬼？\"},{level:3,title:\"includes 判断是否包含：\",slug:\"includes-判断是否包含：\"},{level:3,title:\"使用 Set 来判断：\",slug:\"使用-set-来判断：\"},{level:3,title:\"点个Star支持我一下~\",slug:\"点个star支持我一下\"}],excerpt:'<h2 id=\"数组交集差集并集\"><a class=\"header-anchor\" href=\"#数组交集差集并集\" aria-hidden=\"true\">#</a> 数组交集差集并集</h2>\\n<p>有任意两个数组，每个数组里面的元素不重复，找出它们的交集、差集和并集。</p>\\n<h3 id=\"交集、差集和并集是什么鬼？\"><a class=\"header-anchor\" href=\"#交集、差集和并集是什么鬼？\" aria-hidden=\"true\">#</a> 交集、差集和并集是什么鬼？</h3>\\n<ol>\\n<li><strong>交集</strong></li>\\n</ol>\\n<p>由所有属于集合 A 且属于集合 B 的元素所组成的集合，叫做集合 A 与集合 B 的交集（intersection），记作 A∩B</p>\\n<p><a href=\"https://baike.baidu.com/item/%E4%BA%A4%E9%9B%86/13014743\" target=\"_blank\" rel=\"noopener noreferrer\">交集百度百科<OutboundLink/></a></p>\\n<ol start=\"2\">\\n<li><strong>差集</strong></li>\\n</ol>\\n<p>以属于 A 而不属于 B 的元素为元素的集合成为 A 与 B 的差。(本文栗子，还会求出属于 B 不属于 A 的集合)</p>\\n<p><a href=\"https://baike.baidu.com/item/%E5%B7%AE%E9%9B%86\" target=\"_blank\" rel=\"noopener noreferrer\">差集百度百科<OutboundLink/></a></p>\\n<ol start=\"3\">\\n<li><strong>并集</strong></li>\\n</ol>\\n<p>给定两个集合 A，B，把他们所有的元素合并在一起组成的集合，叫做集合 A 与集合 B 的并集，记作 A∪B，读作 A 并 B。</p>\\n<p><a href=\"https://baike.baidu.com/item/%E5%B9%B6%E9%9B%86\" target=\"_blank\" rel=\"noopener noreferrer\">并集百度百科<OutboundLink/></a></p>\\n<h3 id=\"includes-判断是否包含：\"><a class=\"header-anchor\" href=\"#includes-判断是否包含：\" aria-hidden=\"true\">#</a> includes 判断是否包含：</h3>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code><span class=\"token keyword\">let</span> one <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\\n<span class=\"token keyword\">let</span> two <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">intersection</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\\n  <span class=\"token comment\">// a b数组的交集</span>\\n  <span class=\"token keyword\">let</span> arr <span class=\"token operator\">=</span> a<span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span>v <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\\n    <span class=\"token comment\">// b是否包含a的元素，包含就返回true,交集</span>\\n    <span class=\"token keyword\">return</span> b<span class=\"token punctuation\">.</span><span class=\"token function\">includes</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\n  <span class=\"token keyword\">return</span> arr<span class=\"token punctuation\">;</span>\\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">difference</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\\n  <span class=\"token comment\">// a b 数组的差集</span>\\n  <span class=\"token keyword\">let</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span>a<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>b<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span>v <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\\n    <span class=\"token comment\">// a和b是否包含v 不包含返回!false  出现有一个不包含(另一个数组就包含 找到差值),就返回true 添加进数组</span>\\n    <span class=\"token keyword\">return</span> <span class=\"token operator\">!</span>a<span class=\"token punctuation\">.</span><span class=\"token function\">includes</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token operator\">!</span>b<span class=\"token punctuation\">.</span><span class=\"token function\">includes</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\n  <span class=\"token keyword\">return</span> arr<span class=\"token punctuation\">;</span>\\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\\n\\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">unionArr</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\\n  <span class=\"token keyword\">return</span> Array<span class=\"token punctuation\">.</span><span class=\"token keyword\">from</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Set</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token operator\">...</span>a<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>b<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 并集可以理解为合并数组去重,直接用set即可</span>\\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">difference</span><span class=\"token punctuation\">(</span>one<span class=\"token punctuation\">,</span> two<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">intersection</span><span class=\"token punctuation\">(</span>one<span class=\"token punctuation\">,</span> two<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">unionArr</span><span class=\"token punctuation\">(</span>one<span class=\"token punctuation\">,</span> two<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br><span class=\"line-number\">11</span><br><span class=\"line-number\">12</span><br><span class=\"line-number\">13</span><br><span class=\"line-number\">14</span><br><span class=\"line-number\">15</span><br><span class=\"line-number\">16</span><br><span class=\"line-number\">17</span><br><span class=\"line-number\">18</span><br><span class=\"line-number\">19</span><br><span class=\"line-number\">20</span><br><span class=\"line-number\">21</span><br><span class=\"line-number\">22</span><br><span class=\"line-number\">23</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<p>事实上，还可以改成<code>indexOf</code>来判断是否包含，但是要注意<code>indexOf</code>是不能识别<code>NaN</code>的。</p>\\n<h3 id=\"使用-set-来判断：\"><a class=\"header-anchor\" href=\"#使用-set-来判断：\" aria-hidden=\"true\">#</a> 使用 Set 来判断：</h3>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">arrSet</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">,</span> type<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n  <span class=\"token keyword\">let</span> <span class=\"token keyword\">set</span><span class=\"token punctuation\">;</span>\\n  a <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Set</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\n  b <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Set</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>type <span class=\"token operator\">===</span> <span class=\"token string\">\\'difference\\'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n    <span class=\"token comment\">// ab数组差集</span>\\n    <span class=\"token keyword\">set</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Set</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token operator\">...</span>a<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>b<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">=></span> <span class=\"token operator\">!</span>b<span class=\"token punctuation\">.</span><span class=\"token function\">has</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token operator\">!</span>a<span class=\"token punctuation\">.</span><span class=\"token function\">has</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>type <span class=\"token operator\">===</span> <span class=\"token string\">\\'intersection\\'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n    <span class=\"token comment\">// ab数组交集</span>\\n    <span class=\"token keyword\">set</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Set</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token operator\">...</span>a<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">=></span> b<span class=\"token punctuation\">.</span><span class=\"token function\">has</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\\n    <span class=\"token comment\">// ab数组并集</span>\\n    <span class=\"token keyword\">set</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Set</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token operator\">...</span>a<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>b<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\n  <span class=\"token punctuation\">}</span>\\n  <span class=\"token keyword\">return</span> Array<span class=\"token punctuation\">.</span><span class=\"token keyword\">from</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">set</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 转为set</span>\\n<span class=\"token punctuation\">}</span>\\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>\\n  <span class=\"token function\">arrSet</span><span class=\"token punctuation\">(</span>one<span class=\"token punctuation\">,</span> two<span class=\"token punctuation\">,</span> <span class=\"token string\">\\'difference\\'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\\n  <span class=\"token function\">arrSet</span><span class=\"token punctuation\">(</span>one<span class=\"token punctuation\">,</span> two<span class=\"token punctuation\">,</span> <span class=\"token string\">\\'intersection\\'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\\n  <span class=\"token function\">arrSet</span><span class=\"token punctuation\">(</span>one<span class=\"token punctuation\">,</span> two<span class=\"token punctuation\">,</span> <span class=\"token string\">\\'union\\'</span><span class=\"token punctuation\">)</span>\\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br><span class=\"line-number\">11</span><br><span class=\"line-number\">12</span><br><span class=\"line-number\">13</span><br><span class=\"line-number\">14</span><br><span class=\"line-number\">15</span><br><span class=\"line-number\">16</span><br><span class=\"line-number\">17</span><br><span class=\"line-number\">18</span><br><span class=\"line-number\">19</span><br><span class=\"line-number\">20</span><br><span class=\"line-number\">21</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e\\x3c!-- 特殊字符串：用于修改/删除markdown的结尾提示语-OBKoro1 --\\x3e\\n<h3 id=\"点个star支持我一下\"><a class=\"header-anchor\" href=\"#点个star支持我一下\" aria-hidden=\"true\">#</a> 点个<a href=\"https://github.com/OBKoro1/codeBlack\" target=\"_blank\" rel=\"noopener noreferrer\">Star<OutboundLink/></a>支持我一下~</h3>\\n\\x3c!-- \\'特殊字符串：用于删除编译后的issue组件-OBKoro1 --\\x3e\\n'},{key:\"v-f5da2810aa989\",path:\"/codeBlack/%E6%95%B0%E7%BB%84%E5%AE%8C%E5%85%A8%E4%B9%B1%E5%BA%8F.html\",lastUpdated:1564720698e3,title:\"数组完全乱序\",headers:[{level:2,title:\"真正意义上的乱序数组：\",slug:\"真正意义上的乱序数组：\"},{level:3,title:\"递归：\",slug:\"递归：\"},{level:3,title:\"循环(进阶)：\",slug:\"循环-进阶-：\"},{level:3,title:\"不开新数组（最终）：\",slug:\"不开新数组（最终）：\"},{level:3,title:\"点个Star支持我一下~\",slug:\"点个star支持我一下\"}],excerpt:'<h1 id=\"数组完全乱序\"><a class=\"header-anchor\" href=\"#数组完全乱序\" aria-hidden=\"true\">#</a> 数组完全乱序</h1>\\n<p>一提到数组乱序，大家可能就会想到<code>sort</code>方法，也就是下面这种实现方法：</p>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code>arr<span class=\"token punctuation\">.</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token number\">0.5</span> <span class=\"token operator\">-</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<p>但是<code>sort</code>并不是真正意义上的乱序，一些元素间并没有机会相互比较(也就没有了随机交换的可能性)，<strong>所有数组元素在大概率上还停留在自己初始位置</strong>。</p>\\n<p>这里不再展开了，省的懵逼，如果对此有兴趣的话，看这篇<a href=\"https://github.com/HOUCe/shuffle-array\" target=\"_blank\" rel=\"noopener noreferrer\">文章<OutboundLink/></a>来解惑。</p>\\n<h2 id=\"真正意义上的乱序数组：\"><a class=\"header-anchor\" href=\"#真正意义上的乱序数组：\" aria-hidden=\"true\">#</a> 真正意义上的乱序数组：</h2>\\n<h3 id=\"递归：\"><a class=\"header-anchor\" href=\"#递归：\" aria-hidden=\"true\">#</a> 递归：</h3>\\n<p><strong>原理</strong>：</p>\\n<ul>\\n<li>取数组长度的随机数，获取这个数组元素</li>\\n<li>删除原数组的元素，将值添加到新数组中</li>\\n<li>递归将数组再传入函数(重复上述两步)，直到旧数组的元素清空为止</li>\\n</ul>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code><span class=\"token keyword\">let</span> oldArr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">11</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\\n<span class=\"token keyword\">let</span> <span class=\"token function-variable function\">randomFn</span> <span class=\"token operator\">=</span> actionArr <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\\n  <span class=\"token keyword\">let</span> newArr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\\n  <span class=\"token keyword\">let</span> <span class=\"token function-variable function\">randomArr</span> <span class=\"token operator\">=</span> arr <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\\n    <span class=\"token keyword\">let</span> ranDomNum <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">floor</span><span class=\"token punctuation\">(</span>Math<span class=\"token punctuation\">.</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 随机数</span>\\n    newArr<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>actionArr<span class=\"token punctuation\">.</span><span class=\"token function\">splice</span><span class=\"token punctuation\">(</span>ranDomNum<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 删除原数组元素 将删除的值添加到新数组</span>\\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">.</span>length <span class=\"token operator\">!==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n      <span class=\"token keyword\">return</span> <span class=\"token function\">randomArr</span><span class=\"token punctuation\">(</span>actionArr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\\n      <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 数组清空 退出递归</span>\\n    <span class=\"token punctuation\">}</span>\\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\\n  <span class=\"token function\">randomArr</span><span class=\"token punctuation\">(</span>actionArr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\n  <span class=\"token keyword\">return</span> newArr<span class=\"token punctuation\">;</span>\\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">randomFn</span><span class=\"token punctuation\">(</span>oldArr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\\'新数组\\'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br><span class=\"line-number\">11</span><br><span class=\"line-number\">12</span><br><span class=\"line-number\">13</span><br><span class=\"line-number\">14</span><br><span class=\"line-number\">15</span><br><span class=\"line-number\">16</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<h3 id=\"循环-进阶-：\"><a class=\"header-anchor\" href=\"#循环-进阶-：\" aria-hidden=\"true\">#</a> 循环(进阶)：</h3>\\n<p>原理都一样，将递归换成了循环，这种方式无疑是更优雅的(虽然上面才是我写的...)。</p>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code><span class=\"token keyword\">let</span> <span class=\"token function-variable function\">randomFn</span> <span class=\"token operator\">=</span> actionArr <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\\n  <span class=\"token keyword\">let</span> newArr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\\n    n <span class=\"token operator\">=</span> actionArr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">,</span>\\n    i<span class=\"token punctuation\">;</span>\\n  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n    i <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">floor</span><span class=\"token punctuation\">(</span>Math<span class=\"token punctuation\">.</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> n<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 获取随机数(0~数组的长度-1)</span>\\n    newArr<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">.</span><span class=\"token function\">splice</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 删除原数组元素 将删除的值添加到新数组</span>\\n  <span class=\"token punctuation\">}</span>\\n  <span class=\"token keyword\">return</span> newArr<span class=\"token punctuation\">;</span>\\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<h3 id=\"不开新数组（最终）：\"><a class=\"header-anchor\" href=\"#不开新数组（最终）：\" aria-hidden=\"true\">#</a> 不开新数组（最终）：</h3>\\n<p>上述方法创建了一个新数组，开辟了新的内存空间。</p>\\n<p><strong>原理</strong>：</p>\\n<ul>\\n<li>因为每次循环，数组的长度都要减去1，数组长度的最大值是一个一个减少的</li>\\n<li><strong>把当前找到的随机元素，保存在每次循环的最大值的位置</strong></li>\\n<li><strong>再把最后一个被替换的元素，放到随机元素原来的位置</strong></li>\\n<li>就是把这两个元素交换变量</li>\\n</ul>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">shuffle</span><span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n  <span class=\"token keyword\">var</span> m <span class=\"token operator\">=</span> array<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">,</span>\\n    t<span class=\"token punctuation\">,</span>\\n    i<span class=\"token punctuation\">;</span>\\n  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n    i <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">floor</span><span class=\"token punctuation\">(</span>Math<span class=\"token punctuation\">.</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> m<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\n    <span class=\"token punctuation\">[</span>array<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> array<span class=\"token punctuation\">[</span>m<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>array<span class=\"token punctuation\">[</span>m<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> array<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 交换变量 ES6的写法</span>\\n  <span class=\"token punctuation\">}</span>\\n  <span class=\"token keyword\">return</span> array<span class=\"token punctuation\">;</span>\\n<span class=\"token punctuation\">}</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e\\x3c!-- 特殊字符串：用于修改/删除markdown的结尾提示语-OBKoro1 --\\x3e\\n<h3 id=\"点个star支持我一下\"><a class=\"header-anchor\" href=\"#点个star支持我一下\" aria-hidden=\"true\">#</a> 点个<a href=\"https://github.com/OBKoro1/codeBlack\" target=\"_blank\" rel=\"noopener noreferrer\">Star<OutboundLink/></a>支持我一下~</h3>\\n\\x3c!-- \\'特殊字符串：用于删除编译后的issue组件-OBKoro1 --\\x3e\\n'},{key:\"v-70a520b8b9aa9\",path:\"/codeBlack/%E6%98%BE%E7%A4%BA%E9%9A%90%E8%97%8F%E5%AF%86%E7%A0%81.html\",lastUpdated:1564720698e3,title:\"显示隐藏密码\",headers:[{level:2,title:\"显示隐藏密码\",slug:\"显示隐藏密码\"},{level:3,title:\"效果：\",slug:\"效果：\"},{level:3,title:\"CodePen:\",slug:\"codepen\"},{level:3,title:\"代码：\",slug:\"代码：\"},{level:3,title:\"点个Star支持我一下~\",slug:\"点个star支持我一下\"}],excerpt:'<h2 id=\"显示隐藏密码\"><a class=\"header-anchor\" href=\"#显示隐藏密码\" aria-hidden=\"true\">#</a> 显示隐藏密码</h2>\\n\\x3c!--\\n * @Author: OBKoro1\\n * @Github: https://github.com/OBKoro1\\n * @Date: 2018-09-03 18:50:19\\n * @LastEditors: OBKoro1\\n * @LastEditTime: 2018-12-27 16:27:22\\n * @Description: \\n --\\x3e\\n<h3 id=\"效果：\"><a class=\"header-anchor\" href=\"#效果：\" aria-hidden=\"true\">#</a> 效果：</h3>\\n<p><img src=\"https://github.com/OBKoro1/articleImg_src/blob/master/weibo_img_move/005Y4rCogy1fuwjt7sgiej30ku07xdg5.jpg?raw=true\" alt=\"\"></p>\\n<h3 id=\"codepen\"><a class=\"header-anchor\" href=\"#codepen\" aria-hidden=\"true\">#</a> CodePen:</h3>\\n<p><a href=\"https://codepen.io/OBKoro1/pen/VxxgyG\" target=\"_blank\" rel=\"noopener noreferrer\">demo<OutboundLink/></a></p>\\n<h3 id=\"代码：\"><a class=\"header-anchor\" href=\"#代码：\" aria-hidden=\"true\">#</a> 代码：</h3>\\n<p><strong>超简单，就是切换input框的type类型:</strong></p>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">isShow</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n    <span class=\"token keyword\">let</span> input <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"inputId\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// input的dom</span>\\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>input<span class=\"token punctuation\">.</span>type <span class=\"token operator\">==</span> <span class=\"token string\">\"password\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n        input<span class=\"token punctuation\">.</span>type <span class=\"token operator\">=</span> <span class=\"token string\">\\'text\\'</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 显示</span>\\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\\n        input<span class=\"token punctuation\">.</span>type <span class=\"token operator\">=</span> <span class=\"token string\">\\'password\\'</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 隐藏</span>\\n    <span class=\"token punctuation\">}</span>\\n<span class=\"token punctuation\">}</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e\\x3c!-- 特殊字符串：用于修改/删除markdown的结尾提示语-OBKoro1 --\\x3e\\n<h3 id=\"点个star支持我一下\"><a class=\"header-anchor\" href=\"#点个star支持我一下\" aria-hidden=\"true\">#</a> 点个<a href=\"https://github.com/OBKoro1/codeBlack\" target=\"_blank\" rel=\"noopener noreferrer\">Star<OutboundLink/></a>支持我一下~</h3>\\n\\x3c!-- \\'特殊字符串：用于删除编译后的issue组件-OBKoro1 --\\x3e\\n'},{key:\"v-7980b5f9ffffe\",path:\"/codeBlack/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84%E7%BB%93%E6%9E%84%E8%BD%AC%E5%8C%96.html\",lastUpdated:1564720698e3,title:\"树状数组结构转化\",headers:[{level:2,title:\"树状数组结构转化\",slug:\"树状数组结构转化\"},{level:3,title:\"题目如下：\",slug:\"题目如下：\"},{level:3,title:\"传进去的数组：\",slug:\"传进去的数组：\"},{level:3,title:\"输出的数组：\",slug:\"输出的数组：\"},{level:3,title:\"建议大家好好想想，争取能够自己解出来\",slug:\"建议大家好好想想，争取能够自己解出来\"},{level:3,title:\"参考一下我的解题方法：\",slug:\"参考一下我的解题方法：\"},{level:3,title:\"代码：\",slug:\"代码：\"},{level:3,title:\"更好的解决方式：只关注层级有没有被组装过\",slug:\"更好的解决方式：只关注层级有没有被组装过\"},{level:3,title:\"点个Star支持我一下~\",slug:\"点个star支持我一下\"}],excerpt:'<h2 id=\"树状数组结构转化\"><a class=\"header-anchor\" href=\"#树状数组结构转化\" aria-hidden=\"true\">#</a> 树状数组结构转化</h2>\\n<h3 id=\"题目如下：\"><a class=\"header-anchor\" href=\"#题目如下：\" aria-hidden=\"true\">#</a> 题目如下：</h3>\\n<p><img src=\"https://github.com/OBKoro1/articleImg_src/blob/master/juejin/16551c0d51e4f348?raw=true\" alt=\"\"></p>\\n<p>这道题是我朋友发给我的，之前一开始看的时候，觉得很简单，但仔细往下看的时候，眉头一皱发现事情并不简单。</p>\\n<p>PS：这类题目之前也以不同形式出现过</p>\\n<h3 id=\"传进去的数组：\"><a class=\"header-anchor\" href=\"#传进去的数组：\" aria-hidden=\"true\">#</a> 传进去的数组：</h3>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code><span class=\"token keyword\">let</span> oldArr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\\n  <span class=\"token punctuation\">{</span>\\n    <span class=\"token string\">\\'1_class\\'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\\'工具\\'</span><span class=\"token punctuation\">,</span>\\n    <span class=\"token string\">\\'2_class\\'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\\'备忘录\\'</span><span class=\"token punctuation\">,</span>\\n    <span class=\"token string\">\\'1_id\\'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\\n    <span class=\"token string\">\\'2_id\\'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">2</span>\\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\\n  <span class=\"token punctuation\">{</span>\\n    <span class=\"token string\">\\'1_class\\'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\\'教育\\'</span><span class=\"token punctuation\">,</span>\\n    <span class=\"token string\">\\'2_class\\'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\\'学历教育\\'</span><span class=\"token punctuation\">,</span>\\n    <span class=\"token string\">\\'3_class\\'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\\'中等\\'</span><span class=\"token punctuation\">,</span>\\n    <span class=\"token string\">\\'1_id\\'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span>\\n    <span class=\"token string\">\\'2_id\\'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span>\\n    <span class=\"token string\">\\'3_id\\'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">6</span>\\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\\n  <span class=\"token punctuation\">{</span>\\n    <span class=\"token string\">\\'1_class\\'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\\'教育\\'</span><span class=\"token punctuation\">,</span>\\n    <span class=\"token string\">\\'2_class\\'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\\'学历教育\\'</span><span class=\"token punctuation\">,</span>\\n    <span class=\"token string\">\\'3_class\\'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\\'高等\\'</span><span class=\"token punctuation\">,</span>\\n    <span class=\"token string\">\\'1_id\\'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span>\\n    <span class=\"token string\">\\'2_id\\'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span>\\n    <span class=\"token string\">\\'3_id\\'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">5</span>\\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\\n  <span class=\"token punctuation\">{</span>\\n    <span class=\"token string\">\\'1_class\\'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\\'教育\\'</span><span class=\"token punctuation\">,</span>\\n    <span class=\"token string\">\\'2_class\\'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\\'成人教育\\'</span><span class=\"token punctuation\">,</span>\\n    <span class=\"token string\">\\'1_id\\'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span>\\n    <span class=\"token string\">\\'2_id\\'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">7</span>\\n  <span class=\"token punctuation\">}</span>\\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br><span class=\"line-number\">11</span><br><span class=\"line-number\">12</span><br><span class=\"line-number\">13</span><br><span class=\"line-number\">14</span><br><span class=\"line-number\">15</span><br><span class=\"line-number\">16</span><br><span class=\"line-number\">17</span><br><span class=\"line-number\">18</span><br><span class=\"line-number\">19</span><br><span class=\"line-number\">20</span><br><span class=\"line-number\">21</span><br><span class=\"line-number\">22</span><br><span class=\"line-number\">23</span><br><span class=\"line-number\">24</span><br><span class=\"line-number\">25</span><br><span class=\"line-number\">26</span><br><span class=\"line-number\">27</span><br><span class=\"line-number\">28</span><br><span class=\"line-number\">29</span><br><span class=\"line-number\">30</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<h3 id=\"输出的数组：\"><a class=\"header-anchor\" href=\"#输出的数组：\" aria-hidden=\"true\">#</a> 输出的数组：</h3>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code><span class=\"token keyword\">let</span> result <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\\n  <span class=\"token punctuation\">{</span>\\n    value<span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\\n    label<span class=\"token punctuation\">:</span> <span class=\"token string\">\\'工具\\'</span><span class=\"token punctuation\">,</span>\\n    children<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>\\n      <span class=\"token punctuation\">{</span>\\n        value<span class=\"token punctuation\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span>\\n        label<span class=\"token punctuation\">:</span> <span class=\"token string\">\\'备忘录\\'</span><span class=\"token punctuation\">,</span>\\n        children<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\\n      <span class=\"token punctuation\">}</span>\\n    <span class=\"token punctuation\">]</span>\\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\\n  <span class=\"token punctuation\">{</span>\\n    value<span class=\"token punctuation\">:</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span>\\n    label<span class=\"token punctuation\">:</span> <span class=\"token string\">\\'教育\\'</span><span class=\"token punctuation\">,</span>\\n    children<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>\\n      <span class=\"token punctuation\">{</span>\\n        value<span class=\"token punctuation\">:</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span>\\n        label<span class=\"token punctuation\">:</span> <span class=\"token string\">\\'学历教育\\'</span><span class=\"token punctuation\">,</span>\\n        children<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>\\n          <span class=\"token punctuation\">{</span>\\n            value<span class=\"token punctuation\">:</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span>\\n            label<span class=\"token punctuation\">:</span> <span class=\"token string\">\\'中等\\'</span><span class=\"token punctuation\">,</span>\\n            children<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\\n          <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\\n          <span class=\"token punctuation\">{</span>\\n            value<span class=\"token punctuation\">:</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span>\\n            label<span class=\"token punctuation\">:</span> <span class=\"token string\">\\'高等\\'</span><span class=\"token punctuation\">,</span>\\n            children<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\\n          <span class=\"token punctuation\">}</span>\\n        <span class=\"token punctuation\">]</span>\\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\\n      <span class=\"token punctuation\">{</span>\\n        value<span class=\"token punctuation\">:</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span>\\n        label<span class=\"token punctuation\">:</span> <span class=\"token string\">\\'成人教育\\'</span><span class=\"token punctuation\">,</span>\\n        children<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\\n      <span class=\"token punctuation\">}</span>\\n    <span class=\"token punctuation\">]</span>\\n  <span class=\"token punctuation\">}</span>\\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br><span class=\"line-number\">11</span><br><span class=\"line-number\">12</span><br><span class=\"line-number\">13</span><br><span class=\"line-number\">14</span><br><span class=\"line-number\">15</span><br><span class=\"line-number\">16</span><br><span class=\"line-number\">17</span><br><span class=\"line-number\">18</span><br><span class=\"line-number\">19</span><br><span class=\"line-number\">20</span><br><span class=\"line-number\">21</span><br><span class=\"line-number\">22</span><br><span class=\"line-number\">23</span><br><span class=\"line-number\">24</span><br><span class=\"line-number\">25</span><br><span class=\"line-number\">26</span><br><span class=\"line-number\">27</span><br><span class=\"line-number\">28</span><br><span class=\"line-number\">29</span><br><span class=\"line-number\">30</span><br><span class=\"line-number\">31</span><br><span class=\"line-number\">32</span><br><span class=\"line-number\">33</span><br><span class=\"line-number\">34</span><br><span class=\"line-number\">35</span><br><span class=\"line-number\">36</span><br><span class=\"line-number\">37</span><br><span class=\"line-number\">38</span><br><span class=\"line-number\">39</span><br><span class=\"line-number\">40</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<h3 id=\"建议大家好好想想，争取能够自己解出来\"><a class=\"header-anchor\" href=\"#建议大家好好想想，争取能够自己解出来\" aria-hidden=\"true\">#</a> 建议大家好好想想，争取能够自己解出来</h3>\\n<h3 id=\"参考一下我的解题方法：\"><a class=\"header-anchor\" href=\"#参考一下我的解题方法：\" aria-hidden=\"true\">#</a> 参考一下我的解题方法：</h3>\\n<ol>\\n<li>\\n<p>先算出层级嵌套数</p>\\n<p>遍历数组，再遍历数组的元素，用<code>parseInt</code>拿到每一个值，将最大的值取出来，即为层级嵌套数。</p>\\n</li>\\n<li>\\n<p>数组转成属性层级的对象。对象的属性是层级，值是数组，层级里面的值。</p>\\n<p>1.去重操作(比如:<code>1_id</code>相等的话就不再重复添加)</p>\\n<p>2.提取需要的信息，最终的值和相应父级的信息(之后组装数组的时候放到对应的地方，需要的信息)。</p>\\n<p>最后输出的对象是这个样子</p>\\n</li>\\n</ol>\\n<p><img src=\"https://github.com/OBKoro1/articleImg_src/blob/master/juejin/165520ab3cf04040?raw=true\" alt=\"\"></p>\\n<ol start=\"3\">\\n<li>\\n<p>将属性层级的对象转成树状结构数组。</p>\\n<p>遍历对象，获取层级值。</p>\\n<p>遍历层级的每个元素。</p>\\n<p>找到对应的层级将值添加进去，否则递归继续找对应层级。</p>\\n</li>\\n</ol>\\n<h3 id=\"代码：\"><a class=\"header-anchor\" href=\"#代码：\" aria-hidden=\"true\">#</a> 代码：</h3>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code><span class=\"token keyword\">let</span> <span class=\"token function-variable function\">listToTree</span> <span class=\"token operator\">=</span> arr <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\\n  <span class=\"token keyword\">let</span> <span class=\"token punctuation\">[</span>levelNum<span class=\"token punctuation\">,</span> newArr<span class=\"token punctuation\">,</span> obj<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\\n  <span class=\"token comment\">// 层级嵌套数</span>\\n  arr<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span>item <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> proto <span class=\"token keyword\">in</span> item<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n      <span class=\"token keyword\">let</span> protoLevel <span class=\"token operator\">=</span> <span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span>proto<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>levelNum <span class=\"token operator\">&lt;</span> protoLevel<span class=\"token punctuation\">)</span> levelNum <span class=\"token operator\">=</span> protoLevel<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 总共多少层级</span>\\n    <span class=\"token punctuation\">}</span>\\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\n  <span class=\"token comment\">// 分开层级 放在一个对象中</span>\\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> levelNum <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n    <span class=\"token function\">levelClass</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\n  <span class=\"token punctuation\">}</span>\\n  <span class=\"token comment\">// 将对象转化成数组</span>\\n  Object<span class=\"token punctuation\">.</span><span class=\"token function\">keys</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span>item <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\\n    <span class=\"token keyword\">let</span> forNum <span class=\"token operator\">=</span> <span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 当前层级数</span>\\n    obj<span class=\"token punctuation\">[</span>item<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span>itemChildren <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\\n      <span class=\"token comment\">// 遍历每个层级的每个值</span>\\n      <span class=\"token function\">packageArr</span><span class=\"token punctuation\">(</span>itemChildren<span class=\"token punctuation\">,</span> forNum<span class=\"token punctuation\">,</span> newArr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\n  <span class=\"token comment\">// 分开每个层级</span>\\n  <span class=\"token keyword\">function</span> <span class=\"token function\">levelClass</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n    arr<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span>value <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\\n      <span class=\"token comment\">// 每个元素都遍历一次 分开对应层级</span>\\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>value<span class=\"token punctuation\">[</span><span class=\"token template-string\"><span class=\"token string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>name<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">_id`</span></span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 有的对象层级没那么多</span>\\n      <span class=\"token keyword\">let</span> objFor <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\\n      <span class=\"token comment\">// 其他层级的value 赋值</span>\\n      <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> j <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> name<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n        objFor<span class=\"token punctuation\">[</span><span class=\"token template-string\"><span class=\"token string\">`value</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>j<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">`</span></span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> value<span class=\"token punctuation\">[</span><span class=\"token template-string\"><span class=\"token string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>j<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">_id`</span></span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\\n      <span class=\"token punctuation\">}</span>\\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">[</span><span class=\"token template-string\"><span class=\"token string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>name<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">_id`</span></span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n        <span class=\"token comment\">// 相同层级不重复添加 比如第一层级 id都为1 只添加一个</span>\\n        <span class=\"token keyword\">let</span> status <span class=\"token operator\">=</span> obj<span class=\"token punctuation\">[</span><span class=\"token template-string\"><span class=\"token string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>name<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">_id`</span></span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span>item <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\\n          <span class=\"token keyword\">return</span> item<span class=\"token punctuation\">.</span>value <span class=\"token operator\">===</span> value<span class=\"token punctuation\">[</span><span class=\"token template-string\"><span class=\"token string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>name<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">_id`</span></span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\n        <span class=\"token comment\">// 没有才添加</span>\\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>status<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n          obj<span class=\"token punctuation\">[</span><span class=\"token template-string\"><span class=\"token string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>name<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">_id`</span></span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>\\n            Object<span class=\"token punctuation\">.</span><span class=\"token function\">assign</span><span class=\"token punctuation\">(</span>objFor<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\\n              value<span class=\"token punctuation\">:</span> value<span class=\"token punctuation\">[</span><span class=\"token template-string\"><span class=\"token string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>name<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">_id`</span></span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\\n              label<span class=\"token punctuation\">:</span> value<span class=\"token punctuation\">[</span><span class=\"token template-string\"><span class=\"token string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>name<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">_class`</span></span><span class=\"token punctuation\">]</span>\\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\\n          <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\n        <span class=\"token punctuation\">}</span>\\n      <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\\n        <span class=\"token comment\">// 初始化创建一个数组</span>\\n        obj<span class=\"token punctuation\">[</span><span class=\"token template-string\"><span class=\"token string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>name<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">_id`</span></span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\\n          Object<span class=\"token punctuation\">.</span><span class=\"token function\">assign</span><span class=\"token punctuation\">(</span>objFor<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\\n            value<span class=\"token punctuation\">:</span> value<span class=\"token punctuation\">[</span><span class=\"token template-string\"><span class=\"token string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>name<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">_id`</span></span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\\n            label<span class=\"token punctuation\">:</span> value<span class=\"token punctuation\">[</span><span class=\"token template-string\"><span class=\"token string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>name<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">_class`</span></span><span class=\"token punctuation\">]</span>\\n          <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\\n        <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\\n      <span class=\"token punctuation\">}</span>\\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\n  <span class=\"token punctuation\">}</span>\\n  <span class=\"token comment\">// 组装每个值</span>\\n  <span class=\"token keyword\">function</span> <span class=\"token function\">packageArr</span><span class=\"token punctuation\">(</span>sureName<span class=\"token punctuation\">,</span> index<span class=\"token punctuation\">,</span> arr<span class=\"token punctuation\">,</span> key <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>key <span class=\"token operator\">===</span> index<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n      <span class=\"token comment\">// 当key和index相同时 即找到当前层级</span>\\n      <span class=\"token keyword\">return</span> arr<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\\n        value<span class=\"token punctuation\">:</span> sureName<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">,</span>\\n        label<span class=\"token punctuation\">:</span> sureName<span class=\"token punctuation\">.</span>label<span class=\"token punctuation\">,</span>\\n        children<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\\n      key<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\\n      <span class=\"token comment\">// 当前层级数组中对应的对象元素</span>\\n      <span class=\"token keyword\">let</span> num <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">.</span><span class=\"token function\">findIndex</span><span class=\"token punctuation\">(</span>value <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\\n        <span class=\"token keyword\">return</span> value<span class=\"token punctuation\">.</span>value <span class=\"token operator\">===</span> sureName<span class=\"token punctuation\">[</span><span class=\"token template-string\"><span class=\"token string\">`value</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>key <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">`</span></span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\n      <span class=\"token comment\">// 继续找或者已经找到</span>\\n      <span class=\"token keyword\">return</span> <span class=\"token function\">packageArr</span><span class=\"token punctuation\">(</span>sureName<span class=\"token punctuation\">,</span> index<span class=\"token punctuation\">,</span> arr<span class=\"token punctuation\">[</span>num<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>children<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\n    <span class=\"token punctuation\">}</span>\\n  <span class=\"token punctuation\">}</span>\\n  <span class=\"token keyword\">return</span> newArr<span class=\"token punctuation\">;</span>\\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br><span class=\"line-number\">11</span><br><span class=\"line-number\">12</span><br><span class=\"line-number\">13</span><br><span class=\"line-number\">14</span><br><span class=\"line-number\">15</span><br><span class=\"line-number\">16</span><br><span class=\"line-number\">17</span><br><span class=\"line-number\">18</span><br><span class=\"line-number\">19</span><br><span class=\"line-number\">20</span><br><span class=\"line-number\">21</span><br><span class=\"line-number\">22</span><br><span class=\"line-number\">23</span><br><span class=\"line-number\">24</span><br><span class=\"line-number\">25</span><br><span class=\"line-number\">26</span><br><span class=\"line-number\">27</span><br><span class=\"line-number\">28</span><br><span class=\"line-number\">29</span><br><span class=\"line-number\">30</span><br><span class=\"line-number\">31</span><br><span class=\"line-number\">32</span><br><span class=\"line-number\">33</span><br><span class=\"line-number\">34</span><br><span class=\"line-number\">35</span><br><span class=\"line-number\">36</span><br><span class=\"line-number\">37</span><br><span class=\"line-number\">38</span><br><span class=\"line-number\">39</span><br><span class=\"line-number\">40</span><br><span class=\"line-number\">41</span><br><span class=\"line-number\">42</span><br><span class=\"line-number\">43</span><br><span class=\"line-number\">44</span><br><span class=\"line-number\">45</span><br><span class=\"line-number\">46</span><br><span class=\"line-number\">47</span><br><span class=\"line-number\">48</span><br><span class=\"line-number\">49</span><br><span class=\"line-number\">50</span><br><span class=\"line-number\">51</span><br><span class=\"line-number\">52</span><br><span class=\"line-number\">53</span><br><span class=\"line-number\">54</span><br><span class=\"line-number\">55</span><br><span class=\"line-number\">56</span><br><span class=\"line-number\">57</span><br><span class=\"line-number\">58</span><br><span class=\"line-number\">59</span><br><span class=\"line-number\">60</span><br><span class=\"line-number\">61</span><br><span class=\"line-number\">62</span><br><span class=\"line-number\">63</span><br><span class=\"line-number\">64</span><br><span class=\"line-number\">65</span><br><span class=\"line-number\">66</span><br><span class=\"line-number\">67</span><br><span class=\"line-number\">68</span><br><span class=\"line-number\">69</span><br><span class=\"line-number\">70</span><br><span class=\"line-number\">71</span><br><span class=\"line-number\">72</span><br><span class=\"line-number\">73</span><br><span class=\"line-number\">74</span><br><span class=\"line-number\">75</span><br><span class=\"line-number\">76</span><br><span class=\"line-number\">77</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<h3 id=\"更好的解决方式：只关注层级有没有被组装过\"><a class=\"header-anchor\" href=\"#更好的解决方式：只关注层级有没有被组装过\" aria-hidden=\"true\">#</a> 更好的解决方式：只关注层级有没有被组装过</h3>\\n<p>感谢<a href=\"https://github.com/MrHouBeiBei\" target=\"_blank\" rel=\"noopener noreferrer\">MrHouBeiBei<OutboundLink/></a>提供更好的解决方法：</p>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">getNewArr</span><span class=\"token punctuation\">(</span>activeArr<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n  <span class=\"token comment\">// 递归处理传进来的对象</span>\\n  <span class=\"token keyword\">function</span> <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">,</span> obj<span class=\"token punctuation\">,</span> id<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n    <span class=\"token keyword\">var</span> objLen <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">keys</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>length <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 对象总共的层级</span>\\n    <span class=\"token keyword\">var</span> rtItem <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\\n      <span class=\"token keyword\">return</span> i<span class=\"token punctuation\">.</span>value <span class=\"token operator\">===</span> obj<span class=\"token punctuation\">[</span><span class=\"token template-string\"><span class=\"token string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>id<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">_id`</span></span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 找该层级是否被组装过</span>\\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\n    <span class=\"token comment\">// 没被组装过 就组装</span>\\n    <span class=\"token comment\">// 被组装就跳过(覆盖)</span>\\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>rtItem<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n      rtItem <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\\n      rtItem<span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> obj<span class=\"token punctuation\">[</span><span class=\"token template-string\"><span class=\"token string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>id<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">_id`</span></span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 层级id</span>\\n      rtItem<span class=\"token punctuation\">.</span>lable <span class=\"token operator\">=</span> obj<span class=\"token punctuation\">[</span><span class=\"token template-string\"><span class=\"token string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>id<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">_class`</span></span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\\n      rtItem<span class=\"token punctuation\">.</span>children <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\\n      arr<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>rtItem<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\n    <span class=\"token punctuation\">}</span>\\n    id<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 准备组装下一层级</span>\\n    <span class=\"token comment\">// 如果层级结束就退出递归</span>\\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>id <span class=\"token operator\">></span> objLen<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\\n    <span class=\"token comment\">// 递归继续组装</span>\\n    <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span>rtItem<span class=\"token punctuation\">.</span>children<span class=\"token punctuation\">,</span> obj<span class=\"token punctuation\">,</span> id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\n  <span class=\"token punctuation\">}</span>\\n\\n  <span class=\"token keyword\">var</span> res <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> item <span class=\"token keyword\">of</span> activeArr<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n    <span class=\"token comment\">// 遍历数组 处理每个对象</span>\\n    <span class=\"token keyword\">var</span> id <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\\n    <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">,</span> item<span class=\"token punctuation\">,</span> id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\n  <span class=\"token punctuation\">}</span>\\n  <span class=\"token keyword\">return</span> res<span class=\"token punctuation\">;</span>\\n<span class=\"token punctuation\">}</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br><span class=\"line-number\">11</span><br><span class=\"line-number\">12</span><br><span class=\"line-number\">13</span><br><span class=\"line-number\">14</span><br><span class=\"line-number\">15</span><br><span class=\"line-number\">16</span><br><span class=\"line-number\">17</span><br><span class=\"line-number\">18</span><br><span class=\"line-number\">19</span><br><span class=\"line-number\">20</span><br><span class=\"line-number\">21</span><br><span class=\"line-number\">22</span><br><span class=\"line-number\">23</span><br><span class=\"line-number\">24</span><br><span class=\"line-number\">25</span><br><span class=\"line-number\">26</span><br><span class=\"line-number\">27</span><br><span class=\"line-number\">28</span><br><span class=\"line-number\">29</span><br><span class=\"line-number\">30</span><br><span class=\"line-number\">31</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e\\x3c!-- 特殊字符串：用于修改/删除markdown的结尾提示语-OBKoro1 --\\x3e\\n<h3 id=\"点个star支持我一下\"><a class=\"header-anchor\" href=\"#点个star支持我一下\" aria-hidden=\"true\">#</a> 点个<a href=\"https://github.com/OBKoro1/codeBlack\" target=\"_blank\" rel=\"noopener noreferrer\">Star<OutboundLink/></a>支持我一下~</h3>\\n\\x3c!-- \\'特殊字符串：用于删除编译后的issue组件-OBKoro1 --\\x3e\\n'},{key:\"v-5348deb4da9ef\",path:\"/codeBlack/%E6%A8%A1%E6%9D%BF%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%8F%8D%E6%96%9C%E6%9D%86.html\",lastUpdated:1571895536e3,title:\"模板字符串中的反引号和反斜杠\",headers:[{level:2,title:\"模板字符串中的反引号和反斜杠\",slug:\"模板字符串中的反引号和反斜杠\"},{level:3,title:\"模板字符串使用反引号\",slug:\"模板字符串使用反引号\"},{level:3,title:\"模板字符串使用反斜杠\",slug:\"模板字符串使用反斜杠\"},{level:3,title:\"点个Star支持我一下~\",slug:\"点个star支持我一下\"}],excerpt:'<h2 id=\"模板字符串中的反引号和反斜杠\"><a class=\"header-anchor\" href=\"#模板字符串中的反引号和反斜杠\" aria-hidden=\"true\">#</a> 模板字符串中的反引号和反斜杠</h2>\\n<h3 id=\"模板字符串使用反引号\"><a class=\"header-anchor\" href=\"#模板字符串使用反引号\" aria-hidden=\"true\">#</a> 模板字符串使用反引号</h3>\\n<p>如果不使用反斜杠就会报错。</p>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code><span class=\"token keyword\">let</span> greeting <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token string\">`\\\\`反引号里面嵌套\\\\` 反引号!`</span></span><span class=\"token punctuation\">;</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<h3 id=\"模板字符串使用反斜杠\"><a class=\"header-anchor\" href=\"#模板字符串使用反斜杠\" aria-hidden=\"true\">#</a> 模板字符串使用反斜杠</h3>\\n<p>通常正则会使用反斜杆，向上个栗子一样，反斜杠<code>\\\\</code>在模板字符串中有特殊的意思，所以也需要转义一下，否则会报错。</p>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code>test <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token string\">`\\nlet regString = /\\\\\\\\r\\\\\\\\n|\\\\\\\\r|\\\\\\\\n/`</span></span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e\\x3c!-- 特殊字符串：用于修改/删除markdown的结尾提示语-OBKoro1 --\\x3e\\n<h3 id=\"点个star支持我一下\"><a class=\"header-anchor\" href=\"#点个star支持我一下\" aria-hidden=\"true\">#</a> 点个<a href=\"https://github.com/OBKoro1/codeBlack\" target=\"_blank\" rel=\"noopener noreferrer\">Star<OutboundLink/></a>支持我一下~</h3>\\n\\x3c!-- \\'特殊字符串：用于删除编译后的issue组件-OBKoro1 --\\x3e\\n'},{key:\"v-23c29a1215c85\",path:\"/codeBlack/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%94%B6%E9%9B%86.html\",lastUpdated:1564720698e3,title:\"常见正则表达式合集\",headers:[{level:2,title:\"常见正则表达式合集\",slug:\"常见正则表达式合集\"},{level:3,title:\"如何验证？\",slug:\"如何验证？\"},{level:3,title:\"身份证号码正则表达式：\",slug:\"身份证号码正则表达式：\"},{level:3,title:\"手机号码正则表达式：\",slug:\"手机号码正则表达式：\"},{level:3,title:\"邮箱正则表达式：\",slug:\"邮箱正则表达式：\"},{level:3,title:\"用户名正则:\",slug:\"用户名正则\"},{level:3,title:\"密码正则:\",slug:\"密码正则\"},{level:3,title:\"QQ 号码正则:\",slug:\"qq-号码正则\"},{level:3,title:\"微信号码正则:\",slug:\"微信号码正则\"},{level:3,title:\"特殊字符检测正则:\",slug:\"特殊字符检测正则\"},{level:3,title:\"域名正则:\",slug:\"域名正则\"},{level:3,title:\"车牌号码正则:\",slug:\"车牌号码正则\"},{level:3,title:\"包含中文正则:\",slug:\"包含中文正则\"},{level:3,title:\"护照正则:\",slug:\"护照正则\"},{level:3,title:\"固定电话正则：\",slug:\"固定电话正则：\"},{level:3,title:\"IP 地址正则:\",slug:\"ip-地址正则\"},{level:3,title:\"邮政编码正则:\",slug:\"邮政编码正则\"},{level:3,title:\"经纬度正则\",slug:\"经纬度正则\"},{level:3,title:\"点个Star支持我一下~\",slug:\"点个star支持我一下\"}],excerpt:'<h2 id=\"常见正则表达式合集\"><a class=\"header-anchor\" href=\"#常见正则表达式合集\" aria-hidden=\"true\">#</a> 常见正则表达式合集</h2>\\n<p>为了避免用户胡乱输入就通过验证，很多时候我们都会采用正则表达式来验证一下用户输入的信息是否符合规范。这部分的内容基本上是在网上收集来的，这里跟大家一起分享一下，有需要的可以记在自己的有道云笔记里面。</p>\\n<h3 id=\"如何验证？\"><a class=\"header-anchor\" href=\"#如何验证？\" aria-hidden=\"true\">#</a> 如何验证？</h3>\\n<p>验证的方式当然是很多了，这里推荐采用<a href=\"http://www.w3school.com.cn/js/jsref_test_regexp.asp\" target=\"_blank\" rel=\"noopener noreferrer\">test()<OutboundLink/></a>方法来验证。</p>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code><span class=\"token keyword\">let</span> isTrue <span class=\"token operator\">=</span> RegExpObject<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span>string<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// RegExpObject为正则 string是要检测的字符串</span>\\n<span class=\"token comment\">// 如果字符串 string 中含有与 RegExpObject 匹配的文本，则返回 true，否则返回 false。</span>\\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>isTrue<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\\n    <span class=\"token comment\">//验证成功 do something</span>\\n<span class=\"token punctuation\">}</span>elseP<span class=\"token punctuation\">{</span>\\n    <span class=\"token comment\">//验证失败</span>\\n<span class=\"token punctuation\">}</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<h3 id=\"身份证号码正则表达式：\"><a class=\"header-anchor\" href=\"#身份证号码正则表达式：\" aria-hidden=\"true\">#</a> 身份证号码正则表达式：</h3>\\n<p>第一代身份证只有 15 位数，第二代身份证有 18 位数，各位按照需求来选择表达式。</p>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code><span class=\"token comment\">//第二代身份证号码正则</span>\\n<span class=\"token keyword\">let</span> isTrue <span class=\"token operator\">=</span> <span class=\"token regex\">/^[1-9]\\\\d{5}(18|19|20)\\\\d{2}((0[1-9])|(1[0-2]))(([0-2][1-9])|10|20|30|31)\\\\d{3}[0-9Xx]$/</span><span class=\"token punctuation\">;</span>\\n<span class=\"token comment\">//第一代身份证正则表达式(15位)</span>\\n<span class=\"token keyword\">let</span> isTrue <span class=\"token operator\">=</span> <span class=\"token regex\">/^[1-9]\\\\d{7}((0\\\\d)|(1[0-2]))(([0|1|2]\\\\d)|3[0-1])\\\\d{3}$/</span><span class=\"token punctuation\">;</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<h3 id=\"手机号码正则表达式：\"><a class=\"header-anchor\" href=\"#手机号码正则表达式：\" aria-hidden=\"true\">#</a> 手机号码正则表达式：</h3>\\n<p>时间截止为：2018 年 1 月 11 日</p>\\n<p>移动号段：134 135 136 137 138 139 147 148 150 151 152 157 158 159 172 178 182 183 184 187 188 198</p>\\n<p>联通号段：130 131 132 145 146 155 156 166 171 175 176 185 186</p>\\n<p>电信号段：133 149 153 173 174 177 180 181 189 199</p>\\n<p>虚拟运营商：170</p>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code><span class=\"token keyword\">let</span> isTrue <span class=\"token operator\">=</span> <span class=\"token regex\">/^(13[0-9]|14[5-9]|15[012356789]|166|17[0-8]|18[0-9]|19[8-9])[0-9]{8}$/</span><span class=\"token punctuation\">;</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<h3 id=\"邮箱正则表达式：\"><a class=\"header-anchor\" href=\"#邮箱正则表达式：\" aria-hidden=\"true\">#</a> 邮箱正则表达式：</h3>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code><span class=\"token keyword\">let</span> isTrue <span class=\"token operator\">=</span> <span class=\"token regex\">/^([A-Za-z0-9_\\\\-\\\\.\\\\u4e00-\\\\u9fa5])+\\\\@([A-Za-z0-9_\\\\-\\\\.])+\\\\.([A-Za-z]{2,8})$/</span><span class=\"token punctuation\">;</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<h3 id=\"用户名正则\"><a class=\"header-anchor\" href=\"#用户名正则\" aria-hidden=\"true\">#</a> 用户名正则:</h3>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code><span class=\"token comment\">////用户名正则，4到16位（字母，数字，下划线，减号）</span>\\n<span class=\"token keyword\">let</span> isTrue <span class=\"token operator\">=</span> <span class=\"token regex\">/^[a-zA-Z0-9_-]{4,16}$/</span><span class=\"token punctuation\">;</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<h3 id=\"密码正则\"><a class=\"header-anchor\" href=\"#密码正则\" aria-hidden=\"true\">#</a> 密码正则:</h3>\\n<p>密码正则，以字母开头，长度在 6~18 之间，只能包含字母、数字和下划线</p>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code><span class=\"token keyword\">let</span> isTrue <span class=\"token operator\">=</span><span class=\"token operator\">^</span><span class=\"token punctuation\">[</span>a<span class=\"token operator\">-</span>zA<span class=\"token operator\">-</span><span class=\"token constant\">Z</span><span class=\"token punctuation\">]</span>\\\\w<span class=\"token punctuation\">{</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">17</span><span class=\"token punctuation\">}</span>$<span class=\"token punctuation\">;</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<p>强密码正则，最少 6 位，包括至少 1 个大写字母，1 个小写字母，1 个数字，1 个特殊字符</p>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code><span class=\"token keyword\">let</span> isTrue <span class=\"token operator\">=</span> <span class=\"token regex\">/^.*(?=.{6,})(?=.*\\\\d)(?=.*[A-Z])(?=.*[a-z])(?=.*[!@#$%^&amp;*? ]).*$/</span><span class=\"token punctuation\">;</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<h3 id=\"qq-号码正则\"><a class=\"header-anchor\" href=\"#qq-号码正则\" aria-hidden=\"true\">#</a> QQ 号码正则:</h3>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code><span class=\"token keyword\">let</span> isTrue <span class=\"token operator\">=</span> <span class=\"token regex\">/^[1-9][0-9]{4,10}$/</span><span class=\"token punctuation\">;</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<h3 id=\"微信号码正则\"><a class=\"header-anchor\" href=\"#微信号码正则\" aria-hidden=\"true\">#</a> 微信号码正则:</h3>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code><span class=\"token comment\">//微信号正则，6至20位，以字母开头，字母，数字，减号，下划线</span>\\n<span class=\"token keyword\">let</span> isTrue <span class=\"token operator\">=</span> <span class=\"token regex\">/^[a-zA-Z]([-_a-zA-Z0-9]{5,19})+$/</span><span class=\"token punctuation\">;</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<h3 id=\"特殊字符检测正则\"><a class=\"header-anchor\" href=\"#特殊字符检测正则\" aria-hidden=\"true\">#</a> 特殊字符检测正则:</h3>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code><span class=\"token keyword\">let</span> isTrue <span class=\"token operator\">=</span> <span class=\"token regex\">/[\"\\'&lt;>%;)(&amp;+]+-!！@#$~/</span><span class=\"token punctuation\">;</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<h3 id=\"域名正则\"><a class=\"header-anchor\" href=\"#域名正则\" aria-hidden=\"true\">#</a> 域名正则:</h3>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code><span class=\"token keyword\">let</span> isTrue<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span>a<span class=\"token operator\">-</span>zA<span class=\"token operator\">-</span><span class=\"token constant\">Z0</span><span class=\"token operator\">-</span><span class=\"token number\">9</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token operator\">-</span>a<span class=\"token operator\">-</span>zA<span class=\"token operator\">-</span><span class=\"token constant\">Z0</span><span class=\"token operator\">-</span><span class=\"token number\">9</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">{</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">62</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">(</span><span class=\"token regex\">/.[a-zA-Z0-9][-a-zA-Z0-9]{0,62})+/</span><span class=\"token punctuation\">.</span><span class=\"token operator\">?</span><span class=\"token punctuation\">;</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<h3 id=\"车牌号码正则\"><a class=\"header-anchor\" href=\"#车牌号码正则\" aria-hidden=\"true\">#</a> 车牌号码正则:</h3>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code><span class=\"token keyword\">let</span> isTrue <span class=\"token operator\">=</span> <span class=\"token regex\">/^[京津沪渝冀豫云辽黑湘皖鲁新苏浙赣鄂桂甘晋蒙陕吉闽贵粤青藏川宁琼使领A-Z]{1}[A-Z]{1}[A-Z0-9]{4}[A-Z0-9挂学警港澳]{1}$/</span><span class=\"token punctuation\">;</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<h3 id=\"包含中文正则\"><a class=\"header-anchor\" href=\"#包含中文正则\" aria-hidden=\"true\">#</a> 包含中文正则:</h3>\\n<pre><code>let isTrue = /[\\\\u4E00-\\\\u9FA5]/;\\n//这个可以用于验证用户的真实姓名。\\n</code></pre>\\n<h3 id=\"护照正则\"><a class=\"header-anchor\" href=\"#护照正则\" aria-hidden=\"true\">#</a> 护照正则:</h3>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code><span class=\"token keyword\">let</span> isTrue <span class=\"token operator\">=</span> <span class=\"token regex\">/^(P\\\\d{7}|G\\\\d{7,8}|TH\\\\d{7,8}|S\\\\d{7,8}|A\\\\d{7,8}|L\\\\d{7,8}|\\\\d{9}|D\\\\d+|1[4,5]\\\\d{7})$/</span><span class=\"token punctuation\">;</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<h3 id=\"固定电话正则：\"><a class=\"header-anchor\" href=\"#固定电话正则：\" aria-hidden=\"true\">#</a> 固定电话正则：</h3>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code>    <span class=\"token keyword\">let</span> isTrue<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>\\\\<span class=\"token punctuation\">(</span>\\\\d<span class=\"token punctuation\">{</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">}</span>\\\\<span class=\"token punctuation\">)</span><span class=\"token operator\">|</span>\\\\d<span class=\"token punctuation\">{</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">}</span><span class=\"token operator\">-</span><span class=\"token operator\">|</span>\\\\s<span class=\"token punctuation\">)</span><span class=\"token operator\">?</span>\\\\d<span class=\"token punctuation\">{</span><span class=\"token number\">8</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<h3 id=\"ip-地址正则\"><a class=\"header-anchor\" href=\"#ip-地址正则\" aria-hidden=\"true\">#</a> IP 地址正则:</h3>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code>    <span class=\"token keyword\">let</span> isTrue<span class=\"token operator\">=</span>\\\\d<span class=\"token operator\">+</span>\\\\<span class=\"token punctuation\">.</span>\\\\d<span class=\"token operator\">+</span>\\\\<span class=\"token punctuation\">.</span>\\\\d<span class=\"token operator\">+</span>\\\\<span class=\"token punctuation\">.</span>\\\\d<span class=\"token operator\">+</span><span class=\"token punctuation\">;</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<h3 id=\"邮政编码正则\"><a class=\"header-anchor\" href=\"#邮政编码正则\" aria-hidden=\"true\">#</a> 邮政编码正则:</h3>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code>    <span class=\"token keyword\">let</span> isTrue<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token operator\">-</span><span class=\"token number\">9</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">{</span><span class=\"token number\">1</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">(</span>\\\\d<span class=\"token operator\">+</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token number\">5</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<h3 id=\"经纬度正则\"><a class=\"header-anchor\" href=\"#经纬度正则\" aria-hidden=\"true\">#</a> 经纬度正则</h3>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code><span class=\"token comment\">//经度正则</span>\\n<span class=\"token keyword\">let</span> isTrue <span class=\"token operator\">=</span> <span class=\"token regex\">/^(\\\\-|\\\\+)?(((\\\\d|[1-9]\\\\d|1[0-7]\\\\d|0{1,3})\\\\.\\\\d{0,6})|(\\\\d|[1-9]\\\\d|1[0-7]\\\\d|0{1,3})|180\\\\.0{0,6}|180)$/</span><span class=\"token punctuation\">;</span>\\n<span class=\"token comment\">//纬度正则</span>\\n<span class=\"token keyword\">let</span> isTrue <span class=\"token operator\">=</span> <span class=\"token regex\">/^(\\\\-|\\\\+)?([0-8]?\\\\d{1}\\\\.\\\\d{0,6}|90\\\\.0{0,6}|[0-8]?\\\\d{1}|90)$/</span><span class=\"token punctuation\">;</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<p>常用的正则表达式大概就是上面这些了，如果大家还有其他干货的话，欢迎关注我的<a href=\"https://github.com/OBKoro1/articleImg_src/blob/master/juejin/1631b6f52f7e7015.jpeg?raw=true\" target=\"_blank\" rel=\"noopener noreferrer\">公众号<OutboundLink/></a>给我留言。\\n\\x3c!-- 特殊字符串：用于修改/删除markdown的结尾提示语-OBKoro1 --\\x3e</p>\\n<h3 id=\"点个star支持我一下\"><a class=\"header-anchor\" href=\"#点个star支持我一下\" aria-hidden=\"true\">#</a> 点个<a href=\"https://github.com/OBKoro1/codeBlack\" target=\"_blank\" rel=\"noopener noreferrer\">Star<OutboundLink/></a>支持我一下~</h3>\\n\\x3c!-- \\'特殊字符串：用于删除编译后的issue组件-OBKoro1 --\\x3e\\n'},{key:\"v-6f6fbe3fcb85a\",path:\"/codeBlack/%E6%B5%8F%E8%A7%88%E5%99%A8%E8%87%AA%E5%8A%A8%E8%AF%86%E5%88%AB%E6%95%B0%E5%AD%97%E6%88%90%E7%94%B5%E8%AF%9D%E5%8F%B7%E7%A0%81.html\",lastUpdated:1564720698e3,title:\"浏览器自动识别数字成电话号码\",headers:[{level:2,title:\"浏览器自动识别数字成电话号码\",slug:\"浏览器自动识别数字成电话号码\"},{level:3,title:\"点个Star支持我一下~\",slug:\"点个star支持我一下\"}],excerpt:'<h2 id=\"浏览器自动识别数字成电话号码\"><a class=\"header-anchor\" href=\"#浏览器自动识别数字成电话号码\" aria-hidden=\"true\">#</a> 浏览器自动识别数字成电话号码</h2>\\n<p><strong>描述</strong>：</p>\\n<p>浏览器：目前我遇到的是Android和IPhone的Safari浏览器还有PC端的IE。</p>\\n<p>表现：浏览器会自动对看起来像是电话号码的数字转成电话号码，并在数字的下方添加下划线，字体变为蓝色，手机端点击之后还会询问用户是否想要拨打该号码</p>\\n<p><strong>解决方式</strong>：</p>\\n<p>在html头部添加这段<code>meta</code>即可：</p>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-html line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-html\"><code><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>format-detection<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">content</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>telephone=no<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<p><strong>启用电话号码</strong>：</p>\\n<p>有些时候，真的是我们的电话号码，并且希望唤起拨打功能,像下面这样就可以了：</p>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-html line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-html\"><code><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a</span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>tel:18888888888<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>18888888888<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a</span><span class=\"token punctuation\">></span></span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e\\x3c!-- 特殊字符串：用于修改/删除markdown的结尾提示语-OBKoro1 --\\x3e\\n<h3 id=\"点个star支持我一下\"><a class=\"header-anchor\" href=\"#点个star支持我一下\" aria-hidden=\"true\">#</a> 点个<a href=\"https://github.com/OBKoro1/codeBlack\" target=\"_blank\" rel=\"noopener noreferrer\">Star<OutboundLink/></a>支持我一下~</h3>\\n\\x3c!-- \\'特殊字符串：用于删除编译后的issue组件-OBKoro1 --\\x3e\\n'},{key:\"v-f20a4b7d4e923\",path:\"/codeBlack/%E6%BB%9A%E5%8A%A8%E5%BA%95%E9%83%A8.html\",lastUpdated:1564720698e3,title:\"判断div滚动到底部\",headers:[{level:2,title:\"判断div滚动到底部\",slug:\"判断div滚动到底部\"},{level:3,title:\"codepen\",slug:\"codepen\"},{level:3,title:\"代码：\",slug:\"代码：\"},{level:3,title:\"点个Star支持我一下~\",slug:\"点个star支持我一下\"}],excerpt:'<h2 id=\"判断div滚动到底部\"><a class=\"header-anchor\" href=\"#判断div滚动到底部\" aria-hidden=\"true\">#</a> 判断div滚动到底部</h2>\\n\\x3c!--\\n * @Author: OBKoro1\\n * @Github: https://github.com/OBKoro1\\n * @Date: 2018-12-27 16:12:33\\n * @LastEditors: OBKoro1\\n * @LastEditTime: 2019-07-31 17:01:00\\n * @Description:\\n --\\x3e\\n<h3 id=\"codepen\"><a class=\"header-anchor\" href=\"#codepen\" aria-hidden=\"true\">#</a> codepen</h3>\\n<p><a href=\"https://codepen.io/OBKoro1/pen/XoaRyg\" target=\"_blank\" rel=\"noopener noreferrer\">demo<OutboundLink/></a></p>\\n<h3 id=\"代码：\"><a class=\"header-anchor\" href=\"#代码：\" aria-hidden=\"true\">#</a> 代码：</h3>\\n<blockquote>\\n<p>如果scroll事件不触发的话，很可能是scorll事件绑错div了！</p>\\n</blockquote>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code><span class=\"token keyword\">let</span> dom <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">\\'textarea\\'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\n<span class=\"token comment\">// div滚动事件</span>\\ndom<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onscroll</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\\n    \\n  <span class=\"token comment\">// 意思就是内容总体的高度 - 滚动条的偏移值  === 元素的高度(包含内边)但不包含外边距，边框，以及滚动条</span>\\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>dom<span class=\"token punctuation\">.</span>scrollHeight <span class=\"token operator\">-</span> dom<span class=\"token punctuation\">.</span>scrollTop <span class=\"token operator\">===</span> dom<span class=\"token punctuation\">.</span>clientHeight<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\\'到达底部 do something\\'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\n  <span class=\"token punctuation\">}</span>\\n\\n  <span class=\"token comment\">// div滚到时：离底部不到30px时触发</span>\\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>dom<span class=\"token punctuation\">.</span>scrollHeight <span class=\"token operator\">-</span> dom<span class=\"token punctuation\">.</span>scrollTop <span class=\"token operator\">-</span> dom<span class=\"token punctuation\">.</span>clientHeight <span class=\"token operator\">&lt;=</span> <span class=\"token number\">30</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\\'离底部不到30px 提前发送请求\\'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\n  <span class=\"token punctuation\">}</span>\\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br><span class=\"line-number\">11</span><br><span class=\"line-number\">12</span><br><span class=\"line-number\">13</span><br><span class=\"line-number\">14</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e\\x3c!-- 特殊字符串：用于修改/删除markdown的结尾提示语-OBKoro1 --\\x3e\\n<h3 id=\"点个star支持我一下\"><a class=\"header-anchor\" href=\"#点个star支持我一下\" aria-hidden=\"true\">#</a> 点个<a href=\"https://github.com/OBKoro1/codeBlack\" target=\"_blank\" rel=\"noopener noreferrer\">Star<OutboundLink/></a>支持我一下~</h3>\\n\\x3c!-- \\'特殊字符串：用于删除编译后的issue组件-OBKoro1 --\\x3e\\n'},{key:\"v-b3100a5ceb632\",path:\"/codeBlack/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E5%B0%8F%E7%90%83%E4%B8%8A%E4%B8%8B%E6%B5%AE%E5%8A%A8.html\",lastUpdated:1571743229e3,title:\"loadding效果-移动端小球上下浮动\",headers:[{level:2,title:\"loadding效果-移动端小球上下浮动\",slug:\"loadding效果-移动端小球上下浮动\"},{level:3,title:\"效果图\",slug:\"效果图\"},{level:3,title:\"codepen\",slug:\"codepen\"},{level:3,title:\"代码：\",slug:\"代码：\"},{level:3,title:\"点个Star支持我一下~\",slug:\"点个star支持我一下\"}],excerpt:'<h2 id=\"loadding效果-移动端小球上下浮动\"><a class=\"header-anchor\" href=\"#loadding效果-移动端小球上下浮动\" aria-hidden=\"true\">#</a> loadding效果-移动端小球上下浮动</h2>\\n<h3 id=\"效果图\"><a class=\"header-anchor\" href=\"#效果图\" aria-hidden=\"true\">#</a> 效果图</h3>\\n<p>可能动画没有那么顺畅，可以自己在代码中调试一下参数，包括loading大小、动画参数。</p>\\n<p><img src=\"https://github.com/OBKoro1/articleImg_src/blob/master/2019/mobile_loadding.gif?raw=true\" alt=\"\"></p>\\n<h3 id=\"codepen\"><a class=\"header-anchor\" href=\"#codepen\" aria-hidden=\"true\">#</a> codepen</h3>\\n<p><a href=\"https://codepen.io/OBKoro1/pen/ExxZRdr\" target=\"_blank\" rel=\"noopener noreferrer\">loadding效果-移动端小球上下浮动<OutboundLink/></a></p>\\n<h3 id=\"代码：\"><a class=\"header-anchor\" href=\"#代码：\" aria-hidden=\"true\">#</a> 代码：</h3>\\n<p><strong>html模板</strong></p>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-html line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-html\"><code><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>loadding_father<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>loadding1<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>loadding2<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>loadding3<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<p><strong>Css</strong></p>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-css line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-css\"><code><span class=\"token comment\">/* 外层居中 */</span>\\n<span class=\"token selector\">.loadding_father</span> <span class=\"token punctuation\">{</span>\\n  <span class=\"token property\">position</span><span class=\"token punctuation\">:</span> absolute<span class=\"token punctuation\">;</span>\\n  <span class=\"token property\">top</span><span class=\"token punctuation\">:</span> 50%<span class=\"token punctuation\">;</span>\\n  <span class=\"token property\">left</span><span class=\"token punctuation\">:</span> 50%<span class=\"token punctuation\">;</span>\\n  <span class=\"token property\">transform</span><span class=\"token punctuation\">:</span> <span class=\"token function\">translate</span><span class=\"token punctuation\">(</span>-50%, -50%<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\n  <span class=\"token property\">display</span><span class=\"token punctuation\">:</span> flex<span class=\"token punctuation\">;</span>\\n  <span class=\"token property\">justify-content</span><span class=\"token punctuation\">:</span> center<span class=\"token punctuation\">;</span>\\n  <span class=\"token property\">align-items</span><span class=\"token punctuation\">:</span> center<span class=\"token punctuation\">;</span>\\n<span class=\"token punctuation\">}</span>\\n<span class=\"token comment\">/* 三个小圆圈 */</span>\\n<span class=\"token selector\">.loadding_father div</span> <span class=\"token punctuation\">{</span>\\n  <span class=\"token property\">border-radius</span><span class=\"token punctuation\">:</span> 50%<span class=\"token punctuation\">;</span>\\n  <span class=\"token property\">background</span><span class=\"token punctuation\">:</span> <span class=\"token function\">rgba</span><span class=\"token punctuation\">(</span>216, 216, 216, 1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\n<span class=\"token punctuation\">}</span>\\n<span class=\"token comment\">/* 动画和圆圈大小 */</span>\\n<span class=\"token selector\">.loadding1</span> <span class=\"token punctuation\">{</span>\\n  <span class=\"token comment\">/* 1.2s 是持续时间 */</span>\\n  <span class=\"token property\">animation</span><span class=\"token punctuation\">:</span> myfirst 1.2s infinite linear<span class=\"token punctuation\">;</span>\\n  <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 10px<span class=\"token punctuation\">;</span>\\n  <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 10px<span class=\"token punctuation\">;</span>\\n<span class=\"token punctuation\">}</span>\\n\\n<span class=\"token selector\">.loadding2</span> <span class=\"token punctuation\">{</span>\\n  <span class=\"token property\">animation</span><span class=\"token punctuation\">:</span> myfirst2 1.2s infinite linear<span class=\"token punctuation\">;</span>\\n  <span class=\"token comment\">/* 0.3s是延迟时间 为了有层次感 */</span>\\n  <span class=\"token property\">animation-delay</span><span class=\"token punctuation\">:</span> 0.3s<span class=\"token punctuation\">;</span>\\n  <span class=\"token property\">margin</span><span class=\"token punctuation\">:</span> 0 7px 0 5px<span class=\"token punctuation\">;</span>\\n  <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 8px<span class=\"token punctuation\">;</span>\\n  <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 8px<span class=\"token punctuation\">;</span>\\n<span class=\"token punctuation\">}</span>\\n\\n<span class=\"token selector\">.loadding3</span> <span class=\"token punctuation\">{</span>\\n  <span class=\"token property\">animation</span><span class=\"token punctuation\">:</span> myfirst3 1.2s infinite linear<span class=\"token punctuation\">;</span>\\n  <span class=\"token property\">animation-delay</span><span class=\"token punctuation\">:</span> 0.5s<span class=\"token punctuation\">;</span>\\n  <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 6px<span class=\"token punctuation\">;</span>\\n  <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 6px<span class=\"token punctuation\">;</span>\\n<span class=\"token punctuation\">}</span>\\n\\n<span class=\"token comment\">/* 动画 上下浮动值 */</span>\\n<span class=\"token atrule\"><span class=\"token rule\">@keyframes</span> myfirst</span> <span class=\"token punctuation\">{</span>\\n  <span class=\"token selector\">0%</span> <span class=\"token punctuation\">{</span>\\n    <span class=\"token property\">transform</span><span class=\"token punctuation\">:</span> <span class=\"token function\">translate</span><span class=\"token punctuation\">(</span>0px, 0px<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\n  <span class=\"token punctuation\">}</span>\\n\\n  <span class=\"token selector\">50%</span> <span class=\"token punctuation\">{</span>\\n    <span class=\"token property\">transform</span><span class=\"token punctuation\">:</span> <span class=\"token function\">translate</span><span class=\"token punctuation\">(</span>0px, -10px<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\n  <span class=\"token punctuation\">}</span>\\n\\n  <span class=\"token selector\">100%</span> <span class=\"token punctuation\">{</span>\\n    <span class=\"token property\">transform</span><span class=\"token punctuation\">:</span> <span class=\"token function\">translate</span><span class=\"token punctuation\">(</span>0px, 0px<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\n  <span class=\"token punctuation\">}</span>\\n<span class=\"token punctuation\">}</span>\\n\\n<span class=\"token atrule\"><span class=\"token rule\">@keyframes</span> myfirst2</span> <span class=\"token punctuation\">{</span>\\n  <span class=\"token selector\">0%</span> <span class=\"token punctuation\">{</span>\\n    <span class=\"token property\">transform</span><span class=\"token punctuation\">:</span> <span class=\"token function\">translate</span><span class=\"token punctuation\">(</span>0px, 0px<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\n  <span class=\"token punctuation\">}</span>\\n\\n  <span class=\"token selector\">50%</span> <span class=\"token punctuation\">{</span>\\n    <span class=\"token property\">transform</span><span class=\"token punctuation\">:</span> <span class=\"token function\">translate</span><span class=\"token punctuation\">(</span>0px, -10px<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\n  <span class=\"token punctuation\">}</span>\\n\\n  <span class=\"token selector\">100%</span> <span class=\"token punctuation\">{</span>\\n    <span class=\"token property\">transform</span><span class=\"token punctuation\">:</span> <span class=\"token function\">translate</span><span class=\"token punctuation\">(</span>0px, 0px<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\n  <span class=\"token punctuation\">}</span>\\n<span class=\"token punctuation\">}</span>\\n\\n<span class=\"token atrule\"><span class=\"token rule\">@keyframes</span> myfirst3</span> <span class=\"token punctuation\">{</span>\\n  <span class=\"token selector\">0%</span> <span class=\"token punctuation\">{</span>\\n    <span class=\"token property\">transform</span><span class=\"token punctuation\">:</span> <span class=\"token function\">translate</span><span class=\"token punctuation\">(</span>0px, 0px<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\n  <span class=\"token punctuation\">}</span>\\n\\n  <span class=\"token selector\">50%</span> <span class=\"token punctuation\">{</span>\\n    <span class=\"token property\">transform</span><span class=\"token punctuation\">:</span> <span class=\"token function\">translate</span><span class=\"token punctuation\">(</span>0px, -10px<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\n  <span class=\"token punctuation\">}</span>\\n\\n  <span class=\"token selector\">100%</span> <span class=\"token punctuation\">{</span>\\n    <span class=\"token property\">transform</span><span class=\"token punctuation\">:</span> <span class=\"token function\">translate</span><span class=\"token punctuation\">(</span>0px, 0px<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\n  <span class=\"token punctuation\">}</span>\\n<span class=\"token punctuation\">}</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br><span class=\"line-number\">11</span><br><span class=\"line-number\">12</span><br><span class=\"line-number\">13</span><br><span class=\"line-number\">14</span><br><span class=\"line-number\">15</span><br><span class=\"line-number\">16</span><br><span class=\"line-number\">17</span><br><span class=\"line-number\">18</span><br><span class=\"line-number\">19</span><br><span class=\"line-number\">20</span><br><span class=\"line-number\">21</span><br><span class=\"line-number\">22</span><br><span class=\"line-number\">23</span><br><span class=\"line-number\">24</span><br><span class=\"line-number\">25</span><br><span class=\"line-number\">26</span><br><span class=\"line-number\">27</span><br><span class=\"line-number\">28</span><br><span class=\"line-number\">29</span><br><span class=\"line-number\">30</span><br><span class=\"line-number\">31</span><br><span class=\"line-number\">32</span><br><span class=\"line-number\">33</span><br><span class=\"line-number\">34</span><br><span class=\"line-number\">35</span><br><span class=\"line-number\">36</span><br><span class=\"line-number\">37</span><br><span class=\"line-number\">38</span><br><span class=\"line-number\">39</span><br><span class=\"line-number\">40</span><br><span class=\"line-number\">41</span><br><span class=\"line-number\">42</span><br><span class=\"line-number\">43</span><br><span class=\"line-number\">44</span><br><span class=\"line-number\">45</span><br><span class=\"line-number\">46</span><br><span class=\"line-number\">47</span><br><span class=\"line-number\">48</span><br><span class=\"line-number\">49</span><br><span class=\"line-number\">50</span><br><span class=\"line-number\">51</span><br><span class=\"line-number\">52</span><br><span class=\"line-number\">53</span><br><span class=\"line-number\">54</span><br><span class=\"line-number\">55</span><br><span class=\"line-number\">56</span><br><span class=\"line-number\">57</span><br><span class=\"line-number\">58</span><br><span class=\"line-number\">59</span><br><span class=\"line-number\">60</span><br><span class=\"line-number\">61</span><br><span class=\"line-number\">62</span><br><span class=\"line-number\">63</span><br><span class=\"line-number\">64</span><br><span class=\"line-number\">65</span><br><span class=\"line-number\">66</span><br><span class=\"line-number\">67</span><br><span class=\"line-number\">68</span><br><span class=\"line-number\">69</span><br><span class=\"line-number\">70</span><br><span class=\"line-number\">71</span><br><span class=\"line-number\">72</span><br><span class=\"line-number\">73</span><br><span class=\"line-number\">74</span><br><span class=\"line-number\">75</span><br><span class=\"line-number\">76</span><br><span class=\"line-number\">77</span><br><span class=\"line-number\">78</span><br><span class=\"line-number\">79</span><br><span class=\"line-number\">80</span><br><span class=\"line-number\">81</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e\\x3c!-- 特殊字符串：用于修改/删除markdown的结尾提示语-OBKoro1 --\\x3e\\n<h3 id=\"点个star支持我一下\"><a class=\"header-anchor\" href=\"#点个star支持我一下\" aria-hidden=\"true\">#</a> 点个<a href=\"https://github.com/OBKoro1/codeBlack\" target=\"_blank\" rel=\"noopener noreferrer\">Star<OutboundLink/></a>支持我一下~</h3>\\n\\x3c!-- \\'特殊字符串：用于删除编译后的issue组件-OBKoro1 --\\x3e\\n'},{key:\"v-6827b8527bb3a\",path:\"/codeBlack/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E6%89%8B%E5%86%99%E4%B8%8B%E6%8B%89%E5%88%B7%E6%96%B0.html\",lastUpdated:1571750193e3,title:\"移动端手写下拉刷新\",headers:[{level:2,title:\"移动端手写下拉刷新\",slug:\"移动端手写下拉刷新\"},{level:3,title:\"codepen\",slug:\"codepen\"},{level:3,title:\"思路\",slug:\"思路\"},{level:3,title:\"html源代码：\",slug:\"html源代码：\"},{level:3,title:\"点个Star支持我一下~\",slug:\"点个star支持我一下\"}],excerpt:'<h2 id=\"移动端手写下拉刷新\"><a class=\"header-anchor\" href=\"#移动端手写下拉刷新\" aria-hidden=\"true\">#</a> 移动端手写下拉刷新</h2>\\n<h3 id=\"codepen\"><a class=\"header-anchor\" href=\"#codepen\" aria-hidden=\"true\">#</a> codepen</h3>\\n<p>F12开启浏览器手机模拟器，在顶部鼠标按住移动</p>\\n<p><a href=\"https://codepen.io/OBKoro1/full/gOOgZeE\" target=\"_blank\" rel=\"noopener noreferrer\">demo<OutboundLink/></a></p>\\n<h3 id=\"思路\"><a class=\"header-anchor\" href=\"#思路\" aria-hidden=\"true\">#</a> 思路</h3>\\n<ol>\\n<li>使用<code>touchstart</code>、<code>touchmove</code>、<code>touchend</code>三个事件来监听触摸事件</li>\\n<li>使用<code>getBoundingClientRect()</code>API来判断当前dom是否在顶部(之前使用<code>document.body.scrollTop</code>并不行，然而搜到的都是这个答案。)</li>\\n<li>最后一个是根据事件传递进来的参数用以计算距离。</li>\\n<li>剩下的就是具体的逻辑问题</li>\\n</ol>\\n<h3 id=\"html源代码：\"><a class=\"header-anchor\" href=\"#html源代码：\" aria-hidden=\"true\">#</a> html源代码：</h3>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-html line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-html\"><code><span class=\"token doctype\">&lt;!DOCTYPE html></span>\\n<span class=\"token comment\">&lt;!--\\n * @Author: OBKoro1\\n * @Date: 2019-09-09 10:52:13\\n * @LastEditors: OBKoro1\\n * @LastEditTime: 2019-10-22 20:48:50\\n * @FilePath: /my_test/tets.html\\n * @Description: 手写移动端下拉刷新 PS：PC端也是一个原理 只是改为鼠标按下和抬起事件\\n * @Github: https://github.com/OBKoro1\\n --\\x3e</span>\\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span> <span class=\"token attr-name\">lang</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>en<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\\n\\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>head</span><span class=\"token punctuation\">></span></span>\\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">charset</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>UTF-8<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>viewport<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">content</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>width=device-width, initial-scale=1.0<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">http-equiv</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>X-UA-Compatible<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">content</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>ie=edge<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>title</span><span class=\"token punctuation\">></span></span>Document<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>title</span><span class=\"token punctuation\">></span></span>\\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>style</span><span class=\"token punctuation\">></span></span><span class=\"token style language-css\">\\n    <span class=\"token selector\">.content_father div</span> <span class=\"token punctuation\">{</span>\\n      <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 200px<span class=\"token punctuation\">;</span>\\n      <span class=\"token property\">background</span><span class=\"token punctuation\">:</span> gray<span class=\"token punctuation\">;</span>\\n      <span class=\"token property\">margin-bottom</span><span class=\"token punctuation\">:</span> 10px<span class=\"token punctuation\">;</span>\\n    <span class=\"token punctuation\">}</span>\\n  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>style</span><span class=\"token punctuation\">></span></span>\\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">></span></span>\\n\\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">></span></span>\\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span>F12开启浏览器手机模拟器，在顶部鼠标按住移动<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>content_father<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">></span></span><span class=\"token script language-javascript\">\\n    <span class=\"token keyword\">let</span> content <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">\\'.content_father\\'</span><span class=\"token punctuation\">)</span>\\n    <span class=\"token keyword\">let</span> startSite <span class=\"token operator\">=</span> <span class=\"token number\">0</span> <span class=\"token comment\">// 触摸的起始位置</span>\\n    <span class=\"token keyword\">let</span> sendAjax <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span> <span class=\"token comment\">// 发送请求</span>\\n    content<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">ontouchstart</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\\n      <span class=\"token keyword\">let</span> contentSite <span class=\"token operator\">=</span> content<span class=\"token punctuation\">.</span><span class=\"token function\">getBoundingClientRect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>contentSite<span class=\"token punctuation\">.</span>y <span class=\"token operator\">>=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\\'在顶部\\'</span><span class=\"token punctuation\">)</span>\\n        startSite <span class=\"token operator\">=</span> e<span class=\"token punctuation\">.</span>touches<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>pageY\\n        <span class=\"token comment\">// 在顶部才绑定事件</span>\\n        content<span class=\"token punctuation\">.</span>ontouchmove <span class=\"token operator\">=</span> touchmoveFn\\n        content<span class=\"token punctuation\">.</span>ontouchend <span class=\"token operator\">=</span> touchendFn\\n      <span class=\"token punctuation\">}</span>\\n    <span class=\"token punctuation\">}</span>\\n    <span class=\"token comment\">// 开始移动</span>\\n    <span class=\"token keyword\">function</span> <span class=\"token function\">touchmoveFn</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n      <span class=\"token comment\">// 在浏览器顶部</span>\\n      <span class=\"token keyword\">let</span> moveDistance <span class=\"token operator\">=</span> e<span class=\"token punctuation\">.</span>touches<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>pageY <span class=\"token operator\">-</span> startSite <span class=\"token comment\">// 相差高度</span>\\n      <span class=\"token keyword\">const</span> <span class=\"token constant\">DISTANCE</span> <span class=\"token operator\">=</span> <span class=\"token number\">100</span> <span class=\"token comment\">// 下滑距离超过100就刷新</span>\\n      <span class=\"token keyword\">const</span> <span class=\"token constant\">DISTANCE_FONT</span> <span class=\"token operator\">=</span> <span class=\"token number\">50</span> <span class=\"token comment\">// 下滑距离超过50 就显示文案</span>\\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>moveDistance <span class=\"token operator\">></span> <span class=\"token constant\">DISTANCE</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n        <span class=\"token comment\">// 下滑足够距离</span>\\n        sendAjax <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span>\\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\\'展示 刷新页面文案\\'</span><span class=\"token punctuation\">)</span>\\n      <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token number\">0</span> <span class=\"token operator\">&lt;</span> moveDistance <span class=\"token operator\">&lt;</span> <span class=\"token constant\">DISTANCE_FONT</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n        <span class=\"token comment\">// 下滑距离不足</span>\\n        sendAjax <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span> <span class=\"token comment\">// 实时更改是否发送请求</span>\\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\\'展示：继续下滑刷新页面文案\\'</span><span class=\"token punctuation\">)</span>\\n      <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\\n        <span class=\"token comment\">// 上拉 取消请求</span>\\n        sendAjax <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span> <span class=\"token comment\">// 实时更改是否发送请求</span>\\n      <span class=\"token punctuation\">}</span>\\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\\'滑动距离\\'</span><span class=\"token punctuation\">,</span> moveDistance<span class=\"token punctuation\">)</span>\\n    <span class=\"token punctuation\">}</span>\\n    <span class=\"token comment\">// 触摸结束</span>\\n    <span class=\"token keyword\">function</span> <span class=\"token function\">touchendFn</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n      <span class=\"token keyword\">let</span> contentSite <span class=\"token operator\">=</span> content<span class=\"token punctuation\">.</span><span class=\"token function\">getBoundingClientRect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\\n      <span class=\"token comment\">// 判断在顶部</span>\\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>contentSite<span class=\"token punctuation\">.</span>y <span class=\"token operator\">>=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n        <span class=\"token comment\">// 并且上次上滑超过100</span>\\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>sendAjax<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n          console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\\'发送 请求\\'</span><span class=\"token punctuation\">)</span>\\n        <span class=\"token punctuation\">}</span>\\n      <span class=\"token punctuation\">}</span>\\n      <span class=\"token comment\">// 清除事件</span>\\n      content<span class=\"token punctuation\">.</span>ontouchmove <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span>\\n      content<span class=\"token punctuation\">.</span>ontouchend <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span>\\n    <span class=\"token punctuation\">}</span>\\n  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span>\\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span>\\n\\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">></span></span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br><span class=\"line-number\">11</span><br><span class=\"line-number\">12</span><br><span class=\"line-number\">13</span><br><span class=\"line-number\">14</span><br><span class=\"line-number\">15</span><br><span class=\"line-number\">16</span><br><span class=\"line-number\">17</span><br><span class=\"line-number\">18</span><br><span class=\"line-number\">19</span><br><span class=\"line-number\">20</span><br><span class=\"line-number\">21</span><br><span class=\"line-number\">22</span><br><span class=\"line-number\">23</span><br><span class=\"line-number\">24</span><br><span class=\"line-number\">25</span><br><span class=\"line-number\">26</span><br><span class=\"line-number\">27</span><br><span class=\"line-number\">28</span><br><span class=\"line-number\">29</span><br><span class=\"line-number\">30</span><br><span class=\"line-number\">31</span><br><span class=\"line-number\">32</span><br><span class=\"line-number\">33</span><br><span class=\"line-number\">34</span><br><span class=\"line-number\">35</span><br><span class=\"line-number\">36</span><br><span class=\"line-number\">37</span><br><span class=\"line-number\">38</span><br><span class=\"line-number\">39</span><br><span class=\"line-number\">40</span><br><span class=\"line-number\">41</span><br><span class=\"line-number\">42</span><br><span class=\"line-number\">43</span><br><span class=\"line-number\">44</span><br><span class=\"line-number\">45</span><br><span class=\"line-number\">46</span><br><span class=\"line-number\">47</span><br><span class=\"line-number\">48</span><br><span class=\"line-number\">49</span><br><span class=\"line-number\">50</span><br><span class=\"line-number\">51</span><br><span class=\"line-number\">52</span><br><span class=\"line-number\">53</span><br><span class=\"line-number\">54</span><br><span class=\"line-number\">55</span><br><span class=\"line-number\">56</span><br><span class=\"line-number\">57</span><br><span class=\"line-number\">58</span><br><span class=\"line-number\">59</span><br><span class=\"line-number\">60</span><br><span class=\"line-number\">61</span><br><span class=\"line-number\">62</span><br><span class=\"line-number\">63</span><br><span class=\"line-number\">64</span><br><span class=\"line-number\">65</span><br><span class=\"line-number\">66</span><br><span class=\"line-number\">67</span><br><span class=\"line-number\">68</span><br><span class=\"line-number\">69</span><br><span class=\"line-number\">70</span><br><span class=\"line-number\">71</span><br><span class=\"line-number\">72</span><br><span class=\"line-number\">73</span><br><span class=\"line-number\">74</span><br><span class=\"line-number\">75</span><br><span class=\"line-number\">76</span><br><span class=\"line-number\">77</span><br><span class=\"line-number\">78</span><br><span class=\"line-number\">79</span><br><span class=\"line-number\">80</span><br><span class=\"line-number\">81</span><br><span class=\"line-number\">82</span><br><span class=\"line-number\">83</span><br><span class=\"line-number\">84</span><br><span class=\"line-number\">85</span><br><span class=\"line-number\">86</span><br><span class=\"line-number\">87</span><br><span class=\"line-number\">88</span><br><span class=\"line-number\">89</span><br><span class=\"line-number\">90</span><br><span class=\"line-number\">91</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e\\x3c!-- 特殊字符串：用于修改/删除markdown的结尾提示语-OBKoro1 --\\x3e\\n<h3 id=\"点个star支持我一下\"><a class=\"header-anchor\" href=\"#点个star支持我一下\" aria-hidden=\"true\">#</a> 点个<a href=\"https://github.com/OBKoro1/codeBlack\" target=\"_blank\" rel=\"noopener noreferrer\">Star<OutboundLink/></a>支持我一下~</h3>\\n\\x3c!-- \\'特殊字符串：用于删除编译后的issue组件-OBKoro1 --\\x3e\\n'},{key:\"v-5679e31a9c792\",path:\"/codeBlack/%E7%BD%91%E9%A1%B5%E6%A0%87%E9%A2%98%E9%97%AA%E7%83%81.html\",lastUpdated:1564720698e3,title:\"网页标题/标签 闪烁\",headers:[{level:2,title:\"网页标题/标签 闪烁\",slug:\"网页标题-标签-闪烁\"},{level:3,title:\"效果：\",slug:\"效果：\"},{level:3,title:\"实现代码\",slug:\"实现代码\"},{level:3,title:\"点个Star支持我一下~\",slug:\"点个star支持我一下\"}],excerpt:'<h2 id=\"网页标题-标签-闪烁\"><a class=\"header-anchor\" href=\"#网页标题-标签-闪烁\" aria-hidden=\"true\">#</a> 网页标题/标签 闪烁</h2>\\n<h3 id=\"效果：\"><a class=\"header-anchor\" href=\"#效果：\" aria-hidden=\"true\">#</a> 效果：</h3>\\n<p><img src=\"https://github.com/OBKoro1/articleImg_src/blob/master/weibo_img_move/005Y4rCogy1fwx2ghq9wqg306m01p744.gif?raw=true\" alt=\"\"></p>\\n<h3 id=\"实现代码\"><a class=\"header-anchor\" href=\"#实现代码\" aria-hidden=\"true\">#</a> 实现代码</h3>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code><span class=\"token keyword\">let</span> beforeTitle <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span>title<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 原标签</span>\\n<span class=\"token keyword\">let</span> count <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 切换title</span>\\n<span class=\"token keyword\">function</span> <span class=\"token function\">blinkNewMsg</span><span class=\"token punctuation\">(</span>val<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\\n  document<span class=\"token punctuation\">.</span>title <span class=\"token operator\">=</span>\\n    count <span class=\"token operator\">%</span> <span class=\"token number\">2</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token operator\">?</span> <span class=\"token template-string\"><span class=\"token string\">`【　　　】</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>beforeTitle<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">`</span></span> <span class=\"token punctuation\">:</span> <span class=\"token template-string\"><span class=\"token string\">`【</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>val<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">】</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>beforeTitle<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">`</span></span><span class=\"token punctuation\">;</span>\\n  count<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\\n<span class=\"token punctuation\">}</span>\\n<span class=\"token function\">setInterval</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\\n  <span class=\"token function\">blinkNewMsg</span><span class=\"token punctuation\">(</span><span class=\"token string\">\\'新消息\\'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e\\x3c!-- 特殊字符串：用于修改/删除markdown的结尾提示语-OBKoro1 --\\x3e\\n<h3 id=\"点个star支持我一下\"><a class=\"header-anchor\" href=\"#点个star支持我一下\" aria-hidden=\"true\">#</a> 点个<a href=\"https://github.com/OBKoro1/codeBlack\" target=\"_blank\" rel=\"noopener noreferrer\">Star<OutboundLink/></a>支持我一下~</h3>\\n\\x3c!-- \\'特殊字符串：用于删除编译后的issue组件-OBKoro1 --\\x3e\\n'},{key:\"v-de4b01c02a8b6\",path:\"/codeBlack/%E8%BF%9B%E5%BA%A6%E6%9D%A1.html\",lastUpdated:157433868e4,title:\"浏览器原生进度条-progress\",headers:[{level:2,title:\"浏览器原生进度条-progress\",slug:\"浏览器原生进度条-progress\"},{level:3,title:\"原生支持\",slug:\"原生支持\"},{level:3,title:\"codepen\",slug:\"codepen\"},{level:3,title:\"代码：\",slug:\"代码：\"},{level:3,title:\"点个Star支持我一下~\",slug:\"点个star支持我一下\"}],excerpt:'<h2 id=\"浏览器原生进度条-progress\"><a class=\"header-anchor\" href=\"#浏览器原生进度条-progress\" aria-hidden=\"true\">#</a> 浏览器原生进度条-progress</h2>\\n<h3 id=\"原生支持\"><a class=\"header-anchor\" href=\"#原生支持\" aria-hidden=\"true\">#</a> 原生支持</h3>\\n<p>进度条很多人都是手写的，通过<code>div+js</code>的形式。 实际上并不需要这么麻烦，因为原生就支持该标签，只要更改一下<code>value</code>值，即可改变进度，简单又方便！</p>\\n<h3 id=\"codepen\"><a class=\"header-anchor\" href=\"#codepen\" aria-hidden=\"true\">#</a> codepen</h3>\\n<p><img src=\"https://github.com/OBKoro1/articleImg_src/blob/master/2019/progress.png?raw=true\" alt=\"\"></p>\\n<p><a href=\"https://codepen.io/OBKoro1/pen/ExxMeOo\" target=\"_blank\" rel=\"noopener noreferrer\">demo<OutboundLink/></a></p>\\n<h3 id=\"代码：\"><a class=\"header-anchor\" href=\"#代码：\" aria-hidden=\"true\">#</a> 代码：</h3>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-html line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-html\"><code><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>progress</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>progress_class<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">max</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>100<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>80<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e\\x3c!--beforebegin--\\x3e<div class=\"language-css line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-css\"><code><span class=\"token selector\">.progress_class</span> <span class=\"token punctuation\">{</span>\\n  <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 500px<span class=\"token punctuation\">;</span>\\n  <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 8px<span class=\"token punctuation\">;</span>\\n\\t// 外部圆角\\n\\t<span class=\"token property\">overflow</span><span class=\"token punctuation\">:</span> hidden<span class=\"token punctuation\">;</span> \\n  <span class=\"token property\">border-radius</span><span class=\"token punctuation\">:</span> 8px 8px 8px 8px<span class=\"token punctuation\">;</span>\\n\\t<span class=\"token comment\">/*设置iOS下清除灰色背景*/</span>\\n\\t<span class=\"token property\">appearance</span><span class=\"token punctuation\">:</span> none<span class=\"token punctuation\">;</span> \\n  <span class=\"token property\">-webkit-appearance</span><span class=\"token punctuation\">:</span> none<span class=\"token punctuation\">;</span>\\n<span class=\"token punctuation\">}</span>\\n\\n<span class=\"token selector\">// 进度条的进度样式\\n.progress_class::-webkit-progress-value</span> <span class=\"token punctuation\">{</span>\\n  <span class=\"token property\">background</span><span class=\"token punctuation\">:</span> <span class=\"token function\">linear-gradient</span><span class=\"token punctuation\">(</span>90deg, <span class=\"token function\">rgba</span><span class=\"token punctuation\">(</span>20, 96, 181, 1<span class=\"token punctuation\">)</span> 0%, <span class=\"token function\">rgba</span><span class=\"token punctuation\">(</span>4, 195, 250, 1<span class=\"token punctuation\">)</span> 100%<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \\n <span class=\"token property\">border-radius</span><span class=\"token punctuation\">:</span>8px<span class=\"token punctuation\">;</span> // 内部的圆角\\n<span class=\"token punctuation\">}</span>\\n\\n<span class=\"token selector\">// 进度条未达到部分\\n.progress_class::-webkit-progress-bar</span> <span class=\"token punctuation\">{</span>\\n  <span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> #d7d7d7<span class=\"token punctuation\">;</span> // 进度条未进度 部分\\n<span class=\"token punctuation\">}</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br><span class=\"line-number\">11</span><br><span class=\"line-number\">12</span><br><span class=\"line-number\">13</span><br><span class=\"line-number\">14</span><br><span class=\"line-number\">15</span><br><span class=\"line-number\">16</span><br><span class=\"line-number\">17</span><br><span class=\"line-number\">18</span><br><span class=\"line-number\">19</span><br><span class=\"line-number\">20</span><br><span class=\"line-number\">21</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e\\x3c!-- 特殊字符串：用于修改/删除markdown的结尾提示语-OBKoro1 --\\x3e\\n<h3 id=\"点个star支持我一下\"><a class=\"header-anchor\" href=\"#点个star支持我一下\" aria-hidden=\"true\">#</a> 点个<a href=\"https://github.com/OBKoro1/codeBlack\" target=\"_blank\" rel=\"noopener noreferrer\">Star<OutboundLink/></a>支持我一下~</h3>\\n\\x3c!-- \\'特殊字符串：用于删除编译后的issue组件-OBKoro1 --\\x3e\\n'},{key:\"v-f32f42f63bc8\",path:\"/codeBlack/%E9%9A%8F%E6%9C%BA%E6%95%B0%E7%BB%84%E6%88%90%E7%9A%84%E6%95%B0%E7%BB%84.html\",lastUpdated:1564720698e3,title:\"随机数数组\",headers:[{level:2,title:\"原理\",slug:\"原理\"},{level:3,title:\"点个Star支持我一下~\",slug:\"点个star支持我一下\"}],excerpt:'<h1 id=\"随机数数组\"><a class=\"header-anchor\" href=\"#随机数数组\" aria-hidden=\"true\">#</a> 随机数数组</h1>\\n<p>所谓的随机数数组就是：由随机数组成的数组（数组的长度和随机数的范围可自定义）</p>\\n<p>当然有很多方法，只是用下面这个API只用一行代码就可以实现这个功能，见猎心喜，然后放了上来。</p>\\n<h2 id=\"原理\"><a class=\"header-anchor\" href=\"#原理\" aria-hidden=\"true\">#</a> 原理</h2>\\n<ol>\\n<li>先创建一个类似数组的对象(即对象拥有<code>length</code>属性)</li>\\n<li>利用<code>Array.from</code>的第二个参数，对每个元素进行处理(生成随机数)。</li>\\n</ol>\\n\\x3c!--beforebegin--\\x3e<div class=\"language-js line-numbers-mode\">\\x3c!--afterbegin--\\x3e<pre v-pre class=\"language-js\"><code><span class=\"token comment\">/**\\n * 由随机数组成的数组：长度和随机数范围可自定义\\n * @param {number} length 数组的长度\\n * @param {number} limit 随机数的范围\\n */</span>\\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">genNumArr</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>length<span class=\"token punctuation\">,</span> limit<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\\n  <span class=\"token comment\">// Array.from第二个参数 类似数组的map方法，对每个元素进行处理，将处理后的值放入返回的数组</span>\\n  <span class=\"token keyword\">return</span> Array<span class=\"token punctuation\">.</span><span class=\"token keyword\">from</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> length <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">floor</span><span class=\"token punctuation\">(</span>Math<span class=\"token punctuation\">.</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> limit<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">genNumArr</span><span class=\"token punctuation\">(</span><span class=\"token number\">1000</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 数组长度为1000，每个元素的范围在0-99之间</span>\\n</code></pre>\\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br></div>\\x3c!--beforeend--\\x3e</div>\\x3c!--afterend--\\x3e<p><a href=\"https://codepen.io/OBKoro1/pen/MBOQMX\" target=\"_blank\" rel=\"noopener noreferrer\">CodePen<OutboundLink/></a>\\n\\x3c!-- 特殊字符串：用于修改/删除markdown的结尾提示语-OBKoro1 --\\x3e</p>\\n<h3 id=\"点个star支持我一下\"><a class=\"header-anchor\" href=\"#点个star支持我一下\" aria-hidden=\"true\">#</a> 点个<a href=\"https://github.com/OBKoro1/codeBlack\" target=\"_blank\" rel=\"noopener noreferrer\">Star<OutboundLink/></a>支持我一下~</h3>\\n\\x3c!-- \\'特殊字符串：用于删除编译后的issue组件-OBKoro1 --\\x3e\\n'}],themeConfig:{docsRepo:\"OBKoro1/web_accumulate\",docsBranch:\"master\",docsDir:\"docs\",editLinks:!0,editLinkText:\"帮助我改善这个页面\",serviceWorker:{updatePopup:{message:\"发现新内容\",buttonText:\"刷新\"}},lastUpdated:\"最后更新时间\",sidebarDepth:3,nav:[{text:\"前端积累\",link:\"/accumulate/\"},{text:\"前端算法\",link:\"/algorithm/\"},{text:\"大厂前端需要的能力\",link:\"https://github.com/OBKoro1/web-basics\"},{text:\"代码块\",link:\"/codeBlack/\"},{text:\"GitHub开源\",items:[{text:\"VSCode自动生成头部注释和函数注释\",link:\"https://github.com/OBKoro1/koro1FileHeader\"},{text:\"提高学习、工作效率，禁止摸鱼的谷歌插件\",link:\"https://github.com/OBKoro1/stop-mess-around\"},{text:\"自动刷github首页commit绿格子\",link:\"https://github.com/OBKoro1/autoCommit\"},{text:\"一键替换markdown失效图片外链\",link:\"https://github.com/OBKoro1/markdown-img-down-site-change\"},{text:\"浏览器桌面通知npm包\",link:\"https://github.com/OBKoro1/notification-Koro1\"}]},{text:\"关于\",link:\"/about\"}],sidebar:{\"/accumulate/\":[\"/accumulate/tool/stop-mess-around\",\"/accumulate/electron/electron-terminal-demo\",\"/accumulate/tool/electron-playground\",\"/accumulate/year/2020\",\"/accumulate/tool/autoCommit\",\"/accumulate/tool/ESLint插件\",\"/accumulate/JS/JS基础-继承\",\"/accumulate/JS/prototype.md\",\"/accumulate/JS/JS基础-call和apply还有bind.md\",\"/accumulate/tool/博客外链失效一键替换\",\"/accumulate/tool/koroFileHeader\",\"/accumulate/ES6/js调用栈机制与ES6尾调用优化介绍\",\"/accumulate/ES6/论普通函数和箭头函数的区别以及箭头函数的注意事项和不适用场景\",\"/accumulate/JS/webWorker上手\",\"/accumulate/JS/手摸手教你使用WebSocket\",\"/accumulate/JS/数组API解析合集\",\"/accumulate/tool/浏览器重绘重排\",\"/accumulate/tool/忍者秘籍定时器机制\",\"/accumulate/tool/js事件循环机制\",\"/accumulate/tool/http缓存\",\"/accumulate/tool/js垃圾回收机制\",\"/accumulate/tool/骚注释工具\",\"/accumulate/JS/Object.defineProperty\",\"/accumulate/Vue/极简双向绑定\",\"/accumulate/Vue/vue钩子函数\",\"/accumulate/effect/浏览器桌面通知\",\"/accumulate/JS/函数防抖和函数节流\",\"/accumulate/ES6/let和const命令\",\"/accumulate/effect/网页全屏\",\"/accumulate/effect/复制粘贴系列\",\"/accumulate/effect/退出页面发送请求\",\"/accumulate/tool/Eslint自动修复格式错误\",\"/accumulate/tool/一份超级详细的Vue-cli3.0使用教程\",\"/accumulate/amateur/VuePress文档\",\"/accumulate/Vue/vue定义全局函数\",\"/accumulate/Vue/弹窗\",\"/accumulate/effect/input的一些坑点分享\",\"/accumulate/effect/前端弹幕效果实现思路\",\"/accumulate/effect/时间差与时区转换\",\"/accumulate/JS/cookie和storage的使用以及区别\",\"/accumulate/CSS/CSS概念-BFC深入浅出\",\"/accumulate/CSS/CSS权重规则\",\"/accumulate/amateur/高性能js\",\"/accumulate/amateur/推箱子\"],\"/codeBlack/\":[\"/codeBlack/fixed的从父原则\",\"/codeBlack/进度条\",\"/codeBlack/instanceof实现原理\",\"/codeBlack/移动端手写下拉刷新\",\"/codeBlack/移动端小球上下浮动\",\"/codeBlack/Object.create实现\",\"/codeBlack/执行shell命令行\",\"/codeBlack/正则表达式收集\",\"/codeBlack/数组交集差集\",\"/codeBlack/数组完全乱序\",\"/codeBlack/树状数组结构转化\",\"/codeBlack/判断用户浏览器\",\"/codeBlack/多维数组展开\",\"/codeBlack/滚动底部\",\"/codeBlack/模板字符串反斜杆\",\"/codeBlack/单行多行文本溢出\",\"/codeBlack/随机数组成的数组\",\"/codeBlack/字符串绑定点击事件\",\"/codeBlack/网页标题闪烁\",\"/codeBlack/显示隐藏密码\",\"/codeBlack/刷新保存请求\",\"/codeBlack/浏览器自动识别数字成电话号码\",\"/codeBlack/你或许不知道Vue的这些小技巧\",\"/codeBlack/vue小技巧\",\"/codeBlack/vuex三步\"],\"/algorithm/\":[{title:\"简单\",collapsable:!1,children:[\"/algorithm/induction/数组重复次数\",\"/algorithm/induction/水仙花数\",\"/algorithm/induction/反转3位整数\",\"/algorithm/induction/查找斐波纳契数列中第N个数\",\"/algorithm/simple/回文\",\"/algorithm/simple/反转整数\",\"/algorithm/simple/姓名去重\",\"/algorithm/simple/分解质因数\",\"/algorithm/simple/合并排序数组\",\"/algorithm/simple/搜索二维矩阵\",\"/algorithm/simple/字符串密钥格式\",\"/algorithm/simple/最大子数组\",\"/algorithm/simple/比较字符串\",\"/algorithm/simple/两数之和\",\"/algorithm/simple/中位数\",\"/algorithm/simple/落单的数\",\"/algorithm/simple/爬楼梯\",\"/algorithm/simple/最长单词\",\"/algorithm/simple/子数组之和\",\"/algorithm/simple/检测2的幂次\",\"/algorithm/simple/两个字符串是变位词\",\"/algorithm/simple/删除元素\",\"/algorithm/simple/第一个只出现一次的字符\",\"/algorithm/simple/字符串压缩\",\"/algorithm/simple/判断字符串的循环移动\",\"/algorithm/simple/丢失的数\",\"/algorithm/simple/相亲数\",\"/algorithm/simple/爬楼梯2\",\"/algorithm/simple/奇偶分割数组\"]},{title:\"中等\",collapsable:!1,children:[\"/algorithm/medium/5最长回文子串\",\"/algorithm/medium/15三数之和\",\"/algorithm/medium/146LRU缓存机制\",\"/algorithm/medium/11题盛最多水的容器\",\"/algorithm/medium/33搜索旋转排序数组\",\"/algorithm/medium/56合并区间\",\"/algorithm/medium/46全排列\",\"/algorithm/medium/199二叉树的右视图\",\"/algorithm/medium/102二叉树的层序遍历\",\"/algorithm/medium/200题岛屿数量\",\"/algorithm/medium/93复原IP地址\",\"/algorithm/medium/54螺旋矩阵\",\"/algorithm/medium/103二叉树的锯齿形层次遍历\",\"/algorithm/medium/322零钱兑换\",\"/algorithm/medium/19删除链表的倒数第N个节点\",\"/algorithm/medium/22括号生成\",\"/algorithm/medium/351安卓系统手势解锁\",\"/algorithm/medium/22括号生成\",\"/algorithm/medium/55题跳远游戏\",\"/algorithm/medium/64题最小路径和\",\"/algorithm/medium/456题132模式\",\"/algorithm/medium/466统计重复个数\",\"/algorithm/medium/735题行星碰撞\",\"/algorithm/medium/1229安排会议日程\",\"/algorithm/medium/45题跳跃游戏2\",\"/algorithm/medium/867题转置矩阵\",\"/algorithm/medium/奇数未小于相邻偶数为的值\",\"/algorithm/medium/第k大元素\",\"/algorithm/medium/丑数\",\"/algorithm/medium/统计数字\",\"/algorithm/medium/无重复字符的最长子串\",\"/algorithm/medium/摆动序列\"]}]}}},yc=function(){},wc=function(){},Ec={functional:!0,props:{custom:{type:Boolean,default:!0}},render:function(n,s){var a=s.parent,e=s.props,p=s.data;return n(a.$page.key,{class:[e.custom?\"custom\":\"\",p.class,p.staticClass],style:p.style})}},Bc=(a(157),Object(yo.a)({},function(n,s){var a=s._c;return a(\"svg\",{staticClass:\"icon outbound\",attrs:{xmlns:\"http://www.w3.org/2000/svg\",\"aria-hidden\":\"true\",x:\"0px\",y:\"0px\",viewBox:\"0 0 100 100\",width:\"15\",height:\"15\"}},[a(\"path\",{attrs:{fill:\"currentColor\",d:\"M18.8,85.1h56l0,0c2.2,0,4-1.8,4-4v-32h-8v28h-48v-48h28v-8h-32l0,0c-2.2,0-4,1.8-4,4v56C14.8,83.3,16.6,85.1,18.8,85.1z\"}}),s._v(\" \"),a(\"polygon\",{attrs:{fill:\"currentColor\",points:\"45.7,48.7 51.3,54.3 77.2,28.5 77.2,37.2 85.2,37.2 85.2,14.9 62.8,14.9 62.8,22.9 71.5,22.9\"}})])},[],!0,null,null,null));Bc.options.__file=\"OutboundLink.vue\";var _c=Bc.exports;Promise.all([a.e(0),a.e(142)]).then(a.t.bind(null,173,7)),wp.config.productionTip=!1,wp.use(so),wp.mixin(function(n){!function(n){n.pages.forEach(function(n){n.frontmatter||(n.frontmatter={})}),n.locales&&Object.keys(n.locales).forEach(function(s){n.locales[s].path=s}),Object.freeze(n)}(n);var s=new wp({data:{siteData:n}});return{computed:{$site:function(){return s.siteData},$localeConfig:function(){var n,s,a=this.$site.locales,e=void 0===a?{}:a;for(var p in e)\"/\"===p?s=e[p]:0===this.$page.path.indexOf(p)&&(n=e[p]);return n||s||{}},$siteTitle:function(){return this.$localeConfig.title||this.$site.title||\"\"},$title:function(){var n=this.$page,s=this.$siteTitle,a=n.frontmatter.home?null:n.frontmatter.title||n.title;return s?a?a+\" | \"+s:s:a||\"VuePress\"},$description:function(){if(this.$page.frontmatter.meta){var n=this.$page.frontmatter.meta.filter(function(n){return\"description\"===n.name})[0];if(n)return n.content}return this.$page.frontmatter.description||this.$localeConfig.description||this.$site.description||\"\"},$lang:function(){return this.$page.frontmatter.lang||this.$localeConfig.lang||\"en-US\"},$localePath:function(){return this.$localeConfig.path||\"/\"},$themeLocaleConfig:function(){return(this.$site.themeConfig.locales||{})[this.$localePath]||{}},$page:function(){return function(n,s){for(var a=0;a<n.length;a++){var e=n[a];if(e.path===s)return e}return{path:\"\",frontmatter:{}}}(this.$site.pages,this.$route.path)}}}}(xc)),wp.component(\"Content\",Ec),wp.component(\"OutboundLink\",_c),wp.component(\"Badge\",function(){return Promise.all([a.e(0),a.e(3)]).then(a.bind(null,176))}),wp.component(\"ClientOnly\",{functional:!0,render:function(n,s){var a=s.parent,e=s.children;if(a._isMounted)return e;a.$once(\"hook:mounted\",function(){a.$forceUpdate()})}}),wp.prototype.$withBase=function(n){var s=this.$site.base;return\"/\"===n.charAt(0)?s+n.slice(1):n};a(159);var jc=function(){var n=new so({base:xc.base,mode:\"history\",fallback:!1,routes:vc,scrollBehavior:function(n,s,a){return a||(n.hash?!po.disableScrollBehavior&&{selector:n.hash}:{x:0,y:0})}});n.beforeEach(function(n,s,a){/(\\/|\\.html)$/.test(n.path)?a():a(Object.assign({},n,{path:n.path+\"/\"}))});var s={};return wc({Vue:wp,options:s,router:n,siteData:xc}),yc({Vue:wp,options:s,router:n,siteData:xc}),{app:new wp(Object.assign(s,{router:n,render:function(n){return n(\"div\",{attrs:{id:\"app\"}},[n(\"router-view\",{ref:\"layout\"})])}})),router:n}}(),Ac=jc.app,Oc=jc.router;window.__VUEPRESS_VERSION__={version:\"0.14.8\",hash:\"6a433e00f\"},Oc.onReady(function(){Ac.$mount(\"#app\")})}]);","extractedComments":[]}